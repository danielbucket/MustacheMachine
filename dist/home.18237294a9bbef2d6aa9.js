/*! For license information please see home.18237294a9bbef2d6aa9.js.LICENSE.txt */
(()=>{var e,t,n={973:(e,t,n)=>{"use strict";n.r(t),n.d(t,{bioText:()=>r,personName:()=>a,position:()=>o});var r="Hello, I'm Daniel. I'm an aspiring software developer with a passion for creating innovative solutions. I love coding, learning new technologies, and collaborating with others to bring ideas to life. In my free time, I enjoy hiking, reading, and exploring new places. I'm excited to share my journey and connect with like-minded individuals.",a="Daniel Bucket",o="Fouding Father, Bucket Limited, LLC"},621:(e,t,n)=>{"use strict";n.r(t),n.d(t,{NavBtn:()=>b});var r=n(294),a=n(379),o=n.n(a),i=n(795),l=n.n(i),u=n(569),s=n.n(u),c=n(565),d=n.n(c),f=n(216),p=n.n(f),h=n(589),m=n.n(h),g=n(302),v={};v.styleTagTransform=m(),v.setAttributes=d(),v.insert=s().bind(null,"head"),v.domAPI=l(),v.insertStyleElement=p(),o()(g.Z,v);const y=g.Z&&g.Z.locals?g.Z.locals:void 0;function b(e,t){return r.createElement("div",{className:y.navBtnContainer},r.createElement("input",{className:y.navBtn,type:"button",value:"<".concat(e," />"),onClick:function(){return t()}}))}},186:(e,t,n)=>{var r=n(698),a=n(505),o=n(417),i=Function.bind,l=i.bind(i);function u(e,t,n){var r=l(o,null).apply(null,n?[t,n]:[t]);e.api={remove:r},e.remove=r,["before","error","after","wrap"].forEach((function(r){var o=n?[t,r,n]:[t,r];e[r]=e.api[r]=l(a,null).apply(null,o)}))}function s(){var e={registry:{}},t=r.bind(null,e);return u(t,e),t}var c=!1;function d(){return c||(console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'),c=!0),s()}d.Singular=function(){var e={registry:{}},t=r.bind(null,e,"h");return u(t,e,"h"),t}.bind(),d.Collection=s.bind(),e.exports=d,e.exports.Hook=d,e.exports.Singular=d.Singular,e.exports.Collection=d.Collection},505:e=>{e.exports=function(e,t,n,r){var a=r;e.registry[n]||(e.registry[n]=[]),"before"===t&&(r=function(e,t){return Promise.resolve().then(a.bind(null,t)).then(e.bind(null,t))}),"after"===t&&(r=function(e,t){var n;return Promise.resolve().then(e.bind(null,t)).then((function(e){return a(n=e,t)})).then((function(){return n}))}),"error"===t&&(r=function(e,t){return Promise.resolve().then(e.bind(null,t)).catch((function(e){return a(e,t)}))}),e.registry[n].push({hook:r,orig:a})}},698:e=>{e.exports=function e(t,n,r,a){if("function"!=typeof r)throw new Error("method for before hook must be a function");return a||(a={}),Array.isArray(n)?n.reverse().reduce((function(n,r){return e.bind(null,t,r,n,a)}),r)():Promise.resolve().then((function(){return t.registry[n]?t.registry[n].reduce((function(e,t){return t.hook.bind(null,e,a)}),r)():r(a)}))}},417:e=>{e.exports=function(e,t,n){if(e.registry[t]){var r=e.registry[t].map((function(e){return e.orig})).indexOf(n);-1!==r&&e.registry[t].splice(r,1)}}},271:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,".Lzq0MKQg5qQACPH6Qh0t {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\twidth: 95%;\n\theight: 60rem;\n\tborder-radius: 1rem;\n}\n\n.tz1KYygLKyqHZ85LU4bf {\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 1rem;\n\tmargin-top: 1rem;\n\tmin-height: 8rem;\n\twidth: 90%;\n}\n\n.tz1KYygLKyqHZ85LU4bf input {\n\theight: 6rem;\n\twidth: 28rem;\n\tmargin: auto;\n\tborder-radius: 2rem;\n\tfont-size: 2.5rem;\n\ttext-align: center;\n\tborder: .25rem solid #007bff;\n}\n\n.tz1KYygLKyqHZ85LU4bf textarea {\n\tresize: none;\n\tborder: none;\n\toutline: none;\n\tscrollbar-width: none;\n\theight: 22rem;\n\twidth: 90%;\n\tmargin: auto;\n\tfont-size: 2rem;\n\tborder-radius: 1.75rem;\n\tpadding: 1.75rem;\n\tborder: .25rem solid #007bff\n}\n\n.I9kiYUVlAQXegJig1pbk {\n\theight: 2rem;\n\tfont-family: Ubuntu_Reg;\n\tfont-size: 1.5rem;\n\tmargin: 0.5rem auto;\n}","",{version:3,sources:["webpack://./src/pages/Contact/style/contactForm.module.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,sBAAsB;CACtB,mBAAmB;CACnB,UAAU;CACV,aAAa;CACb,mBAAmB;AACpB;;AAEA;CACC,aAAa;CACb,sBAAsB;CACtB,SAAS;CACT,gBAAgB;CAChB,gBAAgB;CAChB,UAAU;AACX;;AAEA;CACC,YAAY;CACZ,YAAY;CACZ,YAAY;CACZ,mBAAmB;CACnB,iBAAiB;CACjB,kBAAkB;CAClB,4BAA4B;AAC7B;;AAEA;CACC,YAAY;CACZ,YAAY;CACZ,aAAa;CACb,qBAAqB;CACrB,aAAa;CACb,UAAU;CACV,YAAY;CACZ,eAAe;CACf,sBAAsB;CACtB,gBAAgB;CAChB;AACD;;AAEA;CACC,YAAY;CACZ,uBAAuB;CACvB,iBAAiB;CACjB,mBAAmB;AACpB",sourcesContent:[".formContainer {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\twidth: 95%;\n\theight: 60rem;\n\tborder-radius: 1rem;\n}\n\n.inputContainer {\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 1rem;\n\tmargin-top: 1rem;\n\tmin-height: 8rem;\n\twidth: 90%;\n}\n\n.inputContainer input {\n\theight: 6rem;\n\twidth: 28rem;\n\tmargin: auto;\n\tborder-radius: 2rem;\n\tfont-size: 2.5rem;\n\ttext-align: center;\n\tborder: .25rem solid #007bff;\n}\n\n.inputContainer textarea {\n\tresize: none;\n\tborder: none;\n\toutline: none;\n\tscrollbar-width: none;\n\theight: 22rem;\n\twidth: 90%;\n\tmargin: auto;\n\tfont-size: 2rem;\n\tborder-radius: 1.75rem;\n\tpadding: 1.75rem;\n\tborder: .25rem solid #007bff\n}\n\n.errorLabel {\n\theight: 2rem;\n\tfont-family: Ubuntu_Reg;\n\tfont-size: 1.5rem;\n\tmargin: 0.5rem auto;\n}"],sourceRoot:""}]),i.locals={formContainer:"Lzq0MKQg5qQACPH6Qh0t",inputContainer:"tz1KYygLKyqHZ85LU4bf",errorLabel:"I9kiYUVlAQXegJig1pbk"};const l=i},49:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,".Xh6zT05mXC235J3rqJRq {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: center;\n  height: 100vh;\n  font-family: Laila_Med;\n  font-size: 3rem;\n}\n\n.FjjOqb2f5_WnRD131Hkq {\n\theight: 25rem;\n\twidth: 95%;\n\tfont-family: Laila_Med;\n\tmargin: 1rem auto;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n}\n\n.FjjOqb2f5_WnRD131Hkq p:first-child {\n\tfont-size: 2rem;\n\ttext-align: left;\n}\n\n.FjjOqb2f5_WnRD131Hkq p:last-child {\n\tfont-size: 1.75rem;\n\ttext-align: right;\n\ttext-indent: 2rem;\n}\n\n.PgQRmxNGWgoodsIHqH8m {\n\tdisplay: flex;\n\tjustify-content: center;\n\tflex-grow: 1;\n\talign-items: flex-start;\n}\n\n.n6jqZH6GsqZwo0Pexl8c {\n  margin-top: 3rem;\n  font-size: 3rem;\n  font-family: Ubuntu_Reg;\n}\n\n.n6jqZH6GsqZwo0Pexl8c p {\n\n}\n\n.n6jqZH6GsqZwo0Pexl8c span {\n  font-family: KodeMono_Var;\n  font-weight: 700;\n  \n}\n\n.tBhtAEQvS1j8FNmzfpow {\n  background-color: #007bff;\n  color: #fff;\n  margin-top: 4rem;\n  padding: 1rem 5rem;\n  border-radius: 1.5rem;\n  font-size: 5rem;\n  transition: background-color 0.3s ease;\n  font-family: Ubuntu_Reg;\n  border: .5rem solid var(--grayd-a-grey);\n}\n\n.tBhtAEQvS1j8FNmzfpow:hover {\n  background-color: #0056b3;\n}\n\n.tBhtAEQvS1j8FNmzfpow:active {\n  background-color: #003d80;\n}","",{version:3,sources:["webpack://./src/pages/Contact/style/index.module.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,uBAAuB;EACvB,aAAa;EACb,sBAAsB;EACtB,eAAe;AACjB;;AAEA;CACC,aAAa;CACb,UAAU;CACV,sBAAsB;CACtB,iBAAiB;CACjB,aAAa;CACb,sBAAsB;CACtB,uBAAuB;AACxB;;AAEA;CACC,eAAe;CACf,gBAAgB;AACjB;;AAEA;CACC,kBAAkB;CAClB,iBAAiB;CACjB,iBAAiB;AAClB;;AAEA;CACC,aAAa;CACb,uBAAuB;CACvB,YAAY;CACZ,uBAAuB;AACxB;;AAEA;EACE,gBAAgB;EAChB,eAAe;EACf,uBAAuB;AACzB;;AAEA;;AAEA;;AAEA;EACE,yBAAyB;EACzB,gBAAgB;;AAElB;;AAEA;EACE,yBAAyB;EACzB,WAAW;EACX,gBAAgB;EAChB,kBAAkB;EAClB,qBAAqB;EACrB,eAAe;EACf,sCAAsC;EACtC,uBAAuB;EACvB,uCAAuC;AACzC;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;AAC3B",sourcesContent:[".contactWrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: center;\n  height: 100vh;\n  font-family: Laila_Med;\n  font-size: 3rem;\n}\n\n.contactHeader {\n\theight: 25rem;\n\twidth: 95%;\n\tfont-family: Laila_Med;\n\tmargin: 1rem auto;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n}\n\n.contactHeader p:first-child {\n\tfont-size: 2rem;\n\ttext-align: left;\n}\n\n.contactHeader p:last-child {\n\tfont-size: 1.75rem;\n\ttext-align: right;\n\ttext-indent: 2rem;\n}\n\n.childRoutes {\n\tdisplay: flex;\n\tjustify-content: center;\n\tflex-grow: 1;\n\talign-items: flex-start;\n}\n\n.homePageRedirect {\n  margin-top: 3rem;\n  font-size: 3rem;\n  font-family: Ubuntu_Reg;\n}\n\n.homePageRedirect p {\n\n}\n\n.homePageRedirect span {\n  font-family: KodeMono_Var;\n  font-weight: 700;\n  \n}\n\n.contactFormLink {\n  background-color: #007bff;\n  color: #fff;\n  margin-top: 4rem;\n  padding: 1rem 5rem;\n  border-radius: 1.5rem;\n  font-size: 5rem;\n  transition: background-color 0.3s ease;\n  font-family: Ubuntu_Reg;\n  border: .5rem solid var(--grayd-a-grey);\n}\n\n.contactFormLink:hover {\n  background-color: #0056b3;\n}\n\n.contactFormLink:active {\n  background-color: #003d80;\n}"],sourceRoot:""}]),i.locals={contactWrapper:"Xh6zT05mXC235J3rqJRq",contactHeader:"FjjOqb2f5_WnRD131Hkq",childRoutes:"PgQRmxNGWgoodsIHqH8m",homePageRedirect:"n6jqZH6GsqZwo0Pexl8c",contactFormLink:"tBhtAEQvS1j8FNmzfpow"};const l=i},9:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,".etqBu6URiXxGcLz4x4JJ {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: ceneter;\n\twidth: 90%;\n\tmargin: 3rem auto;\n\tborder: 0.25rem solid #a4d822;\n\tborder-radius: 1rem;\n\tfont-size: 2.5rem;\n}\n\n.etqBu6URiXxGcLz4x4JJ a {\n\t\n}\n\n.etqBu6URiXxGcLz4x4JJ image {\n\theight: 40rem;\n\tmargin-top: 1rem;\n\tborder-radius: 0.5rem;\n}\n\n.etqBu6URiXxGcLz4x4JJ h1 {\n\t\n}\n\n.rp6UAlwHgyQIxAuLuajA {\n\tdisplay: flex;\n\talign-items: center;\n\tmargin: 2rem auto;\n\tborder: 0.2rem solid black;\n\tbackground-color: #c6c4c4d1;\n\twidth: 80%;\n\theight: 10rem;\n\ttext-align: center;\n\toverflow-x: scroll;\n\tpadding: 0.2rem;\n}","",{version:3,sources:["webpack://./src/pages/ErrorPage/index.module.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,sBAAsB;CACtB,oBAAoB;CACpB,UAAU;CACV,iBAAiB;CACjB,6BAA6B;CAC7B,mBAAmB;CACnB,iBAAiB;AAClB;;AAEA;;AAEA;;AAEA;CACC,aAAa;CACb,gBAAgB;CAChB,qBAAqB;AACtB;;AAEA;;AAEA;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,iBAAiB;CACjB,0BAA0B;CAC1B,2BAA2B;CAC3B,UAAU;CACV,aAAa;CACb,kBAAkB;CAClB,kBAAkB;CAClB,eAAe;AAChB",sourcesContent:[".container {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: ceneter;\n\twidth: 90%;\n\tmargin: 3rem auto;\n\tborder: 0.25rem solid #a4d822;\n\tborder-radius: 1rem;\n\tfont-size: 2.5rem;\n}\n\n.container a {\n\t\n}\n\n.container image {\n\theight: 40rem;\n\tmargin-top: 1rem;\n\tborder-radius: 0.5rem;\n}\n\n.container h1 {\n\t\n}\n\n.error {\n\tdisplay: flex;\n\talign-items: center;\n\tmargin: 2rem auto;\n\tborder: 0.2rem solid black;\n\tbackground-color: #c6c4c4d1;\n\twidth: 80%;\n\theight: 10rem;\n\ttext-align: center;\n\toverflow-x: scroll;\n\tpadding: 0.2rem;\n}"],sourceRoot:""}]),i.locals={container:"etqBu6URiXxGcLz4x4JJ",error:"rp6UAlwHgyQIxAuLuajA"};const l=i},863:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,".zhOxrQLBv4JIdW3c7jFJ {\n\tdisplay: grid;\n\tjustify-content: center;\n\tgrid-template-rows: [siteNav] 8rem\n\t\t\t\t\t\t\t\t\t\t\t[image] 25rem\n\t\t\t\t\t\t\t\t\t\t\t[navOptions] 1fr\n\t\t\t\t\t\t\t\t\t\t\t[footer] 10rem;\n\theight: 100vh;\n}\n\n.XqHWFh4DKDicqDRzjZgJ {\n\tgrid-area: siteNav;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n}\n\n.w3gqmiab2mT3Bs3YFRnZ {\n\tgrid-area: image;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n}\n\n.w3gqmiab2mT3Bs3YFRnZ img {\n\twidth: 98%;\n\tborder-radius: 2em;\n\tmargin: auto;\n}\n\n.uHSpvCFRH6kfZBu9vvI3 {\n\tgrid-area: navOptions;\n\tfont-size: 4.5em;\n\tborder: 0.25rem solid var(--special-blue);\n\tborder-radius: 0.5rem;\n\twidth: 90%;\n\tmargin: auto;\n\theight: 18rem;\n\toverflow-x: scroll;\n\tscroll-snap-type: y mandatory;\n}\n\n.uHSpvCFRH6kfZBu9vvI3 ul {\n\tlist-style-type: none;\n\tpadding: 0;\n}\n\n.uHSpvCFRH6kfZBu9vvI3 li {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tjustify-content: center;\n\tborder-bottom: .1rem solid var(--special-blue);\n\theight: 5.9rem;\n\tscroll-snap-align: start;\n\tscroll-snap-stop: always;\n}\n\n.uHSpvCFRH6kfZBu9vvI3 li:last-child {\n\tborder-bottom: none;\n}\n\n.uHSpvCFRH6kfZBu9vvI3 a {\n\ttext-decoration: none;\n\n\tfont-family: 'Ubuntu_Reg';\n\tcolor: var(--special-blue);\n\tfont-size: 3.25rem;\n}\n\n.uHSpvCFRH6kfZBu9vvI3 a:hover {\n\tcolor: var(--ac-orange);\n}\n\n.Sg1qCWNBXhSBSF2tj2Wy {\n\tgrid-area: footer;\n\tdisplay: inline-block;\n\tmargin: auto;\n}\n\n.Sg1qCWNBXhSBSF2tj2Wy img {\n\theight: 8rem;\n}","",{version:3,sources:["webpack://./src/pages/HomePage/index.module.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,uBAAuB;CACvB;;;yBAGwB;CACxB,aAAa;AACd;;AAEA;CACC,kBAAkB;CAClB,aAAa;CACb,uBAAuB;CACvB,mBAAmB;AACpB;;AAEA;CACC,gBAAgB;CAChB,aAAa;CACb,sBAAsB;CACtB,uBAAuB;AACxB;;AAEA;CACC,UAAU;CACV,kBAAkB;CAClB,YAAY;AACb;;AAEA;CACC,qBAAqB;CACrB,gBAAgB;CAChB,yCAAyC;CACzC,qBAAqB;CACrB,UAAU;CACV,YAAY;CACZ,aAAa;CACb,kBAAkB;CAClB,6BAA6B;AAC9B;;AAEA;CACC,qBAAqB;CACrB,UAAU;AACX;;AAEA;CACC,aAAa;CACb,sBAAsB;CACtB,mBAAmB;CACnB,uBAAuB;CACvB,8CAA8C;CAC9C,cAAc;CACd,wBAAwB;CACxB,wBAAwB;AACzB;;AAEA;CACC,mBAAmB;AACpB;;AAEA;CACC,qBAAqB;;CAErB,yBAAyB;CACzB,0BAA0B;CAC1B,kBAAkB;AACnB;;AAEA;CACC,uBAAuB;AACxB;;AAEA;CACC,iBAAiB;CACjB,qBAAqB;CACrB,YAAY;AACb;;AAEA;CACC,YAAY;AACb",sourcesContent:[".homePageWrapper {\n\tdisplay: grid;\n\tjustify-content: center;\n\tgrid-template-rows: [siteNav] 8rem\n\t\t\t\t\t\t\t\t\t\t\t[image] 25rem\n\t\t\t\t\t\t\t\t\t\t\t[navOptions] 1fr\n\t\t\t\t\t\t\t\t\t\t\t[footer] 10rem;\n\theight: 100vh;\n}\n\n.navWrapper {\n\tgrid-area: siteNav;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n}\n\n.imageContainer {\n\tgrid-area: image;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n}\n\n.imageContainer img {\n\twidth: 98%;\n\tborder-radius: 2em;\n\tmargin: auto;\n}\n\n.navOptions {\n\tgrid-area: navOptions;\n\tfont-size: 4.5em;\n\tborder: 0.25rem solid var(--special-blue);\n\tborder-radius: 0.5rem;\n\twidth: 90%;\n\tmargin: auto;\n\theight: 18rem;\n\toverflow-x: scroll;\n\tscroll-snap-type: y mandatory;\n}\n\n.navOptions ul {\n\tlist-style-type: none;\n\tpadding: 0;\n}\n\n.navOptions li {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tjustify-content: center;\n\tborder-bottom: .1rem solid var(--special-blue);\n\theight: 5.9rem;\n\tscroll-snap-align: start;\n\tscroll-snap-stop: always;\n}\n\n.navOptions li:last-child {\n\tborder-bottom: none;\n}\n\n.navOptions a {\n\ttext-decoration: none;\n\n\tfont-family: 'Ubuntu_Reg';\n\tcolor: var(--special-blue);\n\tfont-size: 3.25rem;\n}\n\n.navOptions a:hover {\n\tcolor: var(--ac-orange);\n}\n\n.footerContainer {\n\tgrid-area: footer;\n\tdisplay: inline-block;\n\tmargin: auto;\n}\n\n.footerContainer img {\n\theight: 8rem;\n}"],sourceRoot:""}]),i.locals={homePageWrapper:"zhOxrQLBv4JIdW3c7jFJ",navWrapper:"XqHWFh4DKDicqDRzjZgJ",imageContainer:"w3gqmiab2mT3Bs3YFRnZ",navOptions:"uHSpvCFRH6kfZBu9vvI3",footerContainer:"Sg1qCWNBXhSBSF2tj2Wy"};const l=i},568:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,".bmrvCx3eBBeouuM3jjKC {\n  display: grid;\n  justify-content: center;\n  grid-template-rows: [siteNav] 8rem\n                      [image] 25rem\n                      [bio] 1fr\n                      [footer] 10rem;\n  height: 100vh;\n}\n\n.L7_Wkacez7hU1JQDYxcC {\n  grid-area: siteNav;\n  display: flex;\n\tjustify-content: center;\n\talign-items: center;\n}\n\n.GFa1MeF9KaklpA_oT8Mz {\n  grid-area: image;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.GFa1MeF9KaklpA_oT8Mz img {\n\twidth: 98%;\n\tborder-radius: 2em;\n\tmargin: auto;\n}\n\n.HPhlAGHH7dtUBf_sfBuO {\n  grid-area: bio;\n  flex-grow: 1;\n  width: 100%;\n  padding: .5rem;\n  font-size: 2rem;\n}\n\n.OikIZVwzhobEbD7quL0U {\n  margin-bottom: 2rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.OikIZVwzhobEbD7quL0U h1 {\n  margin-bottom: -0.75rem;\n}\n\n.OikIZVwzhobEbD7quL0U p {\n  font-size: 1.5rem;\n}\n\n.xksRz9btKr0wMV4x4AA4 p {\n  font-size: 1.5rem;\n  text-indent: 1rem;\n}\n\n.JPVWnIATRJvzEUZbdMjW {\n  grid-area: footer;\n} ","",{version:3,sources:["webpack://./src/pages/Personal/style/index.module.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,uBAAuB;EACvB;;;oCAGkC;EAClC,aAAa;AACf;;AAEA;EACE,kBAAkB;EAClB,aAAa;CACd,uBAAuB;CACvB,mBAAmB;AACpB;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;CACC,UAAU;CACV,kBAAkB;CAClB,YAAY;AACb;;AAEA;EACE,cAAc;EACd,YAAY;EACZ,WAAW;EACX,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,mBAAmB;EACnB,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;AACnB",sourcesContent:[".personalWrapper {\n  display: grid;\n  justify-content: center;\n  grid-template-rows: [siteNav] 8rem\n                      [image] 25rem\n                      [bio] 1fr\n                      [footer] 10rem;\n  height: 100vh;\n}\n\n.navWrapper {\n  grid-area: siteNav;\n  display: flex;\n\tjustify-content: center;\n\talign-items: center;\n}\n\n.imageContainer {\n  grid-area: image;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.imageContainer img {\n\twidth: 98%;\n\tborder-radius: 2em;\n\tmargin: auto;\n}\n\n.bioContainer {\n  grid-area: bio;\n  flex-grow: 1;\n  width: 100%;\n  padding: .5rem;\n  font-size: 2rem;\n}\n\n.personText {\n  margin-bottom: 2rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.personText h1 {\n  margin-bottom: -0.75rem;\n}\n\n.personText p {\n  font-size: 1.5rem;\n}\n\n.bioText p {\n  font-size: 1.5rem;\n  text-indent: 1rem;\n}\n\n.footerContainer {\n  grid-area: footer;\n} "],sourceRoot:""}]),i.locals={personalWrapper:"bmrvCx3eBBeouuM3jjKC",navWrapper:"L7_Wkacez7hU1JQDYxcC",imageContainer:"GFa1MeF9KaklpA_oT8Mz",bioContainer:"HPhlAGHH7dtUBf_sfBuO",personText:"OikIZVwzhobEbD7quL0U",bioText:"xksRz9btKr0wMV4x4AA4",footerContainer:"JPVWnIATRJvzEUZbdMjW"};const l=i},750:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,".nJuh4pw3eYbMgRDTUKBI {\n\tgrid-row: header;\n\tdisplay: flex;\n\tjustify-content: center;\n\tbackground-color: brown;\n\tborder-radius: .75rem;\n\tmargin: .5rem;\n}\n\n.nJuh4pw3eYbMgRDTUKBI p {\n\tcolor: white;\n\tfont-size: 3.5rem;\n\tmargin: auto;\n\tfont-family: 'Press Start 2P', system-ui;\n}","",{version:3,sources:["webpack://./src/pages/PoopMachine/Header/header.module.css"],names:[],mappings:"AAAA;CACC,gBAAgB;CAChB,aAAa;CACb,uBAAuB;CACvB,uBAAuB;CACvB,qBAAqB;CACrB,aAAa;AACd;;AAEA;CACC,YAAY;CACZ,iBAAiB;CACjB,YAAY;CACZ,wCAAwC;AACzC",sourcesContent:[".headerContainer {\n\tgrid-row: header;\n\tdisplay: flex;\n\tjustify-content: center;\n\tbackground-color: brown;\n\tborder-radius: .75rem;\n\tmargin: .5rem;\n}\n\n.headerContainer p {\n\tcolor: white;\n\tfont-size: 3.5rem;\n\tmargin: auto;\n\tfont-family: 'Press Start 2P', system-ui;\n}"],sourceRoot:""}]),i.locals={headerContainer:"nJuh4pw3eYbMgRDTUKBI"};const l=i},426:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,".hunger-val-container {\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 20%;\n\tborder-left: 0.25rem solid black;\n\tborder-right: 0.25rem solid black;\n}\n\n.meter-element {\n\tdisplay: inline-flex;\n\talign-items: center;\n\tjustify-content: center;\n\tflex-grow: 1;\n}","",{version:3,sources:["webpack://./src/pages/PoopMachine/hungerVal/hungerVal.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,sBAAsB;CACtB,UAAU;CACV,gCAAgC;CAChC,iCAAiC;AAClC;;AAEA;CACC,oBAAoB;CACpB,mBAAmB;CACnB,uBAAuB;CACvB,YAAY;AACb",sourcesContent:[".hunger-val-container {\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 20%;\n\tborder-left: 0.25rem solid black;\n\tborder-right: 0.25rem solid black;\n}\n\n.meter-element {\n\tdisplay: inline-flex;\n\talign-items: center;\n\tjustify-content: center;\n\tflex-grow: 1;\n}"],sourceRoot:""}]);const l=i},681:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,"* {\n\t/*\n\tSetting the margin property to 0 here applies it to\n\tall the elements, but it does not carry the same effect\n\twhen apllied to the html element.\n\tWhy not?\n\t*/\n\tmargin: 0;\n}\n\n*,\n*:before,\n*:after {\n\tbox-sizing: inherit;\n}\n\nhtml {\n\tfont-size: 62.5%;\n}\n\nhtml, body {\n\tbox-sizing: border-box;\n\toverflow: auto;\n}\n\n\n\n\n.JNq8D77PPsIK6zwx4bpg {\n\tdisplay: grid;\n\tgrid-template-rows: [header] 2fr\n\t\t\t\t\t\t\t\t\t\t\t[two_guys] 8fr;\n\tborder: .5rem solid black;\n\theight: 40rem;\n}\n\n.a0dFemVCPkrM_j0aczyQ {\n\tgrid-row: two_guys;\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: space-evenly;\n\tmargin: auto;\n\theight: 90%;\n\twidth: 90%;\n\tbackground-color: #5576f7;\n\tborder: 1.0rem solid black;\n}\n\n.kDPc9VdLzk32cftRFmxy {\n\tmargin: auto;\n}\n\n.QP5WxrnYDuw6P3KW3CeB {\n\tbackground-color: goldenrod;\n\tborder-radius: .12rem;\n\tpadding: 5px;\n\theight: 20rem;\n\twidth: 20rem;\n}\n\n.qO2OwXTGCOEFcK_jfdDn {\n\twidth: 20rem;\n\theight: 4rem;\n\tmargin: auto;\n}\n\n.VQrCSe8wGfREPU5YjKnT {\n\tfont-size: 2rem;\n\ttext-align: center;\n}","",{version:3,sources:["webpack://./src/pages/PoopMachine/index.style.module.css"],names:[],mappings:"AAAA;CACC;;;;;EAKC;CACD,SAAS;AACV;;AAEA;;;CAGC,mBAAmB;AACpB;;AAEA;CACC,gBAAgB;AACjB;;AAEA;CACC,sBAAsB;CACtB,cAAc;AACf;;;;;AAKA;CACC,aAAa;CACb;yBACwB;CACxB,yBAAyB;CACzB,aAAa;AACd;;AAEA;CACC,kBAAkB;CAClB,aAAa;CACb,mBAAmB;CACnB,6BAA6B;CAC7B,YAAY;CACZ,WAAW;CACX,UAAU;CACV,yBAAyB;CACzB,0BAA0B;AAC3B;;AAEA;CACC,YAAY;AACb;;AAEA;CACC,2BAA2B;CAC3B,qBAAqB;CACrB,YAAY;CACZ,aAAa;CACb,YAAY;AACb;;AAEA;CACC,YAAY;CACZ,YAAY;CACZ,YAAY;AACb;;AAEA;CACC,eAAe;CACf,kBAAkB;AACnB",sourcesContent:["* {\n\t/*\n\tSetting the margin property to 0 here applies it to\n\tall the elements, but it does not carry the same effect\n\twhen apllied to the html element.\n\tWhy not?\n\t*/\n\tmargin: 0;\n}\n\n*,\n*:before,\n*:after {\n\tbox-sizing: inherit;\n}\n\nhtml {\n\tfont-size: 62.5%;\n}\n\nhtml, body {\n\tbox-sizing: border-box;\n\toverflow: auto;\n}\n\n\n\n\n.appContainer {\n\tdisplay: grid;\n\tgrid-template-rows: [header] 2fr\n\t\t\t\t\t\t\t\t\t\t\t[two_guys] 8fr;\n\tborder: .5rem solid black;\n\theight: 40rem;\n}\n\n.bothGuysContainer {\n\tgrid-row: two_guys;\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: space-evenly;\n\tmargin: auto;\n\theight: 90%;\n\twidth: 90%;\n\tbackground-color: #5576f7;\n\tborder: 1.0rem solid black;\n}\n\n.guyActionCardContainer {\n\tmargin: auto;\n}\n\n.guyIcon {\n\tbackground-color: goldenrod;\n\tborder-radius: .12rem;\n\tpadding: 5px;\n\theight: 20rem;\n\twidth: 20rem;\n}\n\n.guyTextBox {\n\twidth: 20rem;\n\theight: 4rem;\n\tmargin: auto;\n}\n\n.guyStatusText {\n\tfont-size: 2rem;\n\ttext-align: center;\n}"],sourceRoot:""}]),i.locals={appContainer:"JNq8D77PPsIK6zwx4bpg",bothGuysContainer:"a0dFemVCPkrM_j0aczyQ",guyActionCardContainer:"kDPc9VdLzk32cftRFmxy",guyIcon:"QP5WxrnYDuw6P3KW3CeB",guyTextBox:"qO2OwXTGCOEFcK_jfdDn",guyStatusText:"VQrCSe8wGfREPU5YjKnT"};const l=i},801:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,".X5u6eC98NaSHk9jNcTFl {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 98%;\n  margin: auto;\n  height: 100vh;\n}\n\n.Q1fCtT9OXlPuku43CWgq {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  height: 10rem;\n  font-family: Laila_Med;\n}\n\n.Q1fCtT9OXlPuku43CWgq button {\n  position: absolute;\n  top: 0;\n  left:  0;\n  font-size: 2rem;\n}\n\n.Q1fCtT9OXlPuku43CWgq h1 {\n  margin: 2rem auto;\n  font-size: 4rem\n}\n\n.sYoeOFHSd8zzqCa4hF6q {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 98%;\n  border: .2rem solid black;\n  overflow-y: scroll;\n  scroll-snap-type: y mandatory;\n}\n\n.hgv7J5ARaa_mILl9_ENz {\n  \n}\n","",{version:3,sources:["webpack://./src/pages/SpinConnect/index.module.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,UAAU;EACV,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,WAAW;EACX,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,MAAM;EACN,QAAQ;EACR,eAAe;AACjB;;AAEA;EACE,iBAAiB;EACjB;AACF;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,UAAU;EACV,yBAAyB;EACzB,kBAAkB;EAClB,6BAA6B;AAC/B;;AAEA;;AAEA",sourcesContent:[".moduleContainer {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 98%;\n  margin: auto;\n  height: 100vh;\n}\n\n.headerContainer {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  height: 10rem;\n  font-family: Laila_Med;\n}\n\n.headerContainer button {\n  position: absolute;\n  top: 0;\n  left:  0;\n  font-size: 2rem;\n}\n\n.headerContainer h1 {\n  margin: 2rem auto;\n  font-size: 4rem\n}\n\n.cardsContainer {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 98%;\n  border: .2rem solid black;\n  overflow-y: scroll;\n  scroll-snap-type: y mandatory;\n}\n\n.card {\n  \n}\n"],sourceRoot:""}]),i.locals={moduleContainer:"X5u6eC98NaSHk9jNcTFl",headerContainer:"Q1fCtT9OXlPuku43CWgq",cardsContainer:"sYoeOFHSd8zzqCa4hF6q",card:"hgv7J5ARaa_mILl9_ENz"};const l=i},755:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,".kl9ByliFPHTwQkcROXSj {\n}\n\n.yi1hPme1HW2Bv6X0gTSS {\n\n}\n\n.TRcLEjoY1FC28z37L6n9 p {\n\tfont-family: Orbitron;\n\tfont-size: 4rem;\n\n}","",{version:3,sources:["webpack://./src/pages/SpinnerOfDoom/index.module.css"],names:[],mappings:"AAAA;AACA;;AAEA;;AAEA;;AAEA;CACC,qBAAqB;CACrB,eAAe;;AAEhB",sourcesContent:[".spinnerOfDoomWrapper {\n}\n\n.headerContainer {\n\n}\n\n.spinner p {\n\tfont-family: Orbitron;\n\tfont-size: 4rem;\n\n}"],sourceRoot:""}]),i.locals={spinnerOfDoomWrapper:"kl9ByliFPHTwQkcROXSj",headerContainer:"yi1hPme1HW2Bv6X0gTSS",spinner:"TRcLEjoY1FC28z37L6n9"};const l=i},302:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,".wbVXFSlUTiq66XosjOq4 {\n  display: flex;\n\tjustify-content: center;\n} \n\n.HSQgEt9RlXUdwiScEGde {\n\tflex-grow: 1;\n\tfont-family: Roboto;\n\tfont-size: clamp(3rem, 8vw, 10rem);\n\tbackground-color: transparent;\n\tborder: .25rem solid black;\n\tborder-radius: 0.5rem;\n}","",{version:3,sources:["webpack://./src/pages/components/NavBtn/index.module.css"],names:[],mappings:"AAAA;EACE,aAAa;CACd,uBAAuB;AACxB;;AAEA;CACC,YAAY;CACZ,mBAAmB;CACnB,kCAAkC;CAClC,6BAA6B;CAC7B,0BAA0B;CAC1B,qBAAqB;AACtB",sourcesContent:[".navBtnContainer {\n  display: flex;\n\tjustify-content: center;\n} \n\n.navBtn {\n\tflex-grow: 1;\n\tfont-family: Roboto;\n\tfont-size: clamp(3rem, 8vw, 10rem);\n\tbackground-color: transparent;\n\tborder: .25rem solid black;\n\tborder-radius: 0.5rem;\n}"],sourceRoot:""}]),i.locals={navBtnContainer:"wbVXFSlUTiq66XosjOq4",navBtn:"HSQgEt9RlXUdwiScEGde"};const l=i},777:(e,t,n)=>{"use strict";n.d(t,{Z:()=>A});var r=n(537),a=n.n(r),o=n(645),i=n.n(o),l=n(667),u=n.n(l),s=new URL(n(893),n.b),c=new URL(n(969),n.b),d=new URL(n(13),n.b),f=new URL(n(210),n.b),p=new URL(n(208),n.b),h=i()(a()),m=u()(s),g=u()(c),v=u()(d),y=u()(f),b=u()(p);h.push([e.id,`@font-face {\n\tfont-family: Laila_Med;\n\tsrc: url(${m});\n}\n\n@font-face {\n\tfont-family: Roboto;\n\tsrc: url(${g});\n}\n\n@font-face {\n\tfont-family: Orbitron;\n\tsrc: \turl(${v}),\n\t\t\t\tformat('truetype');\n}\n\n@font-face {\n\tfont-family: Ubuntu_Reg;\n\tsrc: url(${y});\n}\n\n@font-face {\n\tfont-family: KodeMono_Var;\n\tsrc: url(${b});\n}\n\n:root {\n\t--ac-sand: \t\t\t\t\t#F7DE8D;\n\t--ac-orange:\t\t\t\t#FBB040;\n\t--ac-green: \t\t\t\t#AAC27E;\n\t--ac-green-opaque: \t#AAC27E69;\n\t--ac-blue:\t\t\t\t\t#9FCFCA;\n\t--ac-brown: \t\t\t\t#594A42;\n\t--grayd-a-grey:\t\t\t#aaaaaa;\n\t--special-blue:\t\t\t#007bff;\n}\n\n*,\n*:before,\n*:after {\n\tmargin: 0;\n\tbox-sizing: inherit;\n}\n\na {\n\ttext-decoration: none;\n\tcolor: black;\n}\n\nbutton {\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tborder: none;\n\tmargin: 0;\n\ttext-decoration: none;\n\tbackground: none;\n\ttext-align: center;\n}\n\nhtml {\n\tfont-size: 62.5%;\n}\n\nhtml, body {\n\tbox-sizing: border-box;\n\toverflow: auto;\n}\n\nbody {\n\tbackground-color: #d9d9d9;\n}`,"",{version:3,sources:["webpack://./src/root.style.css"],names:[],mappings:"AAAA;CACC,sBAAsB;CACtB,4CAAiD;AAClD;;AAEA;CACC,mBAAmB;CACnB,4CAAoD;AACrD;;AAEA;CACC,qBAAqB;CACrB;sBACqB;AACtB;;AAEA;CACC,uBAAuB;CACvB,4CAAoD;AACrD;;AAEA;CACC,yBAAyB;CACzB,4CAAmE;AACpE;;AAEA;CACC,uBAAuB;CACvB,uBAAuB;CACvB,uBAAuB;CACvB,6BAA6B;CAC7B,sBAAsB;CACtB,uBAAuB;CACvB,yBAAyB;CACzB,yBAAyB;AAC1B;;AAEA;;;CAGC,SAAS;CACT,mBAAmB;AACpB;;AAEA;CACC,qBAAqB;CACrB,YAAY;AACb;;AAEA;CACC,eAAe;CACf,qBAAqB;CACrB,YAAY;CACZ,SAAS;CACT,qBAAqB;CACrB,gBAAgB;CAChB,kBAAkB;AACnB;;AAEA;CACC,gBAAgB;AACjB;;AAEA;CACC,sBAAsB;CACtB,cAAc;AACf;;AAEA;CACC,yBAAyB;AAC1B",sourcesContent:["@font-face {\n\tfont-family: Laila_Med;\n\tsrc: url('./assets/fonts/Laila/Laila-Medium.ttf');\n}\n\n@font-face {\n\tfont-family: Roboto;\n\tsrc: url('./assets/fonts/Roboto/Roboto-Regular.ttf');\n}\n\n@font-face {\n\tfont-family: Orbitron;\n\tsrc: \turl('./assets/fonts/Orbitron/Orbitron-VariableFont_wght.ttf'),\n\t\t\t\tformat('truetype');\n}\n\n@font-face {\n\tfont-family: Ubuntu_Reg;\n\tsrc: url('./assets/fonts/Ubuntu/Ubuntu-Regular.ttf');\n}\n\n@font-face {\n\tfont-family: KodeMono_Var;\n\tsrc: url('./assets/fonts/Kode_Mono/KodeMono-VariableFont_wght.ttf');\n}\n\n:root {\n\t--ac-sand: \t\t\t\t\t#F7DE8D;\n\t--ac-orange:\t\t\t\t#FBB040;\n\t--ac-green: \t\t\t\t#AAC27E;\n\t--ac-green-opaque: \t#AAC27E69;\n\t--ac-blue:\t\t\t\t\t#9FCFCA;\n\t--ac-brown: \t\t\t\t#594A42;\n\t--grayd-a-grey:\t\t\t#aaaaaa;\n\t--special-blue:\t\t\t#007bff;\n}\n\n*,\n*:before,\n*:after {\n\tmargin: 0;\n\tbox-sizing: inherit;\n}\n\na {\n\ttext-decoration: none;\n\tcolor: black;\n}\n\nbutton {\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tborder: none;\n\tmargin: 0;\n\ttext-decoration: none;\n\tbackground: none;\n\ttext-align: center;\n}\n\nhtml {\n\tfont-size: 62.5%;\n}\n\nhtml, body {\n\tbox-sizing: border-box;\n\toverflow: auto;\n}\n\nbody {\n\tbackground-color: #d9d9d9;\n}"],sourceRoot:""}]);const A=h},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var u=this[l][0];null!=u&&(i[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},778:(e,t,n)=>{var r=n(479);function a(e){var t=function(){return t.called?t.value:(t.called=!0,t.value=e.apply(this,arguments))};return t.called=!1,t}function o(e){var t=function(){if(t.called)throw new Error(t.onceError);return t.called=!0,t.value=e.apply(this,arguments)},n=e.name||"Function wrapped with `once`";return t.onceError=n+" shouldn't be called more than once",t.called=!1,t}e.exports=r(a),e.exports.strict=r(o),a.proto=a((function(){Object.defineProperty(Function.prototype,"once",{value:function(){return a(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return o(this)},configurable:!0})}))},448:(e,t,n)=>{"use strict";var r=n(294),a=n(840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!d.call(h,e)||!d.call(p,e)&&(f.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var A=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,C=Symbol.for("react.element"),w=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),E=Symbol.for("react.strict_mode"),S=Symbol.for("react.profiler"),x=Symbol.for("react.provider"),B=Symbol.for("react.context"),_=Symbol.for("react.forward_ref"),P=Symbol.for("react.suspense"),T=Symbol.for("react.suspense_list"),L=Symbol.for("react.memo"),R=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var O=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var D=Symbol.iterator;function N(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=D&&e[D]||e["@@iterator"])?e:null}var z,j=Object.assign;function F(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var U=!1;function M(e,t){if(!e||U)return"";U=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,l=o.length-1;1<=i&&0<=l&&a[i]!==o[l];)l--;for(;1<=i&&0<=l;i--,l--)if(a[i]!==o[l]){if(1!==i||1!==l)do{if(i--,0>--l||a[i]!==o[l]){var u="\n"+a[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=l);break}}}finally{U=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?F(e):""}function I(e){switch(e.tag){case 5:return F(e.type);case 16:return F("Lazy");case 13:return F("Suspense");case 19:return F("SuspenseList");case 0:case 2:case 15:return M(e.type,!1);case 11:return M(e.type.render,!1);case 1:return M(e.type,!0);default:return""}}function V(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case w:return"Portal";case S:return"Profiler";case E:return"StrictMode";case P:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case B:return(e.displayName||"Context")+".Consumer";case x:return(e._context.displayName||"Context")+".Provider";case _:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case L:return null!==(t=e.displayName||null)?t:V(e.type)||"Memo";case R:t=e._payload,e=e._init;try{return V(e(t))}catch(e){}}return null}function q(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return V(t);case 8:return t===E?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function H(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function W(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function $(e){e._valueTracker||(e._valueTracker=function(e){var t=W(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Z(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=W(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Y(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Q(e,t){var n=t.checked;return j({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function K(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=H(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function G(e,t){X(e,t);var n=H(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,H(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Y(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+H(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return j({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:H(n)}}function oe(e,t){var n=H(t.value),r=H(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ve=j({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Ae=null;function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var we=null,ke=null,Ee=null;function Se(e){if(e=ba(e)){if("function"!=typeof we)throw Error(o(280));var t=e.stateNode;t&&(t=Ca(t),we(e.stateNode,e.type,t))}}function xe(e){ke?Ee?Ee.push(e):Ee=[e]:ke=e}function Be(){if(ke){var e=ke,t=Ee;if(Ee=ke=null,Se(e),t)for(e=0;e<t.length;e++)Se(t[e])}}function _e(e,t){return e(t)}function Pe(){}var Te=!1;function Le(e,t,n){if(Te)return e(t,n);Te=!0;try{return _e(e,t,n)}finally{Te=!1,(null!==ke||null!==Ee)&&(Pe(),Be())}}function Re(e,t){var n=e.stateNode;if(null===n)return null;var r=Ca(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Oe=!1;if(c)try{var De={};Object.defineProperty(De,"passive",{get:function(){Oe=!0}}),window.addEventListener("test",De,De),window.removeEventListener("test",De,De)}catch(ce){Oe=!1}function Ne(e,t,n,r,a,o,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var ze=!1,je=null,Fe=!1,Ue=null,Me={onError:function(e){ze=!0,je=e}};function Ie(e,t,n,r,a,o,i,l,u){ze=!1,je=null,Ne.apply(Me,arguments)}function Ve(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function He(e){if(Ve(e)!==e)throw Error(o(188))}function We(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ve(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return He(a),e;if(i===r)return He(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var l=!1,u=a.child;u;){if(u===n){l=!0,n=a,r=i;break}if(u===r){l=!0,r=a,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=a;break}if(u===r){l=!0,r=i,n=a;break}u=u.sibling}if(!l)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?$e(e):null}function $e(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=$e(e);if(null!==t)return t;e=e.sibling}return null}var Ze=a.unstable_scheduleCallback,Ye=a.unstable_cancelCallback,Qe=a.unstable_shouldYield,Ke=a.unstable_requestPaint,Xe=a.unstable_now,Ge=a.unstable_getCurrentPriorityLevel,Je=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,st=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~a;0!==l?r=dt(l):0!=(o&=i)&&(r=dt(o))}else 0!=(i=n&~a)?r=dt(i):0!==o&&(r=dt(o));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&0!=(4194240&o)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-it(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=st;return 0==(4194240&(st<<=1))&&(st=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function At(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var Ct,wt,kt,Et,St,xt=!1,Bt=[],_t=null,Pt=null,Tt=null,Lt=new Map,Rt=new Map,Ot=[],Dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Nt(e,t){switch(e){case"focusin":case"focusout":_t=null;break;case"dragenter":case"dragleave":Pt=null;break;case"mouseover":case"mouseout":Tt=null;break;case"pointerover":case"pointerout":Lt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Rt.delete(t.pointerId)}}function zt(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=ba(t))&&wt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function jt(e){var t=ya(e.target);if(null!==t){var n=Ve(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=qe(n)))return e.blockedOn=t,void St(e.priority,(function(){kt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ft(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ba(n))&&wt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Ae=r,n.target.dispatchEvent(r),Ae=null,t.shift()}return!0}function Ut(e,t,n){Ft(e)&&n.delete(t)}function Mt(){xt=!1,null!==_t&&Ft(_t)&&(_t=null),null!==Pt&&Ft(Pt)&&(Pt=null),null!==Tt&&Ft(Tt)&&(Tt=null),Lt.forEach(Ut),Rt.forEach(Ut)}function It(e,t){e.blockedOn===t&&(e.blockedOn=null,xt||(xt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Mt)))}function Vt(e){function t(t){return It(t,e)}if(0<Bt.length){It(Bt[0],e);for(var n=1;n<Bt.length;n++){var r=Bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==_t&&It(_t,e),null!==Pt&&It(Pt,e),null!==Tt&&It(Tt,e),Lt.forEach(t),Rt.forEach(t),n=0;n<Ot.length;n++)(r=Ot[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Ot.length&&null===(n=Ot[0]).blockedOn;)jt(n),null===n.blockedOn&&Ot.shift()}var qt=A.ReactCurrentBatchConfig,Ht=!0;function Wt(e,t,n,r){var a=bt,o=qt.transition;qt.transition=null;try{bt=1,Zt(e,t,n,r)}finally{bt=a,qt.transition=o}}function $t(e,t,n,r){var a=bt,o=qt.transition;qt.transition=null;try{bt=4,Zt(e,t,n,r)}finally{bt=a,qt.transition=o}}function Zt(e,t,n,r){if(Ht){var a=Qt(e,t,n,r);if(null===a)Hr(e,t,r,Yt,n),Nt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return _t=zt(_t,e,t,n,r,a),!0;case"dragenter":return Pt=zt(Pt,e,t,n,r,a),!0;case"mouseover":return Tt=zt(Tt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return Lt.set(o,zt(Lt.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Rt.set(o,zt(Rt.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Nt(e,r),4&t&&-1<Dt.indexOf(e)){for(;null!==a;){var o=ba(a);if(null!==o&&Ct(o),null===(o=Qt(e,t,n,r))&&Hr(e,t,r,Yt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Hr(e,t,r,null,n)}}var Yt=null;function Qt(e,t,n,r){if(Yt=null,null!==(e=ya(e=Ce(r))))if(null===(t=Ve(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=qe(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Yt=e,null}function Kt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ge()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Gt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Gt,r=n.length,a="value"in Xt?Xt.value:Xt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return Jt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return j(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,un,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(sn),dn=j({},sn,{view:0,detail:0}),fn=an(dn),pn=j({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Sn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(on=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=on=0,un=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=an(pn),mn=an(j({},pn,{dataTransfer:0})),gn=an(j({},dn,{relatedTarget:0})),vn=an(j({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=j({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=an(yn),An=an(j({},sn,{data:0})),Cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},wn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function Sn(){return En}var xn=j({},dn,{key:function(e){if(e.key){var t=Cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?wn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Sn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Bn=an(xn),_n=an(j({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pn=an(j({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Sn})),Tn=an(j({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Ln=j({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Rn=an(Ln),On=[9,13,27,32],Dn=c&&"CompositionEvent"in window,Nn=null;c&&"documentMode"in document&&(Nn=document.documentMode);var zn=c&&"TextEvent"in window&&!Nn,jn=c&&(!Dn||Nn&&8<Nn&&11>=Nn),Fn=String.fromCharCode(32),Un=!1;function Mn(e,t){switch(e){case"keyup":return-1!==On.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function In(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Vn=!1,qn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!qn[e.type]:"textarea"===t}function Wn(e,t,n,r){xe(r),0<(t=$r(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var $n=null,Zn=null;function Yn(e){Fr(e,0)}function Qn(e){if(Z(Aa(e)))return e}function Kn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Gn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Gn=Jn}else Gn=!1;Xn=Gn&&(!document.documentMode||9<document.documentMode)}function tr(){$n&&($n.detachEvent("onpropertychange",nr),Zn=$n=null)}function nr(e){if("value"===e.propertyName&&Qn(Zn)){var t=[];Wn(t,Zn,e,Ce(e)),Le(Yn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Zn=n,($n=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(Zn)}function or(e,t){if("click"===e)return Qn(t)}function ir(e,t){if("input"===e||"change"===e)return Qn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!d.call(t,a)||!lr(e[a],t[a]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=Y();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Y((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=cr(n,o);var i=cr(n,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,vr=null,yr=null,br=!1;function Ar(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==gr||gr!==Y(r)||(r="selectionStart"in(r=gr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&ur(yr,r)||(yr=r,0<(r=$r(vr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function Cr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var wr={animationend:Cr("Animation","AnimationEnd"),animationiteration:Cr("Animation","AnimationIteration"),animationstart:Cr("Animation","AnimationStart"),transitionend:Cr("Transition","TransitionEnd")},kr={},Er={};function Sr(e){if(kr[e])return kr[e];if(!wr[e])return e;var t,n=wr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Er)return kr[e]=n[t];return e}c&&(Er=document.createElement("div").style,"AnimationEvent"in window||(delete wr.animationend.animation,delete wr.animationiteration.animation,delete wr.animationstart.animation),"TransitionEvent"in window||delete wr.transitionend.transition);var xr=Sr("animationend"),Br=Sr("animationiteration"),_r=Sr("animationstart"),Pr=Sr("transitionend"),Tr=new Map,Lr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Rr(e,t){Tr.set(e,t),u(t,[e])}for(var Or=0;Or<Lr.length;Or++){var Dr=Lr[Or];Rr(Dr.toLowerCase(),"on"+(Dr[0].toUpperCase()+Dr.slice(1)))}Rr(xr,"onAnimationEnd"),Rr(Br,"onAnimationIteration"),Rr(_r,"onAnimationStart"),Rr("dblclick","onDoubleClick"),Rr("focusin","onFocus"),Rr("focusout","onBlur"),Rr(Pr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Nr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),zr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Nr));function jr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,l,u,s){if(Ie.apply(this,arguments),ze){if(!ze)throw Error(o(198));var c=je;ze=!1,je=null,Fe||(Fe=!0,Ue=c)}}(r,t,void 0,e),e.currentTarget=null}function Fr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==o&&a.isPropagationStopped())break e;jr(a,l,s),o=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==o&&a.isPropagationStopped())break e;jr(a,l,s),o=u}}}if(Fe)throw e=Ue,Fe=!1,Ue=null,e}function Ur(e,t){var n=t[ma];void 0===n&&(n=t[ma]=new Set);var r=e+"__bubble";n.has(r)||(qr(t,e,2,!1),n.add(r))}function Mr(e,t,n){var r=0;t&&(r|=4),qr(n,e,r,t)}var Ir="_reactListening"+Math.random().toString(36).slice(2);function Vr(e){if(!e[Ir]){e[Ir]=!0,i.forEach((function(t){"selectionchange"!==t&&(zr.has(t)||Mr(t,!1,e),Mr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ir]||(t[Ir]=!0,Mr("selectionchange",!1,t))}}function qr(e,t,n,r){switch(Kt(t)){case 1:var a=Wt;break;case 4:a=$t;break;default:a=Zt}n=a.bind(null,t,n,e),a=void 0,!Oe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Hr(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=ya(l)))return;if(5===(u=i.tag)||6===u){r=o=i;continue e}l=l.parentNode}}r=r.return}Le((function(){var r=o,a=Ce(n),i=[];e:{var l=Tr.get(e);if(void 0!==l){var u=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=Bn;break;case"focusin":s="focus",u=gn;break;case"focusout":s="blur",u=gn;break;case"beforeblur":case"afterblur":u=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Pn;break;case xr:case Br:case _r:u=vn;break;case Pr:u=Tn;break;case"scroll":u=fn;break;case"wheel":u=Rn;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=_n}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==f&&null!=(m=Re(h,f))&&c.push(Wr(h,m,p))),d)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,a),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===Ae||!(s=n.relatedTarget||n.fromElement)||!ya(s)&&!s[ha])&&(u||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?ya(s):null)&&(s!==(d=Ve(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=hn,m="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=_n,m="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==u?l:Aa(u),p=null==s?l:Aa(s),(l=new c(m,h+"leave",u,n,a)).target=d,l.relatedTarget=p,m=null,ya(a)===r&&((c=new c(f,h+"enter",s,n,a)).target=p,c.relatedTarget=d,m=c),d=m,u&&s)e:{for(f=s,h=0,p=c=u;p;p=Zr(p))h++;for(p=0,m=f;m;m=Zr(m))p++;for(;0<h-p;)c=Zr(c),h--;for(;0<p-h;)f=Zr(f),p--;for(;h--;){if(c===f||null!==f&&c===f.alternate)break e;c=Zr(c),f=Zr(f)}c=null}else c=null;null!==u&&Yr(i,l,u,c,!1),null!==s&&null!==d&&Yr(i,d,s,c,!0)}if("select"===(u=(l=r?Aa(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var g=Kn;else if(Hn(l))if(Xn)g=ir;else{g=ar;var v=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=or);switch(g&&(g=g(e,r))?Wn(i,g,n,a):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&ee(l,"number",l.value)),v=r?Aa(r):window,e){case"focusin":(Hn(v)||"true"===v.contentEditable)&&(gr=v,vr=r,yr=null);break;case"focusout":yr=vr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,Ar(i,n,a);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":Ar(i,n,a)}var y;if(Dn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Vn?Mn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(jn&&"ko"!==n.locale&&(Vn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Vn&&(y=en()):(Gt="value"in(Xt=a)?Xt.value:Xt.textContent,Vn=!0)),0<(v=$r(r,b)).length&&(b=new An(b,e,null,n,a),i.push({event:b,listeners:v}),(y||null!==(y=In(n)))&&(b.data=y))),(y=zn?function(e,t){switch(e){case"compositionend":return In(t);case"keypress":return 32!==t.which?null:(Un=!0,Fn);case"textInput":return(e=t.data)===Fn&&Un?null:e;default:return null}}(e,n):function(e,t){if(Vn)return"compositionend"===e||!Dn&&Mn(e,t)?(e=en(),Jt=Gt=Xt=null,Vn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return jn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=$r(r,"onBeforeInput")).length&&(a=new An("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=y)}Fr(i,t)}))}function Wr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function $r(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Re(e,n))&&r.unshift(Wr(e,o,a)),null!=(o=Re(e,t))&&r.push(Wr(e,o,a))),e=e.return}return r}function Zr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Yr(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,a?null!=(u=Re(n,o))&&i.unshift(Wr(n,u,l)):a||null!=(u=Re(n,o))&&i.push(Wr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Qr=/\r\n?/g,Kr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Qr,"\n").replace(Kr,"")}function Gr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(o(425))}function Jr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,ia="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(la)}:ra;function la(e){setTimeout((function(){throw e}))}function ua(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Vt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Vt(t)}function sa(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var da=Math.random().toString(36).slice(2),fa="__reactFiber$"+da,pa="__reactProps$"+da,ha="__reactContainer$"+da,ma="__reactEvents$"+da,ga="__reactListeners$"+da,va="__reactHandles$"+da;function ya(e){var t=e[fa];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ha]||n[fa]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[fa])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function ba(e){return!(e=e[fa]||e[ha])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Aa(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function Ca(e){return e[pa]||null}var wa=[],ka=-1;function Ea(e){return{current:e}}function Sa(e){0>ka||(e.current=wa[ka],wa[ka]=null,ka--)}function xa(e,t){ka++,wa[ka]=e.current,e.current=t}var Ba={},_a=Ea(Ba),Pa=Ea(!1),Ta=Ba;function La(e,t){var n=e.type.contextTypes;if(!n)return Ba;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Ra(e){return null!=e.childContextTypes}function Oa(){Sa(Pa),Sa(_a)}function Da(e,t,n){if(_a.current!==Ba)throw Error(o(168));xa(_a,t),xa(Pa,n)}function Na(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,q(e)||"Unknown",a));return j({},n,r)}function za(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Ba,Ta=_a.current,xa(_a,e),xa(Pa,Pa.current),!0}function ja(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=Na(e,t,Ta),r.__reactInternalMemoizedMergedChildContext=e,Sa(Pa),Sa(_a),xa(_a,e)):Sa(Pa),xa(Pa,n)}var Fa=null,Ua=!1,Ma=!1;function Ia(e){null===Fa?Fa=[e]:Fa.push(e)}function Va(){if(!Ma&&null!==Fa){Ma=!0;var e=0,t=bt;try{var n=Fa;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Fa=null,Ua=!1}catch(t){throw null!==Fa&&(Fa=Fa.slice(e+1)),Ze(Je,Va),t}finally{bt=t,Ma=!1}}return null}var qa=[],Ha=0,Wa=null,$a=0,Za=[],Ya=0,Qa=null,Ka=1,Xa="";function Ga(e,t){qa[Ha++]=$a,qa[Ha++]=Wa,Wa=e,$a=t}function Ja(e,t,n){Za[Ya++]=Ka,Za[Ya++]=Xa,Za[Ya++]=Qa,Qa=e;var r=Ka;e=Xa;var a=32-it(r)-1;r&=~(1<<a),n+=1;var o=32-it(t)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Ka=1<<32-it(t)+a|n<<a|r,Xa=o+e}else Ka=1<<o|n<<a|r,Xa=e}function eo(e){null!==e.return&&(Ga(e,1),Ja(e,1,0))}function to(e){for(;e===Wa;)Wa=qa[--Ha],qa[Ha]=null,$a=qa[--Ha],qa[Ha]=null;for(;e===Qa;)Qa=Za[--Ya],Za[Ya]=null,Xa=Za[--Ya],Za[Ya]=null,Ka=Za[--Ya],Za[Ya]=null}var no=null,ro=null,ao=!1,oo=null;function io(e,t){var n=Rs(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function lo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,no=e,ro=sa(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,no=e,ro=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Qa?{id:Ka,overflow:Xa}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Rs(18,null,null,0)).stateNode=t,n.return=e,e.child=n,no=e,ro=null,!0);default:return!1}}function uo(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function so(e){if(ao){var t=ro;if(t){var n=t;if(!lo(e,t)){if(uo(e))throw Error(o(418));t=sa(n.nextSibling);var r=no;t&&lo(e,t)?io(r,n):(e.flags=-4097&e.flags|2,ao=!1,no=e)}}else{if(uo(e))throw Error(o(418));e.flags=-4097&e.flags|2,ao=!1,no=e}}}function co(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;no=e}function fo(e){if(e!==no)return!1;if(!ao)return co(e),ao=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=ro)){if(uo(e))throw po(),Error(o(418));for(;t;)io(e,t),t=sa(t.nextSibling)}if(co(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ro=sa(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ro=null}}else ro=no?sa(e.stateNode.nextSibling):null;return!0}function po(){for(var e=ro;e;)e=sa(e.nextSibling)}function ho(){ro=no=null,ao=!1}function mo(e){null===oo?oo=[e]:oo.push(e)}var go=A.ReactCurrentBatchConfig;function vo(e,t){if(e&&e.defaultProps){for(var n in t=j({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var yo=Ea(null),bo=null,Ao=null,Co=null;function wo(){Co=Ao=bo=null}function ko(e){var t=yo.current;Sa(yo),e._currentValue=t}function Eo(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function So(e,t){bo=e,Co=Ao=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Al=!0),e.firstContext=null)}function xo(e){var t=e._currentValue;if(Co!==e)if(e={context:e,memoizedValue:t,next:null},null===Ao){if(null===bo)throw Error(o(308));Ao=e,bo.dependencies={lanes:0,firstContext:e}}else Ao=Ao.next=e;return t}var Bo=null;function _o(e){null===Bo?Bo=[e]:Bo.push(e)}function Po(e,t,n,r){var a=t.interleaved;return null===a?(n.next=n,_o(t)):(n.next=a.next,a.next=n),t.interleaved=n,To(e,r)}function To(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Lo=!1;function Ro(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Oo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Do(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function No(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Pu)){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,To(e,n)}return null===(a=r.interleaved)?(t.next=t,_o(r)):(t.next=a.next,a.next=t),r.interleaved=t,To(e,n)}function zo(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function jo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Fo(e,t,n,r){var a=e.updateQueue;Lo=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var u=l,s=u.next;u.next=null,null===i?o=s:i.next=s,i=u;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=s:l.next=s,c.lastBaseUpdate=u)}if(null!==o){var d=a.baseState;for(i=0,c=s=u=null,l=o;;){var f=l.lane,p=l.eventTime;if((r&f)===f){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,m=l;switch(f=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,f);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(f="function"==typeof(h=m.payload)?h.call(p,d,f):h))break e;d=j({},d,f);break e;case 2:Lo=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(f=a.effects)?a.effects=[l]:f.push(l))}else p={eventTime:p,lane:f,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(s=c=p,u=d):c=c.next=p,i|=f;if(null===(l=l.next)){if(null===(l=a.shared.pending))break;l=(f=l).next,f.next=null,a.lastBaseUpdate=f,a.shared.pending=null}}if(null===c&&(u=d),a.baseState=u,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{i|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);ju|=i,e.lanes=i,e.memoizedState=d}}function Uo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var Mo=(new r.Component).refs;function Io(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:j({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Vo={isMounted:function(e){return!!(e=e._reactInternals)&&Ve(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ts(),a=ns(e),o=Do(r,a);o.payload=t,null!=n&&(o.callback=n),null!==(t=No(e,o,a))&&(rs(t,e,a,r),zo(t,e,a))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ts(),a=ns(e),o=Do(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=No(e,o,a))&&(rs(t,e,a,r),zo(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ts(),r=ns(e),a=Do(n,r);a.tag=2,null!=t&&(a.callback=t),null!==(t=No(e,a,r))&&(rs(t,e,r,n),zo(t,e,r))}};function qo(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(a,o))}function Ho(e,t,n){var r=!1,a=Ba,o=t.contextType;return"object"==typeof o&&null!==o?o=xo(o):(a=Ra(t)?Ta:_a.current,o=(r=null!=(r=t.contextTypes))?La(e,a):Ba),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Vo,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function Wo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Vo.enqueueReplaceState(t,t.state,null)}function $o(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=Mo,Ro(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=xo(o):(o=Ra(t)?Ta:_a.current,a.context=La(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(Io(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&Vo.enqueueReplaceState(a,a.state,null),Fo(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function Zo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=a.refs;t===Mo&&(t=a.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Yo(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Qo(e){return(0,e._init)(e._payload)}function Ko(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Ds(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Fs(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){var o=n.type;return o===k?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===R&&Qo(o)===t.type)?((r=a(t,n.props)).ref=Zo(e,t,n),r.return=e,r):((r=Ns(n.type,n.key,n.props,null,e.mode,r)).ref=Zo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Us(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=zs(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Fs(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case C:return(n=Ns(t.type,t.key,t.props,null,e.mode,n)).ref=Zo(e,null,t),n.return=e,n;case w:return(t=Us(t,e.mode,n)).return=e,t;case R:return f(e,(0,t._init)(t._payload),n)}if(te(t)||N(t))return(t=zs(t,e.mode,n,null)).return=e,t;Yo(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case C:return n.key===a?s(e,t,n,r):null;case w:return n.key===a?c(e,t,n,r):null;case R:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||N(n))return null!==a?null:d(e,t,n,r,null);Yo(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case C:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case w:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case R:return h(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||N(r))return d(t,e=e.get(n)||null,r,a,null);Yo(t,r)}return null}function m(a,o,l,u){for(var s=null,c=null,d=o,m=o=0,g=null;null!==d&&m<l.length;m++){d.index>m?(g=d,d=null):g=d.sibling;var v=p(a,d,l[m],u);if(null===v){null===d&&(d=g);break}e&&d&&null===v.alternate&&t(a,d),o=i(v,o,m),null===c?s=v:c.sibling=v,c=v,d=g}if(m===l.length)return n(a,d),ao&&Ga(a,m),s;if(null===d){for(;m<l.length;m++)null!==(d=f(a,l[m],u))&&(o=i(d,o,m),null===c?s=d:c.sibling=d,c=d);return ao&&Ga(a,m),s}for(d=r(a,d);m<l.length;m++)null!==(g=h(d,a,m,l[m],u))&&(e&&null!==g.alternate&&d.delete(null===g.key?m:g.key),o=i(g,o,m),null===c?s=g:c.sibling=g,c=g);return e&&d.forEach((function(e){return t(a,e)})),ao&&Ga(a,m),s}function g(a,l,u,s){var c=N(u);if("function"!=typeof c)throw Error(o(150));if(null==(u=c.call(u)))throw Error(o(151));for(var d=c=null,m=l,g=l=0,v=null,y=u.next();null!==m&&!y.done;g++,y=u.next()){m.index>g?(v=m,m=null):v=m.sibling;var b=p(a,m,y.value,s);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(a,m),l=i(b,l,g),null===d?c=b:d.sibling=b,d=b,m=v}if(y.done)return n(a,m),ao&&Ga(a,g),c;if(null===m){for(;!y.done;g++,y=u.next())null!==(y=f(a,y.value,s))&&(l=i(y,l,g),null===d?c=y:d.sibling=y,d=y);return ao&&Ga(a,g),c}for(m=r(a,m);!y.done;g++,y=u.next())null!==(y=h(m,a,g,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),l=i(y,l,g),null===d?c=y:d.sibling=y,d=y);return e&&m.forEach((function(e){return t(a,e)})),ao&&Ga(a,g),c}return function e(r,o,i,u){if("object"==typeof i&&null!==i&&i.type===k&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case C:e:{for(var s=i.key,c=o;null!==c;){if(c.key===s){if((s=i.type)===k){if(7===c.tag){n(r,c.sibling),(o=a(c,i.props.children)).return=r,r=o;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===R&&Qo(s)===c.type){n(r,c.sibling),(o=a(c,i.props)).ref=Zo(r,c,i),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===k?((o=zs(i.props.children,r.mode,u,i.key)).return=r,r=o):((u=Ns(i.type,i.key,i.props,null,r.mode,u)).ref=Zo(r,o,i),u.return=r,r=u)}return l(r);case w:e:{for(c=i.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){n(r,o.sibling),(o=a(o,i.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=Us(i,r.mode,u)).return=r,r=o}return l(r);case R:return e(r,o,(c=i._init)(i._payload),u)}if(te(i))return m(r,o,i,u);if(N(i))return g(r,o,i,u);Yo(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,i)).return=r,r=o):(n(r,o),(o=Fs(i,r.mode,u)).return=r,r=o),l(r)):n(r,o)}}var Xo=Ko(!0),Go=Ko(!1),Jo={},ei=Ea(Jo),ti=Ea(Jo),ni=Ea(Jo);function ri(e){if(e===Jo)throw Error(o(174));return e}function ai(e,t){switch(xa(ni,t),xa(ti,e),xa(ei,Jo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Sa(ei),xa(ei,t)}function oi(){Sa(ei),Sa(ti),Sa(ni)}function ii(e){ri(ni.current);var t=ri(ei.current),n=ue(t,e.type);t!==n&&(xa(ti,e),xa(ei,n))}function li(e){ti.current===e&&(Sa(ei),Sa(ti))}var ui=Ea(0);function si(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ci=[];function di(){for(var e=0;e<ci.length;e++)ci[e]._workInProgressVersionPrimary=null;ci.length=0}var fi=A.ReactCurrentDispatcher,pi=A.ReactCurrentBatchConfig,hi=0,mi=null,gi=null,vi=null,yi=!1,bi=!1,Ai=0,Ci=0;function wi(){throw Error(o(321))}function ki(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function Ei(e,t,n,r,a,i){if(hi=i,mi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,fi.current=null===e||null===e.memoizedState?ll:ul,e=n(r,a),bi){i=0;do{if(bi=!1,Ai=0,25<=i)throw Error(o(301));i+=1,vi=gi=null,t.updateQueue=null,fi.current=sl,e=n(r,a)}while(bi)}if(fi.current=il,t=null!==gi&&null!==gi.next,hi=0,vi=gi=mi=null,yi=!1,t)throw Error(o(300));return e}function Si(){var e=0!==Ai;return Ai=0,e}function xi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===vi?mi.memoizedState=vi=e:vi=vi.next=e,vi}function Bi(){if(null===gi){var e=mi.alternate;e=null!==e?e.memoizedState:null}else e=gi.next;var t=null===vi?mi.memoizedState:vi.next;if(null!==t)vi=t,gi=e;else{if(null===e)throw Error(o(310));e={memoizedState:(gi=e).memoizedState,baseState:gi.baseState,baseQueue:gi.baseQueue,queue:gi.queue,next:null},null===vi?mi.memoizedState=vi=e:vi=vi.next=e}return vi}function _i(e,t){return"function"==typeof t?t(e):t}function Pi(e){var t=Bi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=gi,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var l=a.next;a.next=i.next,i.next=l}r.baseQueue=a=i,n.pending=null}if(null!==a){i=a.next,r=r.baseState;var u=l=null,s=null,c=i;do{var d=c.lane;if((hi&d)===d)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var f={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=f,l=r):s=s.next=f,mi.lanes|=d,ju|=d}c=c.next}while(null!==c&&c!==i);null===s?l=r:s.next=u,lr(r,t.memoizedState)||(Al=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{i=a.lane,mi.lanes|=i,ju|=i,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ti(e){var t=Bi(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{i=e(i,l.action),l=l.next}while(l!==a);lr(i,t.memoizedState)||(Al=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Li(){}function Ri(e,t){var n=mi,r=Bi(),a=t(),i=!lr(r.memoizedState,a);if(i&&(r.memoizedState=a,Al=!0),r=r.queue,Hi(Ni.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==vi&&1&vi.memoizedState.tag){if(n.flags|=2048,Ui(9,Di.bind(null,n,r,a,t),void 0,null),null===Tu)throw Error(o(349));0!=(30&hi)||Oi(n,t,a)}return a}function Oi(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Di(e,t,n,r){t.value=n,t.getSnapshot=r,zi(t)&&ji(e)}function Ni(e,t,n){return n((function(){zi(t)&&ji(e)}))}function zi(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function ji(e){var t=To(e,1);null!==t&&rs(t,e,1,-1)}function Fi(e){var t=xi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:_i,lastRenderedState:e},t.queue=e,e=e.dispatch=nl.bind(null,mi,e),[t.memoizedState,e]}function Ui(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Mi(){return Bi().memoizedState}function Ii(e,t,n,r){var a=xi();mi.flags|=e,a.memoizedState=Ui(1|t,n,void 0,void 0===r?null:r)}function Vi(e,t,n,r){var a=Bi();r=void 0===r?null:r;var o=void 0;if(null!==gi){var i=gi.memoizedState;if(o=i.destroy,null!==r&&ki(r,i.deps))return void(a.memoizedState=Ui(t,n,o,r))}mi.flags|=e,a.memoizedState=Ui(1|t,n,o,r)}function qi(e,t){return Ii(8390656,8,e,t)}function Hi(e,t){return Vi(2048,8,e,t)}function Wi(e,t){return Vi(4,2,e,t)}function $i(e,t){return Vi(4,4,e,t)}function Zi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Yi(e,t,n){return n=null!=n?n.concat([e]):null,Vi(4,4,Zi.bind(null,t,e),n)}function Qi(){}function Ki(e,t){var n=Bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ki(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xi(e,t){var n=Bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ki(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Gi(e,t,n){return 0==(21&hi)?(e.baseState&&(e.baseState=!1,Al=!0),e.memoizedState=n):(lr(n,t)||(n=mt(),mi.lanes|=n,ju|=n,e.baseState=!0),t)}function Ji(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pi.transition;pi.transition={};try{e(!1),t()}finally{bt=n,pi.transition=r}}function el(){return Bi().memoizedState}function tl(e,t,n){var r=ns(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rl(e)?al(t,n):null!==(n=Po(e,t,n,r))&&(rs(n,e,r,ts()),ol(n,t,r))}function nl(e,t,n){var r=ns(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rl(e))al(t,a);else{var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=o(i,n);if(a.hasEagerState=!0,a.eagerState=l,lr(l,i)){var u=t.interleaved;return null===u?(a.next=a,_o(t)):(a.next=u.next,u.next=a),void(t.interleaved=a)}}catch(e){}null!==(n=Po(e,t,a,r))&&(rs(n,e,r,a=ts()),ol(n,t,r))}}function rl(e){var t=e.alternate;return e===mi||null!==t&&t===mi}function al(e,t){bi=yi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function ol(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var il={readContext:xo,useCallback:wi,useContext:wi,useEffect:wi,useImperativeHandle:wi,useInsertionEffect:wi,useLayoutEffect:wi,useMemo:wi,useReducer:wi,useRef:wi,useState:wi,useDebugValue:wi,useDeferredValue:wi,useTransition:wi,useMutableSource:wi,useSyncExternalStore:wi,useId:wi,unstable_isNewReconciler:!1},ll={readContext:xo,useCallback:function(e,t){return xi().memoizedState=[e,void 0===t?null:t],e},useContext:xo,useEffect:qi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ii(4194308,4,Zi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ii(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ii(4,2,e,t)},useMemo:function(e,t){var n=xi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=xi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tl.bind(null,mi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},xi().memoizedState=e},useState:Fi,useDebugValue:Qi,useDeferredValue:function(e){return xi().memoizedState=e},useTransition:function(){var e=Fi(!1),t=e[0];return e=Ji.bind(null,e[1]),xi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=mi,a=xi();if(ao){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Tu)throw Error(o(349));0!=(30&hi)||Oi(r,t,n)}a.memoizedState=n;var i={value:n,getSnapshot:t};return a.queue=i,qi(Ni.bind(null,r,i,e),[e]),r.flags|=2048,Ui(9,Di.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=xi(),t=Tu.identifierPrefix;if(ao){var n=Xa;t=":"+t+"R"+(n=(Ka&~(1<<32-it(Ka)-1)).toString(32)+n),0<(n=Ai++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=Ci++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ul={readContext:xo,useCallback:Ki,useContext:xo,useEffect:Hi,useImperativeHandle:Yi,useInsertionEffect:Wi,useLayoutEffect:$i,useMemo:Xi,useReducer:Pi,useRef:Mi,useState:function(){return Pi(_i)},useDebugValue:Qi,useDeferredValue:function(e){return Gi(Bi(),gi.memoizedState,e)},useTransition:function(){return[Pi(_i)[0],Bi().memoizedState]},useMutableSource:Li,useSyncExternalStore:Ri,useId:el,unstable_isNewReconciler:!1},sl={readContext:xo,useCallback:Ki,useContext:xo,useEffect:Hi,useImperativeHandle:Yi,useInsertionEffect:Wi,useLayoutEffect:$i,useMemo:Xi,useReducer:Ti,useRef:Mi,useState:function(){return Ti(_i)},useDebugValue:Qi,useDeferredValue:function(e){var t=Bi();return null===gi?t.memoizedState=e:Gi(t,gi.memoizedState,e)},useTransition:function(){return[Ti(_i)[0],Bi().memoizedState]},useMutableSource:Li,useSyncExternalStore:Ri,useId:el,unstable_isNewReconciler:!1};function cl(e,t){try{var n="",r=t;do{n+=I(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function dl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=Do(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wu||(Wu=!0,$u=r),fl(0,t)},n}function ml(e,t,n){(n=Do(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){fl(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){fl(0,t),"function"!=typeof r&&(null===Zu?Zu=new Set([this]):Zu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function gl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pl;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=xs.bind(null,e,t,n),t.then(e,e))}function vl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function yl(e,t,n,r,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Do(-1,1)).tag=2,No(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}var bl=A.ReactCurrentOwner,Al=!1;function Cl(e,t,n,r){t.child=null===e?Go(t,null,n,r):Xo(t,e.child,n,r)}function wl(e,t,n,r,a){n=n.render;var o=t.ref;return So(t,a),r=Ei(e,t,n,r,o,a),n=Si(),null===e||Al?(ao&&n&&eo(t),t.flags|=1,Cl(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Wl(e,t,a))}function kl(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||Os(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ns(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,El(e,t,o,r,a))}if(o=e.child,0==(e.lanes&a)){var i=o.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(i,r)&&e.ref===t.ref)return Wl(e,t,a)}return t.flags|=1,(e=Ds(o,r)).ref=t.ref,e.return=t,t.child=e}function El(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(ur(o,r)&&e.ref===t.ref){if(Al=!1,t.pendingProps=r=o,0==(e.lanes&a))return t.lanes=e.lanes,Wl(e,t,a);0!=(131072&e.flags)&&(Al=!0)}}return Bl(e,t,n,r,a)}function Sl(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},xa(Du,Ou),Ou|=n;else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,xa(Du,Ou),Ou|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,xa(Du,Ou),Ou|=r}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,xa(Du,Ou),Ou|=r;return Cl(e,t,a,n),t.child}function xl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Bl(e,t,n,r,a){var o=Ra(n)?Ta:_a.current;return o=La(t,o),So(t,a),n=Ei(e,t,n,r,o,a),r=Si(),null===e||Al?(ao&&r&&eo(t),t.flags|=1,Cl(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Wl(e,t,a))}function _l(e,t,n,r,a){if(Ra(n)){var o=!0;za(t)}else o=!1;if(So(t,a),null===t.stateNode)Hl(e,t),Ho(t,n,r),$o(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?xo(s):La(t,s=Ra(n)?Ta:_a.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&Wo(t,i,r,s),Lo=!1;var f=t.memoizedState;i.state=f,Fo(t,r,i,a),u=t.memoizedState,l!==r||f!==u||Pa.current||Lo?("function"==typeof c&&(Io(t,n,c,r),u=t.memoizedState),(l=Lo||qo(t,n,l,r,f,u,s))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Oo(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:vo(t.type,l),i.props=s,d=t.pendingProps,f=i.context,u="object"==typeof(u=n.contextType)&&null!==u?xo(u):La(t,u=Ra(n)?Ta:_a.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==d||f!==u)&&Wo(t,i,r,u),Lo=!1,f=t.memoizedState,i.state=f,Fo(t,r,i,a);var h=t.memoizedState;l!==d||f!==h||Pa.current||Lo?("function"==typeof p&&(Io(t,n,p,r),h=t.memoizedState),(s=Lo||qo(t,n,s,r,f,h,u)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Pl(e,t,n,r,o,a)}function Pl(e,t,n,r,a,o){xl(e,t);var i=0!=(128&t.flags);if(!r&&!i)return a&&ja(t,n,!1),Wl(e,t,o);r=t.stateNode,bl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Xo(t,e.child,null,o),t.child=Xo(t,null,l,o)):Cl(e,t,l,o),t.memoizedState=r.state,a&&ja(t,n,!0),t.child}function Tl(e){var t=e.stateNode;t.pendingContext?Da(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Da(0,t.context,!1),ai(e,t.containerInfo)}function Ll(e,t,n,r,a){return ho(),mo(a),t.flags|=256,Cl(e,t,n,r),t.child}var Rl,Ol,Dl,Nl,zl={dehydrated:null,treeContext:null,retryLane:0};function jl(e){return{baseLanes:e,cachePool:null,transitions:null}}function Fl(e,t,n){var r,a=t.pendingProps,i=ui.current,l=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),xa(ui,1&i),null===e)return so(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(u=a.children,e=a.fallback,l?(a=t.mode,l=t.child,u={mode:"hidden",children:u},0==(1&a)&&null!==l?(l.childLanes=0,l.pendingProps=u):l=js(u,a,0,null),e=zs(e,a,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=jl(n),t.memoizedState=zl,e):Ul(t,u));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,a,i,l){if(n)return 256&t.flags?(t.flags&=-257,Ml(e,t,l,r=dl(Error(o(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,a=t.mode,r=js({mode:"visible",children:r.children},a,0,null),(i=zs(i,a,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,0!=(1&t.mode)&&Xo(t,e.child,null,l),t.child.memoizedState=jl(l),t.memoizedState=zl,i);if(0==(1&t.mode))return Ml(e,t,l,null);if("$!"===a.data){if(r=a.nextSibling&&a.nextSibling.dataset)var u=r.dgst;return r=u,Ml(e,t,l,r=dl(i=Error(o(419)),r,void 0))}if(u=0!=(l&e.childLanes),Al||u){if(null!==(r=Tu)){switch(l&-l){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=0!=(a&(r.suspendedLanes|l))?0:a)&&a!==i.retryLane&&(i.retryLane=a,To(e,a),rs(r,e,a,-1))}return gs(),Ml(e,t,l,r=dl(Error(o(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=_s.bind(null,e),a._reactRetry=t,null):(e=i.treeContext,ro=sa(a.nextSibling),no=t,ao=!0,oo=null,null!==e&&(Za[Ya++]=Ka,Za[Ya++]=Xa,Za[Ya++]=Qa,Ka=e.id,Xa=e.overflow,Qa=t),(t=Ul(t,r.children)).flags|=4096,t)}(e,t,u,a,r,i,n);if(l){l=a.fallback,u=t.mode,r=(i=e.child).sibling;var s={mode:"hidden",children:a.children};return 0==(1&u)&&t.child!==i?((a=t.child).childLanes=0,a.pendingProps=s,t.deletions=null):(a=Ds(i,s)).subtreeFlags=14680064&i.subtreeFlags,null!==r?l=Ds(r,l):(l=zs(l,u,n,null)).flags|=2,l.return=t,a.return=t,a.sibling=l,t.child=a,a=l,l=t.child,u=null===(u=e.child.memoizedState)?jl(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},l.memoizedState=u,l.childLanes=e.childLanes&~n,t.memoizedState=zl,a}return e=(l=e.child).sibling,a=Ds(l,{mode:"visible",children:a.children}),0==(1&t.mode)&&(a.lanes=n),a.return=t,a.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=a,t.memoizedState=null,a}function Ul(e,t){return(t=js({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Ml(e,t,n,r){return null!==r&&mo(r),Xo(t,e.child,null,n),(e=Ul(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Il(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Eo(e.return,t,n)}function Vl(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function ql(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Cl(e,t,r.children,n),0!=(2&(r=ui.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Il(e,n,t);else if(19===e.tag)Il(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(xa(ui,r),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===si(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Vl(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===si(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Vl(t,!0,n,null,o);break;case"together":Vl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Hl(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Wl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),ju|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Ds(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ds(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function $l(e,t){if(!ao)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Zl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Yl(e,t,n){var r=t.pendingProps;switch(to(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Zl(t),null;case 1:case 17:return Ra(t.type)&&Oa(),Zl(t),null;case 3:return r=t.stateNode,oi(),Sa(Pa),Sa(_a),di(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==oo&&(ls(oo),oo=null))),Ol(e,t),Zl(t),null;case 5:li(t);var a=ri(ni.current);if(n=t.type,null!==e&&null!=t.stateNode)Dl(e,t,n,r,a),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Zl(t),null}if(e=ri(ei.current),fo(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[fa]=t,r[pa]=i,e=0!=(1&t.mode),n){case"dialog":Ur("cancel",r),Ur("close",r);break;case"iframe":case"object":case"embed":Ur("load",r);break;case"video":case"audio":for(a=0;a<Nr.length;a++)Ur(Nr[a],r);break;case"source":Ur("error",r);break;case"img":case"image":case"link":Ur("error",r),Ur("load",r);break;case"details":Ur("toggle",r);break;case"input":K(r,i),Ur("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Ur("invalid",r);break;case"textarea":ae(r,i),Ur("invalid",r)}for(var u in ye(n,i),a=null,i)if(i.hasOwnProperty(u)){var s=i[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==i.suppressHydrationWarning&&Gr(r.textContent,s,e),a=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==i.suppressHydrationWarning&&Gr(r.textContent,s,e),a=["children",""+s]):l.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Ur("scroll",r)}switch(n){case"input":$(r),J(r,i,!0);break;case"textarea":$(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Jr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[fa]=t,e[pa]=r,Rl(e,t,!1,!1),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":Ur("cancel",e),Ur("close",e),a=r;break;case"iframe":case"object":case"embed":Ur("load",e),a=r;break;case"video":case"audio":for(a=0;a<Nr.length;a++)Ur(Nr[a],e);a=r;break;case"source":Ur("error",e),a=r;break;case"img":case"image":case"link":Ur("error",e),Ur("load",e),a=r;break;case"details":Ur("toggle",e),a=r;break;case"input":K(e,r),a=Q(e,r),Ur("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=j({},r,{value:void 0}),Ur("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Ur("invalid",e)}for(i in ye(n,a),s=a)if(s.hasOwnProperty(i)){var c=s[i];"style"===i?ge(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&fe(e,c):"number"==typeof c&&fe(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=c&&"onScroll"===i&&Ur("scroll",e):null!=c&&b(e,i,c,u))}switch(n){case"input":$(e),J(e,r,!1);break;case"textarea":$(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+H(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Zl(t),null;case 6:if(e&&null!=t.stateNode)Nl(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=ri(ni.current),ri(ei.current),fo(t)){if(r=t.stateNode,n=t.memoizedProps,r[fa]=t,(i=r.nodeValue!==n)&&null!==(e=no))switch(e.tag){case 3:Gr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Gr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[fa]=t,t.stateNode=r}return Zl(t),null;case 13:if(Sa(ui),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ao&&null!==ro&&0!=(1&t.mode)&&0==(128&t.flags))po(),ho(),t.flags|=98560,i=!1;else if(i=fo(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(o(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(o(317));i[fa]=t}else ho(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Zl(t),i=!1}else null!==oo&&(ls(oo),oo=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ui.current)?0===Nu&&(Nu=3):gs())),null!==t.updateQueue&&(t.flags|=4),Zl(t),null);case 4:return oi(),Ol(e,t),null===e&&Vr(t.stateNode.containerInfo),Zl(t),null;case 10:return ko(t.type._context),Zl(t),null;case 19:if(Sa(ui),null===(i=t.memoizedState))return Zl(t),null;if(r=0!=(128&t.flags),null===(u=i.rendering))if(r)$l(i,!1);else{if(0!==Nu||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=si(e))){for(t.flags|=128,$l(i,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return xa(ui,1&ui.current|2),t.child}e=e.sibling}null!==i.tail&&Xe()>qu&&(t.flags|=128,r=!0,$l(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=si(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),$l(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!ao)return Zl(t),null}else 2*Xe()-i.renderingStartTime>qu&&1073741824!==n&&(t.flags|=128,r=!0,$l(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=i.last)?n.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Xe(),t.sibling=null,n=ui.current,xa(ui,r?1&n|2:1&n),t):(Zl(t),null);case 22:case 23:return fs(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Ou)&&(Zl(t),6&t.subtreeFlags&&(t.flags|=8192)):Zl(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}function Ql(e,t){switch(to(t),t.tag){case 1:return Ra(t.type)&&Oa(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return oi(),Sa(Pa),Sa(_a),di(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return li(t),null;case 13:if(Sa(ui),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));ho()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Sa(ui),null;case 4:return oi(),null;case 10:return ko(t.type._context),null;case 22:case 23:return fs(),null;default:return null}}Rl=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ol=function(){},Dl=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,ri(ei.current);var o,i=null;switch(n){case"input":a=Q(e,a),r=Q(e,r),i=[];break;case"select":a=j({},a,{value:void 0}),r=j({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ye(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var u=a[c];for(o in u)u.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(o in u)!u.hasOwnProperty(o)||s&&s.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in s)s.hasOwnProperty(o)&&u[o]!==s[o]&&(n||(n={}),n[o]=s[o])}else n||(i||(i=[]),i.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(i=i||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(i=i||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Ur("scroll",e),i||u===s||(i=[])):(i=i||[]).push(c,s))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},Nl=function(e,t,n,r){n!==r&&(t.flags|=4)};var Kl=!1,Xl=!1,Gl="function"==typeof WeakSet?WeakSet:Set,Jl=null;function eu(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Ss(e,t,n)}else n.current=null}function tu(e,t,n){try{n()}catch(n){Ss(e,t,n)}}var nu=!1;function ru(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&tu(t,n,o)}a=a.next}while(a!==r)}}function au(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ou(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function iu(e){var t=e.alternate;null!==t&&(e.alternate=null,iu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fa],delete t[pa],delete t[ma],delete t[ga],delete t[va]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function lu(e){return 5===e.tag||3===e.tag||4===e.tag}function uu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||lu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function su(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(su(e,t,n),e=e.sibling;null!==e;)su(e,t,n),e=e.sibling}function cu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cu(e,t,n),e=e.sibling;null!==e;)cu(e,t,n),e=e.sibling}var du=null,fu=!1;function pu(e,t,n){for(n=n.child;null!==n;)hu(e,t,n),n=n.sibling}function hu(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Xl||eu(n,t);case 6:var r=du,a=fu;du=null,pu(e,t,n),fu=a,null!==(du=r)&&(fu?(e=du,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):du.removeChild(n.stateNode));break;case 18:null!==du&&(fu?(e=du,n=n.stateNode,8===e.nodeType?ua(e.parentNode,n):1===e.nodeType&&ua(e,n),Vt(e)):ua(du,n.stateNode));break;case 4:r=du,a=fu,du=n.stateNode.containerInfo,fu=!0,pu(e,t,n),du=r,fu=a;break;case 0:case 11:case 14:case 15:if(!Xl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,i=o.destroy;o=o.tag,void 0!==i&&(0!=(2&o)||0!=(4&o))&&tu(n,t,i),a=a.next}while(a!==r)}pu(e,t,n);break;case 1:if(!Xl&&(eu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Ss(n,t,e)}pu(e,t,n);break;case 21:pu(e,t,n);break;case 22:1&n.mode?(Xl=(r=Xl)||null!==n.memoizedState,pu(e,t,n),Xl=r):pu(e,t,n);break;default:pu(e,t,n)}}function mu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Gl),t.forEach((function(t){var r=Ps.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function gu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var i=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:du=u.stateNode,fu=!1;break e;case 3:case 4:du=u.stateNode.containerInfo,fu=!0;break e}u=u.return}if(null===du)throw Error(o(160));hu(i,l,a),du=null,fu=!1;var s=a.alternate;null!==s&&(s.return=null),a.return=null}catch(e){Ss(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)vu(t,e),t=t.sibling}function vu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gu(t,e),yu(e),4&r){try{ru(3,e,e.return),au(3,e)}catch(t){Ss(e,e.return,t)}try{ru(5,e,e.return)}catch(t){Ss(e,e.return,t)}}break;case 1:gu(t,e),yu(e),512&r&&null!==n&&eu(n,n.return);break;case 5:if(gu(t,e),yu(e),512&r&&null!==n&&eu(n,n.return),32&e.flags){var a=e.stateNode;try{fe(a,"")}catch(t){Ss(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===i.type&&null!=i.name&&X(a,i),be(u,l);var c=be(u,i);for(l=0;l<s.length;l+=2){var d=s[l],f=s[l+1];"style"===d?ge(a,f):"dangerouslySetInnerHTML"===d?de(a,f):"children"===d?fe(a,f):b(a,d,f,c)}switch(u){case"input":G(a,i);break;case"textarea":oe(a,i);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?ne(a,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(a,!!i.multiple,i.defaultValue,!0):ne(a,!!i.multiple,i.multiple?[]:"",!1))}a[pa]=i}catch(t){Ss(e,e.return,t)}}break;case 6:if(gu(t,e),yu(e),4&r){if(null===e.stateNode)throw Error(o(162));a=e.stateNode,i=e.memoizedProps;try{a.nodeValue=i}catch(t){Ss(e,e.return,t)}}break;case 3:if(gu(t,e),yu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Vt(t.containerInfo)}catch(t){Ss(e,e.return,t)}break;case 4:default:gu(t,e),yu(e);break;case 13:gu(t,e),yu(e),8192&(a=e.child).flags&&(i=null!==a.memoizedState,a.stateNode.isHidden=i,!i||null!==a.alternate&&null!==a.alternate.memoizedState||(Vu=Xe())),4&r&&mu(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Xl=(c=Xl)||d,gu(t,e),Xl=c):gu(t,e),yu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&0!=(1&e.mode))for(Jl=e,d=e.child;null!==d;){for(f=Jl=d;null!==Jl;){switch(h=(p=Jl).child,p.tag){case 0:case 11:case 14:case 15:ru(4,p,p.return);break;case 1:eu(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Ss(r,n,e)}}break;case 5:eu(p,p.return);break;case 22:if(null!==p.memoizedState){wu(f);continue}}null!==h?(h.return=p,Jl=h):wu(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{a=f.stateNode,c?"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=f.stateNode,l=null!=(s=f.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=me("display",l))}catch(t){Ss(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=c?"":f.memoizedProps}catch(t){Ss(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:gu(t,e),yu(e),4&r&&mu(e);case 21:}}function yu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(lu(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(fe(a,""),r.flags&=-33),cu(e,uu(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;su(e,uu(e),i);break;default:throw Error(o(161))}}catch(t){Ss(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bu(e,t,n){Jl=e,Au(e,t,n)}function Au(e,t,n){for(var r=0!=(1&e.mode);null!==Jl;){var a=Jl,o=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||Kl;if(!i){var l=a.alternate,u=null!==l&&null!==l.memoizedState||Xl;l=Kl;var s=Xl;if(Kl=i,(Xl=u)&&!s)for(Jl=a;null!==Jl;)u=(i=Jl).child,22===i.tag&&null!==i.memoizedState?ku(a):null!==u?(u.return=i,Jl=u):ku(a);for(;null!==o;)Jl=o,Au(o,t,n),o=o.sibling;Jl=a,Kl=l,Xl=s}Cu(e)}else 0!=(8772&a.subtreeFlags)&&null!==o?(o.return=a,Jl=o):Cu(e)}}function Cu(e){for(;null!==Jl;){var t=Jl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Xl||au(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xl)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:vo(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&Uo(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Uo(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&Vt(f)}}}break;default:throw Error(o(163))}Xl||512&t.flags&&ou(t)}catch(e){Ss(t,t.return,e)}}if(t===e){Jl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Jl=n;break}Jl=t.return}}function wu(e){for(;null!==Jl;){var t=Jl;if(t===e){Jl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Jl=n;break}Jl=t.return}}function ku(e){for(;null!==Jl;){var t=Jl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{au(4,t)}catch(e){Ss(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){Ss(t,a,e)}}var o=t.return;try{ou(t)}catch(e){Ss(t,o,e)}break;case 5:var i=t.return;try{ou(t)}catch(e){Ss(t,i,e)}}}catch(e){Ss(t,t.return,e)}if(t===e){Jl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Jl=l;break}Jl=t.return}}var Eu,Su=Math.ceil,xu=A.ReactCurrentDispatcher,Bu=A.ReactCurrentOwner,_u=A.ReactCurrentBatchConfig,Pu=0,Tu=null,Lu=null,Ru=0,Ou=0,Du=Ea(0),Nu=0,zu=null,ju=0,Fu=0,Uu=0,Mu=null,Iu=null,Vu=0,qu=1/0,Hu=null,Wu=!1,$u=null,Zu=null,Yu=!1,Qu=null,Ku=0,Xu=0,Gu=null,Ju=-1,es=0;function ts(){return 0!=(6&Pu)?Xe():-1!==Ju?Ju:Ju=Xe()}function ns(e){return 0==(1&e.mode)?1:0!=(2&Pu)&&0!==Ru?Ru&-Ru:null!==go.transition?(0===es&&(es=mt()),es):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Kt(e.type)}function rs(e,t,n,r){if(50<Xu)throw Xu=0,Gu=null,Error(o(185));vt(e,n,r),0!=(2&Pu)&&e===Tu||(e===Tu&&(0==(2&Pu)&&(Fu|=n),4===Nu&&us(e,Ru)),as(e,r),1===n&&0===Pu&&0==(1&t.mode)&&(qu=Xe()+500,Ua&&Va()))}function as(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-it(o),l=1<<i,u=a[i];-1===u?0!=(l&n)&&0==(l&r)||(a[i]=pt(l,t)):u<=t&&(e.expiredLanes|=l),o&=~l}}(e,t);var r=ft(e,e===Tu?Ru:0);if(0===r)null!==n&&Ye(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ye(n),1===t)0===e.tag?function(e){Ua=!0,Ia(e)}(ss.bind(null,e)):Ia(ss.bind(null,e)),ia((function(){0==(6&Pu)&&Va()})),n=null;else{switch(At(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ts(n,os.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function os(e,t){if(Ju=-1,es=0,0!=(6&Pu))throw Error(o(327));var n=e.callbackNode;if(ks()&&e.callbackNode!==n)return null;var r=ft(e,e===Tu?Ru:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=vs(e,r);else{t=r;var a=Pu;Pu|=2;var i=ms();for(Tu===e&&Ru===t||(Hu=null,qu=Xe()+500,ps(e,t));;)try{bs();break}catch(t){hs(e,t)}wo(),xu.current=i,Pu=a,null!==Lu?t=0:(Tu=null,Ru=0,t=Nu)}if(0!==t){if(2===t&&0!==(a=ht(e))&&(r=a,t=is(e,a)),1===t)throw n=zu,ps(e,0),us(e,r),as(e,Xe()),n;if(6===t)us(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!lr(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=vs(e,r))&&0!==(i=ht(e))&&(r=i,t=is(e,i)),1===t))throw n=zu,ps(e,0),us(e,r),as(e,Xe()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:ws(e,Iu,Hu);break;case 3:if(us(e,r),(130023424&r)===r&&10<(t=Vu+500-Xe())){if(0!==ft(e,0))break;if(((a=e.suspendedLanes)&r)!==r){ts(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(ws.bind(null,e,Iu,Hu),t);break}ws(e,Iu,Hu);break;case 4:if(us(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>a&&(a=l),r&=~i}if(r=a,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Su(r/1960))-r)){e.timeoutHandle=ra(ws.bind(null,e,Iu,Hu),r);break}ws(e,Iu,Hu);break;default:throw Error(o(329))}}}return as(e,Xe()),e.callbackNode===n?os.bind(null,e):null}function is(e,t){var n=Mu;return e.current.memoizedState.isDehydrated&&(ps(e,t).flags|=256),2!==(e=vs(e,t))&&(t=Iu,Iu=n,null!==t&&ls(t)),e}function ls(e){null===Iu?Iu=e:Iu.push.apply(Iu,e)}function us(e,t){for(t&=~Uu,t&=~Fu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function ss(e){if(0!=(6&Pu))throw Error(o(327));ks();var t=ft(e,0);if(0==(1&t))return as(e,Xe()),null;var n=vs(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=is(e,r))}if(1===n)throw n=zu,ps(e,0),us(e,t),as(e,Xe()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,ws(e,Iu,Hu),as(e,Xe()),null}function cs(e,t){var n=Pu;Pu|=1;try{return e(t)}finally{0===(Pu=n)&&(qu=Xe()+500,Ua&&Va())}}function ds(e){null!==Qu&&0===Qu.tag&&0==(6&Pu)&&ks();var t=Pu;Pu|=1;var n=_u.transition,r=bt;try{if(_u.transition=null,bt=1,e)return e()}finally{bt=r,_u.transition=n,0==(6&(Pu=t))&&Va()}}function fs(){Ou=Du.current,Sa(Du)}function ps(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==Lu)for(n=Lu.return;null!==n;){var r=n;switch(to(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Oa();break;case 3:oi(),Sa(Pa),Sa(_a),di();break;case 5:li(r);break;case 4:oi();break;case 13:case 19:Sa(ui);break;case 10:ko(r.type._context);break;case 22:case 23:fs()}n=n.return}if(Tu=e,Lu=e=Ds(e.current,null),Ru=Ou=t,Nu=0,zu=null,Uu=Fu=ju=0,Iu=Mu=null,null!==Bo){for(t=0;t<Bo.length;t++)if(null!==(r=(n=Bo[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var i=o.next;o.next=a,r.next=i}n.pending=r}Bo=null}return e}function hs(e,t){for(;;){var n=Lu;try{if(wo(),fi.current=il,yi){for(var r=mi.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}yi=!1}if(hi=0,vi=gi=mi=null,bi=!1,Ai=0,Bu.current=null,null===n||null===n.return){Nu=1,zu=t,Lu=null;break}e:{var i=e,l=n.return,u=n,s=t;if(t=Ru,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,d=u,f=d.tag;if(0==(1&d.mode)&&(0===f||11===f||15===f)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var h=vl(l);if(null!==h){h.flags&=-257,yl(h,l,u,0,t),1&h.mode&&gl(i,c,t),s=c;var m=(t=h).updateQueue;if(null===m){var g=new Set;g.add(s),t.updateQueue=g}else m.add(s);break e}if(0==(1&t)){gl(i,c,t),gs();break e}s=Error(o(426))}else if(ao&&1&u.mode){var v=vl(l);if(null!==v){0==(65536&v.flags)&&(v.flags|=256),yl(v,l,u,0,t),mo(cl(s,u));break e}}i=s=cl(s,u),4!==Nu&&(Nu=2),null===Mu?Mu=[i]:Mu.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,jo(i,hl(0,s,t));break e;case 1:u=s;var y=i.type,b=i.stateNode;if(0==(128&i.flags)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Zu||!Zu.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,jo(i,ml(i,u,t));break e}}i=i.return}while(null!==i)}Cs(n)}catch(e){t=e,Lu===n&&null!==n&&(Lu=n=n.return);continue}break}}function ms(){var e=xu.current;return xu.current=il,null===e?il:e}function gs(){0!==Nu&&3!==Nu&&2!==Nu||(Nu=4),null===Tu||0==(268435455&ju)&&0==(268435455&Fu)||us(Tu,Ru)}function vs(e,t){var n=Pu;Pu|=2;var r=ms();for(Tu===e&&Ru===t||(Hu=null,ps(e,t));;)try{ys();break}catch(t){hs(e,t)}if(wo(),Pu=n,xu.current=r,null!==Lu)throw Error(o(261));return Tu=null,Ru=0,Nu}function ys(){for(;null!==Lu;)As(Lu)}function bs(){for(;null!==Lu&&!Qe();)As(Lu)}function As(e){var t=Eu(e.alternate,e,Ou);e.memoizedProps=e.pendingProps,null===t?Cs(e):Lu=t,Bu.current=null}function Cs(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Yl(n,t,Ou)))return void(Lu=n)}else{if(null!==(n=Ql(n,t)))return n.flags&=32767,void(Lu=n);if(null===e)return Nu=6,void(Lu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Lu=t);Lu=t=e}while(null!==t);0===Nu&&(Nu=5)}function ws(e,t,n){var r=bt,a=_u.transition;try{_u.transition=null,bt=1,function(e,t,n,r){do{ks()}while(null!==Qu);if(0!=(6&Pu))throw Error(o(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-it(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,i),e===Tu&&(Lu=Tu=null,Ru=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Yu||(Yu=!0,Ts(tt,(function(){return ks(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=_u.transition,_u.transition=null;var l=bt;bt=1;var u=Pu;Pu|=4,Bu.current=null,function(e,t){if(ea=Ht,pr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,u=-1,s=-1,c=0,d=0,f=e,p=null;t:for(;;){for(var h;f!==n||0!==a&&3!==f.nodeType||(u=l+a),f!==i||0!==r&&3!==f.nodeType||(s=l+r),3===f.nodeType&&(l+=f.nodeValue.length),null!==(h=f.firstChild);)p=f,f=h;for(;;){if(f===e)break t;if(p===n&&++c===a&&(u=l),p===i&&++d===r&&(s=l),null!==(h=f.nextSibling))break;p=(f=p).parentNode}f=h}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},Ht=!1,Jl=t;null!==Jl;)if(e=(t=Jl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Jl=e;else for(;null!==Jl;){t=Jl;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,v=m.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?g:vo(t.type,g),v);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var A=t.stateNode.containerInfo;1===A.nodeType?A.textContent="":9===A.nodeType&&A.documentElement&&A.removeChild(A.documentElement);break;default:throw Error(o(163))}}catch(e){Ss(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Jl=e;break}Jl=t.return}m=nu,nu=!1}(e,n),vu(n,e),hr(ta),Ht=!!ea,ta=ea=null,e.current=n,bu(n,e,a),Ke(),Pu=u,bt=l,_u.transition=i}else e.current=n;if(Yu&&(Yu=!1,Qu=e,Ku=a),0===(i=e.pendingLanes)&&(Zu=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),as(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((a=t[n]).value,{componentStack:a.stack,digest:a.digest});if(Wu)throw Wu=!1,e=$u,$u=null,e;0!=(1&Ku)&&0!==e.tag&&ks(),0!=(1&(i=e.pendingLanes))?e===Gu?Xu++:(Xu=0,Gu=e):Xu=0,Va()}(e,t,n,r)}finally{_u.transition=a,bt=r}return null}function ks(){if(null!==Qu){var e=At(Ku),t=_u.transition,n=bt;try{if(_u.transition=null,bt=16>e?16:e,null===Qu)var r=!1;else{if(e=Qu,Qu=null,Ku=0,0!=(6&Pu))throw Error(o(331));var a=Pu;for(Pu|=4,Jl=e.current;null!==Jl;){var i=Jl,l=i.child;if(0!=(16&Jl.flags)){var u=i.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Jl=c;null!==Jl;){var d=Jl;switch(d.tag){case 0:case 11:case 15:ru(8,d,i)}var f=d.child;if(null!==f)f.return=d,Jl=f;else for(;null!==Jl;){var p=(d=Jl).sibling,h=d.return;if(iu(d),d===c){Jl=null;break}if(null!==p){p.return=h,Jl=p;break}Jl=h}}}var m=i.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var v=g.sibling;g.sibling=null,g=v}while(null!==g)}}Jl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Jl=l;else e:for(;null!==Jl;){if(0!=(2048&(i=Jl).flags))switch(i.tag){case 0:case 11:case 15:ru(9,i,i.return)}var y=i.sibling;if(null!==y){y.return=i.return,Jl=y;break e}Jl=i.return}}var b=e.current;for(Jl=b;null!==Jl;){var A=(l=Jl).child;if(0!=(2064&l.subtreeFlags)&&null!==A)A.return=l,Jl=A;else e:for(l=b;null!==Jl;){if(0!=(2048&(u=Jl).flags))try{switch(u.tag){case 0:case 11:case 15:au(9,u)}}catch(e){Ss(u,u.return,e)}if(u===l){Jl=null;break e}var C=u.sibling;if(null!==C){C.return=u.return,Jl=C;break e}Jl=u.return}}if(Pu=a,Va(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,_u.transition=t}}return!1}function Es(e,t,n){e=No(e,t=hl(0,t=cl(n,t),1),1),t=ts(),null!==e&&(vt(e,1,t),as(e,t))}function Ss(e,t,n){if(3===e.tag)Es(e,e,n);else for(;null!==t;){if(3===t.tag){Es(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Zu||!Zu.has(r))){t=No(t,e=ml(t,e=cl(n,e),1),1),e=ts(),null!==t&&(vt(t,1,e),as(t,e));break}}t=t.return}}function xs(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ts(),e.pingedLanes|=e.suspendedLanes&n,Tu===e&&(Ru&n)===n&&(4===Nu||3===Nu&&(130023424&Ru)===Ru&&500>Xe()-Vu?ps(e,0):Uu|=n),as(e,t)}function Bs(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=ts();null!==(e=To(e,t))&&(vt(e,t,n),as(e,n))}function _s(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Bs(e,n)}function Ps(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),Bs(e,n)}function Ts(e,t){return Ze(e,t)}function Ls(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Rs(e,t,n,r){return new Ls(e,t,n,r)}function Os(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ds(e,t){var n=e.alternate;return null===n?((n=Rs(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ns(e,t,n,r,a,i){var l=2;if(r=e,"function"==typeof e)Os(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case k:return zs(n.children,a,i,t);case E:l=8,a|=8;break;case S:return(e=Rs(12,n,t,2|a)).elementType=S,e.lanes=i,e;case P:return(e=Rs(13,n,t,a)).elementType=P,e.lanes=i,e;case T:return(e=Rs(19,n,t,a)).elementType=T,e.lanes=i,e;case O:return js(n,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case x:l=10;break e;case B:l=9;break e;case _:l=11;break e;case L:l=14;break e;case R:l=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Rs(l,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function zs(e,t,n,r){return(e=Rs(7,e,r,t)).lanes=n,e}function js(e,t,n,r){return(e=Rs(22,e,r,t)).elementType=O,e.lanes=n,e.stateNode={isHidden:!1},e}function Fs(e,t,n){return(e=Rs(6,e,null,t)).lanes=n,e}function Us(e,t,n){return(t=Rs(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ms(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Is(e,t,n,r,a,o,i,l,u){return e=new Ms(e,t,n,l,u),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Rs(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ro(o),e}function Vs(e){if(!e)return Ba;e:{if(Ve(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ra(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Ra(n))return Na(e,n,t)}return t}function qs(e,t,n,r,a,o,i,l,u){return(e=Is(n,r,!0,e,0,o,0,l,u)).context=Vs(null),n=e.current,(o=Do(r=ts(),a=ns(n))).callback=null!=t?t:null,No(n,o,a),e.current.lanes=a,vt(e,a,r),as(e,r),e}function Hs(e,t,n,r){var a=t.current,o=ts(),i=ns(a);return n=Vs(n),null===t.context?t.context=n:t.pendingContext=n,(t=Do(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=No(a,t,i))&&(rs(e,a,i,o),zo(e,a,i)),i}function Ws(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function $s(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Zs(e,t){$s(e,t),(e=e.alternate)&&$s(e,t)}Eu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Pa.current)Al=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return Al=!1,function(e,t,n){switch(t.tag){case 3:Tl(t),ho();break;case 5:ii(t);break;case 1:Ra(t.type)&&za(t);break;case 4:ai(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;xa(yo,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(xa(ui,1&ui.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Fl(e,t,n):(xa(ui,1&ui.current),null!==(e=Wl(e,t,n))?e.sibling:null);xa(ui,1&ui.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return ql(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),xa(ui,ui.current),r)break;return null;case 22:case 23:return t.lanes=0,Sl(e,t,n)}return Wl(e,t,n)}(e,t,n);Al=0!=(131072&e.flags)}else Al=!1,ao&&0!=(1048576&t.flags)&&Ja(t,$a,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Hl(e,t),e=t.pendingProps;var a=La(t,_a.current);So(t,n),a=Ei(null,t,r,e,a,n);var i=Si();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ra(r)?(i=!0,za(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Ro(t),a.updater=Vo,t.stateNode=a,a._reactInternals=t,$o(t,r,e,n),t=Pl(null,t,r,!0,i,n)):(t.tag=0,ao&&i&&eo(t),Cl(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Hl(e,t),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return Os(e)?1:0;if(null!=e){if((e=e.$$typeof)===_)return 11;if(e===L)return 14}return 2}(r),e=vo(r,e),a){case 0:t=Bl(null,t,r,e,n);break e;case 1:t=_l(null,t,r,e,n);break e;case 11:t=wl(null,t,r,e,n);break e;case 14:t=kl(null,t,r,vo(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,Bl(e,t,r,a=t.elementType===r?a:vo(r,a),n);case 1:return r=t.type,a=t.pendingProps,_l(e,t,r,a=t.elementType===r?a:vo(r,a),n);case 3:e:{if(Tl(t),null===e)throw Error(o(387));r=t.pendingProps,a=(i=t.memoizedState).element,Oo(e,t),Fo(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Ll(e,t,r,n,a=cl(Error(o(423)),t));break e}if(r!==a){t=Ll(e,t,r,n,a=cl(Error(o(424)),t));break e}for(ro=sa(t.stateNode.containerInfo.firstChild),no=t,ao=!0,oo=null,n=Go(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ho(),r===a){t=Wl(e,t,n);break e}Cl(e,t,r,n)}t=t.child}return t;case 5:return ii(t),null===e&&so(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,l=a.children,na(r,a)?l=null:null!==i&&na(r,i)&&(t.flags|=32),xl(e,t),Cl(e,t,l,n),t.child;case 6:return null===e&&so(t),null;case 13:return Fl(e,t,n);case 4:return ai(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Xo(t,null,r,n):Cl(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,wl(e,t,r,a=t.elementType===r?a:vo(r,a),n);case 7:return Cl(e,t,t.pendingProps,n),t.child;case 8:case 12:return Cl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,i=t.memoizedProps,l=a.value,xa(yo,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===a.children&&!Pa.current){t=Wl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var u=i.dependencies;if(null!==u){l=i.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===i.tag){(s=Do(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?s.next=s:(s.next=d.next,d.next=s),c.pending=s}}i.lanes|=n,null!==(s=i.alternate)&&(s.lanes|=n),Eo(i.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(o(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),Eo(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}Cl(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,So(t,n),r=r(a=xo(a)),t.flags|=1,Cl(e,t,r,n),t.child;case 14:return a=vo(r=t.type,t.pendingProps),kl(e,t,r,a=vo(r.type,a),n);case 15:return El(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:vo(r,a),Hl(e,t),t.tag=1,Ra(r)?(e=!0,za(t)):e=!1,So(t,n),Ho(t,r,a),$o(t,r,a,n),Pl(null,t,r,!0,e,n);case 19:return ql(e,t,n);case 22:return Sl(e,t,n)}throw Error(o(156,t.tag))};var Ys="function"==typeof reportError?reportError:function(e){console.error(e)};function Qs(e){this._internalRoot=e}function Ks(e){this._internalRoot=e}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Gs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Js(){}function ec(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o;if("function"==typeof a){var l=a;a=function(){var e=Ws(i);l.call(e)}}Hs(t,i,e,a)}else i=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Ws(i);o.call(e)}}var i=qs(t,r,e,0,null,!1,0,"",Js);return e._reactRootContainer=i,e[ha]=i.current,Vr(8===e.nodeType?e.parentNode:e),ds(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var l=r;r=function(){var e=Ws(u);l.call(e)}}var u=Is(e,0,!1,null,0,!1,0,"",Js);return e._reactRootContainer=u,e[ha]=u.current,Vr(8===e.nodeType?e.parentNode:e),ds((function(){Hs(t,u,n,r)})),u}(n,t,e,a,r);return Ws(i)}Ks.prototype.render=Qs.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Hs(e,t,null,null)},Ks.prototype.unmount=Qs.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;ds((function(){Hs(null,e,null,null)})),t[ha]=null}},Ks.prototype.unstable_scheduleHydration=function(e){if(e){var t=Et();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Ot.length&&0!==t&&t<Ot[n].priority;n++);Ot.splice(n,0,e),0===n&&jt(e)}},Ct=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(yt(t,1|n),as(t,Xe()),0==(6&Pu)&&(qu=Xe()+500,Va()))}break;case 13:ds((function(){var t=To(e,1);if(null!==t){var n=ts();rs(t,e,1,n)}})),Zs(e,1)}},wt=function(e){if(13===e.tag){var t=To(e,134217728);null!==t&&rs(t,e,134217728,ts()),Zs(e,134217728)}},kt=function(e){if(13===e.tag){var t=ns(e),n=To(e,t);null!==n&&rs(n,e,t,ts()),Zs(e,t)}},Et=function(){return bt},St=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},we=function(e,t,n){switch(t){case"input":if(G(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=Ca(r);if(!a)throw Error(o(90));Z(r),G(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},_e=cs,Pe=ds;var tc={usingClientEntryPoint:!1,Events:[ba,Aa,Ca,xe,Be,cs]},nc={findFiberByHostInstance:ya,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:A.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=We(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ac=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ac.isDisabled&&ac.supportsFiber)try{at=ac.inject(rc),ot=ac}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xs(t))throw Error(o(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:w,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xs(e))throw Error(o(299));var n=!1,r="",a=Ys;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Is(e,1,!1,null,0,n,0,r,a),e[ha]=t.current,Vr(8===e.nodeType?e.parentNode:e),new Qs(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=We(t))?null:e.stateNode},t.flushSync=function(e){return ds(e)},t.hydrate=function(e,t,n){if(!Gs(t))throw Error(o(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xs(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,a=!1,i="",l=Ys;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=qs(t,null,e,1,null!=n?n:null,a,0,i,l),e[ha]=t.current,Vr(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Ks(t)},t.render=function(e,t,n){if(!Gs(t))throw Error(o(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Gs(e))throw Error(o(40));return!!e._reactRootContainer&&(ds((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[ha]=null}))})),!0)},t.unstable_batchedUpdates=cs,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Gs(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(935);t.s=r.createRoot,r.hydrateRoot},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var A=b.prototype=new y;A.constructor=b,m(A,v.prototype),A.isPureReactComponent=!0;var C=Array.isArray,w=Object.prototype.hasOwnProperty,k={current:null},E={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,r){var a,o={},i=null,l=null;if(null!=t)for(a in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)w.call(t,a)&&!E.hasOwnProperty(a)&&(o[a]=t[a]);var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(a in u=e.defaultProps)void 0===o[a]&&(o[a]=u[a]);return{$$typeof:n,type:e,key:i,ref:l,props:o,_owner:k.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var B=/\/+/g;function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,a,o,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return i=i(u=e),e=""===o?"."+_(u,0):o,C(i)?(a="",null!=e&&(a=e.replace(B,"$&/")+"/"),P(i,t,a,"",(function(e){return e}))):null!=i&&(x(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(B,"$&/")+"/")+e)),t.push(i)),1;if(u=0,o=""===o?".":o+":",C(e))for(var s=0;s<e.length;s++){var c=o+_(l=e[s],s);u+=P(l,t,a,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(l=e.next()).done;)u+=P(l=l.value,t,a,c=o+_(l,s++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function T(e,t,n){if(null==e)return e;var r=[],a=0;return P(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function L(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var R={current:null},O={transition:null},D={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:O,ReactCurrentOwner:k};t.Children={map:T,forEach:function(e,t,n){T(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=a,t.Profiler=i,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=D,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=m({},e.props),o=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=k.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)w.call(t,s)&&!E.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}return{$$typeof:n,type:e.type,key:o,ref:i,props:a,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:L}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=O.transition;O.transition={};try{e()}finally{O.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return R.current.useCallback(e,t)},t.useContext=function(e){return R.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return R.current.useDeferredValue(e)},t.useEffect=function(e,t){return R.current.useEffect(e,t)},t.useId=function(){return R.current.useId()},t.useImperativeHandle=function(e,t,n){return R.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return R.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return R.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return R.current.useMemo(e,t)},t.useReducer=function(e,t,n){return R.current.useReducer(e,t,n)},t.useRef=function(e){return R.current.useRef(e)},t.useState=function(e){return R.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return R.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return R.current.useTransition()},t.version="18.2.0"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var l=2*(r+1)-1,u=e[l],s=l+1,c=e[s];if(0>o(u,n))s<a&&0>o(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[l]=n,r=l);else{if(!(s<a&&0>o(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var s=[],c=[],d=1,f=null,p=3,h=!1,m=!1,g=!1,v="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function A(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function C(e){if(g=!1,A(e),!m)if(null!==r(s))m=!0,O(w);else{var t=r(c);null!==t&&D(C,t.startTime-e)}}function w(e,n){m=!1,g&&(g=!1,y(x),x=-1),h=!0;var o=p;try{for(A(n),f=r(s);null!==f&&(!(f.expirationTime>n)||e&&!P());){var i=f.callback;if("function"==typeof i){f.callback=null,p=f.priorityLevel;var l=i(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?f.callback=l:f===r(s)&&a(s),A(n)}else a(s);f=r(s)}if(null!==f)var u=!0;else{var d=r(c);null!==d&&D(C,d.startTime-n),u=!1}return u}finally{f=null,p=o,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var k,E=!1,S=null,x=-1,B=5,_=-1;function P(){return!(t.unstable_now()-_<B)}function T(){if(null!==S){var e=t.unstable_now();_=e;var n=!0;try{n=S(!0,e)}finally{n?k():(E=!1,S=null)}}else E=!1}if("function"==typeof b)k=function(){b(T)};else if("undefined"!=typeof MessageChannel){var L=new MessageChannel,R=L.port2;L.port1.onmessage=T,k=function(){R.postMessage(null)}}else k=function(){v(T,0)};function O(e){S=e,E||(E=!0,k())}function D(e,n){x=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,O(w))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):B=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,o){var i=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>i?(e.sortIndex=o,n(c,e),null===r(s)&&e===r(c)&&(g?(y(x),x=-1):g=!0,D(C,o-i))):(e.sortIndex=l,n(s,e),m||h||(m=!0,O(w))),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],l=0;l<e.length;l++){var u=e[l],s=r.base?u[0]+r.base:u[0],c=o[s]||0,d="".concat(s," ").concat(c);o[s]=c+1;var f=n(d),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=a(p,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:h,references:1})}i.push(d)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var l=n(o[i]);t[l].references--}for(var u=r(e,a),s=0;s<o.length;s++){var c=n(o[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=u}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},479:e=>{e.exports=function e(t,n){if(t&&n)return e(t)(n);if("function"!=typeof t)throw new TypeError("need wrapper function");return Object.keys(t).forEach((function(e){r[e]=t[e]})),r;function r(){for(var e=new Array(arguments.length),n=0;n<e.length;n++)e[n]=arguments[n];var r=t.apply(this,e),a=e[e.length-1];return"function"==typeof r&&r!==a&&Object.keys(a).forEach((function(e){r[e]=a[e]})),r}}},208:(e,t,n)=>{"use strict";e.exports=n.p+"03f4ac379bf609891e0f.ttf"},893:(e,t,n)=>{"use strict";e.exports=n.p+"2abc7011d7e80ebe7846.ttf"},13:(e,t,n)=>{"use strict";e.exports=n.p+"7228a1c750b75b23bdb4.ttf"},969:(e,t,n)=>{"use strict";e.exports=n.p+"fc2b5060f7accec5cf74.ttf"},210:(e,t,n)=>{"use strict";e.exports=n.p+"1cbb1b79a23478cc89ad.ttf"},309:(e,t,n)=>{"use strict";e.exports=n.p+"215bc3fae31be9818472.png"},558:(e,t,n)=>{"use strict";e.exports=n.p+"be8395b2e0690c80f595.png"},567:(e,t,n)=>{"use strict";e.exports=n.p+"5bc7a549ccb9e7288f69.jpeg"},443:(e,t,n)=>{"use strict";e.exports=n.p+"213af9a08b3780819fd3.jpg"}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={id:e,exports:{}};return n[e](o,o.exports,a),o.exports}a.m=n,a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,a.d(o,i),o},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.p="/",a.b=document.baseURI||self.location.href,a.nc=void 0,(()=>{"use strict";var e,t=a(294),n=a.t(t,2),r=a(745),o=a(935),i=a.t(o,2);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const u="popstate";function s(e,t){if(!1===e||null==e)throw new Error(t)}function c(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function d(e,t){return{usr:e.state,key:e.key,idx:t}}function f(e,t,n,r){return void 0===n&&(n=null),l({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?h(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function p(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function h(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var m;!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(m||(m={}));const g=new Set(["lazy","caseSensitive","path","id","index","children"]);function v(e,t,n,r){return void 0===n&&(n=[]),void 0===r&&(r={}),e.map(((e,a)=>{let o=[...n,a],i="string"==typeof e.id?e.id:o.join("-");if(s(!0!==e.index||!e.children,"Cannot specify children on an index route"),s(!r[i],'Found a route id collision on id "'+i+"\".  Route id's must be globally unique within Data Router usages"),function(e){return!0===e.index}(e)){let n=l({},e,t(e),{id:i});return r[i]=n,n}{let n=l({},e,t(e),{id:i,children:void 0});return r[i]=n,e.children&&(n.children=v(e.children,t,o,r)),n}}))}function y(e,t,n){void 0===n&&(n="/");let r=R(("string"==typeof t?h(t):t).pathname||"/",n);if(null==r)return null;let a=b(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let o=null;for(let e=0;null==o&&e<a.length;++e)o=P(a[e],L(r));return o}function b(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let a=(e,a,o)=>{let i={relativePath:void 0===o?e.path||"":o,caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};i.relativePath.startsWith("/")&&(s(i.relativePath.startsWith(r),'Absolute route path "'+i.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),i.relativePath=i.relativePath.slice(r.length));let l=j([r,i.relativePath]),u=n.concat(i);e.children&&e.children.length>0&&(s(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),b(e.children,t,u,l)),(null!=e.path||e.index)&&t.push({path:l,score:_(l,e.index),routesMeta:u})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of A(e.path))a(e,t,n);else a(e,t)})),t}function A(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,a=n.endsWith("?"),o=n.replace(/\?$/,"");if(0===r.length)return a?[o,""]:[o];let i=A(r.join("/")),l=[];return l.push(...i.map((e=>""===e?o:[o,e].join("/")))),a&&l.push(...i),l.map((t=>e.startsWith("/")&&""===t?"/":t))}const C=/^:\w+$/,w=3,k=2,E=1,S=10,x=-2,B=e=>"*"===e;function _(e,t){let n=e.split("/"),r=n.length;return n.some(B)&&(r+=x),t&&(r+=k),n.filter((e=>!B(e))).reduce(((e,t)=>e+(C.test(t)?w:""===t?E:S)),r)}function P(e,t){let{routesMeta:n}=e,r={},a="/",o=[];for(let e=0;e<n.length;++e){let i=n[e],l=e===n.length-1,u="/"===a?t:t.slice(a.length)||"/",s=T({path:i.relativePath,caseSensitive:i.caseSensitive,end:l},u);if(!s)return null;Object.assign(r,s.params);let c=i.route;o.push({params:r,pathname:j([a,s.pathname]),pathnameBase:F(j([a,s.pathnameBase])),route:c}),"/"!==s.pathnameBase&&(a=j([a,s.pathnameBase]))}return o}function T(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),c("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:(\w+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?a+="\\/*$":""!==e&&"/"!==e&&(a+="(?:(?=\\/|$))"),[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],i=o.replace(/(.)\/+$/,"$1"),l=a.slice(1);return{params:r.reduce(((e,t,n)=>{let{paramName:r,isOptional:a}=t;if("*"===r){let e=l[n]||"";i=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}const u=l[n];return e[r]=a&&!u?void 0:function(e,t){try{return decodeURIComponent(e)}catch(n){return c(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(u||"",r),e}),{}),pathname:o,pathnameBase:i,pattern:e}}function L(e){try{return decodeURI(e)}catch(t){return c(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function R(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function O(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function D(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function N(e,t){let n=D(e);return t?n.map(((t,n)=>n===e.length-1?t.pathname:t.pathnameBase)):n.map((e=>e.pathnameBase))}function z(e,t,n,r){let a;void 0===r&&(r=!1),"string"==typeof e?a=h(e):(a=l({},e),s(!a.pathname||!a.pathname.includes("?"),O("?","pathname","search",a)),s(!a.pathname||!a.pathname.includes("#"),O("#","pathname","hash",a)),s(!a.search||!a.search.includes("#"),O("#","search","hash",a)));let o,i=""===e||""===a.pathname,u=i?"/":a.pathname;if(null==u)o=n;else{let e=t.length-1;if(!r&&u.startsWith("..")){let t=u.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}o=e>=0?t[e]:"/"}let c=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?h(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:U(r),hash:M(a)}}(a,o),d=u&&"/"!==u&&u.endsWith("/"),f=(i||"."===u)&&n.endsWith("/");return c.pathname.endsWith("/")||!d&&!f||(c.pathname+="/"),c}const j=e=>e.join("/").replace(/\/\/+/g,"/"),F=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),U=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",M=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;class I{constructor(e,t,n,r){void 0===r&&(r=!1),this.status=e,this.statusText=t||"",this.internal=r,n instanceof Error?(this.data=n.toString(),this.error=n):this.data=n}}function V(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}const q=["post","put","patch","delete"],H=new Set(q),W=["get",...q],$=new Set(W),Z=new Set([301,302,303,307,308]),Y=new Set([307,308]),Q={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},K={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},X={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},G=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,J=e=>({hasErrorBoundary:Boolean(e.hasErrorBoundary)}),ee="remix-router-transitions";function te(e,t,n,r,a,o,i,l){let u,s;if(i){u=[];for(let e of t)if(u.push(e),e.route.id===i){s=e;break}}else u=t,s=t[t.length-1];let c=z(a||".",N(u,o),R(e.pathname,n)||e.pathname,"path"===l);return null==a&&(c.search=e.search,c.hash=e.hash),null!=a&&""!==a&&"."!==a||!s||!s.route.index||Ee(c.search)||(c.search=c.search?c.search.replace(/^\?/,"?index&"):"?index"),r&&"/"!==n&&(c.pathname="/"===c.pathname?n:j([n,c.pathname])),p(c)}function ne(e,t,n,r){if(!r||!function(e){return null!=e&&("formData"in e&&null!=e.formData||"body"in e&&void 0!==e.body)}(r))return{path:n};if(r.formMethod&&(a=r.formMethod,!$.has(a.toLowerCase())))return{path:n,error:me(405,{method:r.formMethod})};var a;let o,i,l=()=>({path:n,error:me(400,{type:"invalid-body"})}),u=r.formMethod||"get",c=e?u.toUpperCase():u.toLowerCase(),d=ve(n);if(void 0!==r.body){if("text/plain"===r.formEncType){if(!Ce(c))return l();let e="string"==typeof r.body?r.body:r.body instanceof FormData||r.body instanceof URLSearchParams?Array.from(r.body.entries()).reduce(((e,t)=>{let[n,r]=t;return""+e+n+"="+r+"\n"}),""):String(r.body);return{path:n,submission:{formMethod:c,formAction:d,formEncType:r.formEncType,formData:void 0,json:void 0,text:e}}}if("application/json"===r.formEncType){if(!Ce(c))return l();try{let e="string"==typeof r.body?JSON.parse(r.body):r.body;return{path:n,submission:{formMethod:c,formAction:d,formEncType:r.formEncType,formData:void 0,json:e,text:void 0}}}catch(e){return l()}}}if(s("function"==typeof FormData,"FormData is not available in this environment"),r.formData)o=se(r.formData),i=r.formData;else if(r.body instanceof FormData)o=se(r.body),i=r.body;else if(r.body instanceof URLSearchParams)o=r.body,i=ce(o);else if(null==r.body)o=new URLSearchParams,i=new FormData;else try{o=new URLSearchParams(r.body),i=ce(o)}catch(e){return l()}let f={formMethod:c,formAction:d,formEncType:r&&r.formEncType||"application/x-www-form-urlencoded",formData:i,json:void 0,text:void 0};if(Ce(f.formMethod))return{path:n,submission:f};let m=h(n);return t&&m.search&&Ee(m.search)&&o.append("index",""),m.search="?"+o,{path:p(m),submission:f}}function re(e,t,n,r,a,o,i,u,s,c,d,f,p,h,m,g){let v=g?Object.values(g)[0]:m?Object.values(m)[0]:void 0,b=e.createURL(t.location),A=e.createURL(a),C=g?Object.keys(g)[0]:void 0,w=function(e,t){let n=e;if(t){let r=e.findIndex((e=>e.route.id===t));r>=0&&(n=e.slice(0,r))}return n}(n,C).filter(((e,n)=>{let{route:a}=e;if(a.lazy)return!0;if(null==a.loader)return!1;if(o)return!!a.loader.hydrate||void 0===t.loaderData[a.id]&&(!t.errors||void 0===t.errors[a.id]);if(function(e,t,n){let r=!t||n.route.id!==t.route.id,a=void 0===e[n.route.id];return r||a}(t.loaderData,t.matches[n],e)||u.some((t=>t===e.route.id)))return!0;let s=t.matches[n],c=e;return oe(e,l({currentUrl:b,currentParams:s.params,nextUrl:A,nextParams:c.params},r,{actionResult:v,defaultShouldRevalidate:i||b.pathname+b.search===A.pathname+A.search||b.search!==A.search||ae(s,c)}))})),k=[];return d.forEach(((e,a)=>{if(o||!n.some((t=>t.route.id===e.routeId))||c.has(a))return;let u=y(p,e.path,h);if(!u)return void k.push({key:a,routeId:e.routeId,path:e.path,matches:null,match:null,controller:null});let d=t.fetchers.get(a),m=Se(u,e.path),g=!1;g=!f.has(a)&&(!!s.includes(a)||(d&&"idle"!==d.state&&void 0===d.data?i:oe(m,l({currentUrl:b,currentParams:t.matches[t.matches.length-1].params,nextUrl:A,nextParams:n[n.length-1].params},r,{actionResult:v,defaultShouldRevalidate:i})))),g&&k.push({key:a,routeId:e.routeId,path:e.path,matches:u,match:m,controller:new AbortController})})),[w,k]}function ae(e,t){let n=e.route.path;return e.pathname!==t.pathname||null!=n&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function oe(e,t){if(e.route.shouldRevalidate){let n=e.route.shouldRevalidate(t);if("boolean"==typeof n)return n}return t.defaultShouldRevalidate}async function ie(e,t,n){if(!e.lazy)return;let r=await e.lazy();if(!e.lazy)return;let a=n[e.id];s(a,"No route found in manifest");let o={};for(let e in r){let t=void 0!==a[e]&&"hasErrorBoundary"!==e;c(!t,'Route "'+a.id+'" has a static property "'+e+'" defined but its lazy function is also returning a value for this property. The lazy route property "'+e+'" will be ignored.'),t||g.has(e)||(o[e]=r[e])}Object.assign(a,o),Object.assign(a,l({},t(a),{lazy:void 0}))}async function le(e,t,n,r,a,o,i,l,u){let c,d,f;void 0===u&&(u={});let p=e=>{let r,a=new Promise(((e,t)=>r=t));return f=()=>r(),t.signal.addEventListener("abort",f),Promise.race([e({request:t,params:n.params,context:u.requestContext}),a])};try{let r=n.route[e];if(n.route.lazy)if(r){let e,t=await Promise.all([p(r).catch((t=>{e=t})),ie(n.route,o,a)]);if(e)throw e;d=t[0]}else{if(await ie(n.route,o,a),r=n.route[e],!r){if("action"===e){let e=new URL(t.url),r=e.pathname+e.search;throw me(405,{method:t.method,pathname:r,routeId:n.route.id})}return{type:m.data,data:void 0}}d=await p(r)}else{if(!r){let e=new URL(t.url);throw me(404,{pathname:e.pathname+e.search})}d=await p(r)}s(void 0!==d,"You defined "+("action"===e?"an action":"a loader")+' for route "'+n.route.id+"\" but didn't return anything from your `"+e+"` function. Please return a value or `null`.")}catch(e){c=m.error,d=e}finally{f&&t.signal.removeEventListener("abort",f)}if(null!=(h=d)&&"number"==typeof h.status&&"string"==typeof h.statusText&&"object"==typeof h.headers&&void 0!==h.body){let e,a=d.status;if(Z.has(a)){let e=d.headers.get("Location");if(s(e,"Redirects returned/thrown from loaders/actions must have a Location header"),G.test(e)){if(!u.isStaticRequest){let n=new URL(t.url),r=e.startsWith("//")?new URL(n.protocol+e):new URL(e),a=null!=R(r.pathname,i);r.origin===n.origin&&a&&(e=r.pathname+r.search+r.hash)}}else e=te(new URL(t.url),r.slice(0,r.indexOf(n)+1),i,!0,e,l);if(u.isStaticRequest)throw d.headers.set("Location",e),d;return{type:m.redirect,status:a,location:e,revalidate:null!==d.headers.get("X-Remix-Revalidate"),reloadDocument:null!==d.headers.get("X-Remix-Reload-Document")}}if(u.isRouteRequest)throw{type:c===m.error?m.error:m.data,response:d};try{let t=d.headers.get("Content-Type");e=t&&/\bapplication\/json\b/.test(t)?await d.json():await d.text()}catch(e){return{type:m.error,error:e}}return c===m.error?{type:c,error:new I(a,d.statusText,e),headers:d.headers}:{type:m.data,data:e,statusCode:d.status,headers:d.headers}}var h,g,v;return c===m.error?{type:c,error:d}:function(e){let t=e;return t&&"object"==typeof t&&"object"==typeof t.data&&"function"==typeof t.subscribe&&"function"==typeof t.cancel&&"function"==typeof t.resolveData}(d)?{type:m.deferred,deferredData:d,statusCode:null==(g=d.init)?void 0:g.status,headers:(null==(v=d.init)?void 0:v.headers)&&new Headers(d.init.headers)}:{type:m.data,data:d}}function ue(e,t,n,r){let a=e.createURL(ve(t)).toString(),o={signal:n};if(r&&Ce(r.formMethod)){let{formMethod:e,formEncType:t}=r;o.method=e.toUpperCase(),"application/json"===t?(o.headers=new Headers({"Content-Type":t}),o.body=JSON.stringify(r.json)):"text/plain"===t?o.body=r.text:"application/x-www-form-urlencoded"===t&&r.formData?o.body=se(r.formData):o.body=r.formData}return new Request(a,o)}function se(e){let t=new URLSearchParams;for(let[n,r]of e.entries())t.append(n,"string"==typeof r?r:r.name);return t}function ce(e){let t=new FormData;for(let[n,r]of e.entries())t.append(n,r);return t}function de(e,t,n,r,a,o,i,u){let{loaderData:c,errors:d}=function(e,t,n,r,a){let o,i={},l=null,u=!1,c={};return n.forEach(((n,d)=>{let f=t[d].route.id;if(s(!Ae(n),"Cannot handle redirect results in processLoaderData"),be(n)){let t=pe(e,f),a=n.error;r&&(a=Object.values(r)[0],r=void 0),l=l||{},null==l[t.route.id]&&(l[t.route.id]=a),i[f]=void 0,u||(u=!0,o=V(n.error)?n.error.status:500),n.headers&&(c[f]=n.headers)}else ye(n)?(a.set(f,n.deferredData),i[f]=n.deferredData.data):i[f]=n.data,null==n.statusCode||200===n.statusCode||u||(o=n.statusCode),n.headers&&(c[f]=n.headers)})),r&&(l=r,i[Object.keys(r)[0]]=void 0),{loaderData:i,errors:l,statusCode:o||200,loaderHeaders:c}}(t,n,r,a,u);for(let t=0;t<o.length;t++){let{key:n,match:r,controller:a}=o[t];s(void 0!==i&&void 0!==i[t],"Did not find corresponding fetcher result");let u=i[t];if(!a||!a.signal.aborted)if(be(u)){let t=pe(e.matches,null==r?void 0:r.route.id);d&&d[t.route.id]||(d=l({},d,{[t.route.id]:u.error})),e.fetchers.delete(n)}else if(Ae(u))s(!1,"Unhandled fetcher revalidation redirect");else if(ye(u))s(!1,"Unhandled fetcher deferred data");else{let t=Pe(u.data);e.fetchers.set(n,t)}}return{loaderData:c,errors:d}}function fe(e,t,n,r){let a=l({},t);for(let o of n){let n=o.route.id;if(t.hasOwnProperty(n)?void 0!==t[n]&&(a[n]=t[n]):void 0!==e[n]&&o.route.loader&&(a[n]=e[n]),r&&r.hasOwnProperty(n))break}return a}function pe(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function he(e){let t=1===e.length?e[0]:e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function me(e,t){let{pathname:n,routeId:r,method:a,type:o}=void 0===t?{}:t,i="Unknown Server Error",l="Unknown @remix-run/router error";return 400===e?(i="Bad Request",a&&n&&r?l="You made a "+a+' request to "'+n+'" but did not provide a `loader` for route "'+r+'", so there is no way to handle the request.':"defer-action"===o?l="defer() is not supported in actions":"invalid-body"===o&&(l="Unable to encode submission body")):403===e?(i="Forbidden",l='Route "'+r+'" does not match URL "'+n+'"'):404===e?(i="Not Found",l='No route matches URL "'+n+'"'):405===e&&(i="Method Not Allowed",a&&n&&r?l="You made a "+a.toUpperCase()+' request to "'+n+'" but did not provide an `action` for route "'+r+'", so there is no way to handle the request.':a&&(l='Invalid request method "'+a.toUpperCase()+'"')),new I(e||500,i,new Error(l),!0)}function ge(e){for(let t=e.length-1;t>=0;t--){let n=e[t];if(Ae(n))return{result:n,idx:t}}}function ve(e){return p(l({},"string"==typeof e?h(e):e,{hash:""}))}function ye(e){return e.type===m.deferred}function be(e){return e.type===m.error}function Ae(e){return(e&&e.type)===m.redirect}function Ce(e){return H.has(e.toLowerCase())}async function we(e,t,n,r,a,o){for(let i=0;i<n.length;i++){let l=n[i],u=t[i];if(!u)continue;let c=e.find((e=>e.route.id===u.route.id)),d=null!=c&&!ae(c,u)&&void 0!==(o&&o[u.route.id]);if(ye(l)&&(a||d)){let e=r[i];s(e,"Expected an AbortSignal for revalidating fetcher deferred result"),await ke(l,e,a).then((e=>{e&&(n[i]=e||n[i])}))}}}async function ke(e,t,n){if(void 0===n&&(n=!1),!await e.deferredData.resolveData(t)){if(n)try{return{type:m.data,data:e.deferredData.unwrappedData}}catch(e){return{type:m.error,error:e}}return{type:m.data,data:e.deferredData.data}}}function Ee(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function Se(e,t){let n="string"==typeof t?h(t).search:t.search;if(e[e.length-1].route.index&&Ee(n||""))return e[e.length-1];let r=D(e);return r[r.length-1]}function xe(e){let{formMethod:t,formAction:n,formEncType:r,text:a,formData:o,json:i}=e;if(t&&n&&r)return null!=a?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:void 0,text:a}:null!=o?{formMethod:t,formAction:n,formEncType:r,formData:o,json:void 0,text:void 0}:void 0!==i?{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:i,text:void 0}:void 0}function Be(e,t){return t?{state:"loading",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}:{state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function _e(e,t){return e?{state:"loading",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function Pe(e){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e}}function Te(){return Te=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Te.apply(this,arguments)}Symbol("deferred");const Le=t.createContext(null),Re=t.createContext(null),Oe=t.createContext(null),De=t.createContext(null),Ne=t.createContext({outlet:null,matches:[],isDataRoute:!1}),ze=t.createContext(null);function je(){return null!=t.useContext(De)}function Fe(){return je()||s(!1),t.useContext(De).location}function Ue(e){t.useContext(Oe).static||t.useLayoutEffect(e)}function Me(){let{isDataRoute:e}=t.useContext(Ne);return e?function(){let{router:e}=function(e){let n=t.useContext(Le);return n||s(!1),n}(Ye.UseNavigateStable),n=Ke(Qe.UseNavigateStable),r=t.useRef(!1);Ue((()=>{r.current=!0}));let a=t.useCallback((function(t,a){void 0===a&&(a={}),r.current&&("number"==typeof t?e.navigate(t):e.navigate(t,Te({fromRouteId:n},a)))}),[e,n]);return a}():function(){je()||s(!1);let e=t.useContext(Le),{basename:n,future:r,navigator:a}=t.useContext(Oe),{matches:o}=t.useContext(Ne),{pathname:i}=Fe(),l=JSON.stringify(N(o,r.v7_relativeSplatPath)),u=t.useRef(!1);Ue((()=>{u.current=!0}));let c=t.useCallback((function(t,r){if(void 0===r&&(r={}),!u.current)return;if("number"==typeof t)return void a.go(t);let o=z(t,JSON.parse(l),i,"path"===r.relative);null==e&&"/"!==n&&(o.pathname="/"===o.pathname?n:j([n,o.pathname])),(r.replace?a.replace:a.push)(o,r.state,r)}),[n,a,l,i,e]);return c}()}const Ie=t.createContext(null);function Ve(e,n){let{relative:r}=void 0===n?{}:n,{future:a}=t.useContext(Oe),{matches:o}=t.useContext(Ne),{pathname:i}=Fe(),l=JSON.stringify(N(o,a.v7_relativeSplatPath));return t.useMemo((()=>z(e,JSON.parse(l),i,"path"===r)),[e,l,i,r])}function qe(n,r,a,o){je()||s(!1);let{navigator:i}=t.useContext(Oe),{matches:l}=t.useContext(Ne),u=l[l.length-1],c=u?u.params:{},d=(u&&u.pathname,u?u.pathnameBase:"/");u&&u.route;let f,p=Fe();if(r){var m;let e="string"==typeof r?h(r):r;"/"===d||(null==(m=e.pathname)?void 0:m.startsWith(d))||s(!1),f=e}else f=p;let g=f.pathname||"/",v=y(n,{pathname:"/"===d?g:g.slice(d.length)||"/"}),b=function(e,n,r,a){var o;if(void 0===n&&(n=[]),void 0===r&&(r=null),void 0===a&&(a=null),null==e){var i;if(null==(i=r)||!i.errors)return null;e=r.matches}let l=e,u=null==(o=r)?void 0:o.errors;if(null!=u){let e=l.findIndex((e=>e.route.id&&(null==u?void 0:u[e.route.id])));e>=0||s(!1),l=l.slice(0,Math.min(l.length,e+1))}let c=!1,d=-1;if(r&&a&&a.v7_partialHydration)for(let e=0;e<l.length;e++){let t=l[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(d=e),t.route.id){let{loaderData:e,errors:n}=r,a=t.route.loader&&void 0===e[t.route.id]&&(!n||void 0===n[t.route.id]);if(t.route.lazy||a){c=!0,l=d>=0?l.slice(0,d+1):[l[0]];break}}}return l.reduceRight(((e,a,o)=>{let i,s=!1,f=null,p=null;var h;r&&(i=u&&a.route.id?u[a.route.id]:void 0,f=a.route.errorElement||We,c&&(d<0&&0===o?(Ge[h="route-fallback"]||(Ge[h]=!0),s=!0,p=null):d===o&&(s=!0,p=a.route.hydrateFallbackElement||null)));let m=n.concat(l.slice(0,o+1)),g=()=>{let n;return n=i?f:s?p:a.route.Component?t.createElement(a.route.Component,null):a.route.element?a.route.element:e,t.createElement(Ze,{match:a,routeContext:{outlet:e,matches:m,isDataRoute:null!=r},children:n})};return r&&(a.route.ErrorBoundary||a.route.errorElement||0===o)?t.createElement($e,{location:r.location,revalidation:r.revalidation,component:f,error:i,children:g(),routeContext:{outlet:null,matches:m,isDataRoute:!0}}):g()}),null)}(v&&v.map((e=>Object.assign({},e,{params:Object.assign({},c,e.params),pathname:j([d,i.encodeLocation?i.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?d:j([d,i.encodeLocation?i.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),l,a,o);return r&&b?t.createElement(De.Provider,{value:{location:Te({pathname:"/",search:"",hash:"",state:null,key:"default"},f),navigationType:e.Pop}},b):b}function He(){let e=Xe(),n=V(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,a={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:a},r):null,null)}const We=t.createElement(He,null);class $e extends t.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?t.createElement(Ne.Provider,{value:this.props.routeContext},t.createElement(ze.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function Ze(e){let{routeContext:n,match:r,children:a}=e,o=t.useContext(Le);return o&&o.static&&o.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(o.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement(Ne.Provider,{value:n},a)}var Ye=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(Ye||{}),Qe=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(Qe||{});function Ke(e){let n=function(e){let n=t.useContext(Ne);return n||s(!1),n}(),r=n.matches[n.matches.length-1];return r.route.id||s(!1),r.route.id}function Xe(){var e;let n=t.useContext(ze),r=function(e){let n=t.useContext(Re);return n||s(!1),n}(Qe.UseRouteError),a=Ke(Qe.UseRouteError);return void 0!==n?n:null==(e=r.errors)?void 0:e[a]}const Ge={};function Je(e){return function(e){let n=t.useContext(Ne).outlet;return n?t.createElement(Ie.Provider,{value:e},n):n}(e.context)}function et(e){s(!1)}function tt(n){let{basename:r="/",children:a=null,location:o,navigationType:i=e.Pop,navigator:l,static:u=!1,future:c}=n;je()&&s(!1);let d=r.replace(/^\/*/,"/"),f=t.useMemo((()=>({basename:d,navigator:l,static:u,future:Te({v7_relativeSplatPath:!1},c)})),[d,c,l,u]);"string"==typeof o&&(o=h(o));let{pathname:p="/",search:m="",hash:g="",state:v=null,key:y="default"}=o,b=t.useMemo((()=>{let e=R(p,d);return null==e?null:{location:{pathname:e,search:m,hash:g,state:v,key:y},navigationType:i}}),[d,p,m,g,v,y,i]);return null==b?null:t.createElement(Oe.Provider,{value:f},t.createElement(De.Provider,{children:a,value:b}))}function nt(e){let{children:t,location:n}=e;return qe(rt(t),n)}function rt(e,n){void 0===n&&(n=[]);let r=[];return t.Children.forEach(e,((e,a)=>{if(!t.isValidElement(e))return;let o=[...n,a];if(e.type===t.Fragment)return void r.push.apply(r,rt(e.props.children,o));e.type!==et&&s(!1),e.props.index&&e.props.children&&s(!1);let i={id:e.props.id||o.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(i.children=rt(e.props.children,o)),r.push(i)})),r}function at(){return at=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},at.apply(this,arguments)}n.startTransition,new Promise((()=>{})),t.Component,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const ot=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"];function it(e){if(!e)return null;let t=Object.entries(e),n={};for(let[e,r]of t)if(r&&"RouteErrorResponse"===r.__type)n[e]=new I(r.status,r.statusText,r.data,!0===r.internal);else if(r&&"Error"===r.__type){if(r.__subType){let t=window[r.__subType];if("function"==typeof t)try{let a=new t(r.message);a.stack="",n[e]=a}catch(e){}}if(null==n[e]){let t=new Error(r.message);t.stack="",n[e]=t}}else n[e]=r;return n}const lt=t.createContext({isTransitioning:!1}),ut=t.createContext(new Map),st=n.startTransition,ct=i.flushSync;function dt(e){ct?ct(e):e()}class ft{constructor(){this.status="pending",this.promise=new Promise(((e,t)=>{this.resolve=t=>{"pending"===this.status&&(this.status="resolved",e(t))},this.reject=e=>{"pending"===this.status&&(this.status="rejected",t(e))}}))}}function pt(e){let{fallbackElement:n,router:r,future:a}=e,[o,i]=t.useState(r.state),[l,u]=t.useState(),[s,c]=t.useState({isTransitioning:!1}),[d,f]=t.useState(),[p,h]=t.useState(),[m,g]=t.useState(),v=t.useRef(new Map),{v7_startTransition:y}=a||{},b=t.useCallback((e=>{y?function(e){st?st(e):e()}(e):e()}),[y]),A=t.useCallback(((e,t)=>{let{deletedFetchers:n,unstable_flushSync:a,unstable_viewTransitionOpts:o}=t;n.forEach((e=>v.current.delete(e))),e.fetchers.forEach(((e,t)=>{void 0!==e.data&&v.current.set(t,e.data)}));let l=null==r.window||"function"!=typeof r.window.document.startViewTransition;if(o&&!l){if(a){dt((()=>{p&&(d&&d.resolve(),p.skipTransition()),c({isTransitioning:!0,flushSync:!0,currentLocation:o.currentLocation,nextLocation:o.nextLocation})}));let t=r.window.document.startViewTransition((()=>{dt((()=>i(e)))}));return t.finished.finally((()=>{dt((()=>{f(void 0),h(void 0),u(void 0),c({isTransitioning:!1})}))})),void dt((()=>h(t)))}p?(d&&d.resolve(),p.skipTransition(),g({state:e,currentLocation:o.currentLocation,nextLocation:o.nextLocation})):(u(e),c({isTransitioning:!0,flushSync:!1,currentLocation:o.currentLocation,nextLocation:o.nextLocation}))}else a?dt((()=>i(e))):b((()=>i(e)))}),[r.window,p,d,v,b]);t.useLayoutEffect((()=>r.subscribe(A)),[r,A]),t.useEffect((()=>{s.isTransitioning&&!s.flushSync&&f(new ft)}),[s]),t.useEffect((()=>{if(d&&l&&r.window){let e=l,t=d.promise,n=r.window.document.startViewTransition((async()=>{b((()=>i(e))),await t}));n.finished.finally((()=>{f(void 0),h(void 0),u(void 0),c({isTransitioning:!1})})),h(n)}}),[b,l,d,r.window]),t.useEffect((()=>{d&&l&&o.location.key===l.location.key&&d.resolve()}),[d,p,o.location,l]),t.useEffect((()=>{!s.isTransitioning&&m&&(u(m.state),c({isTransitioning:!0,flushSync:!1,currentLocation:m.currentLocation,nextLocation:m.nextLocation}),g(void 0))}),[s.isTransitioning,m]),t.useEffect((()=>{}),[]);let C=t.useMemo((()=>({createHref:r.createHref,encodeLocation:r.encodeLocation,go:e=>r.navigate(e),push:(e,t,n)=>r.navigate(e,{state:t,preventScrollReset:null==n?void 0:n.preventScrollReset}),replace:(e,t,n)=>r.navigate(e,{replace:!0,state:t,preventScrollReset:null==n?void 0:n.preventScrollReset})})),[r]),w=r.basename||"/",k=t.useMemo((()=>({router:r,navigator:C,static:!1,basename:w})),[r,C,w]);return t.createElement(t.Fragment,null,t.createElement(Le.Provider,{value:k},t.createElement(Re.Provider,{value:o},t.createElement(ut.Provider,{value:v.current},t.createElement(lt.Provider,{value:s},t.createElement(tt,{basename:w,location:o.location,navigationType:o.historyAction,navigator:C,future:{v7_relativeSplatPath:r.future.v7_relativeSplatPath}},o.initialized||r.future.v7_partialHydration?t.createElement(ht,{routes:r.routes,future:r.future,state:o}):n))))),null)}function ht(e){let{routes:t,future:n,state:r}=e;return qe(t,void 0,r,n)}const mt="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,gt=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,vt=t.forwardRef((function(e,n){let r,{onClick:a,relative:o,reloadDocument:i,replace:l,state:u,target:c,to:d,preventScrollReset:f,unstable_viewTransition:h}=e,m=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,ot),{basename:g}=t.useContext(Oe),v=!1;if("string"==typeof d&&gt.test(d)&&(r=d,mt))try{let e=new URL(window.location.href),t=d.startsWith("//")?new URL(e.protocol+d):new URL(d),n=R(t.pathname,g);t.origin===e.origin&&null!=n?d=n+t.search+t.hash:v=!0}catch(e){}let y=function(e,n){let{relative:r}=void 0===n?{}:n;je()||s(!1);let{basename:a,navigator:o}=t.useContext(Oe),{hash:i,pathname:l,search:u}=Ve(e,{relative:r}),c=l;return"/"!==a&&(c="/"===l?a:j([a,l])),o.createHref({pathname:c,search:u,hash:i})}(d,{relative:o}),b=function(e,n){let{target:r,replace:a,state:o,preventScrollReset:i,relative:l,unstable_viewTransition:u}=void 0===n?{}:n,s=Me(),c=Fe(),d=Ve(e,{relative:l});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==a?a:p(c)===p(d);s(e,{replace:n,state:o,preventScrollReset:i,relative:l,unstable_viewTransition:u})}}),[c,s,d,a,o,r,e,i,l,u])}(d,{replace:l,state:u,target:c,preventScrollReset:f,relative:o,unstable_viewTransition:h});return t.createElement("a",at({},m,{href:r||y,onClick:v||i?a:function(e){a&&a(e),e.defaultPrevented||b(e)},ref:n,target:c}))}));var yt,bt;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(yt||(yt={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(bt||(bt={}));var At=a(379),Ct=a.n(At),wt=a(795),kt=a.n(wt),Et=a(569),St=a.n(Et),xt=a(565),Bt=a.n(xt),_t=a(216),Pt=a.n(_t),Tt=a(589),Lt=a.n(Tt),Rt=a(777),Ot={};Ot.styleTagTransform=Lt(),Ot.setAttributes=Bt(),Ot.insert=St().bind(null,"head"),Ot.domAPI=kt(),Ot.insertStyleElement=Pt(),Ct()(Rt.Z,Ot),Rt.Z&&Rt.Z.locals&&Rt.Z.locals;var Dt=a(863),Nt={};Nt.styleTagTransform=Lt(),Nt.setAttributes=Bt(),Nt.insert=St().bind(null,"head"),Nt.domAPI=kt(),Nt.insertStyleElement=Pt(),Ct()(Dt.Z,Nt);const zt=Dt.Z&&Dt.Z.locals?Dt.Z.locals:void 0,jt=a.p+"9625c35f5ea45945e2e7.jpg",Ft=a.p+"3524c849ab38de4be923.png";var Ut=a(621).NavBtn;function Mt(){var e=Ut("Bucket Limited, LLC",null);return t.createElement("div",{className:zt.homePageWrapper},t.createElement("div",{className:zt.navWrapper},e),t.createElement("div",{className:zt.imageContainer},t.createElement("img",{src:jt,alt:"image of truck"})),t.createElement("nav",{className:zt.navOptions},t.createElement("ul",null,t.createElement("li",null,t.createElement(vt,{to:"personal"},"<Personal />")),t.createElement("li",null,t.createElement(vt,{to:"contact"},"<Contact />")),t.createElement("li",null,t.createElement(vt,{to:"spin_connect"},"<SpinConnect />")),t.createElement("li",null,t.createElement(vt,{to:"poop_machine"},"<PoopMachine />")))),t.createElement("footer",{className:zt.footerContainer},t.createElement(vt,{to:"https://github.com/danielbucket"},t.createElement("img",{src:Ft,alt:"Github Icon"}))))}var It=a(568),Vt={};Vt.styleTagTransform=Lt(),Vt.setAttributes=Bt(),Vt.insert=St().bind(null,"head"),Vt.domAPI=kt(),Vt.insertStyleElement=Pt(),Ct()(It.Z,Vt);const qt=It.Z&&It.Z.locals?It.Z.locals:void 0;var Ht=a(621),Wt=a(443),$t=a(973).bioText,Zt=a(973).personName,Yt=a(973).position;function Qt(){var e=Me(),n=(0,Ht.NavBtn)("Home",(function(){e(-1)}));return t.createElement("div",{className:qt.personalWrapper},t.createElement("div",{className:qt.navWrapper},n),t.createElement("div",{className:qt.imageContainer},t.createElement("img",{src:Wt,alt:"personal photo"})),t.createElement("div",{className:qt.bioContainer},t.createElement("div",{className:qt.personText},t.createElement("h1",null,Zt),t.createElement("p",null,Yt)),t.createElement("div",{className:qt.bioText},t.createElement("p",null,$t))),t.createElement("div",{className:qt.footerContainer},"Footer"))}var Kt=a(49),Xt={};Xt.styleTagTransform=Lt(),Xt.setAttributes=Bt(),Xt.insert=St().bind(null,"head"),Xt.domAPI=kt(),Xt.insertStyleElement=Pt(),Ct()(Kt.Z,Xt);const Gt=Kt.Z&&Kt.Z.locals?Kt.Z.locals:void 0;var Jt=e=>"checkbox"===e.type,en=e=>e instanceof Date,tn=e=>null==e;const nn=e=>"object"==typeof e;var rn=e=>!tn(e)&&!Array.isArray(e)&&nn(e)&&!en(e),an=e=>rn(e)&&e.target?Jt(e.target)?e.target.checked:e.target.value:e,on=(e,t)=>e.has((e=>e.substring(0,e.search(/\.\d+(\.|$)/))||e)(t)),ln=e=>{const t=e.constructor&&e.constructor.prototype;return rn(t)&&t.hasOwnProperty("isPrototypeOf")},un="undefined"!=typeof window&&void 0!==window.HTMLElement&&"undefined"!=typeof document;function sn(e){let t;const n=Array.isArray(e);if(e instanceof Date)t=new Date(e);else if(e instanceof Set)t=new Set(e);else{if(un&&(e instanceof Blob||e instanceof FileList)||!n&&!rn(e))return e;if(t=n?[]:{},n||ln(e))for(const n in e)e.hasOwnProperty(n)&&(t[n]=sn(e[n]));else t=e}return t}var cn=e=>Array.isArray(e)?e.filter(Boolean):[],dn=e=>void 0===e,fn=(e,t,n)=>{if(!t||!rn(e))return n;const r=cn(t.split(/[,[\].]+?/)).reduce(((e,t)=>tn(e)?e:e[t]),e);return dn(r)||r===e?dn(e[t])?n:e[t]:r},pn=e=>"boolean"==typeof e;const hn={BLUR:"blur",FOCUS_OUT:"focusout",CHANGE:"change"},mn={onBlur:"onBlur",onChange:"onChange",onSubmit:"onSubmit",onTouched:"onTouched",all:"all"},gn="pattern",vn="required";t.createContext(null);var yn=(e,t,n,r=!0)=>{const a={defaultValues:t._defaultValues};for(const o in e)Object.defineProperty(a,o,{get:()=>{const a=o;return t._proxyFormState[a]!==mn.all&&(t._proxyFormState[a]=!r||mn.all),n&&(n[a]=!0),e[a]}});return a},bn=e=>rn(e)&&!Object.keys(e).length,An=(e,t,n,r)=>{n(e);const{name:a,...o}=e;return bn(o)||Object.keys(o).length>=Object.keys(t).length||Object.keys(o).find((e=>t[e]===(!r||mn.all)))},Cn=e=>Array.isArray(e)?e:[e];var wn=e=>"string"==typeof e,kn=(e,t,n,r,a)=>wn(e)?(r&&t.watch.add(e),fn(n,e,a)):Array.isArray(e)?e.map((e=>(r&&t.watch.add(e),fn(n,e)))):(r&&(t.watchAll=!0),n),En=e=>/^\w*$/.test(e),Sn=e=>cn(e.replace(/["|']|\]/g,"").split(/\.|\[/)),xn=(e,t,n)=>{let r=-1;const a=En(t)?[t]:Sn(t),o=a.length,i=o-1;for(;++r<o;){const t=a[r];let o=n;if(r!==i){const n=e[t];o=rn(n)||Array.isArray(n)?n:isNaN(+a[r+1])?{}:[]}e[t]=o,e=e[t]}return e},Bn=(e,t,n,r,a)=>t?{...n[e],types:{...n[e]&&n[e].types?n[e].types:{},[r]:a||!0}}:{},_n=e=>({isOnSubmit:!e||e===mn.onSubmit,isOnBlur:e===mn.onBlur,isOnChange:e===mn.onChange,isOnAll:e===mn.all,isOnTouch:e===mn.onTouched}),Pn=(e,t,n)=>!n&&(t.watchAll||t.watch.has(e)||[...t.watch].some((t=>e.startsWith(t)&&/^\.\w+/.test(e.slice(t.length)))));const Tn=(e,t,n,r)=>{for(const a of n||Object.keys(e)){const n=fn(e,a);if(n){const{_f:e,...o}=n;if(e){if(e.refs&&e.refs[0]&&t(e.refs[0],a)&&!r)break;if(e.ref&&t(e.ref,e.name)&&!r)break;Tn(o,t)}else rn(o)&&Tn(o,t)}}};var Ln=(e,t,n)=>{const r=cn(fn(e,n));return xn(r,"root",t[n]),xn(e,n,r),e},Rn=e=>"file"===e.type,On=e=>"function"==typeof e,Dn=e=>{if(!un)return!1;const t=e?e.ownerDocument:0;return e instanceof(t&&t.defaultView?t.defaultView.HTMLElement:HTMLElement)},Nn=e=>wn(e),zn=e=>"radio"===e.type,jn=e=>e instanceof RegExp;const Fn={value:!1,isValid:!1},Un={value:!0,isValid:!0};var Mn=e=>{if(Array.isArray(e)){if(e.length>1){const t=e.filter((e=>e&&e.checked&&!e.disabled)).map((e=>e.value));return{value:t,isValid:!!t.length}}return e[0].checked&&!e[0].disabled?e[0].attributes&&!dn(e[0].attributes.value)?dn(e[0].value)||""===e[0].value?Un:{value:e[0].value,isValid:!0}:Un:Fn}return Fn};const In={isValid:!1,value:null};var Vn=e=>Array.isArray(e)?e.reduce(((e,t)=>t&&t.checked&&!t.disabled?{isValid:!0,value:t.value}:e),In):In;function qn(e,t,n="validate"){if(Nn(e)||Array.isArray(e)&&e.every(Nn)||pn(e)&&!e)return{type:n,message:Nn(e)?e:"",ref:t}}var Hn=e=>rn(e)&&!jn(e)?e:{value:e,message:""},Wn=async(e,t,n,r,a)=>{const{ref:o,refs:i,required:l,maxLength:u,minLength:s,min:c,max:d,pattern:f,validate:p,name:h,valueAsNumber:m,mount:g,disabled:v}=e._f,y=fn(t,h);if(!g||v)return{};const b=i?i[0]:o,A=e=>{r&&b.reportValidity&&(b.setCustomValidity(pn(e)?"":e||""),b.reportValidity())},C={},w=zn(o),k=Jt(o),E=w||k,S=(m||Rn(o))&&dn(o.value)&&dn(y)||Dn(o)&&""===o.value||""===y||Array.isArray(y)&&!y.length,x=Bn.bind(null,h,n,C),B=(e,t,n,r="maxLength",a="minLength")=>{const i=e?t:n;C[h]={type:e?r:a,message:i,ref:o,...x(e?r:a,i)}};if(a?!Array.isArray(y)||!y.length:l&&(!E&&(S||tn(y))||pn(y)&&!y||k&&!Mn(i).isValid||w&&!Vn(i).isValid)){const{value:e,message:t}=Nn(l)?{value:!!l,message:l}:Hn(l);if(e&&(C[h]={type:vn,message:t,ref:b,...x(vn,t)},!n))return A(t),C}if(!(S||tn(c)&&tn(d))){let e,t;const r=Hn(d),a=Hn(c);if(tn(y)||isNaN(y)){const n=o.valueAsDate||new Date(y),i=e=>new Date((new Date).toDateString()+" "+e),l="time"==o.type,u="week"==o.type;wn(r.value)&&y&&(e=l?i(y)>i(r.value):u?y>r.value:n>new Date(r.value)),wn(a.value)&&y&&(t=l?i(y)<i(a.value):u?y<a.value:n<new Date(a.value))}else{const n=o.valueAsNumber||(y?+y:y);tn(r.value)||(e=n>r.value),tn(a.value)||(t=n<a.value)}if((e||t)&&(B(!!e,r.message,a.message,"max","min"),!n))return A(C[h].message),C}if((u||s)&&!S&&(wn(y)||a&&Array.isArray(y))){const e=Hn(u),t=Hn(s),r=!tn(e.value)&&y.length>+e.value,a=!tn(t.value)&&y.length<+t.value;if((r||a)&&(B(r,e.message,t.message),!n))return A(C[h].message),C}if(f&&!S&&wn(y)){const{value:e,message:t}=Hn(f);if(jn(e)&&!y.match(e)&&(C[h]={type:gn,message:t,ref:o,...x(gn,t)},!n))return A(t),C}if(p)if(On(p)){const e=qn(await p(y,t),b);if(e&&(C[h]={...e,...x("validate",e.message)},!n))return A(e.message),C}else if(rn(p)){let e={};for(const r in p){if(!bn(e)&&!n)break;const a=qn(await p[r](y,t),b,r);a&&(e={...a,...x(r,a.message)},A(a.message),n&&(C[h]=e))}if(!bn(e)&&(C[h]={ref:b,...e},!n))return C}return A(!0),C};function $n(e,t){const n=Array.isArray(t)?t:En(t)?[t]:Sn(t),r=1===n.length?e:function(e,t){const n=t.slice(0,-1).length;let r=0;for(;r<n;)e=dn(e)?r++:e[t[r++]];return e}(e,n),a=n.length-1,o=n[a];return r&&delete r[o],0!==a&&(rn(r)&&bn(r)||Array.isArray(r)&&function(e){for(const t in e)if(e.hasOwnProperty(t)&&!dn(e[t]))return!1;return!0}(r))&&$n(e,n.slice(0,-1)),e}var Zn=()=>{let e=[];return{get observers(){return e},next:t=>{for(const n of e)n.next&&n.next(t)},subscribe:t=>(e.push(t),{unsubscribe:()=>{e=e.filter((e=>e!==t))}}),unsubscribe:()=>{e=[]}}},Yn=e=>tn(e)||!nn(e);function Qn(e,t){if(Yn(e)||Yn(t))return e===t;if(en(e)&&en(t))return e.getTime()===t.getTime();const n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(const a of n){const n=e[a];if(!r.includes(a))return!1;if("ref"!==a){const e=t[a];if(en(n)&&en(e)||rn(n)&&rn(e)||Array.isArray(n)&&Array.isArray(e)?!Qn(n,e):n!==e)return!1}}return!0}var Kn=e=>"select-multiple"===e.type,Xn=e=>zn(e)||Jt(e),Gn=e=>Dn(e)&&e.isConnected,Jn=e=>{for(const t in e)if(On(e[t]))return!0;return!1};function er(e,t={}){const n=Array.isArray(e);if(rn(e)||n)for(const n in e)Array.isArray(e[n])||rn(e[n])&&!Jn(e[n])?(t[n]=Array.isArray(e[n])?[]:{},er(e[n],t[n])):tn(e[n])||(t[n]=!0);return t}function tr(e,t,n){const r=Array.isArray(e);if(rn(e)||r)for(const r in e)Array.isArray(e[r])||rn(e[r])&&!Jn(e[r])?dn(t)||Yn(n[r])?n[r]=Array.isArray(e[r])?er(e[r],[]):{...er(e[r])}:tr(e[r],tn(t)?{}:t[r],n[r]):n[r]=!Qn(e[r],t[r]);return n}var nr=(e,t)=>tr(e,t,er(t)),rr=(e,{valueAsNumber:t,valueAsDate:n,setValueAs:r})=>dn(e)?e:t?""===e?NaN:e?+e:e:n&&wn(e)?new Date(e):r?r(e):e;function ar(e){const t=e.ref;if(!(e.refs?e.refs.every((e=>e.disabled)):t.disabled))return Rn(t)?t.files:zn(t)?Vn(e.refs).value:Kn(t)?[...t.selectedOptions].map((({value:e})=>e)):Jt(t)?Mn(e.refs).value:rr(dn(t.value)?e.ref.value:t.value,e)}var or=(e,t,n,r)=>{const a={};for(const n of e){const e=fn(t,n);e&&xn(a,n,e._f)}return{criteriaMode:n,names:[...e],fields:a,shouldUseNativeValidation:r}},ir=e=>dn(e)?e:jn(e)?e.source:rn(e)?jn(e.value)?e.value.source:e.value:e,lr=e=>e.mount&&(e.required||e.min||e.max||e.maxLength||e.minLength||e.pattern||e.validate);function ur(e,t,n){const r=fn(e,n);if(r||En(n))return{error:r,name:n};const a=n.split(".");for(;a.length;){const r=a.join("."),o=fn(t,r),i=fn(e,r);if(o&&!Array.isArray(o)&&n!==r)return{name:n};if(i&&i.type)return{name:r,error:i};a.pop()}return{name:n}}var sr=(e,t,n,r,a)=>!a.isOnAll&&(!n&&a.isOnTouch?!(t||e):(n?r.isOnBlur:a.isOnBlur)?!e:!(n?r.isOnChange:a.isOnChange)||e),cr=(e,t)=>!cn(fn(e,t)).length&&$n(e,t);const dr={mode:mn.onSubmit,reValidateMode:mn.onChange,shouldFocusError:!0};function fr(e={},t){let n,r={...dr,...e},a={submitCount:0,isDirty:!1,isLoading:On(r.defaultValues),isValidating:!1,isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,touchedFields:{},dirtyFields:{},errors:r.errors||{},disabled:r.disabled||!1},o={},i=(rn(r.values)||rn(r.defaultValues))&&sn(r.values||r.defaultValues)||{},l=r.shouldUnregister?{}:sn(i),u={action:!1,mount:!1,watch:!1},s={mount:new Set,unMount:new Set,array:new Set,watch:new Set},c=0;const d={isDirty:!1,dirtyFields:!1,touchedFields:!1,isValidating:!1,isValid:!1,errors:!1},f={values:Zn(),array:Zn(),state:Zn()},p=_n(r.mode),h=_n(r.reValidateMode),m=r.criteriaMode===mn.all,g=async e=>{if(d.isValid||e){const e=r.resolver?bn((await A()).errors):await C(o,!0);e!==a.isValid&&f.state.next({isValid:e})}},v=e=>d.isValidating&&f.state.next({isValidating:e}),y=(e,t,n,r)=>{const a=fn(o,e);if(a){const o=fn(l,e,dn(n)?fn(i,e):n);dn(o)||r&&r.defaultChecked||t?xn(l,e,t?o:ar(a._f)):E(e,o),u.mount&&g()}},b=(e,t,n,r,l)=>{let u=!1,s=!1;const c={name:e},p=!(!fn(o,e)||!fn(o,e)._f.disabled);if(!n||r){d.isDirty&&(s=a.isDirty,a.isDirty=c.isDirty=w(),u=s!==c.isDirty);const n=p||Qn(fn(i,e),t);s=!(p||!fn(a.dirtyFields,e)),n||p?$n(a.dirtyFields,e):xn(a.dirtyFields,e,!0),c.dirtyFields=a.dirtyFields,u=u||d.dirtyFields&&s!==!n}if(n){const t=fn(a.touchedFields,e);t||(xn(a.touchedFields,e,n),c.touchedFields=a.touchedFields,u=u||d.touchedFields&&t!==n)}return u&&l&&f.state.next(c),u?c:{}},A=async e=>r.resolver(l,r.context,or(e||s.mount,o,r.criteriaMode,r.shouldUseNativeValidation)),C=async(e,t,n={valid:!0})=>{for(const o in e){const i=e[o];if(i){const{_f:e,...o}=i;if(e){const o=s.array.has(e.name),u=await Wn(i,l,m,r.shouldUseNativeValidation&&!t,o);if(u[e.name]&&(n.valid=!1,t))break;!t&&(fn(u,e.name)?o?Ln(a.errors,u,e.name):xn(a.errors,e.name,u[e.name]):$n(a.errors,e.name))}o&&await C(o,t,n)}}return n.valid},w=(e,t)=>(e&&t&&xn(l,e,t),!Qn(T(),i)),k=(e,t,n)=>kn(e,s,{...u.mount?l:dn(t)?i:wn(e)?{[e]:t}:t},n,t),E=(e,t,n={})=>{const r=fn(o,e);let a=t;if(r){const n=r._f;n&&(!n.disabled&&xn(l,e,rr(t,n)),a=Dn(n.ref)&&tn(t)?"":t,Kn(n.ref)?[...n.ref.options].forEach((e=>e.selected=a.includes(e.value))):n.refs?Jt(n.ref)?n.refs.length>1?n.refs.forEach((e=>(!e.defaultChecked||!e.disabled)&&(e.checked=Array.isArray(a)?!!a.find((t=>t===e.value)):a===e.value))):n.refs[0]&&(n.refs[0].checked=!!a):n.refs.forEach((e=>e.checked=e.value===a)):Rn(n.ref)?n.ref.value="":(n.ref.value=a,n.ref.type||f.values.next({name:e,values:{...l}})))}(n.shouldDirty||n.shouldTouch)&&b(e,a,n.shouldTouch,n.shouldDirty,!0),n.shouldValidate&&P(e)},S=(e,t,n)=>{for(const r in t){const a=t[r],i=`${e}.${r}`,l=fn(o,i);!s.array.has(e)&&Yn(a)&&(!l||l._f)||en(a)?E(i,a,n):S(i,a,n)}},x=(e,n,r={})=>{const c=fn(o,e),p=s.array.has(e),h=sn(n);xn(l,e,h),p?(f.array.next({name:e,values:{...l}}),(d.isDirty||d.dirtyFields)&&r.shouldDirty&&f.state.next({name:e,dirtyFields:nr(i,l),isDirty:w(e,h)})):!c||c._f||tn(h)?E(e,h,r):S(e,h,r),Pn(e,s)&&f.state.next({...a}),f.values.next({name:e,values:{...l}}),!u.mount&&t()},B=async t=>{const i=t.target;let u=i.name,y=!0;const w=fn(o,u),k=e=>{y=Number.isNaN(e)||e===fn(l,u,e)};if(w){let E,S;const x=i.type?ar(w._f):an(t),B=t.type===hn.BLUR||t.type===hn.FOCUS_OUT,_=!lr(w._f)&&!r.resolver&&!fn(a.errors,u)&&!w._f.deps||sr(B,fn(a.touchedFields,u),a.isSubmitted,h,p),T=Pn(u,s,B);xn(l,u,x),B?(w._f.onBlur&&w._f.onBlur(t),n&&n(0)):w._f.onChange&&w._f.onChange(t);const L=b(u,x,B,!1),R=!bn(L)||T;if(!B&&f.values.next({name:u,type:t.type,values:{...l}}),_)return d.isValid&&g(),R&&f.state.next({name:u,...T?{}:L});if(!B&&T&&f.state.next({...a}),v(!0),r.resolver){const{errors:e}=await A([u]);if(k(x),y){const t=ur(a.errors,o,u),n=ur(e,o,t.name||u);E=n.error,u=n.name,S=bn(e)}}else E=(await Wn(w,l,m,r.shouldUseNativeValidation))[u],k(x),y&&(E?S=!1:d.isValid&&(S=await C(o,!0)));y&&(w._f.deps&&P(w._f.deps),((t,r,o,i)=>{const l=fn(a.errors,t),u=d.isValid&&pn(r)&&a.isValid!==r;var s;if(e.delayError&&o?(s=()=>((e,t)=>{xn(a.errors,e,t),f.state.next({errors:a.errors})})(t,o),n=e=>{clearTimeout(c),c=setTimeout(s,e)},n(e.delayError)):(clearTimeout(c),n=null,o?xn(a.errors,t,o):$n(a.errors,t)),(o?!Qn(l,o):l)||!bn(i)||u){const e={...i,...u&&pn(r)?{isValid:r}:{},errors:a.errors,name:t};a={...a,...e},f.state.next(e)}v(!1)})(u,S,E,L))}},_=(e,t)=>{if(fn(a.errors,t)&&e.focus)return e.focus(),1},P=async(e,t={})=>{let n,i;const l=Cn(e);if(v(!0),r.resolver){const t=await(async e=>{const{errors:t}=await A(e);if(e)for(const n of e){const e=fn(t,n);e?xn(a.errors,n,e):$n(a.errors,n)}else a.errors=t;return t})(dn(e)?e:l);n=bn(t),i=e?!l.some((e=>fn(t,e))):n}else e?(i=(await Promise.all(l.map((async e=>{const t=fn(o,e);return await C(t&&t._f?{[e]:t}:t)})))).every(Boolean),(i||a.isValid)&&g()):i=n=await C(o);return f.state.next({...!wn(e)||d.isValid&&n!==a.isValid?{}:{name:e},...r.resolver||!e?{isValid:n}:{},errors:a.errors,isValidating:!1}),t.shouldFocus&&!i&&Tn(o,_,e?l:s.mount),i},T=e=>{const t={...i,...u.mount?l:{}};return dn(e)?t:wn(e)?fn(t,e):e.map((e=>fn(t,e)))},L=(e,t)=>({invalid:!!fn((t||a).errors,e),isDirty:!!fn((t||a).dirtyFields,e),isTouched:!!fn((t||a).touchedFields,e),error:fn((t||a).errors,e)}),R=(e,t,n)=>{const r=(fn(o,e,{_f:{}})._f||{}).ref;xn(a.errors,e,{...t,ref:r}),f.state.next({name:e,errors:a.errors,isValid:!1}),n&&n.shouldFocus&&r&&r.focus&&r.focus()},O=(e,t={})=>{for(const n of e?Cn(e):s.mount)s.mount.delete(n),s.array.delete(n),t.keepValue||($n(o,n),$n(l,n)),!t.keepError&&$n(a.errors,n),!t.keepDirty&&$n(a.dirtyFields,n),!t.keepTouched&&$n(a.touchedFields,n),!r.shouldUnregister&&!t.keepDefaultValue&&$n(i,n);f.values.next({values:{...l}}),f.state.next({...a,...t.keepDirty?{isDirty:w()}:{}}),!t.keepIsValid&&g()},D=({disabled:e,name:t,field:n,fields:r,value:a})=>{if(pn(e)){const o=e?void 0:dn(a)?ar(n?n._f:fn(r,t)._f):a;xn(l,t,o),b(t,o,!1,!1,!0)}},N=(e,t={})=>{let n=fn(o,e);const a=pn(t.disabled);return xn(o,e,{...n||{},_f:{...n&&n._f?n._f:{ref:{name:e}},name:e,mount:!0,...t}}),s.mount.add(e),n?D({field:n,disabled:t.disabled,name:e,value:t.value}):y(e,!0,t.value),{...a?{disabled:t.disabled}:{},...r.progressive?{required:!!t.required,min:ir(t.min),max:ir(t.max),minLength:ir(t.minLength),maxLength:ir(t.maxLength),pattern:ir(t.pattern)}:{},name:e,onChange:B,onBlur:B,ref:a=>{if(a){N(e,t),n=fn(o,e);const r=dn(a.value)&&a.querySelectorAll&&a.querySelectorAll("input,select,textarea")[0]||a,l=Xn(r),u=n._f.refs||[];if(l?u.find((e=>e===r)):r===n._f.ref)return;xn(o,e,{_f:{...n._f,...l?{refs:[...u.filter(Gn),r,...Array.isArray(fn(i,e))?[{}]:[]],ref:{type:r.type,name:e}}:{ref:r}}}),y(e,!1,void 0,r)}else n=fn(o,e,{}),n._f&&(n._f.mount=!1),(r.shouldUnregister||t.shouldUnregister)&&(!on(s.array,e)||!u.action)&&s.unMount.add(e)}}},z=()=>r.shouldFocusError&&Tn(o,_,s.mount),j=(e,t)=>async n=>{let i;n&&(n.preventDefault&&n.preventDefault(),n.persist&&n.persist());let u=sn(l);if(f.state.next({isSubmitting:!0}),r.resolver){const{errors:e,values:t}=await A();a.errors=e,u=t}else await C(o);if($n(a.errors,"root"),bn(a.errors)){f.state.next({errors:{}});try{await e(u,n)}catch(e){i=e}}else t&&await t({...a.errors},n),z(),setTimeout(z);if(f.state.next({isSubmitted:!0,isSubmitting:!1,isSubmitSuccessful:bn(a.errors)&&!i,submitCount:a.submitCount+1,errors:a.errors}),i)throw i},F=(n,r={})=>{const c=n?sn(n):i,p=sn(c),h=n&&!bn(n)?p:i;if(r.keepDefaultValues||(i=c),!r.keepValues){if(r.keepDirtyValues)for(const e of s.mount)fn(a.dirtyFields,e)?xn(h,e,fn(l,e)):x(e,fn(h,e));else{if(un&&dn(n))for(const e of s.mount){const t=fn(o,e);if(t&&t._f){const e=Array.isArray(t._f.refs)?t._f.refs[0]:t._f.ref;if(Dn(e)){const t=e.closest("form");if(t){t.reset();break}}}}o={}}l=e.shouldUnregister?r.keepDefaultValues?sn(i):{}:sn(h),f.array.next({values:{...h}}),f.values.next({values:{...h}})}s={mount:new Set,unMount:new Set,array:new Set,watch:new Set,watchAll:!1,focus:""},!u.mount&&t(),u.mount=!d.isValid||!!r.keepIsValid||!!r.keepDirtyValues,u.watch=!!e.shouldUnregister,f.state.next({submitCount:r.keepSubmitCount?a.submitCount:0,isDirty:r.keepDirty?a.isDirty:!(!r.keepDefaultValues||Qn(n,i)),isSubmitted:!!r.keepIsSubmitted&&a.isSubmitted,dirtyFields:r.keepDirtyValues?r.keepDefaultValues&&l?nr(i,l):a.dirtyFields:r.keepDefaultValues&&n?nr(i,n):{},touchedFields:r.keepTouched?a.touchedFields:{},errors:r.keepErrors?a.errors:{},isSubmitSuccessful:!!r.keepIsSubmitSuccessful&&a.isSubmitSuccessful,isSubmitting:!1})},U=(e,t)=>F(On(e)?e(l):e,t);return{control:{register:N,unregister:O,getFieldState:L,handleSubmit:j,setError:R,_executeSchema:A,_getWatch:k,_getDirty:w,_updateValid:g,_removeUnmounted:()=>{for(const e of s.unMount){const t=fn(o,e);t&&(t._f.refs?t._f.refs.every((e=>!Gn(e))):!Gn(t._f.ref))&&O(e)}s.unMount=new Set},_updateFieldArray:(e,t=[],n,r,s=!0,c=!0)=>{if(r&&n){if(u.action=!0,c&&Array.isArray(fn(o,e))){const t=n(fn(o,e),r.argA,r.argB);s&&xn(o,e,t)}if(c&&Array.isArray(fn(a.errors,e))){const t=n(fn(a.errors,e),r.argA,r.argB);s&&xn(a.errors,e,t),cr(a.errors,e)}if(d.touchedFields&&c&&Array.isArray(fn(a.touchedFields,e))){const t=n(fn(a.touchedFields,e),r.argA,r.argB);s&&xn(a.touchedFields,e,t)}d.dirtyFields&&(a.dirtyFields=nr(i,l)),f.state.next({name:e,isDirty:w(e,t),dirtyFields:a.dirtyFields,errors:a.errors,isValid:a.isValid})}else xn(l,e,t)},_updateDisabledField:D,_getFieldArray:t=>cn(fn(u.mount?l:i,t,e.shouldUnregister?fn(i,t,[]):[])),_reset:F,_resetDefaultValues:()=>On(r.defaultValues)&&r.defaultValues().then((e=>{U(e,r.resetOptions),f.state.next({isLoading:!1})})),_updateFormState:e=>{a={...a,...e}},_disableForm:e=>{pn(e)&&(f.state.next({disabled:e}),Tn(o,((t,n)=>{let r=e;const a=fn(o,n);a&&pn(a._f.disabled)&&(r||(r=a._f.disabled)),t.disabled=r}),0,!1))},_subjects:f,_proxyFormState:d,_setErrors:e=>{a.errors=e,f.state.next({errors:a.errors,isValid:!1})},get _fields(){return o},get _formValues(){return l},get _state(){return u},set _state(e){u=e},get _defaultValues(){return i},get _names(){return s},set _names(e){s=e},get _formState(){return a},set _formState(e){a=e},get _options(){return r},set _options(e){r={...r,...e}}},trigger:P,register:N,handleSubmit:j,watch:(e,t)=>On(e)?f.values.subscribe({next:n=>e(k(void 0,t),n)}):k(e,t,!0),setValue:x,getValues:T,reset:U,resetField:(e,t={})=>{fn(o,e)&&(dn(t.defaultValue)?x(e,sn(fn(i,e))):(x(e,t.defaultValue),xn(i,e,sn(t.defaultValue))),t.keepTouched||$n(a.touchedFields,e),t.keepDirty||($n(a.dirtyFields,e),a.isDirty=t.defaultValue?w(e,sn(fn(i,e))):w()),t.keepError||($n(a.errors,e),d.isValid&&g()),f.state.next({...a}))},clearErrors:e=>{e&&Cn(e).forEach((e=>$n(a.errors,e))),f.state.next({errors:e?a.errors:{}})},unregister:O,setError:R,setFocus:(e,t={})=>{const n=fn(o,e),r=n&&n._f;if(r){const e=r.refs?r.refs[0]:r.ref;e.focus&&(e.focus(),t.shouldSelect&&e.select())}},getFieldState:L}}var pr=a(271),hr={};hr.styleTagTransform=Lt(),hr.setAttributes=Bt(),hr.insert=St().bind(null,"head"),hr.domAPI=kt(),hr.insertStyleElement=Pt(),Ct()(pr.Z,hr);const mr=pr.Z&&pr.Z.locals?pr.Z.locals:void 0;function gr(){return gr=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},gr.apply(this,arguments)}function vr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return yr(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?yr(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function yr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function br(){var e=function(e={}){const n=t.useRef(),r=t.useRef(),[a,o]=t.useState({isDirty:!1,isValidating:!1,isLoading:On(e.defaultValues),isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,submitCount:0,dirtyFields:{},touchedFields:{},errors:e.errors||{},disabled:e.disabled||!1,defaultValues:On(e.defaultValues)?void 0:e.defaultValues});n.current||(n.current={...fr(e,(()=>o((e=>({...e}))))),formState:a});const i=n.current.control;return i._options=e,function(e){const n=t.useRef(e);n.current=e,t.useEffect((()=>{const t=!e.disabled&&n.current.subject&&n.current.subject.subscribe({next:n.current.next});return()=>{t&&t.unsubscribe()}}),[e.disabled])}({subject:i._subjects.state,next:e=>{An(e,i._proxyFormState,i._updateFormState,!0)&&o({...i._formState})}}),t.useEffect((()=>i._disableForm(e.disabled)),[i,e.disabled]),t.useEffect((()=>{if(i._proxyFormState.isDirty){const e=i._getDirty();e!==a.isDirty&&i._subjects.state.next({isDirty:e})}}),[i,a.isDirty]),t.useEffect((()=>{e.values&&!Qn(e.values,r.current)?(i._reset(e.values,i._options.resetOptions),r.current=e.values,o((e=>({...e})))):i._resetDefaultValues()}),[e.values,i]),t.useEffect((()=>{e.errors&&i._setErrors(e.errors)}),[e.errors,i]),t.useEffect((()=>{i._state.mount||(i._updateValid(),i._state.mount=!0),i._state.watch&&(i._state.watch=!1,i._subjects.state.next({...i._formState})),i._removeUnmounted()})),t.useEffect((()=>{e.shouldUnregister&&i._subjects.values.next({values:i._getWatch()})}),[e.shouldUnregister,i]),n.current.formState=yn(a,i),n.current}(),n=e.register,r=e.handleSubmit,a=(e.formState.errors,vr((0,t.useState)(!1),2)),o=a[0],i=a[1],l=vr((0,t.useState)(""),2),u=l[0],s=l[1],c=vr((0,t.useState)(!1),2),d=c[0],f=c[1],p=vr((0,t.useState)(),2),h=p[0],m=p[1],g=Me();return(0,t.useEffect)((function(){o&&g("/contact/submit",{state:{firstName:u,submitSuccess:o}})}),[o]),d?t.createElement("div",null,"Loading..."):h?t.createElement("div",null,"Something went wrong: ",err):t.createElement("form",{className:mr.formContainer,onSubmit:r((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};fetch("/api/v1/contact_form/new",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then((function(e){if(!e.ok)throw new Error("Network response was not ok");return e.json()})).then((function(e){s((function(){return e.firstName})),i((function(){return!0})),f((function(){return!1}))})).catch((function(e){throw i((function(){return!1})),m((function(){return e})),new Error(e)}))}))},t.createElement("div",{className:mr.inputContainer},t.createElement("input",gr({value:"Bork",type:"text",placeholder:"First Name (required)"},n("firstName",{required:!0,maxLength:80}))),t.createElement("input",gr({value:"Dork",type:"text",placeholder:"Last Name (required)"},n("lastName",{required:!0,maxLength:100}))),t.createElement("input",gr({type:"text",placeholder:"Email (required)"},n("email",{required:!0,pattern:/^\S+@\S+$/i}))),t.createElement("input",gr({type:"tel",placeholder:"Phone (optional)"},n("mobileNumber",{required:!1,minLength:6,maxLength:12}))),t.createElement("textarea",gr({value:"Please allow for a misplaced hotdog here and there",placeholder:"Message (required)"},n("message",{required:!0,max:250,min:5}))),t.createElement("input",{type:"submit"})))}function Ar(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Cr(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Cr(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Cr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function wr(){var e=Ar((0,t.useState)(""),2),n=e[0],r=e[1],a=Ar((0,t.useState)(5),2),o=a[0],i=a[1],l=Ar((0,t.useState)(!1),2),u=l[0],s=l[1],c=Me(),d=Fe();(0,t.useEffect)((function(){var e;if(null!==(e=d.state)&&void 0!==e&&e.submitSuccess&&(r(d.state.firstName),s(d.state.submitSuccess)),u){var t=setInterval((function(){i((function(e){return e-1}))}),1e3);setTimeout((function(){clearInterval(t),c("/")}),5900)}}),[d,u]);var f=t.createElement("div",{className:Gt.contactHeader},t.createElement("p",null,"I'm a software engineer with a passion for creating and building things. I'm a full stack developer with a focus on front end technologies. I'm a big fan of React and I'm always looking for new ways to improve my skills. I'm also a big fan of the outdoors and I love to travel."),t.createElement("p",null,"-GitHub Co-Pilot")),p=(0,Ht.NavBtn)("Home",(function(){c(u?"/":-1)})),h=t.createElement("div",{className:Gt.formSubmittedContainer},t.createElement("div",{className:Gt.formSubmittedHeader},t.createElement("p",null,"Hey, ",n,"!"),t.createElement("p",null,"Thanks for checking in!"),t.createElement("p",null,"Your message has been received and I'll be sure to get back to you as soon as I can.")),t.createElement("div",{className:Gt.homePageRedirect},t.createElement("p",null,"You will be redirected to the Home page in: ",t.createElement("span",null,o))));return t.createElement("div",{className:Gt.contactWrapper},p,u?h:t.createElement(vt,{className:Gt.contactFormLink,to:"/contact/contact_form"},"Message Me"),t.createElement("div",{className:Gt.childRoutes},t.createElement(nt,null,t.createElement(et,{index:!0,element:f}),t.createElement(et,{path:"contact_form",element:t.createElement(br,null)}),t.createElement(et,{path:"contact/submit",element:h}))))}var kr=a(801),Er={};Er.styleTagTransform=Lt(),Er.setAttributes=Bt(),Er.insert=St().bind(null,"head"),Er.domAPI=kt(),Er.insertStyleElement=Pt(),Ct()(kr.Z,Er);const Sr=kr.Z&&kr.Z.locals?kr.Z.locals:void 0;function xr(){return"object"==typeof navigator&&"userAgent"in navigator?navigator.userAgent:"object"==typeof process&&void 0!==process.version?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}var Br=a(186),_r=`octokit-endpoint.js/9.0.4 ${xr()}`;function Pr(e,t){const n=Object.assign({},e);return Object.keys(t).forEach((r=>{!function(e){if("object"!=typeof e||null===e)return!1;if("[object Object]"!==Object.prototype.toString.call(e))return!1;const t=Object.getPrototypeOf(e);if(null===t)return!0;const n=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&Function.prototype.call(n)===Function.prototype.call(e)}(t[r])?Object.assign(n,{[r]:t[r]}):r in e?n[r]=Pr(e[r],t[r]):Object.assign(n,{[r]:t[r]})})),n}function Tr(e){for(const t in e)void 0===e[t]&&delete e[t];return e}function Lr(e,t,n){if("string"==typeof t){let[e,r]=t.split(" ");n=Object.assign(r?{method:e,url:r}:{url:e},n)}else n=Object.assign({},t);var r;n.headers=(r=n.headers)?Object.keys(r).reduce(((e,t)=>(e[t.toLowerCase()]=r[t],e)),{}):{},Tr(n),Tr(n.headers);const a=Pr(e||{},n);return"/graphql"===n.url&&(e&&e.mediaType.previews?.length&&(a.mediaType.previews=e.mediaType.previews.filter((e=>!a.mediaType.previews.includes(e))).concat(a.mediaType.previews)),a.mediaType.previews=(a.mediaType.previews||[]).map((e=>e.replace(/-preview/,"")))),a}var Rr=/\{[^}]+\}/g;function Or(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function Dr(e,t){const n={__proto__:null};for(const r of Object.keys(e))-1===t.indexOf(r)&&(n[r]=e[r]);return n}function Nr(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map((function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")),e})).join("")}function zr(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function jr(e,t,n){return t="+"===e||"#"===e?Nr(t):zr(t),n?zr(n)+"="+t:t}function Fr(e){return null!=e}function Ur(e){return";"===e||"&"===e||"?"===e}function Mr(e,t){var n=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,(function(e,r,a){if(r){let e="";const a=[];if(-1!==n.indexOf(r.charAt(0))&&(e=r.charAt(0),r=r.substr(1)),r.split(/,/g).forEach((function(n){var r=/([^:\*]*)(?::(\d+)|(\*))?/.exec(n);a.push(function(e,t,n,r){var a=e[n],o=[];if(Fr(a)&&""!==a)if("string"==typeof a||"number"==typeof a||"boolean"==typeof a)a=a.toString(),r&&"*"!==r&&(a=a.substring(0,parseInt(r,10))),o.push(jr(t,a,Ur(t)?n:""));else if("*"===r)Array.isArray(a)?a.filter(Fr).forEach((function(e){o.push(jr(t,e,Ur(t)?n:""))})):Object.keys(a).forEach((function(e){Fr(a[e])&&o.push(jr(t,a[e],e))}));else{const e=[];Array.isArray(a)?a.filter(Fr).forEach((function(n){e.push(jr(t,n))})):Object.keys(a).forEach((function(n){Fr(a[n])&&(e.push(zr(n)),e.push(jr(t,a[n].toString())))})),Ur(t)?o.push(zr(n)+"="+e.join(",")):0!==e.length&&o.push(e.join(","))}else";"===t?Fr(a)&&o.push(zr(n)):""!==a||"&"!==t&&"?"!==t?""===a&&o.push(""):o.push(zr(n)+"=");return o}(t,e,r[1],r[2]||r[3]))})),e&&"+"!==e){var o=",";return"?"===e?o="&":"#"!==e&&(o=e),(0!==a.length?e:"")+a.join(o)}return a.join(",")}return Nr(a)})),"/"===e?e:e.replace(/\/$/,"")}function Ir(e){let t,n=e.method.toUpperCase(),r=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),a=Object.assign({},e.headers),o=Dr(e,["method","baseUrl","url","headers","request","mediaType"]);const i=function(e){const t=e.match(Rr);return t?t.map(Or).reduce(((e,t)=>e.concat(t)),[]):[]}(r);var l;r=(l=r,{expand:Mr.bind(null,l)}).expand(o),/^http/.test(r)||(r=e.baseUrl+r);const u=Dr(o,Object.keys(e).filter((e=>i.includes(e))).concat("baseUrl"));if(!/application\/octet-stream/i.test(a.accept)&&(e.mediaType.format&&(a.accept=a.accept.split(/,/).map((t=>t.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`))).join(",")),r.endsWith("/graphql")&&e.mediaType.previews?.length)){const t=a.accept.match(/[\w-]+(?=-preview)/g)||[];a.accept=t.concat(e.mediaType.previews).map((t=>`application/vnd.github.${t}-preview${e.mediaType.format?`.${e.mediaType.format}`:"+json"}`)).join(",")}return["GET","HEAD"].includes(n)?r=function(e,t){const n=/\?/.test(e)?"&":"?",r=Object.keys(t);return 0===r.length?e:e+n+r.map((e=>"q"===e?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${e}=${encodeURIComponent(t[e])}`)).join("&")}(r,u):"data"in u?t=u.data:Object.keys(u).length&&(t=u),a["content-type"]||void 0===t||(a["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(n)&&void 0===t&&(t=""),Object.assign({method:n,url:r,headers:a},void 0!==t?{body:t}:null,e.request?{request:e.request}:null)}function Vr(e,t,n){return Ir(Lr(e,t,n))}var qr=function e(t,n){const r=Lr(t,n),a=Vr.bind(null,r);return Object.assign(a,{DEFAULTS:r,defaults:e.bind(null,r),merge:Lr.bind(null,r),parse:Ir})}(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":_r},mediaType:{format:""}});class Hr extends Error{constructor(e){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="Deprecation"}}var Wr=a(778),$r=a.n(Wr),Zr=$r()((e=>console.warn(e))),Yr=$r()((e=>console.warn(e))),Qr=class extends Error{constructor(e,t,n){let r;super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=t,"headers"in n&&void 0!==n.headers&&(r=n.headers),"response"in n&&(this.response=n.response,r=n.response.headers);const a=Object.assign({},n.request);n.request.headers.authorization&&(a.headers=Object.assign({},n.request.headers,{authorization:n.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),a.url=a.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=a,Object.defineProperty(this,"code",{get:()=>(Zr(new Hr("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),t)}),Object.defineProperty(this,"headers",{get:()=>(Yr(new Hr("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),r||{})})}};function Kr(e){const t=e.request&&e.request.log?e.request.log:console,n=!1!==e.request?.parseSuccessResponseBody;(function(e){if("object"!=typeof e||null===e)return!1;if("[object Object]"!==Object.prototype.toString.call(e))return!1;const t=Object.getPrototypeOf(e);if(null===t)return!0;const n=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&Function.prototype.call(n)===Function.prototype.call(e)}(e.body)||Array.isArray(e.body))&&(e.body=JSON.stringify(e.body));let r,a,o={},{fetch:i}=globalThis;if(e.request?.fetch&&(i=e.request.fetch),!i)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");return i(e.url,{method:e.method,body:e.body,headers:e.headers,signal:e.request?.signal,...e.body&&{duplex:"half"}}).then((async i=>{a=i.url,r=i.status;for(const e of i.headers)o[e[0]]=e[1];if("deprecation"in o){const n=o.link&&o.link.match(/<([^>]+)>; rel="deprecation"/),r=n&&n.pop();t.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${o.sunset}${r?`. See ${r}`:""}`)}if(204!==r&&205!==r){if("HEAD"===e.method){if(r<400)return;throw new Qr(i.statusText,r,{response:{url:a,status:r,headers:o,data:void 0},request:e})}if(304===r)throw new Qr("Not modified",r,{response:{url:a,status:r,headers:o,data:await Xr(i)},request:e});if(r>=400){const t=await Xr(i),n=new Qr(function(e){if("string"==typeof e)return e;let t;return t="documentation_url"in e?` - ${e.documentation_url}`:"","message"in e?Array.isArray(e.errors)?`${e.message}: ${e.errors.map(JSON.stringify).join(", ")}${t}`:`${e.message}${t}`:`Unknown error: ${JSON.stringify(e)}`}(t),r,{response:{url:a,status:r,headers:o,data:t},request:e});throw n}return n?await Xr(i):i.body}})).then((e=>({status:r,url:a,headers:o,data:e}))).catch((t=>{if(t instanceof Qr)throw t;if("AbortError"===t.name)throw t;let n=t.message;throw"TypeError"===t.name&&"cause"in t&&(t.cause instanceof Error?n=t.cause.message:"string"==typeof t.cause&&(n=t.cause)),new Qr(n,500,{request:e})}))}async function Xr(e){const t=e.headers.get("content-type");return/application\/json/.test(t)?e.json().catch((()=>e.text())).catch((()=>"")):!t||/^text\/|charset=utf-8$/.test(t)?e.text():function(e){return e.arrayBuffer()}(e)}var Gr=function e(t,n){const r=t.defaults(n);return Object.assign((function(t,n){const a=r.merge(t,n);if(!a.request||!a.request.hook)return Kr(r.parse(a));const o=(e,t)=>Kr(r.parse(r.merge(e,t)));return Object.assign(o,{endpoint:r,defaults:e.bind(null,r)}),a.request.hook(o,a)}),{endpoint:r,defaults:e.bind(null,r)})}(qr,{headers:{"user-agent":`octokit-request.js/8.2.0 ${xr()}`}}),Jr=class extends Error{constructor(e,t,n){super("Request failed due to following response errors:\n"+n.errors.map((e=>` - ${e.message}`)).join("\n")),this.request=e,this.headers=t,this.response=n,this.name="GraphqlResponseError",this.errors=n.errors,this.data=n.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},ea=["method","baseUrl","url","headers","request","query","mediaType"],ta=["query","method","url"],na=/\/api\/v3\/?$/;function ra(e,t){const n=e.defaults(t);return Object.assign(((e,t)=>function(e,t,n){if(n){if("string"==typeof t&&"query"in n)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const e in n)if(ta.includes(e))return Promise.reject(new Error(`[@octokit/graphql] "${e}" cannot be used as variable name`))}const r="string"==typeof t?Object.assign({query:t},n):t,a=Object.keys(r).reduce(((e,t)=>ea.includes(t)?(e[t]=r[t],e):(e.variables||(e.variables={}),e.variables[t]=r[t],e)),{}),o=r.baseUrl||e.endpoint.DEFAULTS.baseUrl;return na.test(o)&&(a.url=o.replace(na,"/api/graphql")),e(a).then((e=>{if(e.data.errors){const t={};for(const n of Object.keys(e.headers))t[n]=e.headers[n];throw new Jr(a,t,e.data)}return e.data.data}))}(n,e,t)),{defaults:ra.bind(null,n),endpoint:n.endpoint})}ra(Gr,{headers:{"user-agent":`octokit-graphql.js/7.0.2 ${xr()}`},method:"POST",url:"/graphql"});var aa=/^v1\./,oa=/^ghs_/,ia=/^ghu_/;async function la(e){const t=3===e.split(/\./).length,n=aa.test(e)||oa.test(e),r=ia.test(e);return{type:"token",token:e,tokenType:t?"app":n?"installation":r?"user-to-server":"oauth"}}async function ua(e,t,n,r){const a=t.endpoint.merge(n,r);return a.headers.authorization=function(e){return 3===e.split(/\./).length?`bearer ${e}`:`token ${e}`}(e),t(a)}var sa=function(e){if(!e)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if("string"!=typeof e)throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return e=e.replace(/^(token|bearer) +/i,""),Object.assign(la.bind(null,e),{hook:ua.bind(null,e)})},ca="5.1.0",da=()=>{},fa=console.warn.bind(console),pa=console.error.bind(console),ha=`octokit-core.js/${ca} ${xr()}`,ma=class{static{this.VERSION=ca}static defaults(e){return class extends(this){constructor(...t){const n=t[0]||{};super("function"!=typeof e?Object.assign({},e,n,n.userAgent&&e.userAgent?{userAgent:`${n.userAgent} ${e.userAgent}`}:null):e(n))}}}static{this.plugins=[]}static plugin(...e){const t=this.plugins;return class extends(this){static{this.plugins=t.concat(e.filter((e=>!t.includes(e))))}}}constructor(e={}){const t=new Br.Collection,n={baseUrl:Gr.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},e.request,{hook:t.bind(null,"request")}),mediaType:{previews:[],format:""}};var r;if(n.headers["user-agent"]=e.userAgent?`${e.userAgent} ${ha}`:ha,e.baseUrl&&(n.baseUrl=e.baseUrl),e.previews&&(n.mediaType.previews=e.previews),e.timeZone&&(n.headers["time-zone"]=e.timeZone),this.request=Gr.defaults(n),this.graphql=(r=this.request,ra(r,{method:"POST",url:"/graphql"})).defaults(n),this.log=Object.assign({debug:da,info:da,warn:fa,error:pa},e.log),this.hook=t,e.authStrategy){const{authStrategy:n,...r}=e,a=n(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:r},e.auth));t.wrap("request",a.hook),this.auth=a}else if(e.auth){const n=sa(e.auth);t.wrap("request",n.hook),this.auth=n}else this.auth=async()=>({type:"unauthenticated"});const a=this.constructor;for(let t=0;t<a.plugins.length;++t)Object.assign(this,a.plugins[t](this,e))}};function ga(e){return ga="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ga(e)}function va(){va=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function c(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,i=Object.create(o.prototype),l=new T(r||[]);return a(i,"_invoke",{value:x(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=c;var f="suspendedStart",p="suspendedYield",h="executing",m="completed",g={};function v(){}function y(){}function b(){}var A={};s(A,i,(function(){return this}));var C=Object.getPrototypeOf,w=C&&C(C(L([])));w&&w!==n&&r.call(w,i)&&(A=w);var k=b.prototype=v.prototype=Object.create(A);function E(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function n(a,o,i,l){var u=d(e[a],e,o);if("throw"!==u.type){var s=u.arg,c=s.value;return c&&"object"==ga(c)&&r.call(c,"__await")?t.resolve(c.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(c).then((function(e){s.value=e,i(s)}),(function(e){return n("throw",e,i,l)}))}l(u.arg)}var o;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return o=o?o.then(a,a):a()}})}function x(t,n,r){var a=f;return function(o,i){if(a===h)throw new Error("Generator is already running");if(a===m){if("throw"===o)throw i;return{value:e,done:!0}}for(r.method=o,r.arg=i;;){var l=r.delegate;if(l){var u=B(l,r);if(u){if(u===g)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===f)throw a=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=h;var s=d(t,n,r);if("normal"===s.type){if(a=r.done?m:p,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(a=m,r.method="throw",r.arg=s.arg)}}}function B(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,B(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var o=d(a,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,g;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function _(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function P(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(_,this),this.reset(!0)}function L(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,o=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return o.next=o}}throw new TypeError(ga(t)+" is not iterable")}return y.prototype=b,a(k,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=s(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,u,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},E(S.prototype),s(S.prototype,l,(function(){return this})),t.AsyncIterator=S,t.async=function(e,n,r,a,o){void 0===o&&(o=Promise);var i=new S(c(e,n,r,a),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},E(k),s(k,u,"Generator"),s(k,i,(function(){return this})),s(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=L,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(P),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return l.type="throw",l.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(u&&s){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),P(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;P(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:L(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function ya(e,t,n,r,a,o,i){try{var l=e[o](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,a)}var ba=function(){var e,t=(e=va().mark((function e(t){var n,r,a,o,i,l,u;return va().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.key,r=t.repo,a=t.user,o=new ma({auth:n}),e.next=4,o.request("GET /repos/".concat(a,"/").concat(r,"/commits"),{owner:a,repo:r,accept:"application/vnd.github+json",headers:{"X-GitHub-Api-Version":"2022-11-28"}});case 4:return i=e.sent,l=i.data,u=l.reduce((function(e,t,n){console.log("acc: ",e);var r=t.commit.author.date.slice(0,10);if(r!==(l[n-1]?l[n-1].commit.author.date.slice(0,10):null)){var a=t.commit,o=t.node_id,i=t.html_url,u=a.author,s=a.message,c=u.name;e[Date.parse(r)]||(e[Date.parse(r)]={},Object.assign(e[Date.parse(r)],{node_id:o,html_url:i,message:s,name:c}))}}),[]),console.log("repoData: ",u),e.abrupt("return",l.map((function(e){var t=e.commit,n=e.node_id,r=e.html_url,a=t.author,o=t.message,i=a.name,l=a.date;return Object.assign({},{message:o,node_id:n,html_url:r,name:i,date:l})})));case 9:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){ya(o,r,a,i,l,"next",e)}function l(e){ya(o,r,a,i,l,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}();function Aa(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ca(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ca(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ca(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var wa={key:"your_github_key",user:"your_github_user_name",repo:"your_github_repo_name"};function ka(){var e=Aa((0,t.useState)({}),2),n=(e[0],e[1],Aa((0,t.useState)([]),2)),r=n[0],a=n[1],o=Aa((0,t.useState)(""),2),i=(o[0],o[1]),l=Me();return(0,t.useEffect)((function(){try{ba(wa).then((function(e){a((function(){return e}))}))}catch(e){i("Unable to connect to GitHub: ".concat(e))}}),[]),r.map((function(e){var n=e.node_id,r=e.name,a=e.date;return a.slice(0,10),t.createElement(vt,{to:"commits/:".concat(a),key:n,className:Sr.Arr},t.createElement("h3",null,r),t.createElement("p",null,a))})),r.map((function(e){e.message;var n=e.node_id,r=e.html_url,a=e.name,o=e.date;return t.createElement(vt,{to:r,key:n,className:Sr.card},t.createElement("h3",null,a),t.createElement("p",null,o))})),t.createElement("div",{className:Sr.moduleContainer},t.createElement("div",{className:Sr.headerContainer},t.createElement("button",{onClick:function(){return l("/",{replace:!0})}},"Close"),t.createElement("h1",null,"<".concat(wa.repo," />"))),t.createElement("div",{className:Sr.cardsContainer}),t.createElement(Je,null))}console.log("userData: ","MISSING_ENV_VAR");var Ea=a(681),Sa={};Sa.styleTagTransform=Lt(),Sa.setAttributes=Bt(),Sa.insert=St().bind(null,"head"),Sa.domAPI=kt(),Sa.insertStyleElement=Pt(),Ct()(Ea.Z,Sa);const xa=Ea.Z&&Ea.Z.locals?Ea.Z.locals:void 0;var Ba=a(750),_a={};_a.styleTagTransform=Lt(),_a.setAttributes=Bt(),_a.insert=St().bind(null,"head"),_a.domAPI=kt(),_a.insertStyleElement=Pt(),Ct()(Ba.Z,_a);const Pa=Ba.Z&&Ba.Z.locals?Ba.Z.locals:void 0,Ta=function(e){var n=e.isEatin,r=e.hungerVal;return t.createElement("div",{className:Pa.headerContainer},t.createElement("p",null,n&&r>=1?"The more you eat, the more you get to poop!":!n&&r>0?"Great job poopin' there, poopin' guy!":"Poop Machine Man, GO!"))};var La=a(309);function Ra(e){var n=e.isPoopin,r=e.makePoop,a=e.hungerVal,o=e.style;return t.createElement("div",{className:o.guyActionCardContainer,onClick:function(){return a>=1?r("poopin"):null}},t.createElement("img",{className:o.guyIcon,src:La,alt:"poopin icon"}),t.createElement("div",{className:o.guyTextBox},t.createElement("p",{className:o.guyStatusText},!0===n&&0===a?"No more poops here!":n&&a>0?"I'm poopin!":null)))}var Oa=a(558);function Da(e){var n=e.isEatin,r=e.makeEat,a=e.hungerVal,o=e.maxPoops,i=e.style;return t.createElement("div",{className:i.guyActionCardContainer,onClick:function(){return a<o?r("eatin"):null}},t.createElement("img",{className:i.guyIcon,src:Oa,alt:"eatin"}),t.createElement("div",{className:i.guyTextBox},t.createElement("p",{className:i.guyStatusText},a===o?"I'm full. Make me poop so I can eat more!":n?"Im  eatin!":null)))}var Na=a(426),za={};za.styleTagTransform=Lt(),za.setAttributes=Bt(),za.insert=St().bind(null,"head"),za.domAPI=kt(),za.insertStyleElement=Pt(),Ct()(Na.Z,za),Na.Z&&Na.Z.locals&&Na.Z.locals;const ja=function(e,t){var n=!1;"#"===e[0].toString()&&(e=e.slice(1),n=!0);var r=parseInt(e,16),a=(r>>16)+t;a>255?a=255:a<0&&(a=0);var o=(r>>8&255)+t;o>255?o=255:o<0&&(o=0);var i=(255&r)+t;return i>255?i=255:i<0&&(i=0),(n?"#":"")+(i|o<<8|a<<16).toString(16)};function Fa(e){var n=e.hungerVal,r=e.maxPoops,a=function(){for(var e=[],a=r;a>=0;a--){var o=a.toString();10===a&&(o="9f"),a<=9&&(o=a+"e");var i={backgroundColor:ja("#ff"+o+"1d",a)};e.push(t.createElement("div",{key:a,className:"meter-element",style:i},a===n?a+" poops in my bum!":""))}return e}();return t.createElement("div",{className:"hunger-val-container"},a)}function Ua(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,i,l=[],u=!0,s=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=o.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,a=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(s)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ma(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ma(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ma(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ia(){var e=Ua((0,t.useState)(0),2),n=e[0],r=e[1],a=Ua((0,t.useState)(!1),2),o=a[0],i=a[1],l=Ua((0,t.useState)(!1),2),u=l[0],s=l[1],c=Ua((0,t.useState)(10),2),d=c[0],f=(c[1],function(e){switch(e){case"eatin":i(!0),s(!1),n<d&&r((function(e){return e+1}));break;case"poopin":i(!1),s(!0),n>0&&r((function(e){return e-1}))}});return t.createElement("div",{className:xa.appContainer},t.createElement(Ta,{isEatin:o,hungerVal:n}),t.createElement("div",{className:xa.bothGuysContainer},t.createElement(Da,{isEatin:o,makeEat:f,hungerVal:n,maxPoops:d,style:xa}),t.createElement(Fa,{hungerVal:n,maxPoops:d}),t.createElement(Ra,{isPoopin:u,makePoop:f,hungerVal:n,style:xa})))}var Va=a(9),qa={};qa.styleTagTransform=Lt(),qa.setAttributes=Bt(),qa.insert=St().bind(null,"head"),qa.domAPI=kt(),qa.insertStyleElement=Pt(),Ct()(Va.Z,qa);const Ha=Va.Z&&Va.Z.locals?Va.Z.locals:void 0;var Wa=a(567);function $a(){var e=Xe();return t.createElement("div",{style:Ha.container},t.createElement(vt,{to:"/"},"Back to Home"),t.createElement("img",{style:Ha.image,src:Wa,alt:"Error, Will Robinson!"}),t.createElement("h1",null,"Error, Will Robinson!"),t.createElement("p",{style:Ha.error},t.createElement("i",null,e.statusText||e.message)))}var Za=a(755),Ya={};Ya.styleTagTransform=Lt(),Ya.setAttributes=Bt(),Ya.insert=St().bind(null,"head"),Ya.domAPI=kt(),Ya.insertStyleElement=Pt(),Ct()(Za.Z,Ya);const Qa=Za.Z&&Za.Z.locals?Za.Z.locals:void 0;function Ka(){return t.createElement("div",{className:Qa.spinnerOfDoomWrapper},t.createElement("div",{className:Qa.headerContainer},t.createElement("p",null,"Spinner of Doom!")),t.createElement("div",{className:Qa.spinner},"Doom Doom!"))}var Xa,Ga=(Xa=[{path:"/",element:t.createElement(Mt,null)},{path:"/contact/*",element:t.createElement(wr,null),children:[{path:"contact_form",element:t.createElement(br,null)}]},{path:"/personal",element:t.createElement(Qt,null)},{path:"/spin_connect",element:t.createElement(ka,null)},{path:"/poop_machine",element:t.createElement(Ia,null)},{path:"*",errorElement:t.createElement($a,null)}],function(t){const n=t.window?t.window:"undefined"!=typeof window?window:void 0,r=void 0!==n&&void 0!==n.document&&void 0!==n.document.createElement,a=!r;let o;if(s(t.routes.length>0,"You must provide a non-empty routes array to createRouter"),t.mapRouteProperties)o=t.mapRouteProperties;else if(t.detectErrorBoundary){let e=t.detectErrorBoundary;o=t=>({hasErrorBoundary:e(t)})}else o=J;let i,u,d={},p=v(t.routes,o,void 0,d),h=t.basename||"/",g=l({v7_fetcherPersist:!1,v7_normalizeFormMethod:!1,v7_partialHydration:!1,v7_prependBasename:!1,v7_relativeSplatPath:!1},t.future),b=null,A=new Set,C=null,w=null,k=null,E=null!=t.hydrationData,S=y(p,t.history.location,h),x=null;if(null==S){let e=me(404,{pathname:t.history.location.pathname}),{matches:n,route:r}=he(p);S=n,x={[r.id]:e}}let B,_=S.some((e=>e.route.lazy)),P=S.some((e=>e.route.loader));if(_)u=!1;else if(P)if(g.v7_partialHydration){let e=t.hydrationData?t.hydrationData.loaderData:null,n=t.hydrationData?t.hydrationData.errors:null;u=S.every((t=>t.route.loader&&!0!==t.route.loader.hydrate&&(e&&void 0!==e[t.route.id]||n&&void 0!==n[t.route.id])))}else u=null!=t.hydrationData;else u=!0;let T,L={historyAction:t.history.action,location:t.history.location,matches:S,initialized:u,navigation:Q,restoreScrollPosition:null==t.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:t.hydrationData&&t.hydrationData.loaderData||{},actionData:t.hydrationData&&t.hydrationData.actionData||null,errors:t.hydrationData&&t.hydrationData.errors||x,fetchers:new Map,blockers:new Map},O=e.Pop,D=!1,N=!1,z=new Map,j=null,F=!1,U=!1,M=[],I=[],V=new Map,q=0,H=-1,W=new Map,$=new Set,Z=new Map,ae=new Map,oe=new Set,ie=new Map,se=new Map,ce=!1;function ve(e,t){void 0===t&&(t={}),L=l({},L,e);let n=[],r=[];g.v7_fetcherPersist&&L.fetchers.forEach(((e,t)=>{"idle"===e.state&&(oe.has(t)?r.push(t):n.push(t))})),[...A].forEach((e=>e(L,{deletedFetchers:r,unstable_viewTransitionOpts:t.viewTransitionOpts,unstable_flushSync:!0===t.flushSync}))),g.v7_fetcherPersist&&(n.forEach((e=>L.fetchers.delete(e))),r.forEach((e=>je(e))))}function Ee(n,r,a){var o,u;let s,{flushSync:c}=void 0===a?{}:a,d=null!=L.actionData&&null!=L.navigation.formMethod&&Ce(L.navigation.formMethod)&&"loading"===L.navigation.state&&!0!==(null==(o=n.state)?void 0:o._isRedirect);s=r.actionData?Object.keys(r.actionData).length>0?r.actionData:null:d?L.actionData:null;let f=r.loaderData?fe(L.loaderData,r.loaderData,r.matches||[],r.errors):L.loaderData,h=L.blockers;h.size>0&&(h=new Map(h),h.forEach(((e,t)=>h.set(t,X))));let m,g=!0===D||null!=L.navigation.formMethod&&Ce(L.navigation.formMethod)&&!0!==(null==(u=n.state)?void 0:u._isRedirect);if(i&&(p=i,i=void 0),F||O===e.Pop||(O===e.Push?t.history.push(n,n.state):O===e.Replace&&t.history.replace(n,n.state)),O===e.Pop){let e=z.get(L.location.pathname);e&&e.has(n.pathname)?m={currentLocation:L.location,nextLocation:n}:z.has(n.pathname)&&(m={currentLocation:n,nextLocation:L.location})}else if(N){let e=z.get(L.location.pathname);e?e.add(n.pathname):(e=new Set([n.pathname]),z.set(L.location.pathname,e)),m={currentLocation:L.location,nextLocation:n}}ve(l({},r,{actionData:s,loaderData:f,historyAction:O,location:n,initialized:!0,navigation:Q,revalidation:"idle",restoreScrollPosition:Ze(n,r.matches||L.matches),preventScrollReset:g,blockers:h}),{viewTransitionOpts:m,flushSync:!0===c}),O=e.Pop,D=!1,N=!1,F=!1,U=!1,M=[],I=[]}async function Te(n,r,a){T&&T.abort(),T=null,O=n,F=!0===(a&&a.startUninterruptedRevalidation),function(e,t){if(C&&k){let n=$e(e,t);C[n]=k()}}(L.location,L.matches),D=!0===(a&&a.preventScrollReset),N=!0===(a&&a.enableViewTransition);let u=i||p,s=a&&a.overrideNavigation,c=y(u,r,h),f=!0===(a&&a.flushSync);if(!c){let e=me(404,{pathname:r.pathname}),{matches:t,route:n}=he(u);return We(),void Ee(r,{matches:t,loaderData:{},errors:{[n.id]:e}},{flushSync:f})}if(L.initialized&&!U&&(v=L.location,b=r,v.pathname===b.pathname&&v.search===b.search&&(""===v.hash?""!==b.hash:v.hash===b.hash||""!==b.hash))&&!(a&&a.submission&&Ce(a.submission.formMethod)))return void Ee(r,{matches:c},{flushSync:f});var v,b;T=new AbortController;let A,w,E=ue(t.history,r,T.signal,a&&a.submission);if(a&&a.pendingError)w={[pe(c).route.id]:a.pendingError};else if(a&&a.submission&&Ce(a.submission.formMethod)){let t=await async function(t,n,r,a,i){void 0===i&&(i={}),Oe();let l,u=function(e,t){return{state:"submitting",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}(n,r);ve({navigation:u},{flushSync:!0===i.flushSync});let s=Se(a,n);if(s.route.action||s.route.lazy){if(l=await le("action",t,s,a,d,o,h,g.v7_relativeSplatPath),t.signal.aborted)return{shortCircuited:!0}}else l={type:m.error,error:me(405,{method:t.method,pathname:n.pathname,routeId:s.route.id})};if(Ae(l)){let e;return e=i&&null!=i.replace?i.replace:l.location===L.location.pathname+L.location.search,await Le(L,l,{submission:r,replace:e}),{shortCircuited:!0}}if(be(l)){let t=pe(a,s.route.id);return!0!==(i&&i.replace)&&(O=e.Push),{pendingActionData:{},pendingActionError:{[t.route.id]:l.error}}}if(ye(l))throw me(400,{type:"defer-action"});return{pendingActionData:{[s.route.id]:l.data}}}(E,r,a.submission,c,{replace:a.replace,flushSync:f});if(t.shortCircuited)return;A=t.pendingActionData,w=t.pendingActionError,s=Be(r,a.submission),f=!1,E=new Request(E.url,{signal:E.signal})}let{shortCircuited:S,loaderData:x,errors:B}=await async function(e,n,r,a,o,u,s,c,d,f,m){let v=a||Be(n,o),y=o||u||xe(v),b=i||p,[A,C]=re(t.history,L,r,y,n,g.v7_partialHydration&&!0===c,U,M,I,oe,Z,$,b,h,f,m);if(We((e=>!(r&&r.some((t=>t.route.id===e)))||A&&A.some((t=>t.route.id===e)))),H=++q,0===A.length&&0===C.length){let e=Me();return Ee(n,l({matches:r,loaderData:{},errors:m||null},f?{actionData:f}:{},e?{fetchers:new Map(L.fetchers)}:{}),{flushSync:d}),{shortCircuited:!0}}if(!(F||g.v7_partialHydration&&c)){C.forEach((e=>{let t=L.fetchers.get(e.key),n=_e(void 0,t?t.data:void 0);L.fetchers.set(e.key,n)}));let e=f||L.actionData;ve(l({navigation:v},e?0===Object.keys(e).length?{actionData:null}:{actionData:e}:{},C.length>0?{fetchers:new Map(L.fetchers)}:{}),{flushSync:d})}C.forEach((e=>{V.has(e.key)&&Fe(e.key),e.controller&&V.set(e.key,e.controller)}));let w=()=>C.forEach((e=>Fe(e.key)));T&&T.signal.addEventListener("abort",w);let{results:k,loaderResults:E,fetcherResults:S}=await Re(L.matches,r,A,C,e);if(e.signal.aborted)return{shortCircuited:!0};T&&T.signal.removeEventListener("abort",w),C.forEach((e=>V.delete(e.key)));let x=ge(k);if(x){if(x.idx>=A.length){let e=C[x.idx-A.length].key;$.add(e)}return await Le(L,x.result,{replace:s}),{shortCircuited:!0}}let{loaderData:B,errors:_}=de(L,r,A,E,m,C,S,ie);ie.forEach(((e,t)=>{e.subscribe((n=>{(n||e.done)&&ie.delete(t)}))}));let P=Me(),R=Ie(H);return l({loaderData:B,errors:_},P||R||C.length>0?{fetchers:new Map(L.fetchers)}:{})}(E,r,c,s,a&&a.submission,a&&a.fetcherSubmission,a&&a.replace,a&&!0===a.initialHydration,f,A,w);S||(T=null,Ee(r,l({matches:c},A?{actionData:A}:{},{loaderData:x,errors:B})))}async function Le(a,o,i){let{submission:u,fetcherSubmission:c,replace:d}=void 0===i?{}:i;o.revalidate&&(U=!0);let p=f(a.location,o.location,{_isRedirect:!0});if(s(p,"Expected a location on the redirect navigation"),r){let e=!1;if(o.reloadDocument)e=!0;else if(G.test(o.location)){const r=t.history.createURL(o.location);e=r.origin!==n.location.origin||null==R(r.pathname,h)}if(e)return void(d?n.location.replace(o.location):n.location.assign(o.location))}T=null;let m=!0===d?e.Replace:e.Push,{formMethod:g,formAction:v,formEncType:y}=a.navigation;!u&&!c&&g&&v&&y&&(u=xe(a.navigation));let b=u||c;if(Y.has(o.status)&&b&&Ce(b.formMethod))await Te(m,p,{submission:l({},b,{formAction:o.location}),preventScrollReset:D});else{let e=Be(p,u);await Te(m,p,{overrideNavigation:e,fetcherSubmission:c,preventScrollReset:D})}}async function Re(e,n,r,a,i){let l=await Promise.all([...r.map((e=>le("loader",i,e,n,d,o,h,g.v7_relativeSplatPath))),...a.map((e=>e.matches&&e.match&&e.controller?le("loader",ue(t.history,e.path,e.controller.signal),e.match,e.matches,d,o,h,g.v7_relativeSplatPath):{type:m.error,error:me(404,{pathname:e.path})}))]),u=l.slice(0,r.length),s=l.slice(r.length);return await Promise.all([we(e,r,u,u.map((()=>i.signal)),!1,L.loaderData),we(e,a.map((e=>e.match)),s,a.map((e=>e.controller?e.controller.signal:null)),!0)]),{results:l,loaderResults:u,fetcherResults:s}}function Oe(){U=!0,M.push(...We()),Z.forEach(((e,t)=>{V.has(t)&&(I.push(t),Fe(t))}))}function De(e,t,n){void 0===n&&(n={}),L.fetchers.set(e,t),ve({fetchers:new Map(L.fetchers)},{flushSync:!0===(n&&n.flushSync)})}function Ne(e,t,n,r){void 0===r&&(r={});let a=pe(L.matches,t);je(e),ve({errors:{[a.route.id]:n},fetchers:new Map(L.fetchers)},{flushSync:!0===(r&&r.flushSync)})}function ze(e){return g.v7_fetcherPersist&&(ae.set(e,(ae.get(e)||0)+1),oe.has(e)&&oe.delete(e)),L.fetchers.get(e)||K}function je(e){let t=L.fetchers.get(e);!V.has(e)||t&&"loading"===t.state&&W.has(e)||Fe(e),Z.delete(e),W.delete(e),$.delete(e),oe.delete(e),L.fetchers.delete(e)}function Fe(e){let t=V.get(e);s(t,"Expected fetch controller: "+e),t.abort(),V.delete(e)}function Ue(e){for(let t of e){let e=Pe(ze(t).data);L.fetchers.set(t,e)}}function Me(){let e=[],t=!1;for(let n of $){let r=L.fetchers.get(n);s(r,"Expected fetcher: "+n),"loading"===r.state&&($.delete(n),e.push(n),t=!0)}return Ue(e),t}function Ie(e){let t=[];for(let[n,r]of W)if(r<e){let e=L.fetchers.get(n);s(e,"Expected fetcher: "+n),"loading"===e.state&&(Fe(n),W.delete(n),t.push(n))}return Ue(t),t.length>0}function Ve(e){L.blockers.delete(e),se.delete(e)}function qe(e,t){let n=L.blockers.get(e)||X;s("unblocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"blocked"===t.state||"blocked"===n.state&&"proceeding"===t.state||"blocked"===n.state&&"unblocked"===t.state||"proceeding"===n.state&&"unblocked"===t.state,"Invalid blocker state transition: "+n.state+" -> "+t.state);let r=new Map(L.blockers);r.set(e,t),ve({blockers:r})}function He(e){let{currentLocation:t,nextLocation:n,historyAction:r}=e;if(0===se.size)return;se.size>1&&c(!1,"A router only supports one blocker at a time");let a=Array.from(se.entries()),[o,i]=a[a.length-1],l=L.blockers.get(o);return l&&"proceeding"===l.state?void 0:i({currentLocation:t,nextLocation:n,historyAction:r})?o:void 0}function We(e){let t=[];return ie.forEach(((n,r)=>{e&&!e(r)||(n.cancel(),t.push(r),ie.delete(r))})),t}function $e(e,t){return w&&w(e,t.map((e=>function(e,t){let{route:n,pathname:r,params:a}=e;return{id:n.id,pathname:r,params:a,data:t[n.id],handle:n.handle}}(e,L.loaderData))))||e.key}function Ze(e,t){if(C){let n=$e(e,t),r=C[n];if("number"==typeof r)return r}return null}return B={get basename(){return h},get future(){return g},get state(){return L},get routes(){return p},get window(){return n},initialize:function(){if(b=t.history.listen((e=>{let{action:n,location:r,delta:a}=e;if(ce)return void(ce=!1);c(0===se.size||null!=a,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let o=He({currentLocation:L.location,nextLocation:r,historyAction:n});return o&&null!=a?(ce=!0,t.history.go(-1*a),void qe(o,{state:"blocked",location:r,proceed(){qe(o,{state:"proceeding",proceed:void 0,reset:void 0,location:r}),t.history.go(a)},reset(){let e=new Map(L.blockers);e.set(o,X),ve({blockers:e})}})):Te(n,r)})),r){!function(e,t){try{let n=e.sessionStorage.getItem(ee);if(n){let e=JSON.parse(n);for(let[n,r]of Object.entries(e||{}))r&&Array.isArray(r)&&t.set(n,new Set(r||[]))}}catch(e){}}(n,z);let e=()=>function(e,t){if(t.size>0){let n={};for(let[e,r]of t)n[e]=[...r];try{e.sessionStorage.setItem(ee,JSON.stringify(n))}catch(e){c(!1,"Failed to save applied view transitions in sessionStorage ("+e+").")}}}(n,z);n.addEventListener("pagehide",e),j=()=>n.removeEventListener("pagehide",e)}return L.initialized||Te(e.Pop,L.location,{initialHydration:!0}),B},subscribe:function(e){return A.add(e),()=>A.delete(e)},enableScrollRestoration:function(e,t,n){if(C=e,k=t,w=n||null,!E&&L.navigation===Q){E=!0;let e=Ze(L.location,L.matches);null!=e&&ve({restoreScrollPosition:e})}return()=>{C=null,k=null,w=null}},navigate:async function n(r,a){if("number"==typeof r)return void t.history.go(r);let o=te(L.location,L.matches,h,g.v7_prependBasename,r,g.v7_relativeSplatPath,null==a?void 0:a.fromRouteId,null==a?void 0:a.relative),{path:i,submission:u,error:s}=ne(g.v7_normalizeFormMethod,!1,o,a),c=L.location,d=f(L.location,i,a&&a.state);d=l({},d,t.history.encodeLocation(d));let p=a&&null!=a.replace?a.replace:void 0,m=e.Push;!0===p?m=e.Replace:!1===p||null!=u&&Ce(u.formMethod)&&u.formAction===L.location.pathname+L.location.search&&(m=e.Replace);let v=a&&"preventScrollReset"in a?!0===a.preventScrollReset:void 0,y=!0===(a&&a.unstable_flushSync),b=He({currentLocation:c,nextLocation:d,historyAction:m});if(!b)return await Te(m,d,{submission:u,pendingError:s,preventScrollReset:v,replace:a&&a.replace,enableViewTransition:a&&a.unstable_viewTransition,flushSync:y});qe(b,{state:"blocked",location:d,proceed(){qe(b,{state:"proceeding",proceed:void 0,reset:void 0,location:d}),n(r,a)},reset(){let e=new Map(L.blockers);e.set(b,X),ve({blockers:e})}})},fetch:function(e,n,r,l){if(a)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");V.has(e)&&Fe(e);let u=!0===(l&&l.unstable_flushSync),c=i||p,f=te(L.location,L.matches,h,g.v7_prependBasename,r,g.v7_relativeSplatPath,n,null==l?void 0:l.relative),m=y(c,f,h);if(!m)return void Ne(e,n,me(404,{pathname:f}),{flushSync:u});let{path:v,submission:b,error:A}=ne(g.v7_normalizeFormMethod,!0,f,l);if(A)return void Ne(e,n,A,{flushSync:u});let C=Se(m,v);D=!0===(l&&l.preventScrollReset),b&&Ce(b.formMethod)?async function(e,n,r,a,l,u,c){if(Oe(),Z.delete(e),!a.route.action&&!a.route.lazy){let t=me(405,{method:c.formMethod,pathname:r,routeId:n});return void Ne(e,n,t,{flushSync:u})}let f=L.fetchers.get(e);De(e,function(e,t){return{state:"submitting",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t?t.data:void 0}}(c,f),{flushSync:u});let m=new AbortController,v=ue(t.history,r,m.signal,c);V.set(e,m);let b=q,A=await le("action",v,a,l,d,o,h,g.v7_relativeSplatPath);if(v.signal.aborted)return void(V.get(e)===m&&V.delete(e));if(g.v7_fetcherPersist&&oe.has(e)){if(Ae(A)||be(A))return void De(e,Pe(void 0))}else{if(Ae(A))return V.delete(e),H>b?void De(e,Pe(void 0)):($.add(e),De(e,_e(c)),Le(L,A,{fetcherSubmission:c}));if(be(A))return void Ne(e,n,A.error)}if(ye(A))throw me(400,{type:"defer-action"});let C=L.navigation.location||L.location,w=ue(t.history,C,m.signal),k=i||p,E="idle"!==L.navigation.state?y(k,L.navigation.location,h):L.matches;s(E,"Didn't find any matches after fetcher action");let S=++q;W.set(e,S);let x=_e(c,A.data);L.fetchers.set(e,x);let[B,_]=re(t.history,L,E,c,C,!1,U,M,I,oe,Z,$,k,h,{[a.route.id]:A.data},void 0);_.filter((t=>t.key!==e)).forEach((e=>{let t=e.key,n=L.fetchers.get(t),r=_e(void 0,n?n.data:void 0);L.fetchers.set(t,r),V.has(t)&&Fe(t),e.controller&&V.set(t,e.controller)})),ve({fetchers:new Map(L.fetchers)});let P=()=>_.forEach((e=>Fe(e.key)));m.signal.addEventListener("abort",P);let{results:R,loaderResults:D,fetcherResults:N}=await Re(L.matches,E,B,_,w);if(m.signal.aborted)return;m.signal.removeEventListener("abort",P),W.delete(e),V.delete(e),_.forEach((e=>V.delete(e.key)));let z=ge(R);if(z){if(z.idx>=B.length){let e=_[z.idx-B.length].key;$.add(e)}return Le(L,z.result)}let{loaderData:j,errors:F}=de(L,L.matches,B,D,void 0,_,N,ie);if(L.fetchers.has(e)){let t=Pe(A.data);L.fetchers.set(e,t)}Ie(S),"loading"===L.navigation.state&&S>H?(s(O,"Expected pending action"),T&&T.abort(),Ee(L.navigation.location,{matches:E,loaderData:j,errors:F,fetchers:new Map(L.fetchers)})):(ve({errors:F,loaderData:fe(L.loaderData,j,E,F),fetchers:new Map(L.fetchers)}),U=!1)}(e,n,v,C,m,u,b):(Z.set(e,{routeId:n,path:v}),async function(e,n,r,a,i,l,u){let c=L.fetchers.get(e);De(e,_e(u,c?c.data:void 0),{flushSync:l});let f=new AbortController,p=ue(t.history,r,f.signal);V.set(e,f);let m=q,v=await le("loader",p,a,i,d,o,h,g.v7_relativeSplatPath);if(ye(v)&&(v=await ke(v,p.signal,!0)||v),V.get(e)===f&&V.delete(e),!p.signal.aborted){if(!oe.has(e))return Ae(v)?H>m?void De(e,Pe(void 0)):($.add(e),void await Le(L,v)):void(be(v)?Ne(e,n,v.error):(s(!ye(v),"Unhandled fetcher deferred data"),De(e,Pe(v.data))));De(e,Pe(void 0))}}(e,n,v,C,m,u,b))},revalidate:function(){Oe(),ve({revalidation:"loading"}),"submitting"!==L.navigation.state&&("idle"!==L.navigation.state?Te(O||L.historyAction,L.navigation.location,{overrideNavigation:L.navigation}):Te(L.historyAction,L.location,{startUninterruptedRevalidation:!0}))},createHref:e=>t.history.createHref(e),encodeLocation:e=>t.history.encodeLocation(e),getFetcher:ze,deleteFetcher:function(e){if(g.v7_fetcherPersist){let t=(ae.get(e)||0)-1;t<=0?(ae.delete(e),oe.add(e)):ae.set(e,t)}else je(e);ve({fetchers:new Map(L.fetchers)})},dispose:function(){b&&b(),j&&j(),A.clear(),T&&T.abort(),L.fetchers.forEach(((e,t)=>je(t))),L.blockers.forEach(((e,t)=>Ve(t)))},getBlocker:function(e,t){let n=L.blockers.get(e)||X;return se.get(e)!==t&&se.set(e,t),n},deleteBlocker:Ve,_internalFetchControllers:V,_internalActiveDeferreds:ie,_internalSetRoutes:function(e){d={},i=v(e,o,void 0,d)}},B}({basename:void 0,future:at({},void 0,{v7_prependBasename:!0}),history:function(t){return void 0===t&&(t={}),function(t,n,r,a){void 0===a&&(a={});let{window:o=document.defaultView,v5Compat:i=!1}=a,c=o.history,h=e.Pop,m=null,g=v();function v(){return(c.state||{idx:null}).idx}function y(){h=e.Pop;let t=v(),n=null==t?null:t-g;g=t,m&&m({action:h,location:A.location,delta:n})}function b(e){let t="null"!==o.location.origin?o.location.origin:o.location.href,n="string"==typeof e?e:p(e);return s(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==g&&(g=0,c.replaceState(l({},c.state,{idx:g}),""));let A={get action(){return h},get location(){return t(o,c)},listen(e){if(m)throw new Error("A history only accepts one active listener");return o.addEventListener(u,y),m=e,()=>{o.removeEventListener(u,y),m=null}},createHref:e=>n(o,e),createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(t,n){h=e.Push;let a=f(A.location,t,n);r&&r(a,t),g=v()+1;let l=d(a,g),u=A.createHref(a);try{c.pushState(l,"",u)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;o.location.assign(u)}i&&m&&m({action:h,location:A.location,delta:1})},replace:function(t,n){h=e.Replace;let a=f(A.location,t,n);r&&r(a,t),g=v();let o=d(a,g),l=A.createHref(a);c.replaceState(o,"",l),i&&m&&m({action:h,location:A.location,delta:0})},go:e=>c.go(e)};return A}((function(e,t){let{pathname:n,search:r,hash:a}=e.location;return f("",{pathname:n,search:r,hash:a},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:p(t)}),null,t)}({window:void 0}),hydrationData:function(){var e;let t=null==(e=window)?void 0:e.__staticRouterHydrationData;return t&&t.errors&&(t=at({},t,{errors:it(t.errors)})),t}(),routes:Xa,mapRouteProperties:function(e){let n={hasErrorBoundary:null!=e.ErrorBoundary||null!=e.errorElement};return e.Component&&Object.assign(n,{element:t.createElement(e.Component),Component:void 0}),e.HydrateFallback&&Object.assign(n,{hydrateFallbackElement:t.createElement(e.HydrateFallback),HydrateFallback:void 0}),e.ErrorBoundary&&Object.assign(n,{errorElement:t.createElement(e.ErrorBoundary),ErrorBoundary:void 0}),n},window:void 0}).initialize()),Ja=document.getElementById("root");(0,r.s)(Ja).render(t.createElement(t.StrictMode,null,t.createElement(pt,{router:Ga,fallbackElement:t.createElement(Ka,null),future:{v7_startTransition:!0}})))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE1BQXRCOVUsRUFBTXdVLGNBbUN6RCxPQWpDSXhVLEVBQU1waUIsV0FNUnB4QixPQUFPMEUsT0FBTzY1RSxFQUFTLENBQ3JCajZELFFBQXNCLGdCQUFvQmt2QixFQUFNcGlCLFdBQ2hEQSxlQUFXOTRCLElBR1hrN0MsRUFBTW1VLGlCQU1SM25ELE9BQU8wRSxPQUFPNjVFLEVBQVMsQ0FDckIzMkIsdUJBQXFDLGdCQUFvQnBVLEVBQU1tVSxpQkFDL0RBLHFCQUFpQnJ2RCxJQUdqQms3QyxFQUFNOFUsZUFNUnRvRCxPQUFPMEUsT0FBTzY1RSxFQUFTLENBQ3JCdjJCLGFBQTJCLGdCQUFvQnhVLEVBQU04VSxlQUNyREEsbUJBQWVod0QsSUFHWmltRixDQUNULEVDeHFDSXQ5RSxZQUF1QixJQUN0Qm82RSxjbUNsTENtRCxHQUFVdDlFLFNBQVN1OUUsZUFBZSxTQUMzQnIwQyxFQUFBQSxFQUFBQSxHQUFXbzBDLElBRW5CNzRFLE9BQ0pqTixFQUFBQSxjQUFDQSxFQUFBQSxXQUFnQixLQUNoQkEsRUFBQUEsY0FBQ2dtRixHQUFjLENBQ2RqNUIsT0FBU0EsR0FDVGtHLGdCQUFrQmp6RCxFQUFBQSxjQUFDKzdFLEdBQWEsTUFDaENwdUIsT0FBUSxDQUFFa0csb0JBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS93ZWJwYWNrL3J1bnRpbWUvY3JlYXRlIGZha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vc3JjL3BhZ2VzL1BlcnNvbmFsL2Jpb1RleHQuanMiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL3NyYy9wYWdlcy9jb21wb25lbnRzL05hdkJ0bi9pbmRleC5tb2R1bGUuY3NzPzcwZWUiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL3NyYy9wYWdlcy9jb21wb25lbnRzL05hdkJ0bi9pbmRleC5qcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vbm9kZV9tb2R1bGVzL2JlZm9yZS1hZnRlci1ob29rL2luZGV4LmpzIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9ub2RlX21vZHVsZXMvYmVmb3JlLWFmdGVyLWhvb2svbGliL2FkZC5qcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vbm9kZV9tb2R1bGVzL2JlZm9yZS1hZnRlci1ob29rL2xpYi9yZWdpc3Rlci5qcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vbm9kZV9tb2R1bGVzL2JlZm9yZS1hZnRlci1ob29rL2xpYi9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL3NyYy9wYWdlcy9Db250YWN0L3N0eWxlL2NvbnRhY3RGb3JtLm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL3NyYy9wYWdlcy9Db250YWN0L3N0eWxlL2luZGV4Lm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL3NyYy9wYWdlcy9FcnJvclBhZ2UvaW5kZXgubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vc3JjL3BhZ2VzL0hvbWVQYWdlL2luZGV4Lm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL3NyYy9wYWdlcy9QZXJzb25hbC9zdHlsZS9pbmRleC5tb2R1bGUuY3NzIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9zcmMvcGFnZXMvUG9vcE1hY2hpbmUvSGVhZGVyL2hlYWRlci5tb2R1bGUuY3NzIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9zcmMvcGFnZXMvUG9vcE1hY2hpbmUvaHVuZ2VyVmFsL2h1bmdlclZhbC5jc3MiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL3NyYy9wYWdlcy9Qb29wTWFjaGluZS9pbmRleC5zdHlsZS5tb2R1bGUuY3NzIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9zcmMvcGFnZXMvU3BpbkNvbm5lY3QvaW5kZXgubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vc3JjL3BhZ2VzL1NwaW5uZXJPZkRvb20vaW5kZXgubW9kdWxlLmNzcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vc3JjL3BhZ2VzL2NvbXBvbmVudHMvTmF2QnRuL2luZGV4Lm1vZHVsZS5jc3MiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL3NyYy9yb290LnN0eWxlLmNzcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL25vZGVfbW9kdWxlcy9vbmNlL29uY2UuanMiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL25vZGVfbW9kdWxlcy93cmFwcHkvd3JhcHB5LmpzIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vbm9kZV9tb2R1bGVzL0ByZW1peC1ydW4vcm91dGVyL2Rpc3Qvcm91dGVyLmpzIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL3NyYy9yb290LnN0eWxlLmNzcz81MTZkIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9zcmMvcGFnZXMvSG9tZVBhZ2UvaW5kZXgubW9kdWxlLmNzcz9jZGZlIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9zcmMvcGFnZXMvSG9tZVBhZ2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL3NyYy9wYWdlcy9QZXJzb25hbC9zdHlsZS9pbmRleC5tb2R1bGUuY3NzP2MyMmIiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL3NyYy9wYWdlcy9QZXJzb25hbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vc3JjL3BhZ2VzL0NvbnRhY3Qvc3R5bGUvaW5kZXgubW9kdWxlLmNzcz9mOTFjIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9ub2RlX21vZHVsZXMvcmVhY3QtaG9vay1mb3JtL2Rpc3QvaW5kZXguZXNtLm1qcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vc3JjL3BhZ2VzL0NvbnRhY3Qvc3R5bGUvY29udGFjdEZvcm0ubW9kdWxlLmNzcz8yYmM5Iiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9zcmMvcGFnZXMvQ29udGFjdC9jb21wb25lbnRzL2NvbnRhY3RGb3JtLmpzIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9zcmMvcGFnZXMvQ29udGFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vc3JjL3BhZ2VzL1NwaW5Db25uZWN0L2luZGV4Lm1vZHVsZS5jc3M/N2E0ZSIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vbm9kZV9tb2R1bGVzL3VuaXZlcnNhbC11c2VyLWFnZW50L2Rpc3Qtd2ViL2luZGV4LmpzIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvZW5kcG9pbnQvZGlzdC13ZWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL25vZGVfbW9kdWxlcy9kZXByZWNhdGlvbi9kaXN0LXdlYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vbm9kZV9tb2R1bGVzL0BvY3Rva2l0L3JlcXVlc3QtZXJyb3IvZGlzdC13ZWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL25vZGVfbW9kdWxlcy9Ab2N0b2tpdC9yZXF1ZXN0L2Rpc3Qtd2ViL2luZGV4LmpzIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9ub2RlX21vZHVsZXMvQG9jdG9raXQvZ3JhcGhxbC9kaXN0LXdlYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vbm9kZV9tb2R1bGVzL0BvY3Rva2l0L2F1dGgtdG9rZW4vZGlzdC13ZWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL25vZGVfbW9kdWxlcy9Ab2N0b2tpdC9jb3JlL2Rpc3Qtd2ViL2luZGV4LmpzIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9zcmMvcGFnZXMvU3BpbkNvbm5lY3QvaGVscGVycy5qcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vc3JjL3BhZ2VzL1NwaW5Db25uZWN0L2luZGV4LmpzIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9zcmMvcGFnZXMvUG9vcE1hY2hpbmUvaW5kZXguc3R5bGUubW9kdWxlLmNzcz9lZGQ2Iiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9zcmMvcGFnZXMvUG9vcE1hY2hpbmUvSGVhZGVyL2hlYWRlci5tb2R1bGUuY3NzPzAzYjMiLCJ3ZWJwYWNrOi8vbXVzdGFjaGVfbWFjaGluZS8uL3NyYy9wYWdlcy9Qb29wTWFjaGluZS9IZWFkZXIvSGVhZGVyLmpzIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9zcmMvcGFnZXMvUG9vcE1hY2hpbmUvcG9vcGluR3V5L1Bvb3Bpbkd1eS5qcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vc3JjL3BhZ2VzL1Bvb3BNYWNoaW5lL2VhdGluR3V5L0VhdGluR3V5LmpzIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9zcmMvcGFnZXMvUG9vcE1hY2hpbmUvaHVuZ2VyVmFsL2h1bmdlclZhbC5jc3M/ZGMyNCIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vc3JjL3BhZ2VzL1Bvb3BNYWNoaW5lL2h1bmdlclZhbC9saWdodGVuRGFya2VuLmpzIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9zcmMvcGFnZXMvUG9vcE1hY2hpbmUvaHVuZ2VyVmFsL0h1bmdlclZhbC5qcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vc3JjL3BhZ2VzL1Bvb3BNYWNoaW5lL2luZGV4LmpzIiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9zcmMvcGFnZXMvRXJyb3JQYWdlL2luZGV4Lm1vZHVsZS5jc3M/MjhmZSIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vc3JjL3BhZ2VzL0Vycm9yUGFnZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vc3JjL3BhZ2VzL1NwaW5uZXJPZkRvb20vaW5kZXgubW9kdWxlLmNzcz84MGY4Iiwid2VicGFjazovL211c3RhY2hlX21hY2hpbmUvLi9zcmMvcGFnZXMvU3Bpbm5lck9mRG9vbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9tdXN0YWNoZV9tYWNoaW5lLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiA/IChvYmopID0+IChPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSkgOiAob2JqKSA9PiAob2JqLl9fcHJvdG9fXyk7XG52YXIgbGVhZlByb3RvdHlwZXM7XG4vLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3Rcbi8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLy8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3Rcbi8vIG1vZGUgJiAxNjogcmV0dXJuIHZhbHVlIHdoZW4gaXQncyBQcm9taXNlLWxpa2Vcbi8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbl9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG5cdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IHRoaXModmFsdWUpO1xuXHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuXHRpZih0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlKSB7XG5cdFx0aWYoKG1vZGUgJiA0KSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG5cdFx0aWYoKG1vZGUgJiAxNikgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicpIHJldHVybiB2YWx1ZTtcblx0fVxuXHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuXHR2YXIgZGVmID0ge307XG5cdGxlYWZQcm90b3R5cGVzID0gbGVhZlByb3RvdHlwZXMgfHwgW251bGwsIGdldFByb3RvKHt9KSwgZ2V0UHJvdG8oW10pLCBnZXRQcm90byhnZXRQcm90byldO1xuXHRmb3IodmFyIGN1cnJlbnQgPSBtb2RlICYgMiAmJiB2YWx1ZTsgdHlwZW9mIGN1cnJlbnQgPT0gJ29iamVjdCcgJiYgIX5sZWFmUHJvdG90eXBlcy5pbmRleE9mKGN1cnJlbnQpOyBjdXJyZW50ID0gZ2V0UHJvdG8oY3VycmVudCkpIHtcblx0XHRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjdXJyZW50KS5mb3JFYWNoKChrZXkpID0+IChkZWZba2V5XSA9ICgpID0+ICh2YWx1ZVtrZXldKSkpO1xuXHR9XG5cdGRlZlsnZGVmYXVsdCddID0gKCkgPT4gKHZhbHVlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBkZWYpO1xuXHRyZXR1cm4gbnM7XG59OyIsImV4cG9ydCBjb25zdCBiaW9UZXh0ID0gXCJIZWxsbywgSSdtIERhbmllbC4gSSdtIGFuIGFzcGlyaW5nIHNvZnR3YXJlIGRldmVsb3BlciB3aXRoIGEgcGFzc2lvbiBmb3IgY3JlYXRpbmcgaW5ub3ZhdGl2ZSBzb2x1dGlvbnMuIEkgbG92ZSBjb2RpbmcsIGxlYXJuaW5nIG5ldyB0ZWNobm9sb2dpZXMsIGFuZCBjb2xsYWJvcmF0aW5nIHdpdGggb3RoZXJzIHRvIGJyaW5nIGlkZWFzIHRvIGxpZmUuIEluIG15IGZyZWUgdGltZSwgSSBlbmpveSBoaWtpbmcsIHJlYWRpbmcsIGFuZCBleHBsb3JpbmcgbmV3IHBsYWNlcy4gSSdtIGV4Y2l0ZWQgdG8gc2hhcmUgbXkgam91cm5leSBhbmQgY29ubmVjdCB3aXRoIGxpa2UtbWluZGVkIGluZGl2aWR1YWxzLlwiO1xuZXhwb3J0IGNvbnN0IHBlcnNvbk5hbWUgPSBcIkRhbmllbCBCdWNrZXRcIjtcbmV4cG9ydCBjb25zdCBwb3NpdGlvbiA9IFwiRm91ZGluZyBGYXRoZXIsIEJ1Y2tldCBMaW1pdGVkLCBMTENcIiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZSBmcm9tICcuL2luZGV4Lm1vZHVsZS5jc3MnO1xuXG5leHBvcnQgZnVuY3Rpb24gTmF2QnRuKGxvYywgZnVuYykge1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlLm5hdkJ0bkNvbnRhaW5lcn0+XG5cdFx0XHRcdDxpbnB1dFxuXHRcdFx0XHRcdGNsYXNzTmFtZT17c3R5bGUubmF2QnRufVxuXHRcdFx0XHRcdHR5cGU9J2J1dHRvbidcblx0XHRcdFx0XHR2YWx1ZT17YDwke2xvY30gLz5gfVxuXHRcdFx0XHRcdG9uQ2xpY2s9eygpID0+IGZ1bmMoKX0gLz5cblx0XHRcdDwvZGl2PlxuICApXG59IiwidmFyIHJlZ2lzdGVyID0gcmVxdWlyZShcIi4vbGliL3JlZ2lzdGVyXCIpO1xudmFyIGFkZEhvb2sgPSByZXF1aXJlKFwiLi9saWIvYWRkXCIpO1xudmFyIHJlbW92ZUhvb2sgPSByZXF1aXJlKFwiLi9saWIvcmVtb3ZlXCIpO1xuXG4vLyBiaW5kIHdpdGggYXJyYXkgb2YgYXJndW1lbnRzOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjE3OTI5MTNcbnZhciBiaW5kID0gRnVuY3Rpb24uYmluZDtcbnZhciBiaW5kYWJsZSA9IGJpbmQuYmluZChiaW5kKTtcblxuZnVuY3Rpb24gYmluZEFwaShob29rLCBzdGF0ZSwgbmFtZSkge1xuICB2YXIgcmVtb3ZlSG9va1JlZiA9IGJpbmRhYmxlKHJlbW92ZUhvb2ssIG51bGwpLmFwcGx5KFxuICAgIG51bGwsXG4gICAgbmFtZSA/IFtzdGF0ZSwgbmFtZV0gOiBbc3RhdGVdXG4gICk7XG4gIGhvb2suYXBpID0geyByZW1vdmU6IHJlbW92ZUhvb2tSZWYgfTtcbiAgaG9vay5yZW1vdmUgPSByZW1vdmVIb29rUmVmO1xuICBbXCJiZWZvcmVcIiwgXCJlcnJvclwiLCBcImFmdGVyXCIsIFwid3JhcFwiXS5mb3JFYWNoKGZ1bmN0aW9uIChraW5kKSB7XG4gICAgdmFyIGFyZ3MgPSBuYW1lID8gW3N0YXRlLCBraW5kLCBuYW1lXSA6IFtzdGF0ZSwga2luZF07XG4gICAgaG9va1traW5kXSA9IGhvb2suYXBpW2tpbmRdID0gYmluZGFibGUoYWRkSG9vaywgbnVsbCkuYXBwbHkobnVsbCwgYXJncyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBIb29rU2luZ3VsYXIoKSB7XG4gIHZhciBzaW5ndWxhckhvb2tOYW1lID0gXCJoXCI7XG4gIHZhciBzaW5ndWxhckhvb2tTdGF0ZSA9IHtcbiAgICByZWdpc3RyeToge30sXG4gIH07XG4gIHZhciBzaW5ndWxhckhvb2sgPSByZWdpc3Rlci5iaW5kKG51bGwsIHNpbmd1bGFySG9va1N0YXRlLCBzaW5ndWxhckhvb2tOYW1lKTtcbiAgYmluZEFwaShzaW5ndWxhckhvb2ssIHNpbmd1bGFySG9va1N0YXRlLCBzaW5ndWxhckhvb2tOYW1lKTtcbiAgcmV0dXJuIHNpbmd1bGFySG9vaztcbn1cblxuZnVuY3Rpb24gSG9va0NvbGxlY3Rpb24oKSB7XG4gIHZhciBzdGF0ZSA9IHtcbiAgICByZWdpc3RyeToge30sXG4gIH07XG5cbiAgdmFyIGhvb2sgPSByZWdpc3Rlci5iaW5kKG51bGwsIHN0YXRlKTtcbiAgYmluZEFwaShob29rLCBzdGF0ZSk7XG5cbiAgcmV0dXJuIGhvb2s7XG59XG5cbnZhciBjb2xsZWN0aW9uSG9va0RlcHJlY2F0aW9uTWVzc2FnZURpc3BsYXllZCA9IGZhbHNlO1xuZnVuY3Rpb24gSG9vaygpIHtcbiAgaWYgKCFjb2xsZWN0aW9uSG9va0RlcHJlY2F0aW9uTWVzc2FnZURpc3BsYXllZCkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdbYmVmb3JlLWFmdGVyLWhvb2tdOiBcIkhvb2soKVwiIHJlcHVycG9zaW5nIHdhcm5pbmcsIHVzZSBcIkhvb2suQ29sbGVjdGlvbigpXCIuIFJlYWQgbW9yZTogaHR0cHM6Ly9naXQuaW8vdXBncmFkZS1iZWZvcmUtYWZ0ZXItaG9vay10by0xLjQnXG4gICAgKTtcbiAgICBjb2xsZWN0aW9uSG9va0RlcHJlY2F0aW9uTWVzc2FnZURpc3BsYXllZCA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIEhvb2tDb2xsZWN0aW9uKCk7XG59XG5cbkhvb2suU2luZ3VsYXIgPSBIb29rU2luZ3VsYXIuYmluZCgpO1xuSG9vay5Db2xsZWN0aW9uID0gSG9va0NvbGxlY3Rpb24uYmluZCgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhvb2s7XG4vLyBleHBvc2UgY29uc3RydWN0b3JzIGFzIGEgbmFtZWQgcHJvcGVydHkgZm9yIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLkhvb2sgPSBIb29rO1xubW9kdWxlLmV4cG9ydHMuU2luZ3VsYXIgPSBIb29rLlNpbmd1bGFyO1xubW9kdWxlLmV4cG9ydHMuQ29sbGVjdGlvbiA9IEhvb2suQ29sbGVjdGlvbjtcbiIsIm1vZHVsZS5leHBvcnRzID0gYWRkSG9vaztcblxuZnVuY3Rpb24gYWRkSG9vayhzdGF0ZSwga2luZCwgbmFtZSwgaG9vaykge1xuICB2YXIgb3JpZyA9IGhvb2s7XG4gIGlmICghc3RhdGUucmVnaXN0cnlbbmFtZV0pIHtcbiAgICBzdGF0ZS5yZWdpc3RyeVtuYW1lXSA9IFtdO1xuICB9XG5cbiAgaWYgKGtpbmQgPT09IFwiYmVmb3JlXCIpIHtcbiAgICBob29rID0gZnVuY3Rpb24gKG1ldGhvZCwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgIC50aGVuKG9yaWcuYmluZChudWxsLCBvcHRpb25zKSlcbiAgICAgICAgLnRoZW4obWV0aG9kLmJpbmQobnVsbCwgb3B0aW9ucykpO1xuICAgIH07XG4gIH1cblxuICBpZiAoa2luZCA9PT0gXCJhZnRlclwiKSB7XG4gICAgaG9vayA9IGZ1bmN0aW9uIChtZXRob2QsIG9wdGlvbnMpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgLnRoZW4obWV0aG9kLmJpbmQobnVsbCwgb3B0aW9ucykpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHRfKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0XztcbiAgICAgICAgICByZXR1cm4gb3JpZyhyZXN1bHQsIG9wdGlvbnMpO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChraW5kID09PSBcImVycm9yXCIpIHtcbiAgICBob29rID0gZnVuY3Rpb24gKG1ldGhvZCwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgIC50aGVuKG1ldGhvZC5iaW5kKG51bGwsIG9wdGlvbnMpKVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIG9yaWcoZXJyb3IsIG9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgc3RhdGUucmVnaXN0cnlbbmFtZV0ucHVzaCh7XG4gICAgaG9vazogaG9vayxcbiAgICBvcmlnOiBvcmlnLFxuICB9KTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVnaXN0ZXI7XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyKHN0YXRlLCBuYW1lLCBtZXRob2QsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBtZXRob2QgIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIm1ldGhvZCBmb3IgYmVmb3JlIGhvb2sgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkobmFtZSkpIHtcbiAgICByZXR1cm4gbmFtZS5yZXZlcnNlKCkucmVkdWNlKGZ1bmN0aW9uIChjYWxsYmFjaywgbmFtZSkge1xuICAgICAgcmV0dXJuIHJlZ2lzdGVyLmJpbmQobnVsbCwgc3RhdGUsIG5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKTtcbiAgICB9LCBtZXRob2QpKCk7XG4gIH1cblxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFzdGF0ZS5yZWdpc3RyeVtuYW1lXSkge1xuICAgICAgcmV0dXJuIG1ldGhvZChvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdGUucmVnaXN0cnlbbmFtZV0ucmVkdWNlKGZ1bmN0aW9uIChtZXRob2QsIHJlZ2lzdGVyZWQpIHtcbiAgICAgIHJldHVybiByZWdpc3RlcmVkLmhvb2suYmluZChudWxsLCBtZXRob2QsIG9wdGlvbnMpO1xuICAgIH0sIG1ldGhvZCkoKTtcbiAgfSk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlbW92ZUhvb2s7XG5cbmZ1bmN0aW9uIHJlbW92ZUhvb2soc3RhdGUsIG5hbWUsIG1ldGhvZCkge1xuICBpZiAoIXN0YXRlLnJlZ2lzdHJ5W25hbWVdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gc3RhdGUucmVnaXN0cnlbbmFtZV1cbiAgICAubWFwKGZ1bmN0aW9uIChyZWdpc3RlcmVkKSB7XG4gICAgICByZXR1cm4gcmVnaXN0ZXJlZC5vcmlnO1xuICAgIH0pXG4gICAgLmluZGV4T2YobWV0aG9kKTtcblxuICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3RhdGUucmVnaXN0cnlbbmFtZV0uc3BsaWNlKGluZGV4LCAxKTtcbn1cbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuTHpxME1LUWc1cVFBQ1BINlFoMHQge1xuXHRkaXNwbGF5OiBmbGV4O1xuXHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHR3aWR0aDogOTUlO1xuXHRoZWlnaHQ6IDYwcmVtO1xuXHRib3JkZXItcmFkaXVzOiAxcmVtO1xufVxuXG4udHoxS1l5Z0xLeXFIWjg1TFU0YmYge1xuXHRkaXNwbGF5OiBmbGV4O1xuXHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRnYXA6IDFyZW07XG5cdG1hcmdpbi10b3A6IDFyZW07XG5cdG1pbi1oZWlnaHQ6IDhyZW07XG5cdHdpZHRoOiA5MCU7XG59XG5cbi50ejFLWXlnTEt5cUhaODVMVTRiZiBpbnB1dCB7XG5cdGhlaWdodDogNnJlbTtcblx0d2lkdGg6IDI4cmVtO1xuXHRtYXJnaW46IGF1dG87XG5cdGJvcmRlci1yYWRpdXM6IDJyZW07XG5cdGZvbnQtc2l6ZTogMi41cmVtO1xuXHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdGJvcmRlcjogLjI1cmVtIHNvbGlkICMwMDdiZmY7XG59XG5cbi50ejFLWXlnTEt5cUhaODVMVTRiZiB0ZXh0YXJlYSB7XG5cdHJlc2l6ZTogbm9uZTtcblx0Ym9yZGVyOiBub25lO1xuXHRvdXRsaW5lOiBub25lO1xuXHRzY3JvbGxiYXItd2lkdGg6IG5vbmU7XG5cdGhlaWdodDogMjJyZW07XG5cdHdpZHRoOiA5MCU7XG5cdG1hcmdpbjogYXV0bztcblx0Zm9udC1zaXplOiAycmVtO1xuXHRib3JkZXItcmFkaXVzOiAxLjc1cmVtO1xuXHRwYWRkaW5nOiAxLjc1cmVtO1xuXHRib3JkZXI6IC4yNXJlbSBzb2xpZCAjMDA3YmZmXG59XG5cbi5JOWtpWVVWbEFRWGVnSmlnMXBiayB7XG5cdGhlaWdodDogMnJlbTtcblx0Zm9udC1mYW1pbHk6IFVidW50dV9SZWc7XG5cdGZvbnQtc2l6ZTogMS41cmVtO1xuXHRtYXJnaW46IDAuNXJlbSBhdXRvO1xufWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3BhZ2VzL0NvbnRhY3Qvc3R5bGUvY29udGFjdEZvcm0ubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtDQUNDLGFBQWE7Q0FDYixzQkFBc0I7Q0FDdEIsbUJBQW1CO0NBQ25CLFVBQVU7Q0FDVixhQUFhO0NBQ2IsbUJBQW1CO0FBQ3BCOztBQUVBO0NBQ0MsYUFBYTtDQUNiLHNCQUFzQjtDQUN0QixTQUFTO0NBQ1QsZ0JBQWdCO0NBQ2hCLGdCQUFnQjtDQUNoQixVQUFVO0FBQ1g7O0FBRUE7Q0FDQyxZQUFZO0NBQ1osWUFBWTtDQUNaLFlBQVk7Q0FDWixtQkFBbUI7Q0FDbkIsaUJBQWlCO0NBQ2pCLGtCQUFrQjtDQUNsQiw0QkFBNEI7QUFDN0I7O0FBRUE7Q0FDQyxZQUFZO0NBQ1osWUFBWTtDQUNaLGFBQWE7Q0FDYixxQkFBcUI7Q0FDckIsYUFBYTtDQUNiLFVBQVU7Q0FDVixZQUFZO0NBQ1osZUFBZTtDQUNmLHNCQUFzQjtDQUN0QixnQkFBZ0I7Q0FDaEI7QUFDRDs7QUFFQTtDQUNDLFlBQVk7Q0FDWix1QkFBdUI7Q0FDdkIsaUJBQWlCO0NBQ2pCLG1CQUFtQjtBQUNwQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuZm9ybUNvbnRhaW5lciB7XFxuXFx0ZGlzcGxheTogZmxleDtcXG5cXHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFx0d2lkdGg6IDk1JTtcXG5cXHRoZWlnaHQ6IDYwcmVtO1xcblxcdGJvcmRlci1yYWRpdXM6IDFyZW07XFxufVxcblxcbi5pbnB1dENvbnRhaW5lciB7XFxuXFx0ZGlzcGxheTogZmxleDtcXG5cXHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcdGdhcDogMXJlbTtcXG5cXHRtYXJnaW4tdG9wOiAxcmVtO1xcblxcdG1pbi1oZWlnaHQ6IDhyZW07XFxuXFx0d2lkdGg6IDkwJTtcXG59XFxuXFxuLmlucHV0Q29udGFpbmVyIGlucHV0IHtcXG5cXHRoZWlnaHQ6IDZyZW07XFxuXFx0d2lkdGg6IDI4cmVtO1xcblxcdG1hcmdpbjogYXV0bztcXG5cXHRib3JkZXItcmFkaXVzOiAycmVtO1xcblxcdGZvbnQtc2l6ZTogMi41cmVtO1xcblxcdHRleHQtYWxpZ246IGNlbnRlcjtcXG5cXHRib3JkZXI6IC4yNXJlbSBzb2xpZCAjMDA3YmZmO1xcbn1cXG5cXG4uaW5wdXRDb250YWluZXIgdGV4dGFyZWEge1xcblxcdHJlc2l6ZTogbm9uZTtcXG5cXHRib3JkZXI6IG5vbmU7XFxuXFx0b3V0bGluZTogbm9uZTtcXG5cXHRzY3JvbGxiYXItd2lkdGg6IG5vbmU7XFxuXFx0aGVpZ2h0OiAyMnJlbTtcXG5cXHR3aWR0aDogOTAlO1xcblxcdG1hcmdpbjogYXV0bztcXG5cXHRmb250LXNpemU6IDJyZW07XFxuXFx0Ym9yZGVyLXJhZGl1czogMS43NXJlbTtcXG5cXHRwYWRkaW5nOiAxLjc1cmVtO1xcblxcdGJvcmRlcjogLjI1cmVtIHNvbGlkICMwMDdiZmZcXG59XFxuXFxuLmVycm9yTGFiZWwge1xcblxcdGhlaWdodDogMnJlbTtcXG5cXHRmb250LWZhbWlseTogVWJ1bnR1X1JlZztcXG5cXHRmb250LXNpemU6IDEuNXJlbTtcXG5cXHRtYXJnaW46IDAuNXJlbSBhdXRvO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJmb3JtQ29udGFpbmVyXCI6IGBMenEwTUtRZzVxUUFDUEg2UWgwdGAsXG5cdFwiaW5wdXRDb250YWluZXJcIjogYHR6MUtZeWdMS3lxSFo4NUxVNGJmYCxcblx0XCJlcnJvckxhYmVsXCI6IGBJOWtpWVVWbEFRWGVnSmlnMXBia2Bcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuWGg2elQwNW1YQzIzNUozcnFKUnEge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGhlaWdodDogMTAwdmg7XG4gIGZvbnQtZmFtaWx5OiBMYWlsYV9NZWQ7XG4gIGZvbnQtc2l6ZTogM3JlbTtcbn1cblxuLkZqak9xYjJmNV9XblJEMTMxSGtxIHtcblx0aGVpZ2h0OiAyNXJlbTtcblx0d2lkdGg6IDk1JTtcblx0Zm9udC1mYW1pbHk6IExhaWxhX01lZDtcblx0bWFyZ2luOiAxcmVtIGF1dG87XG5cdGRpc3BsYXk6IGZsZXg7XG5cdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cdGp1c3RpZnktY29udGVudDogY2VudGVyO1xufVxuXG4uRmpqT3FiMmY1X1duUkQxMzFIa3EgcDpmaXJzdC1jaGlsZCB7XG5cdGZvbnQtc2l6ZTogMnJlbTtcblx0dGV4dC1hbGlnbjogbGVmdDtcbn1cblxuLkZqak9xYjJmNV9XblJEMTMxSGtxIHA6bGFzdC1jaGlsZCB7XG5cdGZvbnQtc2l6ZTogMS43NXJlbTtcblx0dGV4dC1hbGlnbjogcmlnaHQ7XG5cdHRleHQtaW5kZW50OiAycmVtO1xufVxuXG4uUGdRUm14TkdXZ29vZHNJSHFIOG0ge1xuXHRkaXNwbGF5OiBmbGV4O1xuXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0ZmxleC1ncm93OiAxO1xuXHRhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbn1cblxuLm42anFaSDZHc3Fad28wUGV4bDhjIHtcbiAgbWFyZ2luLXRvcDogM3JlbTtcbiAgZm9udC1zaXplOiAzcmVtO1xuICBmb250LWZhbWlseTogVWJ1bnR1X1JlZztcbn1cblxuLm42anFaSDZHc3Fad28wUGV4bDhjIHAge1xuXG59XG5cbi5uNmpxWkg2R3NxWndvMFBleGw4YyBzcGFuIHtcbiAgZm9udC1mYW1pbHk6IEtvZGVNb25vX1ZhcjtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgXG59XG5cbi50Qmh0QUVRdlMxajhGTm16ZnBvdyB7XG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XG4gIGNvbG9yOiAjZmZmO1xuICBtYXJnaW4tdG9wOiA0cmVtO1xuICBwYWRkaW5nOiAxcmVtIDVyZW07XG4gIGJvcmRlci1yYWRpdXM6IDEuNXJlbTtcbiAgZm9udC1zaXplOiA1cmVtO1xuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuM3MgZWFzZTtcbiAgZm9udC1mYW1pbHk6IFVidW50dV9SZWc7XG4gIGJvcmRlcjogLjVyZW0gc29saWQgdmFyKC0tZ3JheWQtYS1ncmV5KTtcbn1cblxuLnRCaHRBRVF2UzFqOEZObXpmcG93OmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwNTZiMztcbn1cblxuLnRCaHRBRVF2UzFqOEZObXpmcG93OmFjdGl2ZSB7XG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDNkODA7XG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvcGFnZXMvQ29udGFjdC9zdHlsZS9pbmRleC5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsYUFBYTtFQUNiLHNCQUFzQjtFQUN0Qix1QkFBdUI7RUFDdkIsdUJBQXVCO0VBQ3ZCLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsZUFBZTtBQUNqQjs7QUFFQTtDQUNDLGFBQWE7Q0FDYixVQUFVO0NBQ1Ysc0JBQXNCO0NBQ3RCLGlCQUFpQjtDQUNqQixhQUFhO0NBQ2Isc0JBQXNCO0NBQ3RCLHVCQUF1QjtBQUN4Qjs7QUFFQTtDQUNDLGVBQWU7Q0FDZixnQkFBZ0I7QUFDakI7O0FBRUE7Q0FDQyxrQkFBa0I7Q0FDbEIsaUJBQWlCO0NBQ2pCLGlCQUFpQjtBQUNsQjs7QUFFQTtDQUNDLGFBQWE7Q0FDYix1QkFBdUI7Q0FDdkIsWUFBWTtDQUNaLHVCQUF1QjtBQUN4Qjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixlQUFlO0VBQ2YsdUJBQXVCO0FBQ3pCOztBQUVBOztBQUVBOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLGdCQUFnQjs7QUFFbEI7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekIsV0FBVztFQUNYLGdCQUFnQjtFQUNoQixrQkFBa0I7RUFDbEIscUJBQXFCO0VBQ3JCLGVBQWU7RUFDZixzQ0FBc0M7RUFDdEMsdUJBQXVCO0VBQ3ZCLHVDQUF1QztBQUN6Qzs7QUFFQTtFQUNFLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLHlCQUF5QjtBQUMzQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY29udGFjdFdyYXBwZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIGZvbnQtZmFtaWx5OiBMYWlsYV9NZWQ7XFxuICBmb250LXNpemU6IDNyZW07XFxufVxcblxcbi5jb250YWN0SGVhZGVyIHtcXG5cXHRoZWlnaHQ6IDI1cmVtO1xcblxcdHdpZHRoOiA5NSU7XFxuXFx0Zm9udC1mYW1pbHk6IExhaWxhX01lZDtcXG5cXHRtYXJnaW46IDFyZW0gYXV0bztcXG5cXHRkaXNwbGF5OiBmbGV4O1xcblxcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuXFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcblxcbi5jb250YWN0SGVhZGVyIHA6Zmlyc3QtY2hpbGQge1xcblxcdGZvbnQtc2l6ZTogMnJlbTtcXG5cXHR0ZXh0LWFsaWduOiBsZWZ0O1xcbn1cXG5cXG4uY29udGFjdEhlYWRlciBwOmxhc3QtY2hpbGQge1xcblxcdGZvbnQtc2l6ZTogMS43NXJlbTtcXG5cXHR0ZXh0LWFsaWduOiByaWdodDtcXG5cXHR0ZXh0LWluZGVudDogMnJlbTtcXG59XFxuXFxuLmNoaWxkUm91dGVzIHtcXG5cXHRkaXNwbGF5OiBmbGV4O1xcblxcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xcblxcdGZsZXgtZ3JvdzogMTtcXG5cXHRhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG59XFxuXFxuLmhvbWVQYWdlUmVkaXJlY3Qge1xcbiAgbWFyZ2luLXRvcDogM3JlbTtcXG4gIGZvbnQtc2l6ZTogM3JlbTtcXG4gIGZvbnQtZmFtaWx5OiBVYnVudHVfUmVnO1xcbn1cXG5cXG4uaG9tZVBhZ2VSZWRpcmVjdCBwIHtcXG5cXG59XFxuXFxuLmhvbWVQYWdlUmVkaXJlY3Qgc3BhbiB7XFxuICBmb250LWZhbWlseTogS29kZU1vbm9fVmFyO1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIFxcbn1cXG5cXG4uY29udGFjdEZvcm1MaW5rIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XFxuICBjb2xvcjogI2ZmZjtcXG4gIG1hcmdpbi10b3A6IDRyZW07XFxuICBwYWRkaW5nOiAxcmVtIDVyZW07XFxuICBib3JkZXItcmFkaXVzOiAxLjVyZW07XFxuICBmb250LXNpemU6IDVyZW07XFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuM3MgZWFzZTtcXG4gIGZvbnQtZmFtaWx5OiBVYnVudHVfUmVnO1xcbiAgYm9yZGVyOiAuNXJlbSBzb2xpZCB2YXIoLS1ncmF5ZC1hLWdyZXkpO1xcbn1cXG5cXG4uY29udGFjdEZvcm1MaW5rOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDU2YjM7XFxufVxcblxcbi5jb250YWN0Rm9ybUxpbms6YWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDNkODA7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImNvbnRhY3RXcmFwcGVyXCI6IGBYaDZ6VDA1bVhDMjM1SjNycUpScWAsXG5cdFwiY29udGFjdEhlYWRlclwiOiBgRmpqT3FiMmY1X1duUkQxMzFIa3FgLFxuXHRcImNoaWxkUm91dGVzXCI6IGBQZ1FSbXhOR1dnb29kc0lIcUg4bWAsXG5cdFwiaG9tZVBhZ2VSZWRpcmVjdFwiOiBgbjZqcVpINkdzcVp3bzBQZXhsOGNgLFxuXHRcImNvbnRhY3RGb3JtTGlua1wiOiBgdEJodEFFUXZTMWo4Rk5temZwb3dgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLmV0cUJ1NlVSaVh4R2NMejR4NEpKIHtcblx0ZGlzcGxheTogZmxleDtcblx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0YWxpZ24taXRlbXM6IGNlbmV0ZXI7XG5cdHdpZHRoOiA5MCU7XG5cdG1hcmdpbjogM3JlbSBhdXRvO1xuXHRib3JkZXI6IDAuMjVyZW0gc29saWQgI2E0ZDgyMjtcblx0Ym9yZGVyLXJhZGl1czogMXJlbTtcblx0Zm9udC1zaXplOiAyLjVyZW07XG59XG5cbi5ldHFCdTZVUmlYeEdjTHo0eDRKSiBhIHtcblx0XG59XG5cbi5ldHFCdTZVUmlYeEdjTHo0eDRKSiBpbWFnZSB7XG5cdGhlaWdodDogNDByZW07XG5cdG1hcmdpbi10b3A6IDFyZW07XG5cdGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcbn1cblxuLmV0cUJ1NlVSaVh4R2NMejR4NEpKIGgxIHtcblx0XG59XG5cbi5ycDZVQWx3SGd5UUl4QXVMdWFqQSB7XG5cdGRpc3BsYXk6IGZsZXg7XG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdG1hcmdpbjogMnJlbSBhdXRvO1xuXHRib3JkZXI6IDAuMnJlbSBzb2xpZCBibGFjaztcblx0YmFja2dyb3VuZC1jb2xvcjogI2M2YzRjNGQxO1xuXHR3aWR0aDogODAlO1xuXHRoZWlnaHQ6IDEwcmVtO1xuXHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdG92ZXJmbG93LXg6IHNjcm9sbDtcblx0cGFkZGluZzogMC4ycmVtO1xufWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3BhZ2VzL0Vycm9yUGFnZS9pbmRleC5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0NBQ0MsYUFBYTtDQUNiLHNCQUFzQjtDQUN0QixvQkFBb0I7Q0FDcEIsVUFBVTtDQUNWLGlCQUFpQjtDQUNqQiw2QkFBNkI7Q0FDN0IsbUJBQW1CO0NBQ25CLGlCQUFpQjtBQUNsQjs7QUFFQTs7QUFFQTs7QUFFQTtDQUNDLGFBQWE7Q0FDYixnQkFBZ0I7Q0FDaEIscUJBQXFCO0FBQ3RCOztBQUVBOztBQUVBOztBQUVBO0NBQ0MsYUFBYTtDQUNiLG1CQUFtQjtDQUNuQixpQkFBaUI7Q0FDakIsMEJBQTBCO0NBQzFCLDJCQUEyQjtDQUMzQixVQUFVO0NBQ1YsYUFBYTtDQUNiLGtCQUFrQjtDQUNsQixrQkFBa0I7Q0FDbEIsZUFBZTtBQUNoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY29udGFpbmVyIHtcXG5cXHRkaXNwbGF5OiBmbGV4O1xcblxcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuXFx0YWxpZ24taXRlbXM6IGNlbmV0ZXI7XFxuXFx0d2lkdGg6IDkwJTtcXG5cXHRtYXJnaW46IDNyZW0gYXV0bztcXG5cXHRib3JkZXI6IDAuMjVyZW0gc29saWQgI2E0ZDgyMjtcXG5cXHRib3JkZXItcmFkaXVzOiAxcmVtO1xcblxcdGZvbnQtc2l6ZTogMi41cmVtO1xcbn1cXG5cXG4uY29udGFpbmVyIGEge1xcblxcdFxcbn1cXG5cXG4uY29udGFpbmVyIGltYWdlIHtcXG5cXHRoZWlnaHQ6IDQwcmVtO1xcblxcdG1hcmdpbi10b3A6IDFyZW07XFxuXFx0Ym9yZGVyLXJhZGl1czogMC41cmVtO1xcbn1cXG5cXG4uY29udGFpbmVyIGgxIHtcXG5cXHRcXG59XFxuXFxuLmVycm9yIHtcXG5cXHRkaXNwbGF5OiBmbGV4O1xcblxcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFx0bWFyZ2luOiAycmVtIGF1dG87XFxuXFx0Ym9yZGVyOiAwLjJyZW0gc29saWQgYmxhY2s7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogI2M2YzRjNGQxO1xcblxcdHdpZHRoOiA4MCU7XFxuXFx0aGVpZ2h0OiAxMHJlbTtcXG5cXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxuXFx0b3ZlcmZsb3cteDogc2Nyb2xsO1xcblxcdHBhZGRpbmc6IDAuMnJlbTtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiY29udGFpbmVyXCI6IGBldHFCdTZVUmlYeEdjTHo0eDRKSmAsXG5cdFwiZXJyb3JcIjogYHJwNlVBbHdIZ3lRSXhBdUx1YWpBYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC56aE94clFMQnY0SklkVzNjN2pGSiB7XG5cdGRpc3BsYXk6IGdyaWQ7XG5cdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRncmlkLXRlbXBsYXRlLXJvd3M6IFtzaXRlTmF2XSA4cmVtXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0W2ltYWdlXSAyNXJlbVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFtuYXZPcHRpb25zXSAxZnJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRbZm9vdGVyXSAxMHJlbTtcblx0aGVpZ2h0OiAxMDB2aDtcbn1cblxuLlhxSFdGaDRES0RpY3FEUnpqWmdKIHtcblx0Z3JpZC1hcmVhOiBzaXRlTmF2O1xuXHRkaXNwbGF5OiBmbGV4O1xuXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuLnczZ3FtaWFiMm1UM0JzM1lGUm5aIHtcblx0Z3JpZC1hcmVhOiBpbWFnZTtcblx0ZGlzcGxheTogZmxleDtcblx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG5cbi53M2dxbWlhYjJtVDNCczNZRlJuWiBpbWcge1xuXHR3aWR0aDogOTglO1xuXHRib3JkZXItcmFkaXVzOiAyZW07XG5cdG1hcmdpbjogYXV0bztcbn1cblxuLnVIU3B2Q0ZSSDZrZlpCdTl2dkkzIHtcblx0Z3JpZC1hcmVhOiBuYXZPcHRpb25zO1xuXHRmb250LXNpemU6IDQuNWVtO1xuXHRib3JkZXI6IDAuMjVyZW0gc29saWQgdmFyKC0tc3BlY2lhbC1ibHVlKTtcblx0Ym9yZGVyLXJhZGl1czogMC41cmVtO1xuXHR3aWR0aDogOTAlO1xuXHRtYXJnaW46IGF1dG87XG5cdGhlaWdodDogMThyZW07XG5cdG92ZXJmbG93LXg6IHNjcm9sbDtcblx0c2Nyb2xsLXNuYXAtdHlwZTogeSBtYW5kYXRvcnk7XG59XG5cbi51SFNwdkNGUkg2a2ZaQnU5dnZJMyB1bCB7XG5cdGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcblx0cGFkZGluZzogMDtcbn1cblxuLnVIU3B2Q0ZSSDZrZlpCdTl2dkkzIGxpIHtcblx0ZGlzcGxheTogZmxleDtcblx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdGJvcmRlci1ib3R0b206IC4xcmVtIHNvbGlkIHZhcigtLXNwZWNpYWwtYmx1ZSk7XG5cdGhlaWdodDogNS45cmVtO1xuXHRzY3JvbGwtc25hcC1hbGlnbjogc3RhcnQ7XG5cdHNjcm9sbC1zbmFwLXN0b3A6IGFsd2F5cztcbn1cblxuLnVIU3B2Q0ZSSDZrZlpCdTl2dkkzIGxpOmxhc3QtY2hpbGQge1xuXHRib3JkZXItYm90dG9tOiBub25lO1xufVxuXG4udUhTcHZDRlJINmtmWkJ1OXZ2STMgYSB7XG5cdHRleHQtZGVjb3JhdGlvbjogbm9uZTtcblxuXHRmb250LWZhbWlseTogJ1VidW50dV9SZWcnO1xuXHRjb2xvcjogdmFyKC0tc3BlY2lhbC1ibHVlKTtcblx0Zm9udC1zaXplOiAzLjI1cmVtO1xufVxuXG4udUhTcHZDRlJINmtmWkJ1OXZ2STMgYTpob3ZlciB7XG5cdGNvbG9yOiB2YXIoLS1hYy1vcmFuZ2UpO1xufVxuXG4uU2cxcUNXTkJYaFNCU0YydGoyV3kge1xuXHRncmlkLWFyZWE6IGZvb3Rlcjtcblx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHRtYXJnaW46IGF1dG87XG59XG5cbi5TZzFxQ1dOQlhoU0JTRjJ0ajJXeSBpbWcge1xuXHRoZWlnaHQ6IDhyZW07XG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvcGFnZXMvSG9tZVBhZ2UvaW5kZXgubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtDQUNDLGFBQWE7Q0FDYix1QkFBdUI7Q0FDdkI7Ozt5QkFHd0I7Q0FDeEIsYUFBYTtBQUNkOztBQUVBO0NBQ0Msa0JBQWtCO0NBQ2xCLGFBQWE7Q0FDYix1QkFBdUI7Q0FDdkIsbUJBQW1CO0FBQ3BCOztBQUVBO0NBQ0MsZ0JBQWdCO0NBQ2hCLGFBQWE7Q0FDYixzQkFBc0I7Q0FDdEIsdUJBQXVCO0FBQ3hCOztBQUVBO0NBQ0MsVUFBVTtDQUNWLGtCQUFrQjtDQUNsQixZQUFZO0FBQ2I7O0FBRUE7Q0FDQyxxQkFBcUI7Q0FDckIsZ0JBQWdCO0NBQ2hCLHlDQUF5QztDQUN6QyxxQkFBcUI7Q0FDckIsVUFBVTtDQUNWLFlBQVk7Q0FDWixhQUFhO0NBQ2Isa0JBQWtCO0NBQ2xCLDZCQUE2QjtBQUM5Qjs7QUFFQTtDQUNDLHFCQUFxQjtDQUNyQixVQUFVO0FBQ1g7O0FBRUE7Q0FDQyxhQUFhO0NBQ2Isc0JBQXNCO0NBQ3RCLG1CQUFtQjtDQUNuQix1QkFBdUI7Q0FDdkIsOENBQThDO0NBQzlDLGNBQWM7Q0FDZCx3QkFBd0I7Q0FDeEIsd0JBQXdCO0FBQ3pCOztBQUVBO0NBQ0MsbUJBQW1CO0FBQ3BCOztBQUVBO0NBQ0MscUJBQXFCOztDQUVyQix5QkFBeUI7Q0FDekIsMEJBQTBCO0NBQzFCLGtCQUFrQjtBQUNuQjs7QUFFQTtDQUNDLHVCQUF1QjtBQUN4Qjs7QUFFQTtDQUNDLGlCQUFpQjtDQUNqQixxQkFBcUI7Q0FDckIsWUFBWTtBQUNiOztBQUVBO0NBQ0MsWUFBWTtBQUNiXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5ob21lUGFnZVdyYXBwZXIge1xcblxcdGRpc3BsYXk6IGdyaWQ7XFxuXFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuXFx0Z3JpZC10ZW1wbGF0ZS1yb3dzOiBbc2l0ZU5hdl0gOHJlbVxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFtpbWFnZV0gMjVyZW1cXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRbbmF2T3B0aW9uc10gMWZyXFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0W2Zvb3Rlcl0gMTByZW07XFxuXFx0aGVpZ2h0OiAxMDB2aDtcXG59XFxuXFxuLm5hdldyYXBwZXIge1xcblxcdGdyaWQtYXJlYTogc2l0ZU5hdjtcXG5cXHRkaXNwbGF5OiBmbGV4O1xcblxcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xcblxcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5pbWFnZUNvbnRhaW5lciB7XFxuXFx0Z3JpZC1hcmVhOiBpbWFnZTtcXG5cXHRkaXNwbGF5OiBmbGV4O1xcblxcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuXFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcblxcbi5pbWFnZUNvbnRhaW5lciBpbWcge1xcblxcdHdpZHRoOiA5OCU7XFxuXFx0Ym9yZGVyLXJhZGl1czogMmVtO1xcblxcdG1hcmdpbjogYXV0bztcXG59XFxuXFxuLm5hdk9wdGlvbnMge1xcblxcdGdyaWQtYXJlYTogbmF2T3B0aW9ucztcXG5cXHRmb250LXNpemU6IDQuNWVtO1xcblxcdGJvcmRlcjogMC4yNXJlbSBzb2xpZCB2YXIoLS1zcGVjaWFsLWJsdWUpO1xcblxcdGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcXG5cXHR3aWR0aDogOTAlO1xcblxcdG1hcmdpbjogYXV0bztcXG5cXHRoZWlnaHQ6IDE4cmVtO1xcblxcdG92ZXJmbG93LXg6IHNjcm9sbDtcXG5cXHRzY3JvbGwtc25hcC10eXBlOiB5IG1hbmRhdG9yeTtcXG59XFxuXFxuLm5hdk9wdGlvbnMgdWwge1xcblxcdGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG5cXHRwYWRkaW5nOiAwO1xcbn1cXG5cXG4ubmF2T3B0aW9ucyBsaSB7XFxuXFx0ZGlzcGxheTogZmxleDtcXG5cXHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuXFx0Ym9yZGVyLWJvdHRvbTogLjFyZW0gc29saWQgdmFyKC0tc3BlY2lhbC1ibHVlKTtcXG5cXHRoZWlnaHQ6IDUuOXJlbTtcXG5cXHRzY3JvbGwtc25hcC1hbGlnbjogc3RhcnQ7XFxuXFx0c2Nyb2xsLXNuYXAtc3RvcDogYWx3YXlzO1xcbn1cXG5cXG4ubmF2T3B0aW9ucyBsaTpsYXN0LWNoaWxkIHtcXG5cXHRib3JkZXItYm90dG9tOiBub25lO1xcbn1cXG5cXG4ubmF2T3B0aW9ucyBhIHtcXG5cXHR0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuXFxuXFx0Zm9udC1mYW1pbHk6ICdVYnVudHVfUmVnJztcXG5cXHRjb2xvcjogdmFyKC0tc3BlY2lhbC1ibHVlKTtcXG5cXHRmb250LXNpemU6IDMuMjVyZW07XFxufVxcblxcbi5uYXZPcHRpb25zIGE6aG92ZXIge1xcblxcdGNvbG9yOiB2YXIoLS1hYy1vcmFuZ2UpO1xcbn1cXG5cXG4uZm9vdGVyQ29udGFpbmVyIHtcXG5cXHRncmlkLWFyZWE6IGZvb3RlcjtcXG5cXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuXFx0bWFyZ2luOiBhdXRvO1xcbn1cXG5cXG4uZm9vdGVyQ29udGFpbmVyIGltZyB7XFxuXFx0aGVpZ2h0OiA4cmVtO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJob21lUGFnZVdyYXBwZXJcIjogYHpoT3hyUUxCdjRKSWRXM2M3akZKYCxcblx0XCJuYXZXcmFwcGVyXCI6IGBYcUhXRmg0REtEaWNxRFJ6alpnSmAsXG5cdFwiaW1hZ2VDb250YWluZXJcIjogYHczZ3FtaWFiMm1UM0JzM1lGUm5aYCxcblx0XCJuYXZPcHRpb25zXCI6IGB1SFNwdkNGUkg2a2ZaQnU5dnZJM2AsXG5cdFwiZm9vdGVyQ29udGFpbmVyXCI6IGBTZzFxQ1dOQlhoU0JTRjJ0ajJXeWBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuYm1ydkN4M2VCQmVvdXVNM2pqS0Mge1xuICBkaXNwbGF5OiBncmlkO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBbc2l0ZU5hdl0gOHJlbVxuICAgICAgICAgICAgICAgICAgICAgIFtpbWFnZV0gMjVyZW1cbiAgICAgICAgICAgICAgICAgICAgICBbYmlvXSAxZnJcbiAgICAgICAgICAgICAgICAgICAgICBbZm9vdGVyXSAxMHJlbTtcbiAgaGVpZ2h0OiAxMDB2aDtcbn1cblxuLkw3X1drYWNlejdoVTFKUURZeGNDIHtcbiAgZ3JpZC1hcmVhOiBzaXRlTmF2O1xuICBkaXNwbGF5OiBmbGV4O1xuXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuLkdGYTFNZUY5S2FrbHBBX29UOE16IHtcbiAgZ3JpZC1hcmVhOiBpbWFnZTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG5cbi5HRmExTWVGOUtha2xwQV9vVDhNeiBpbWcge1xuXHR3aWR0aDogOTglO1xuXHRib3JkZXItcmFkaXVzOiAyZW07XG5cdG1hcmdpbjogYXV0bztcbn1cblxuLkhQaGxBR0hIN2R0VUJmX3NmQnVPIHtcbiAgZ3JpZC1hcmVhOiBiaW87XG4gIGZsZXgtZ3JvdzogMTtcbiAgd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IC41cmVtO1xuICBmb250LXNpemU6IDJyZW07XG59XG5cbi5PaWtJWlZ3emhvYkViRDdxdUwwVSB7XG4gIG1hcmdpbi1ib3R0b206IDJyZW07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG5cbi5PaWtJWlZ3emhvYkViRDdxdUwwVSBoMSB7XG4gIG1hcmdpbi1ib3R0b206IC0wLjc1cmVtO1xufVxuXG4uT2lrSVpWd3pob2JFYkQ3cXVMMFUgcCB7XG4gIGZvbnQtc2l6ZTogMS41cmVtO1xufVxuXG4ueGtzUno5YnRLcjB3TVY0eDRBQTQgcCB7XG4gIGZvbnQtc2l6ZTogMS41cmVtO1xuICB0ZXh0LWluZGVudDogMXJlbTtcbn1cblxuLkpQVlduSUFUUkp2ekVVWmJkTWpXIHtcbiAgZ3JpZC1hcmVhOiBmb290ZXI7XG59IGAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3BhZ2VzL1BlcnNvbmFsL3N0eWxlL2luZGV4Lm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCOzs7b0NBR2tDO0VBQ2xDLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixhQUFhO0NBQ2QsdUJBQXVCO0NBQ3ZCLG1CQUFtQjtBQUNwQjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtBQUNyQjs7QUFFQTtDQUNDLFVBQVU7Q0FDVixrQkFBa0I7Q0FDbEIsWUFBWTtBQUNiOztBQUVBO0VBQ0UsY0FBYztFQUNkLFlBQVk7RUFDWixXQUFXO0VBQ1gsY0FBYztFQUNkLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxtQkFBbUI7RUFDbkIsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxpQkFBaUI7RUFDakIsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsaUJBQWlCO0FBQ25CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5wZXJzb25hbFdyYXBwZXIge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBbc2l0ZU5hdl0gOHJlbVxcbiAgICAgICAgICAgICAgICAgICAgICBbaW1hZ2VdIDI1cmVtXFxuICAgICAgICAgICAgICAgICAgICAgIFtiaW9dIDFmclxcbiAgICAgICAgICAgICAgICAgICAgICBbZm9vdGVyXSAxMHJlbTtcXG4gIGhlaWdodDogMTAwdmg7XFxufVxcblxcbi5uYXZXcmFwcGVyIHtcXG4gIGdyaWQtYXJlYTogc2l0ZU5hdjtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuXFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuXFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLmltYWdlQ29udGFpbmVyIHtcXG4gIGdyaWQtYXJlYTogaW1hZ2U7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uaW1hZ2VDb250YWluZXIgaW1nIHtcXG5cXHR3aWR0aDogOTglO1xcblxcdGJvcmRlci1yYWRpdXM6IDJlbTtcXG5cXHRtYXJnaW46IGF1dG87XFxufVxcblxcbi5iaW9Db250YWluZXIge1xcbiAgZ3JpZC1hcmVhOiBiaW87XFxuICBmbGV4LWdyb3c6IDE7XFxuICB3aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IC41cmVtO1xcbiAgZm9udC1zaXplOiAycmVtO1xcbn1cXG5cXG4ucGVyc29uVGV4dCB7XFxuICBtYXJnaW4tYm90dG9tOiAycmVtO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4ucGVyc29uVGV4dCBoMSB7XFxuICBtYXJnaW4tYm90dG9tOiAtMC43NXJlbTtcXG59XFxuXFxuLnBlcnNvblRleHQgcCB7XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG59XFxuXFxuLmJpb1RleHQgcCB7XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG4gIHRleHQtaW5kZW50OiAxcmVtO1xcbn1cXG5cXG4uZm9vdGVyQ29udGFpbmVyIHtcXG4gIGdyaWQtYXJlYTogZm9vdGVyO1xcbn0gXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwicGVyc29uYWxXcmFwcGVyXCI6IGBibXJ2Q3gzZUJCZW91dU0zampLQ2AsXG5cdFwibmF2V3JhcHBlclwiOiBgTDdfV2thY2V6N2hVMUpRRFl4Y0NgLFxuXHRcImltYWdlQ29udGFpbmVyXCI6IGBHRmExTWVGOUtha2xwQV9vVDhNemAsXG5cdFwiYmlvQ29udGFpbmVyXCI6IGBIUGhsQUdISDdkdFVCZl9zZkJ1T2AsXG5cdFwicGVyc29uVGV4dFwiOiBgT2lrSVpWd3pob2JFYkQ3cXVMMFVgLFxuXHRcImJpb1RleHRcIjogYHhrc1J6OWJ0S3Iwd01WNHg0QUE0YCxcblx0XCJmb290ZXJDb250YWluZXJcIjogYEpQVlduSUFUUkp2ekVVWmJkTWpXYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5uSnVoNHB3M2VZYk1nUkRUVUtCSSB7XG5cdGdyaWQtcm93OiBoZWFkZXI7XG5cdGRpc3BsYXk6IGZsZXg7XG5cdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRiYWNrZ3JvdW5kLWNvbG9yOiBicm93bjtcblx0Ym9yZGVyLXJhZGl1czogLjc1cmVtO1xuXHRtYXJnaW46IC41cmVtO1xufVxuXG4ubkp1aDRwdzNlWWJNZ1JEVFVLQkkgcCB7XG5cdGNvbG9yOiB3aGl0ZTtcblx0Zm9udC1zaXplOiAzLjVyZW07XG5cdG1hcmdpbjogYXV0bztcblx0Zm9udC1mYW1pbHk6ICdQcmVzcyBTdGFydCAyUCcsIHN5c3RlbS11aTtcbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9wYWdlcy9Qb29wTWFjaGluZS9IZWFkZXIvaGVhZGVyLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7Q0FDQyxnQkFBZ0I7Q0FDaEIsYUFBYTtDQUNiLHVCQUF1QjtDQUN2Qix1QkFBdUI7Q0FDdkIscUJBQXFCO0NBQ3JCLGFBQWE7QUFDZDs7QUFFQTtDQUNDLFlBQVk7Q0FDWixpQkFBaUI7Q0FDakIsWUFBWTtDQUNaLHdDQUF3QztBQUN6Q1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuaGVhZGVyQ29udGFpbmVyIHtcXG5cXHRncmlkLXJvdzogaGVhZGVyO1xcblxcdGRpc3BsYXk6IGZsZXg7XFxuXFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogYnJvd247XFxuXFx0Ym9yZGVyLXJhZGl1czogLjc1cmVtO1xcblxcdG1hcmdpbjogLjVyZW07XFxufVxcblxcbi5oZWFkZXJDb250YWluZXIgcCB7XFxuXFx0Y29sb3I6IHdoaXRlO1xcblxcdGZvbnQtc2l6ZTogMy41cmVtO1xcblxcdG1hcmdpbjogYXV0bztcXG5cXHRmb250LWZhbWlseTogJ1ByZXNzIFN0YXJ0IDJQJywgc3lzdGVtLXVpO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJoZWFkZXJDb250YWluZXJcIjogYG5KdWg0cHczZVliTWdSRFRVS0JJYFxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5odW5nZXItdmFsLWNvbnRhaW5lciB7XG5cdGRpc3BsYXk6IGZsZXg7XG5cdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cdHdpZHRoOiAyMCU7XG5cdGJvcmRlci1sZWZ0OiAwLjI1cmVtIHNvbGlkIGJsYWNrO1xuXHRib3JkZXItcmlnaHQ6IDAuMjVyZW0gc29saWQgYmxhY2s7XG59XG5cbi5tZXRlci1lbGVtZW50IHtcblx0ZGlzcGxheTogaW5saW5lLWZsZXg7XG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRmbGV4LWdyb3c6IDE7XG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvcGFnZXMvUG9vcE1hY2hpbmUvaHVuZ2VyVmFsL2h1bmdlclZhbC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7Q0FDQyxhQUFhO0NBQ2Isc0JBQXNCO0NBQ3RCLFVBQVU7Q0FDVixnQ0FBZ0M7Q0FDaEMsaUNBQWlDO0FBQ2xDOztBQUVBO0NBQ0Msb0JBQW9CO0NBQ3BCLG1CQUFtQjtDQUNuQix1QkFBdUI7Q0FDdkIsWUFBWTtBQUNiXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5odW5nZXItdmFsLWNvbnRhaW5lciB7XFxuXFx0ZGlzcGxheTogZmxleDtcXG5cXHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcdHdpZHRoOiAyMCU7XFxuXFx0Ym9yZGVyLWxlZnQ6IDAuMjVyZW0gc29saWQgYmxhY2s7XFxuXFx0Ym9yZGVyLXJpZ2h0OiAwLjI1cmVtIHNvbGlkIGJsYWNrO1xcbn1cXG5cXG4ubWV0ZXItZWxlbWVudCB7XFxuXFx0ZGlzcGxheTogaW5saW5lLWZsZXg7XFxuXFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcXG5cXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG5cXHRmbGV4LWdyb3c6IDE7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgKiB7XG5cdC8qXG5cdFNldHRpbmcgdGhlIG1hcmdpbiBwcm9wZXJ0eSB0byAwIGhlcmUgYXBwbGllcyBpdCB0b1xuXHRhbGwgdGhlIGVsZW1lbnRzLCBidXQgaXQgZG9lcyBub3QgY2FycnkgdGhlIHNhbWUgZWZmZWN0XG5cdHdoZW4gYXBsbGllZCB0byB0aGUgaHRtbCBlbGVtZW50LlxuXHRXaHkgbm90P1xuXHQqL1xuXHRtYXJnaW46IDA7XG59XG5cbiosXG4qOmJlZm9yZSxcbio6YWZ0ZXIge1xuXHRib3gtc2l6aW5nOiBpbmhlcml0O1xufVxuXG5odG1sIHtcblx0Zm9udC1zaXplOiA2Mi41JTtcbn1cblxuaHRtbCwgYm9keSB7XG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdG92ZXJmbG93OiBhdXRvO1xufVxuXG5cblxuXG4uSk5xOEQ3N1BQc0lLNnp3eDRicGcge1xuXHRkaXNwbGF5OiBncmlkO1xuXHRncmlkLXRlbXBsYXRlLXJvd3M6IFtoZWFkZXJdIDJmclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFt0d29fZ3V5c10gOGZyO1xuXHRib3JkZXI6IC41cmVtIHNvbGlkIGJsYWNrO1xuXHRoZWlnaHQ6IDQwcmVtO1xufVxuXG4uYTBkRmVtVkNQa3JNX2owYWN6eVEge1xuXHRncmlkLXJvdzogdHdvX2d1eXM7XG5cdGRpc3BsYXk6IGZsZXg7XG5cdGZsZXgtZGlyZWN0aW9uOiByb3c7XG5cdGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xuXHRtYXJnaW46IGF1dG87XG5cdGhlaWdodDogOTAlO1xuXHR3aWR0aDogOTAlO1xuXHRiYWNrZ3JvdW5kLWNvbG9yOiAjNTU3NmY3O1xuXHRib3JkZXI6IDEuMHJlbSBzb2xpZCBibGFjaztcbn1cblxuLmtEUGM5VmRMemszMmNmdFJGbXh5IHtcblx0bWFyZ2luOiBhdXRvO1xufVxuXG4uUVA1V3hybllEdXc2UDNLVzNDZUIge1xuXHRiYWNrZ3JvdW5kLWNvbG9yOiBnb2xkZW5yb2Q7XG5cdGJvcmRlci1yYWRpdXM6IC4xMnJlbTtcblx0cGFkZGluZzogNXB4O1xuXHRoZWlnaHQ6IDIwcmVtO1xuXHR3aWR0aDogMjByZW07XG59XG5cbi5xTzJPd1hUR0NPRUZjS19qZmREbiB7XG5cdHdpZHRoOiAyMHJlbTtcblx0aGVpZ2h0OiA0cmVtO1xuXHRtYXJnaW46IGF1dG87XG59XG5cbi5WUXJDU2U4d0dmUkVQVTVZaktuVCB7XG5cdGZvbnQtc2l6ZTogMnJlbTtcblx0dGV4dC1hbGlnbjogY2VudGVyO1xufWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3BhZ2VzL1Bvb3BNYWNoaW5lL2luZGV4LnN0eWxlLm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7Q0FDQzs7Ozs7RUFLQztDQUNELFNBQVM7QUFDVjs7QUFFQTs7O0NBR0MsbUJBQW1CO0FBQ3BCOztBQUVBO0NBQ0MsZ0JBQWdCO0FBQ2pCOztBQUVBO0NBQ0Msc0JBQXNCO0NBQ3RCLGNBQWM7QUFDZjs7Ozs7QUFLQTtDQUNDLGFBQWE7Q0FDYjt5QkFDd0I7Q0FDeEIseUJBQXlCO0NBQ3pCLGFBQWE7QUFDZDs7QUFFQTtDQUNDLGtCQUFrQjtDQUNsQixhQUFhO0NBQ2IsbUJBQW1CO0NBQ25CLDZCQUE2QjtDQUM3QixZQUFZO0NBQ1osV0FBVztDQUNYLFVBQVU7Q0FDVix5QkFBeUI7Q0FDekIsMEJBQTBCO0FBQzNCOztBQUVBO0NBQ0MsWUFBWTtBQUNiOztBQUVBO0NBQ0MsMkJBQTJCO0NBQzNCLHFCQUFxQjtDQUNyQixZQUFZO0NBQ1osYUFBYTtDQUNiLFlBQVk7QUFDYjs7QUFFQTtDQUNDLFlBQVk7Q0FDWixZQUFZO0NBQ1osWUFBWTtBQUNiOztBQUVBO0NBQ0MsZUFBZTtDQUNmLGtCQUFrQjtBQUNuQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIqIHtcXG5cXHQvKlxcblxcdFNldHRpbmcgdGhlIG1hcmdpbiBwcm9wZXJ0eSB0byAwIGhlcmUgYXBwbGllcyBpdCB0b1xcblxcdGFsbCB0aGUgZWxlbWVudHMsIGJ1dCBpdCBkb2VzIG5vdCBjYXJyeSB0aGUgc2FtZSBlZmZlY3RcXG5cXHR3aGVuIGFwbGxpZWQgdG8gdGhlIGh0bWwgZWxlbWVudC5cXG5cXHRXaHkgbm90P1xcblxcdCovXFxuXFx0bWFyZ2luOiAwO1xcbn1cXG5cXG4qLFxcbio6YmVmb3JlLFxcbio6YWZ0ZXIge1xcblxcdGJveC1zaXppbmc6IGluaGVyaXQ7XFxufVxcblxcbmh0bWwge1xcblxcdGZvbnQtc2l6ZTogNjIuNSU7XFxufVxcblxcbmh0bWwsIGJvZHkge1xcblxcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuXFx0b3ZlcmZsb3c6IGF1dG87XFxufVxcblxcblxcblxcblxcbi5hcHBDb250YWluZXIge1xcblxcdGRpc3BsYXk6IGdyaWQ7XFxuXFx0Z3JpZC10ZW1wbGF0ZS1yb3dzOiBbaGVhZGVyXSAyZnJcXG5cXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRcXHRbdHdvX2d1eXNdIDhmcjtcXG5cXHRib3JkZXI6IC41cmVtIHNvbGlkIGJsYWNrO1xcblxcdGhlaWdodDogNDByZW07XFxufVxcblxcbi5ib3RoR3V5c0NvbnRhaW5lciB7XFxuXFx0Z3JpZC1yb3c6IHR3b19ndXlzO1xcblxcdGRpc3BsYXk6IGZsZXg7XFxuXFx0ZmxleC1kaXJlY3Rpb246IHJvdztcXG5cXHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXG5cXHRtYXJnaW46IGF1dG87XFxuXFx0aGVpZ2h0OiA5MCU7XFxuXFx0d2lkdGg6IDkwJTtcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiAjNTU3NmY3O1xcblxcdGJvcmRlcjogMS4wcmVtIHNvbGlkIGJsYWNrO1xcbn1cXG5cXG4uZ3V5QWN0aW9uQ2FyZENvbnRhaW5lciB7XFxuXFx0bWFyZ2luOiBhdXRvO1xcbn1cXG5cXG4uZ3V5SWNvbiB7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogZ29sZGVucm9kO1xcblxcdGJvcmRlci1yYWRpdXM6IC4xMnJlbTtcXG5cXHRwYWRkaW5nOiA1cHg7XFxuXFx0aGVpZ2h0OiAyMHJlbTtcXG5cXHR3aWR0aDogMjByZW07XFxufVxcblxcbi5ndXlUZXh0Qm94IHtcXG5cXHR3aWR0aDogMjByZW07XFxuXFx0aGVpZ2h0OiA0cmVtO1xcblxcdG1hcmdpbjogYXV0bztcXG59XFxuXFxuLmd1eVN0YXR1c1RleHQge1xcblxcdGZvbnQtc2l6ZTogMnJlbTtcXG5cXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImFwcENvbnRhaW5lclwiOiBgSk5xOEQ3N1BQc0lLNnp3eDRicGdgLFxuXHRcImJvdGhHdXlzQ29udGFpbmVyXCI6IGBhMGRGZW1WQ1Brck1fajBhY3p5UWAsXG5cdFwiZ3V5QWN0aW9uQ2FyZENvbnRhaW5lclwiOiBga0RQYzlWZEx6azMyY2Z0UkZteHlgLFxuXHRcImd1eUljb25cIjogYFFQNVd4cm5ZRHV3NlAzS1czQ2VCYCxcblx0XCJndXlUZXh0Qm94XCI6IGBxTzJPd1hUR0NPRUZjS19qZmREbmAsXG5cdFwiZ3V5U3RhdHVzVGV4dFwiOiBgVlFyQ1NlOHdHZlJFUFU1WWpLblRgXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLlg1dTZlQzk4TmFTSGs5ak5jVEZsIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIHdpZHRoOiA5OCU7XG4gIG1hcmdpbjogYXV0bztcbiAgaGVpZ2h0OiAxMDB2aDtcbn1cblxuLlExZkN0VDlPWGxQdWt1NDNDV2dxIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTByZW07XG4gIGZvbnQtZmFtaWx5OiBMYWlsYV9NZWQ7XG59XG5cbi5RMWZDdFQ5T1hsUHVrdTQzQ1dncSBidXR0b24ge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogIDA7XG4gIGZvbnQtc2l6ZTogMnJlbTtcbn1cblxuLlExZkN0VDlPWGxQdWt1NDNDV2dxIGgxIHtcbiAgbWFyZ2luOiAycmVtIGF1dG87XG4gIGZvbnQtc2l6ZTogNHJlbVxufVxuXG4uc1lvZU9GSFNkOHp6cUNhNGhGNnEge1xuICBmbGV4LWdyb3c6IDE7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB3aWR0aDogOTglO1xuICBib3JkZXI6IC4ycmVtIHNvbGlkIGJsYWNrO1xuICBvdmVyZmxvdy15OiBzY3JvbGw7XG4gIHNjcm9sbC1zbmFwLXR5cGU6IHkgbWFuZGF0b3J5O1xufVxuXG4uaGd2N0o1QVJhYV9tSUxsOV9FTnoge1xuICBcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3BhZ2VzL1NwaW5Db25uZWN0L2luZGV4Lm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLG1CQUFtQjtFQUNuQix1QkFBdUI7RUFDdkIsVUFBVTtFQUNWLFlBQVk7RUFDWixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLG1CQUFtQjtFQUNuQixXQUFXO0VBQ1gsYUFBYTtFQUNiLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixNQUFNO0VBQ04sUUFBUTtFQUNSLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxpQkFBaUI7RUFDakI7QUFDRjs7QUFFQTtFQUNFLFlBQVk7RUFDWixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsVUFBVTtFQUNWLHlCQUF5QjtFQUN6QixrQkFBa0I7RUFDbEIsNkJBQTZCO0FBQy9COztBQUVBOztBQUVBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5tb2R1bGVDb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICB3aWR0aDogOTglO1xcbiAgbWFyZ2luOiBhdXRvO1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG59XFxuXFxuLmhlYWRlckNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTByZW07XFxuICBmb250LWZhbWlseTogTGFpbGFfTWVkO1xcbn1cXG5cXG4uaGVhZGVyQ29udGFpbmVyIGJ1dHRvbiB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAgMDtcXG4gIGZvbnQtc2l6ZTogMnJlbTtcXG59XFxuXFxuLmhlYWRlckNvbnRhaW5lciBoMSB7XFxuICBtYXJnaW46IDJyZW0gYXV0bztcXG4gIGZvbnQtc2l6ZTogNHJlbVxcbn1cXG5cXG4uY2FyZHNDb250YWluZXIge1xcbiAgZmxleC1ncm93OiAxO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB3aWR0aDogOTglO1xcbiAgYm9yZGVyOiAuMnJlbSBzb2xpZCBibGFjaztcXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcXG4gIHNjcm9sbC1zbmFwLXR5cGU6IHkgbWFuZGF0b3J5O1xcbn1cXG5cXG4uY2FyZCB7XFxuICBcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwibW9kdWxlQ29udGFpbmVyXCI6IGBYNXU2ZUM5OE5hU0hrOWpOY1RGbGAsXG5cdFwiaGVhZGVyQ29udGFpbmVyXCI6IGBRMWZDdFQ5T1hsUHVrdTQzQ1dncWAsXG5cdFwiY2FyZHNDb250YWluZXJcIjogYHNZb2VPRkhTZDh6enFDYTRoRjZxYCxcblx0XCJjYXJkXCI6IGBoZ3Y3SjVBUmFhX21JTGw5X0VOemBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAua2w5QnlsaUZQSFR3UWtjUk9YU2oge1xufVxuXG4ueWkxaFBtZTFIVzJCdjZYMGdUU1Mge1xuXG59XG5cbi5UUmNMRWpvWTFGQzI4ejM3TDZuOSBwIHtcblx0Zm9udC1mYW1pbHk6IE9yYml0cm9uO1xuXHRmb250LXNpemU6IDRyZW07XG5cbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9wYWdlcy9TcGlubmVyT2ZEb29tL2luZGV4Lm1vZHVsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtDQUNDLHFCQUFxQjtDQUNyQixlQUFlOztBQUVoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuc3Bpbm5lck9mRG9vbVdyYXBwZXIge1xcbn1cXG5cXG4uaGVhZGVyQ29udGFpbmVyIHtcXG5cXG59XFxuXFxuLnNwaW5uZXIgcCB7XFxuXFx0Zm9udC1mYW1pbHk6IE9yYml0cm9uO1xcblxcdGZvbnQtc2l6ZTogNHJlbTtcXG5cXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwic3Bpbm5lck9mRG9vbVdyYXBwZXJcIjogYGtsOUJ5bGlGUEhUd1FrY1JPWFNqYCxcblx0XCJoZWFkZXJDb250YWluZXJcIjogYHlpMWhQbWUxSFcyQnY2WDBnVFNTYCxcblx0XCJzcGlubmVyXCI6IGBUUmNMRWpvWTFGQzI4ejM3TDZuOWBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAud2JWWEZTbFVUaXE2Nlhvc2pPcTQge1xuICBkaXNwbGF5OiBmbGV4O1xuXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn0gXG5cbi5IU1FnRXQ5UmxYVWR3aVNjRUdkZSB7XG5cdGZsZXgtZ3JvdzogMTtcblx0Zm9udC1mYW1pbHk6IFJvYm90bztcblx0Zm9udC1zaXplOiBjbGFtcCgzcmVtLCA4dncsIDEwcmVtKTtcblx0YmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG5cdGJvcmRlcjogLjI1cmVtIHNvbGlkIGJsYWNrO1xuXHRib3JkZXItcmFkaXVzOiAwLjVyZW07XG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvcGFnZXMvY29tcG9uZW50cy9OYXZCdG4vaW5kZXgubW9kdWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGFBQWE7Q0FDZCx1QkFBdUI7QUFDeEI7O0FBRUE7Q0FDQyxZQUFZO0NBQ1osbUJBQW1CO0NBQ25CLGtDQUFrQztDQUNsQyw2QkFBNkI7Q0FDN0IsMEJBQTBCO0NBQzFCLHFCQUFxQjtBQUN0QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubmF2QnRuQ29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuXFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufSBcXG5cXG4ubmF2QnRuIHtcXG5cXHRmbGV4LWdyb3c6IDE7XFxuXFx0Zm9udC1mYW1pbHk6IFJvYm90bztcXG5cXHRmb250LXNpemU6IGNsYW1wKDNyZW0sIDh2dywgMTByZW0pO1xcblxcdGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcblxcdGJvcmRlcjogLjI1cmVtIHNvbGlkIGJsYWNrO1xcblxcdGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwibmF2QnRuQ29udGFpbmVyXCI6IGB3YlZYRlNsVVRpcTY2WG9zak9xNGAsXG5cdFwibmF2QnRuXCI6IGBIU1FnRXQ5UmxYVWR3aVNjRUdkZWBcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIuL2Fzc2V0cy9mb250cy9MYWlsYS9MYWlsYS1NZWRpdW0udHRmXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18gPSBuZXcgVVJMKFwiLi9hc3NldHMvZm9udHMvUm9ib3RvL1JvYm90by1SZWd1bGFyLnR0ZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fID0gbmV3IFVSTChcIi4vYXNzZXRzL2ZvbnRzL09yYml0cm9uL09yYml0cm9uLVZhcmlhYmxlRm9udF93Z2h0LnR0ZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zX19fID0gbmV3IFVSTChcIi4vYXNzZXRzL2ZvbnRzL1VidW50dS9VYnVudHUtUmVndWxhci50dGZcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyA9IG5ldyBVUkwoXCIuL2Fzc2V0cy9mb250cy9Lb2RlX01vbm8vS29kZU1vbm8tVmFyaWFibGVGb250X3dnaHQudHRmXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzRfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF80X19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgQGZvbnQtZmFjZSB7XG5cdGZvbnQtZmFtaWx5OiBMYWlsYV9NZWQ7XG5cdHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fX30pO1xufVxuXG5AZm9udC1mYWNlIHtcblx0Zm9udC1mYW1pbHk6IFJvYm90bztcblx0c3JjOiB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19ffSk7XG59XG5cbkBmb250LWZhY2Uge1xuXHRmb250LWZhbWlseTogT3JiaXRyb247XG5cdHNyYzogXHR1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19ffSksXG5cdFx0XHRcdGZvcm1hdCgndHJ1ZXR5cGUnKTtcbn1cblxuQGZvbnQtZmFjZSB7XG5cdGZvbnQtZmFtaWx5OiBVYnVudHVfUmVnO1xuXHRzcmM6IHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX199KTtcbn1cblxuQGZvbnQtZmFjZSB7XG5cdGZvbnQtZmFtaWx5OiBLb2RlTW9ub19WYXI7XG5cdHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNF9fX30pO1xufVxuXG46cm9vdCB7XG5cdC0tYWMtc2FuZDogXHRcdFx0XHRcdCNGN0RFOEQ7XG5cdC0tYWMtb3JhbmdlOlx0XHRcdFx0I0ZCQjA0MDtcblx0LS1hYy1ncmVlbjogXHRcdFx0XHQjQUFDMjdFO1xuXHQtLWFjLWdyZWVuLW9wYXF1ZTogXHQjQUFDMjdFNjk7XG5cdC0tYWMtYmx1ZTpcdFx0XHRcdFx0IzlGQ0ZDQTtcblx0LS1hYy1icm93bjogXHRcdFx0XHQjNTk0QTQyO1xuXHQtLWdyYXlkLWEtZ3JleTpcdFx0XHQjYWFhYWFhO1xuXHQtLXNwZWNpYWwtYmx1ZTpcdFx0XHQjMDA3YmZmO1xufVxuXG4qLFxuKjpiZWZvcmUsXG4qOmFmdGVyIHtcblx0bWFyZ2luOiAwO1xuXHRib3gtc2l6aW5nOiBpbmhlcml0O1xufVxuXG5hIHtcblx0dGV4dC1kZWNvcmF0aW9uOiBub25lO1xuXHRjb2xvcjogYmxhY2s7XG59XG5cbmJ1dHRvbiB7XG5cdGN1cnNvcjogcG9pbnRlcjtcblx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHRib3JkZXI6IG5vbmU7XG5cdG1hcmdpbjogMDtcblx0dGV4dC1kZWNvcmF0aW9uOiBub25lO1xuXHRiYWNrZ3JvdW5kOiBub25lO1xuXHR0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbmh0bWwge1xuXHRmb250LXNpemU6IDYyLjUlO1xufVxuXG5odG1sLCBib2R5IHtcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0b3ZlcmZsb3c6IGF1dG87XG59XG5cbmJvZHkge1xuXHRiYWNrZ3JvdW5kLWNvbG9yOiAjZDlkOWQ5O1xufWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3Jvb3Quc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0NBQ0Msc0JBQXNCO0NBQ3RCLDRDQUFpRDtBQUNsRDs7QUFFQTtDQUNDLG1CQUFtQjtDQUNuQiw0Q0FBb0Q7QUFDckQ7O0FBRUE7Q0FDQyxxQkFBcUI7Q0FDckI7c0JBQ3FCO0FBQ3RCOztBQUVBO0NBQ0MsdUJBQXVCO0NBQ3ZCLDRDQUFvRDtBQUNyRDs7QUFFQTtDQUNDLHlCQUF5QjtDQUN6Qiw0Q0FBbUU7QUFDcEU7O0FBRUE7Q0FDQyx1QkFBdUI7Q0FDdkIsdUJBQXVCO0NBQ3ZCLHVCQUF1QjtDQUN2Qiw2QkFBNkI7Q0FDN0Isc0JBQXNCO0NBQ3RCLHVCQUF1QjtDQUN2Qix5QkFBeUI7Q0FDekIseUJBQXlCO0FBQzFCOztBQUVBOzs7Q0FHQyxTQUFTO0NBQ1QsbUJBQW1CO0FBQ3BCOztBQUVBO0NBQ0MscUJBQXFCO0NBQ3JCLFlBQVk7QUFDYjs7QUFFQTtDQUNDLGVBQWU7Q0FDZixxQkFBcUI7Q0FDckIsWUFBWTtDQUNaLFNBQVM7Q0FDVCxxQkFBcUI7Q0FDckIsZ0JBQWdCO0NBQ2hCLGtCQUFrQjtBQUNuQjs7QUFFQTtDQUNDLGdCQUFnQjtBQUNqQjs7QUFFQTtDQUNDLHNCQUFzQjtDQUN0QixjQUFjO0FBQ2Y7O0FBRUE7Q0FDQyx5QkFBeUI7QUFDMUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGZvbnQtZmFjZSB7XFxuXFx0Zm9udC1mYW1pbHk6IExhaWxhX01lZDtcXG5cXHRzcmM6IHVybCgnLi9hc3NldHMvZm9udHMvTGFpbGEvTGFpbGEtTWVkaXVtLnR0ZicpO1xcbn1cXG5cXG5AZm9udC1mYWNlIHtcXG5cXHRmb250LWZhbWlseTogUm9ib3RvO1xcblxcdHNyYzogdXJsKCcuL2Fzc2V0cy9mb250cy9Sb2JvdG8vUm9ib3RvLVJlZ3VsYXIudHRmJyk7XFxufVxcblxcbkBmb250LWZhY2Uge1xcblxcdGZvbnQtZmFtaWx5OiBPcmJpdHJvbjtcXG5cXHRzcmM6IFxcdHVybCgnLi9hc3NldHMvZm9udHMvT3JiaXRyb24vT3JiaXRyb24tVmFyaWFibGVGb250X3dnaHQudHRmJyksXFxuXFx0XFx0XFx0XFx0Zm9ybWF0KCd0cnVldHlwZScpO1xcbn1cXG5cXG5AZm9udC1mYWNlIHtcXG5cXHRmb250LWZhbWlseTogVWJ1bnR1X1JlZztcXG5cXHRzcmM6IHVybCgnLi9hc3NldHMvZm9udHMvVWJ1bnR1L1VidW50dS1SZWd1bGFyLnR0ZicpO1xcbn1cXG5cXG5AZm9udC1mYWNlIHtcXG5cXHRmb250LWZhbWlseTogS29kZU1vbm9fVmFyO1xcblxcdHNyYzogdXJsKCcuL2Fzc2V0cy9mb250cy9Lb2RlX01vbm8vS29kZU1vbm8tVmFyaWFibGVGb250X3dnaHQudHRmJyk7XFxufVxcblxcbjpyb290IHtcXG5cXHQtLWFjLXNhbmQ6IFxcdFxcdFxcdFxcdFxcdCNGN0RFOEQ7XFxuXFx0LS1hYy1vcmFuZ2U6XFx0XFx0XFx0XFx0I0ZCQjA0MDtcXG5cXHQtLWFjLWdyZWVuOiBcXHRcXHRcXHRcXHQjQUFDMjdFO1xcblxcdC0tYWMtZ3JlZW4tb3BhcXVlOiBcXHQjQUFDMjdFNjk7XFxuXFx0LS1hYy1ibHVlOlxcdFxcdFxcdFxcdFxcdCM5RkNGQ0E7XFxuXFx0LS1hYy1icm93bjogXFx0XFx0XFx0XFx0IzU5NEE0MjtcXG5cXHQtLWdyYXlkLWEtZ3JleTpcXHRcXHRcXHQjYWFhYWFhO1xcblxcdC0tc3BlY2lhbC1ibHVlOlxcdFxcdFxcdCMwMDdiZmY7XFxufVxcblxcbiosXFxuKjpiZWZvcmUsXFxuKjphZnRlciB7XFxuXFx0bWFyZ2luOiAwO1xcblxcdGJveC1zaXppbmc6IGluaGVyaXQ7XFxufVxcblxcbmEge1xcblxcdHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG5cXHRjb2xvcjogYmxhY2s7XFxufVxcblxcbmJ1dHRvbiB7XFxuXFx0Y3Vyc29yOiBwb2ludGVyO1xcblxcdGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG5cXHRib3JkZXI6IG5vbmU7XFxuXFx0bWFyZ2luOiAwO1xcblxcdHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG5cXHRiYWNrZ3JvdW5kOiBub25lO1xcblxcdHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuaHRtbCB7XFxuXFx0Zm9udC1zaXplOiA2Mi41JTtcXG59XFxuXFxuaHRtbCwgYm9keSB7XFxuXFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcXG5cXHRvdmVyZmxvdzogYXV0bztcXG59XFxuXFxuYm9keSB7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogI2Q5ZDlkOTtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIHVybCA9IFN0cmluZyh1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsKTtcblxuICAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfVxuXG4gIC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG4gIHJldHVybiB1cmw7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwidmFyIHdyYXBweSA9IHJlcXVpcmUoJ3dyYXBweScpXG5tb2R1bGUuZXhwb3J0cyA9IHdyYXBweShvbmNlKVxubW9kdWxlLmV4cG9ydHMuc3RyaWN0ID0gd3JhcHB5KG9uY2VTdHJpY3QpXG5cbm9uY2UucHJvdG8gPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZ1bmN0aW9uLnByb3RvdHlwZSwgJ29uY2UnLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBvbmNlKHRoaXMpXG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSlcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVuY3Rpb24ucHJvdG90eXBlLCAnb25jZVN0cmljdCcsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG9uY2VTdHJpY3QodGhpcylcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KVxufSlcblxuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGYgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGYuY2FsbGVkKSByZXR1cm4gZi52YWx1ZVxuICAgIGYuY2FsbGVkID0gdHJ1ZVxuICAgIHJldHVybiBmLnZhbHVlID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICB9XG4gIGYuY2FsbGVkID0gZmFsc2VcbiAgcmV0dXJuIGZcbn1cblxuZnVuY3Rpb24gb25jZVN0cmljdCAoZm4pIHtcbiAgdmFyIGYgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGYuY2FsbGVkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGYub25jZUVycm9yKVxuICAgIGYuY2FsbGVkID0gdHJ1ZVxuICAgIHJldHVybiBmLnZhbHVlID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICB9XG4gIHZhciBuYW1lID0gZm4ubmFtZSB8fCAnRnVuY3Rpb24gd3JhcHBlZCB3aXRoIGBvbmNlYCdcbiAgZi5vbmNlRXJyb3IgPSBuYW1lICsgXCIgc2hvdWxkbid0IGJlIGNhbGxlZCBtb3JlIHRoYW4gb25jZVwiXG4gIGYuY2FsbGVkID0gZmFsc2VcbiAgcmV0dXJuIGZcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLGNhPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gcChhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn12YXIgZGE9bmV3IFNldCxlYT17fTtmdW5jdGlvbiBmYShhLGIpe2hhKGEsYik7aGEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGhhKGEsYil7ZWFbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWRhLmFkZChiW2FdKX1cbnZhciBpYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksamE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxrYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbGE9XG57fSxtYT17fTtmdW5jdGlvbiBvYShhKXtpZihqYS5jYWxsKG1hLGEpKXJldHVybiEwO2lmKGphLmNhbGwobGEsYSkpcmV0dXJuITE7aWYoa2EudGVzdChhKSlyZXR1cm4gbWFbYV09ITA7bGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gcGEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBxYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxwYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciB6PXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO3pbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgcmE9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBzYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxcbnNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbnoueGxpbmtIcmVmPW5ldyB2KFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHRhKGEsYixjLGQpe3ZhciBlPXouaGFzT3duUHJvcGVydHkoYik/eltiXTpudWxsO2lmKG51bGwhPT1lPzAhPT1lLnR5cGU6ZHx8ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdKXFhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9vYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSl9XG52YXIgdWE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsdmE9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksd2E9U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSx5YT1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksemE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLEFhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxCYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksQ2E9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksRGE9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLEVhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxGYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxHYT1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxIYT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTtTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7U3ltYm9sLmZvcihcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7XG52YXIgSWE9U3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QuY2FjaGVcIik7U3ltYm9sLmZvcihcInJlYWN0LnRyYWNpbmdfbWFya2VyXCIpO3ZhciBKYT1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gS2EoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUphJiZhW0phXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBBPU9iamVjdC5hc3NpZ24sTGE7ZnVuY3Rpb24gTWEoYSl7aWYodm9pZCAwPT09TGEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7TGE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK0xhK2F9dmFyIE5hPSExO1xuZnVuY3Rpb24gT2EoYSxiKXtpZighYXx8TmEpcmV0dXJuXCJcIjtOYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2gobCl7dmFyIGQ9bH1SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGwpe2Q9bH1hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGwpe2Q9bH1hKCl9fWNhdGNoKGwpe2lmKGwmJmQmJlwic3RyaW5nXCI9PT10eXBlb2YgbC5zdGFjayl7Zm9yKHZhciBlPWwuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSl7dmFyIGs9XCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTthLmRpc3BsYXlOYW1lJiZrLmluY2x1ZGVzKFwiPGFub255bW91cz5cIikmJihrPWsucmVwbGFjZShcIjxhbm9ueW1vdXM+XCIsYS5kaXNwbGF5TmFtZSkpO3JldHVybiBrfXdoaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtOYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP01hKGEpOlwiXCJ9XG5mdW5jdGlvbiBQYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTWEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBNYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTWEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBNYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9T2EoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9T2EoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9T2EoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBRYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHlhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHdhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBBYTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB6YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEVhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIEZhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIENhOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIEJhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIERhOnZhciBiPWEucmVuZGVyO2E9YS5kaXNwbGF5TmFtZTthfHwoYT1iLmRpc3BsYXlOYW1lfHxcbmIubmFtZXx8XCJcIixhPVwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtyZXR1cm4gYTtjYXNlIEdhOnJldHVybiBiPWEuZGlzcGxheU5hbWV8fG51bGwsbnVsbCE9PWI/YjpRYShhLnR5cGUpfHxcIk1lbW9cIjtjYXNlIEhhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBRYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gUmEoYSl7dmFyIGI9YS50eXBlO3N3aXRjaChhLnRhZyl7Y2FzZSAyNDpyZXR1cm5cIkNhY2hlXCI7Y2FzZSA5OnJldHVybihiLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIDEwOnJldHVybihiLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIDE4OnJldHVyblwiRGVoeWRyYXRlZEZyYWdtZW50XCI7Y2FzZSAxMTpyZXR1cm4gYT1iLnJlbmRlcixhPWEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJcIixiLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgNzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSA1OnJldHVybiBiO2Nhc2UgNDpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgMzpyZXR1cm5cIlJvb3RcIjtjYXNlIDY6cmV0dXJuXCJUZXh0XCI7Y2FzZSAxNjpyZXR1cm4gUWEoYik7Y2FzZSA4OnJldHVybiBiPT09emE/XCJTdHJpY3RNb2RlXCI6XCJNb2RlXCI7Y2FzZSAyMjpyZXR1cm5cIk9mZnNjcmVlblwiO1xuY2FzZSAxMjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSAyMTpyZXR1cm5cIlNjb3BlXCI7Y2FzZSAxMzpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSAxOTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwiO2Nhc2UgMjU6cmV0dXJuXCJUcmFjaW5nTWFya2VyXCI7Y2FzZSAxOmNhc2UgMDpjYXNlIDE3OmNhc2UgMjpjYXNlIDE0OmNhc2UgMTU6aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGIuZGlzcGxheU5hbWV8fGIubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpcmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2Nhc2UgXCJvYmplY3RcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gVGEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFVhKGEpe3ZhciBiPVRhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWEoYSkpfWZ1bmN0aW9uIFdhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFhhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBBKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBaYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1TYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIGFiKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmdGEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIGJiKGEsYil7YWIoYSxiKTt2YXIgYz1TYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9jYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZjYihhLGIudHlwZSxTYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGRiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFhhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgZWI9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGZiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitTYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHAoOTEpKTtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcihwKDkyKSk7aWYoZWIoYykpe2lmKDE8Yy5sZW5ndGgpdGhyb3cgRXJyb3IocCg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlNhKGMpfX1cbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9U2EoYi52YWx1ZSksZD1TYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGpiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9ZnVuY3Rpb24ga2IoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1cbmZ1bmN0aW9uIGxiKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9rYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBtYixuYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIT09YS5uYW1lc3BhY2VVUkl8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXttYj1tYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTttYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1tYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBvYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHBiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxhc3BlY3RSYXRpbzohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsXG56b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHFiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhwYikuZm9yRWFjaChmdW5jdGlvbihhKXtxYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3BiW2JdPXBiW2FdfSl9KTtmdW5jdGlvbiByYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cGIuaGFzT3duUHJvcGVydHkoYSkmJnBiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHNiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXJiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHRiPUEoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB1YihhLGIpe2lmKGIpe2lmKHRiW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IocCg2MCkpO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTHx8IShcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IocCg2MikpO319XG5mdW5jdGlvbiB2YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHdiPW51bGw7ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcihwKDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYigpe312YXIgSWI9ITE7ZnVuY3Rpb24gSmIoYSxiLGMpe2lmKEliKXJldHVybiBhKGIsYyk7SWI9ITA7dHJ5e3JldHVybiBHYihhLGIsYyl9ZmluYWxseXtpZihJYj0hMSxudWxsIT09emJ8fG51bGwhPT1BYilIYigpLEZiKCl9fVxuZnVuY3Rpb24gS2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcihwKDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIExiPSExO2lmKGlhKXRyeXt2YXIgTWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KE1iLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtMYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixNYixNYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpfWNhdGNoKGEpe0xiPSExfWZ1bmN0aW9uIE5iKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBPYj0hMSxQYj1udWxsLFFiPSExLFJiPW51bGwsU2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7T2I9ITA7UGI9YX19O2Z1bmN0aW9uIFRiKGEsYixjLGQsZSxmLGcsaCxrKXtPYj0hMTtQYj1udWxsO05iLmFwcGx5KFNiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBVYihhLGIsYyxkLGUsZixnLGgsayl7VGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKE9iKXtpZihPYil7dmFyIGw9UGI7T2I9ITE7UGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHAoMTk4KSk7UWJ8fChRYj0hMCxSYj1sKX19ZnVuY3Rpb24gVmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjQwOTgpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBXYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIFhiKGEpe2lmKFZiKGEpIT09YSl0aHJvdyBFcnJvcihwKDE4OCkpO31cbmZ1bmN0aW9uIFliKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVZiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIFhiKGUpLGE7aWYoZj09PWQpcmV0dXJuIFhiKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IocCgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcihwKDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHAoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gWmIoYSl7YT1ZYihhKTtyZXR1cm4gbnVsbCE9PWE/JGIoYSk6bnVsbH1mdW5jdGlvbiAkYihhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYTtmb3IoYT1hLmNoaWxkO251bGwhPT1hOyl7dmFyIGI9JGIoYSk7aWYobnVsbCE9PWIpcmV0dXJuIGI7YT1hLnNpYmxpbmd9cmV0dXJuIG51bGx9XG52YXIgYWM9Y2EudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxiYz1jYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxjYz1jYS51bnN0YWJsZV9zaG91bGRZaWVsZCxkYz1jYS51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsQj1jYS51bnN0YWJsZV9ub3csZWM9Y2EudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsZmM9Y2EudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZ2M9Y2EudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksaGM9Y2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksaWM9Y2EudW5zdGFibGVfTG93UHJpb3JpdHksamM9Y2EudW5zdGFibGVfSWRsZVByaW9yaXR5LGtjPW51bGwsbGM9bnVsbDtmdW5jdGlvbiBtYyhhKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJSb290KXRyeXtsYy5vbkNvbW1pdEZpYmVyUm9vdChrYyxhLHZvaWQgMCwxMjg9PT0oYS5jdXJyZW50LmZsYWdzJjEyOCkpfWNhdGNoKGIpe319XG52YXIgb2M9TWF0aC5jbHozMj9NYXRoLmNsejMyOm5jLHBjPU1hdGgubG9nLHFjPU1hdGguTE4yO2Z1bmN0aW9uIG5jKGEpe2E+Pj49MDtyZXR1cm4gMD09PWE/MzI6MzEtKHBjKGEpL3FjfDApfDB9dmFyIHJjPTY0LHNjPTQxOTQzMDQ7XG5mdW5jdGlvbiB0YyhhKXtzd2l0Y2goYSYtYSl7Y2FzZSAxOnJldHVybiAxO2Nhc2UgMjpyZXR1cm4gMjtjYXNlIDQ6cmV0dXJuIDQ7Y2FzZSA4OnJldHVybiA4O2Nhc2UgMTY6cmV0dXJuIDE2O2Nhc2UgMzI6cmV0dXJuIDMyO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGEmNDE5NDI0MDtjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybiBhJjEzMDAyMzQyNDtjYXNlIDEzNDIxNzcyODpyZXR1cm4gMTM0MjE3NzI4O2Nhc2UgMjY4NDM1NDU2OnJldHVybiAyNjg0MzU0NTY7Y2FzZSA1MzY4NzA5MTI6cmV0dXJuIDUzNjg3MDkxMjtjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuIDEwNzM3NDE4MjQ7XG5kZWZhdWx0OnJldHVybiBhfX1mdW5jdGlvbiB1YyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiAwO3ZhciBkPTAsZT1hLnN1c3BlbmRlZExhbmVzLGY9YS5waW5nZWRMYW5lcyxnPWMmMjY4NDM1NDU1O2lmKDAhPT1nKXt2YXIgaD1nJn5lOzAhPT1oP2Q9dGMoaCk6KGYmPWcsMCE9PWYmJihkPXRjKGYpKSl9ZWxzZSBnPWMmfmUsMCE9PWc/ZD10YyhnKTowIT09ZiYmKGQ9dGMoZikpO2lmKDA9PT1kKXJldHVybiAwO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmUpJiYoZT1kJi1kLGY9YiYtYixlPj1mfHwxNj09PWUmJjAhPT0oZiY0MTk0MjQwKSkpcmV0dXJuIGI7MCE9PShkJjQpJiYoZHw9YyYxNik7Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1vYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIHZjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OnJldHVybiBiKzI1MDtjYXNlIDg6Y2FzZSAxNjpjYXNlIDMyOmNhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGIrNUUzO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuLTE7Y2FzZSAxMzQyMTc3Mjg6Y2FzZSAyNjg0MzU0NTY6Y2FzZSA1MzY4NzA5MTI6Y2FzZSAxMDczNzQxODI0OnJldHVybi0xO2RlZmF1bHQ6cmV0dXJuLTF9fVxuZnVuY3Rpb24gd2MoYSxiKXtmb3IodmFyIGM9YS5zdXNwZW5kZWRMYW5lcyxkPWEucGluZ2VkTGFuZXMsZT1hLmV4cGlyYXRpb25UaW1lcyxmPWEucGVuZGluZ0xhbmVzOzA8Zjspe3ZhciBnPTMxLW9jKGYpLGg9MTw8ZyxrPWVbZ107aWYoLTE9PT1rKXtpZigwPT09KGgmYyl8fDAhPT0oaCZkKSllW2ddPXZjKGgsYil9ZWxzZSBrPD1iJiYoYS5leHBpcmVkTGFuZXN8PWgpO2YmPX5ofX1mdW5jdGlvbiB4YyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24geWMoKXt2YXIgYT1yYztyYzw8PTE7MD09PShyYyY0MTk0MjQwKSYmKHJjPTY0KTtyZXR1cm4gYX1mdW5jdGlvbiB6YyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEFjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjs1MzY4NzA5MTIhPT1iJiYoYS5zdXNwZW5kZWRMYW5lcz0wLGEucGluZ2VkTGFuZXM9MCk7YT1hLmV2ZW50VGltZXM7Yj0zMS1vYyhiKTthW2JdPWN9ZnVuY3Rpb24gQmMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcyZ+YjthLnBlbmRpbmdMYW5lcz1iO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWI7YS5tdXRhYmxlUmVhZExhbmVzJj1iO2EuZW50YW5nbGVkTGFuZXMmPWI7Yj1hLmVudGFuZ2xlbWVudHM7dmFyIGQ9YS5ldmVudFRpbWVzO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yzspe3ZhciBlPTMxLW9jKGMpLGY9MTw8ZTtiW2VdPTA7ZFtlXT0tMTthW2VdPS0xO2MmPX5mfX1cbmZ1bmN0aW9uIENjKGEsYil7dmFyIGM9YS5lbnRhbmdsZWRMYW5lc3w9Yjtmb3IoYT1hLmVudGFuZ2xlbWVudHM7Yzspe3ZhciBkPTMxLW9jKGMpLGU9MTw8ZDtlJmJ8YVtkXSZiJiYoYVtkXXw9Yik7YyY9fmV9fXZhciBDPTA7ZnVuY3Rpb24gRGMoYSl7YSY9LWE7cmV0dXJuIDE8YT80PGE/MCE9PShhJjI2ODQzNTQ1NSk/MTY6NTM2ODcwOTEyOjQ6MX12YXIgRWMsRmMsR2MsSGMsSWMsSmM9ITEsS2M9W10sTGM9bnVsbCxNYz1udWxsLE5jPW51bGwsT2M9bmV3IE1hcCxQYz1uZXcgTWFwLFFjPVtdLFJjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIFNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6TGM9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOk1jPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOk5jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpPYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpQYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIFRjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9e2Jsb2NrZWRPbjpiLGRvbUV2ZW50TmFtZTpjLGV2ZW50U3lzdGVtRmxhZ3M6ZCxuYXRpdmVFdmVudDpmLHRhcmdldENvbnRhaW5lcnM6W2VdfSxudWxsIT09YiYmKGI9Q2IoYiksbnVsbCE9PWImJkZjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFVjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIExjPVRjKExjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBNYz1UYyhNYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gTmM9VGMoTmMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtPYy5zZXQoZixUYyhPYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsUGMuc2V0KGYsVGMoUGMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gVmMoYSl7dmFyIGI9V2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1WYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1XYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtJYyhhLnByaW9yaXR5LGZ1bmN0aW9uKCl7R2MoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24gWGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPVljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGw9PT1jKXtjPWEubmF0aXZlRXZlbnQ7dmFyIGQ9bmV3IGMuY29uc3RydWN0b3IoYy50eXBlLGMpO3diPWQ7Yy50YXJnZXQuZGlzcGF0Y2hFdmVudChkKTt3Yj1udWxsfWVsc2UgcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJkZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIFpjKGEsYixjKXtYYyhhKSYmYy5kZWxldGUoYil9ZnVuY3Rpb24gJGMoKXtKYz0hMTtudWxsIT09TGMmJlhjKExjKSYmKExjPW51bGwpO251bGwhPT1NYyYmWGMoTWMpJiYoTWM9bnVsbCk7bnVsbCE9PU5jJiZYYyhOYykmJihOYz1udWxsKTtPYy5mb3JFYWNoKFpjKTtQYy5mb3JFYWNoKFpjKX1cbmZ1bmN0aW9uIGFkKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxKY3x8KEpjPSEwLGNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soY2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksJGMpKSl9XG5mdW5jdGlvbiBiZChhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBhZChiLGEpfWlmKDA8S2MubGVuZ3RoKXthZChLY1swXSxhKTtmb3IodmFyIGM9MTtjPEtjLmxlbmd0aDtjKyspe3ZhciBkPUtjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09TGMmJmFkKExjLGEpO251bGwhPT1NYyYmYWQoTWMsYSk7bnVsbCE9PU5jJiZhZChOYyxhKTtPYy5mb3JFYWNoKGIpO1BjLmZvckVhY2goYik7Zm9yKGM9MDtjPFFjLmxlbmd0aDtjKyspZD1RY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8UWMubGVuZ3RoJiYoYz1RY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylWYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJlFjLnNoaWZ0KCl9dmFyIGNkPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGRkPSEwO1xuZnVuY3Rpb24gZWQoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTEsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1mdW5jdGlvbiBnZChhLGIsYyxkKXt2YXIgZT1DLGY9Y2QudHJhbnNpdGlvbjtjZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9NCxmZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxjZC50cmFuc2l0aW9uPWZ9fVxuZnVuY3Rpb24gZmQoYSxiLGMsZCl7aWYoZGQpe3ZhciBlPVljKGEsYixjLGQpO2lmKG51bGw9PT1lKWhkKGEsYixkLGlkLGMpLFNjKGEsZCk7ZWxzZSBpZihVYyhlLGEsYixjLGQpKWQuc3RvcFByb3BhZ2F0aW9uKCk7ZWxzZSBpZihTYyhhLGQpLGImNCYmLTE8UmMuaW5kZXhPZihhKSl7Zm9yKDtudWxsIT09ZTspe3ZhciBmPUNiKGUpO251bGwhPT1mJiZFYyhmKTtmPVljKGEsYixjLGQpO251bGw9PT1mJiZoZChhLGIsZCxpZCxjKTtpZihmPT09ZSlicmVhaztlPWZ9bnVsbCE9PWUmJmQuc3RvcFByb3BhZ2F0aW9uKCl9ZWxzZSBoZChhLGIsZCxudWxsLGMpfX12YXIgaWQ9bnVsbDtcbmZ1bmN0aW9uIFljKGEsYixjLGQpe2lkPW51bGw7YT14YihkKTthPVdjKGEpO2lmKG51bGwhPT1hKWlmKGI9VmIoYSksbnVsbD09PWIpYT1udWxsO2Vsc2UgaWYoYz1iLnRhZywxMz09PWMpe2E9V2IoYik7aWYobnVsbCE9PWEpcmV0dXJuIGE7YT1udWxsfWVsc2UgaWYoMz09PWMpe2lmKGIuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpcmV0dXJuIDM9PT1iLnRhZz9iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7YT1udWxsfWVsc2UgYiE9PWEmJihhPW51bGwpO2lkPWE7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBqZChhKXtzd2l0Y2goYSl7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbGlja1wiOmNhc2UgXCJjbG9zZVwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcImtleXVwXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcInBhc3RlXCI6Y2FzZSBcInBhdXNlXCI6Y2FzZSBcInBsYXlcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVydXBcIjpjYXNlIFwicmF0ZWNoYW5nZVwiOmNhc2UgXCJyZXNldFwiOmNhc2UgXCJyZXNpemVcIjpjYXNlIFwic2Vla2VkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6Y2FzZSBcInZvbHVtZWNoYW5nZVwiOmNhc2UgXCJjaGFuZ2VcIjpjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6Y2FzZSBcInRleHRJbnB1dFwiOmNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6Y2FzZSBcImJlZm9yZWlucHV0XCI6Y2FzZSBcImJsdXJcIjpjYXNlIFwiZnVsbHNjcmVlbmNoYW5nZVwiOmNhc2UgXCJmb2N1c1wiOmNhc2UgXCJoYXNoY2hhbmdlXCI6Y2FzZSBcInBvcHN0YXRlXCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJzZWxlY3RzdGFydFwiOnJldHVybiAxO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInNjcm9sbFwiOmNhc2UgXCJ0b2dnbGVcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcIndoZWVsXCI6Y2FzZSBcIm1vdXNlZW50ZXJcIjpjYXNlIFwibW91c2VsZWF2ZVwiOmNhc2UgXCJwb2ludGVyZW50ZXJcIjpjYXNlIFwicG9pbnRlcmxlYXZlXCI6cmV0dXJuIDQ7XG5jYXNlIFwibWVzc2FnZVwiOnN3aXRjaChlYygpKXtjYXNlIGZjOnJldHVybiAxO2Nhc2UgZ2M6cmV0dXJuIDQ7Y2FzZSBoYzpjYXNlIGljOnJldHVybiAxNjtjYXNlIGpjOnJldHVybiA1MzY4NzA5MTI7ZGVmYXVsdDpyZXR1cm4gMTZ9ZGVmYXVsdDpyZXR1cm4gMTZ9fXZhciBrZD1udWxsLGxkPW51bGwsbWQ9bnVsbDtmdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9XG5mdW5jdGlvbiBvZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBwZCgpe3JldHVybiEwfWZ1bmN0aW9uIHFkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiByZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9wZDpxZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXFkO3JldHVybiB0aGlzfUEoYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXBkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OnBkfSk7cmV0dXJuIGJ9XG52YXIgc2Q9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sdGQ9cmQoc2QpLHVkPUEoe30sc2Qse3ZpZXc6MCxkZXRhaWw6MH0pLHZkPXJkKHVkKSx3ZCx4ZCx5ZCxBZD1BKHt9LHVkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXlkJiYoeWQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHdkPWEuc2NyZWVuWC15ZC5zY3JlZW5YLHhkPWEuc2NyZWVuWS15ZC5zY3JlZW5ZKTp4ZD13ZD0wLHlkPWEpO3JldHVybiB3ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnhkfX0pLEJkPXJkKEFkKSxDZD1BKHt9LEFkLHtkYXRhVHJhbnNmZXI6MH0pLERkPXJkKENkKSxFZD1BKHt9LHVkLHtyZWxhdGVkVGFyZ2V0OjB9KSxGZD1yZChFZCksR2Q9QSh7fSxzZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksSGQ9cmQoR2QpLElkPUEoe30sc2Qse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxKZD1yZChJZCksS2Q9QSh7fSxzZCx7ZGF0YTowfSksTGQ9cmQoS2QpLE1kPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxPZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHpkKCl7cmV0dXJuIFBkfVxudmFyIFFkPUEoe30sdWQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP05kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6emQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxSZD1yZChRZCksU2Q9QSh7fSxBZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxUZD1yZChTZCksVWQ9QSh7fSx1ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkfSksVmQ9cmQoVWQpLFdkPUEoe30sc2Qse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksWGQ9cmQoV2QpLFlkPUEoe30sQWQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxaZD1yZChZZCksJGQ9WzksMTMsMjcsMzJdLGFlPWlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxiZT1udWxsO2lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihiZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBjZT1pYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWJlLGRlPWlhJiYoIWFlfHxiZSYmODxiZSYmMTE+PWJlKSxlZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxmZT0hMTtcbmZ1bmN0aW9uIGdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09JGQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gaGUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaWU9ITE7ZnVuY3Rpb24gamUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGhlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtmZT0hMDtyZXR1cm4gZWU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZWUmJmZlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGtlKGEsYil7aWYoaWUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWFlJiZnZShhLGIpPyhhPW5kKCksbWQ9bGQ9a2Q9bnVsbCxpZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZGUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGxlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIG1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhbGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG5lKGEsYixjLGQpe0ViKGQpO2I9b2UoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyB0ZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBwZT1udWxsLHFlPW51bGw7ZnVuY3Rpb24gcmUoYSl7c2UoYSwwKX1mdW5jdGlvbiB0ZShhKXt2YXIgYj11ZShhKTtpZihXYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHZlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHdlPSExO2lmKGlhKXt2YXIgeGU7aWYoaWEpe3ZhciB5ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF5ZSl7dmFyIHplPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7emUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgemUub25pbnB1dH14ZT15ZX1lbHNlIHhlPSExO3dlPXhlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIEFlKCl7cGUmJihwZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkscWU9cGU9bnVsbCl9ZnVuY3Rpb24gQmUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnRlKHFlKSl7dmFyIGI9W107bmUoYixxZSxhLHhiKGEpKTtKYihyZSxiKX19XG5mdW5jdGlvbiBDZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyhBZSgpLHBlPWIscWU9YyxwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkpOlwiZm9jdXNvdXRcIj09PWEmJkFlKCl9ZnVuY3Rpb24gRGUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gdGUocWUpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gRmUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBIZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpHZTtcbmZ1bmN0aW9uIEllKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO2lmKCFqYS5jYWxsKGIsZSl8fCFIZShhW2VdLGJbZV0pKXJldHVybiExfXJldHVybiEwfWZ1bmN0aW9uIEplKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEtlKGEsYil7dmFyIGM9SmUoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9SmUoYyl9fWZ1bmN0aW9uIExlKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TGUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTWUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gTmUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbmZ1bmN0aW9uIE9lKGEpe3ZhciBiPU1lKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmYyYmYy5vd25lckRvY3VtZW50JiZMZShjLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihudWxsIT09ZCYmTmUoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZihhPShiPWMub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3csYS5nZXRTZWxlY3Rpb24pe2E9YS5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jLnRleHRDb250ZW50Lmxlbmd0aCxmPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9mOk1hdGgubWluKGQuZW5kLGUpOyFhLmV4dGVuZCYmZj5kJiYoZT1kLGQ9ZixmPWUpO2U9S2UoYyxmKTt2YXIgZz1LZShjLFxuZCk7ZSYmZyYmKDEhPT1hLnJhbmdlQ291bnR8fGEuYW5jaG9yTm9kZSE9PWUubm9kZXx8YS5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8YS5mb2N1c05vZGUhPT1nLm5vZGV8fGEuZm9jdXNPZmZzZXQhPT1nLm9mZnNldCkmJihiPWIuY3JlYXRlUmFuZ2UoKSxiLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCksYS5yZW1vdmVBbGxSYW5nZXMoKSxmPmQ/KGEuYWRkUmFuZ2UoYiksYS5leHRlbmQoZy5ub2RlLGcub2Zmc2V0KSk6KGIuc2V0RW5kKGcubm9kZSxnLm9mZnNldCksYS5hZGRSYW5nZShiKSkpfWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmZvY3VzJiZjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LGEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9fVxudmFyIFBlPWlhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUWU9bnVsbCxSZT1udWxsLFNlPW51bGwsVGU9ITE7XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7VGV8fG51bGw9PVFlfHxRZSE9PVhhKGQpfHwoZD1RZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZOZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFNlJiZJZShTZSxkKXx8KFNlPWQsZD1vZShSZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyB0ZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UWUpKSl9XG5mdW5jdGlvbiBWZShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBXZT17YW5pbWF0aW9uZW5kOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6VmUoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxYZT17fSxZZT17fTtcbmlhJiYoWWU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgV2UuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgV2UudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBaZShhKXtpZihYZVthXSlyZXR1cm4gWGVbYV07aWYoIVdlW2FdKXJldHVybiBhO3ZhciBiPVdlW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFllKXJldHVybiBYZVthXT1iW2NdO3JldHVybiBhfXZhciAkZT1aZShcImFuaW1hdGlvbmVuZFwiKSxhZj1aZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxiZj1aZShcImFuaW1hdGlvbnN0YXJ0XCIpLGNmPVplKFwidHJhbnNpdGlvbmVuZFwiKSxkZj1uZXcgTWFwLGVmPVwiYWJvcnQgYXV4Q2xpY2sgY2FuY2VsIGNhblBsYXkgY2FuUGxheVRocm91Z2ggY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZHJhZyBkcmFnRW5kIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHJhZ1N0YXJ0IGRyb3AgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgZ290UG9pbnRlckNhcHR1cmUgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbG9zdFBvaW50ZXJDYXB0dXJlIG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHBvaW50ZXJDYW5jZWwgcG9pbnRlckRvd24gcG9pbnRlck1vdmUgcG9pbnRlck91dCBwb2ludGVyT3ZlciBwb2ludGVyVXAgcHJvZ3Jlc3MgcmF0ZUNoYW5nZSByZXNldCByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdWJtaXQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlIHNjcm9sbCB0b2dnbGUgdG91Y2hNb3ZlIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBmZihhLGIpe2RmLnNldChhLGIpO2ZhKGIsW2FdKX1mb3IodmFyIGdmPTA7Z2Y8ZWYubGVuZ3RoO2dmKyspe3ZhciBoZj1lZltnZl0samY9aGYudG9Mb3dlckNhc2UoKSxrZj1oZlswXS50b1VwcGVyQ2FzZSgpK2hmLnNsaWNlKDEpO2ZmKGpmLFwib25cIitrZil9ZmYoJGUsXCJvbkFuaW1hdGlvbkVuZFwiKTtmZihhZixcIm9uQW5pbWF0aW9uSXRlcmF0aW9uXCIpO2ZmKGJmLFwib25BbmltYXRpb25TdGFydFwiKTtmZihcImRibGNsaWNrXCIsXCJvbkRvdWJsZUNsaWNrXCIpO2ZmKFwiZm9jdXNpblwiLFwib25Gb2N1c1wiKTtmZihcImZvY3Vzb3V0XCIsXCJvbkJsdXJcIik7ZmYoY2YsXCJvblRyYW5zaXRpb25FbmRcIik7aGEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7XG5oYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2ZhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZmEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZmEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIGxmPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksbWY9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQobGYpKTtcbmZ1bmN0aW9uIG5mKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1ViKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBzZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bmYoZSxoLGwpO2Y9a319fWlmKFFiKXRocm93IGE9UmIsUWI9ITEsUmI9bnVsbCxhO31cbmZ1bmN0aW9uIEQoYSxiKXt2YXIgYz1iW29mXTt2b2lkIDA9PT1jJiYoYz1iW29mXT1uZXcgU2V0KTt2YXIgZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KHBmKGIsYSwyLCExKSxjLmFkZChkKSl9ZnVuY3Rpb24gcWYoYSxiLGMpe3ZhciBkPTA7YiYmKGR8PTQpO3BmKGMsYSxkLGIpfXZhciByZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIHNmKGEpe2lmKCFhW3JmXSl7YVtyZl09ITA7ZGEuZm9yRWFjaChmdW5jdGlvbihiKXtcInNlbGVjdGlvbmNoYW5nZVwiIT09YiYmKG1mLmhhcyhiKXx8cWYoYiwhMSxhKSxxZihiLCEwLGEpKX0pO3ZhciBiPTk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O251bGw9PT1ifHxiW3JmXXx8KGJbcmZdPSEwLHFmKFwic2VsZWN0aW9uY2hhbmdlXCIsITEsYikpfX1cbmZ1bmN0aW9uIHBmKGEsYixjLGQpe3N3aXRjaChqZChiKSl7Y2FzZSAxOnZhciBlPWVkO2JyZWFrO2Nhc2UgNDplPWdkO2JyZWFrO2RlZmF1bHQ6ZT1mZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshTGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gaGQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz1XYyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59SmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPWRmLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCxuPWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOm49XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6bj1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgJGU6Y2FzZSBhZjpjYXNlIGJmOms9SGQ7YnJlYWs7Y2FzZSBjZjprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB0PTAhPT0oYiY0KSxKPSF0JiZcInNjcm9sbFwiPT09YSx4PXQ/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dD1bXTtmb3IodmFyIHc9ZCx1O251bGwhPT1cbnc7KXt1PXc7dmFyIEY9dS5zdGF0ZU5vZGU7NT09PXUudGFnJiZudWxsIT09RiYmKHU9RixudWxsIT09eCYmKEY9S2Iodyx4KSxudWxsIT1GJiZ0LnB1c2godGYodyxGLHUpKSkpO2lmKEopYnJlYWs7dz13LnJldHVybn0wPHQubGVuZ3RoJiYoaD1uZXcgayhoLG4sbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6dH0pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJmMhPT13YiYmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKFdjKG4pfHxuW3VmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQsbj1uP1djKG4pOm51bGwsbnVsbCE9PVxubiYmKEo9VmIobiksbiE9PUp8fDUhPT1uLnRhZyYmNiE9PW4udGFnKSluPW51bGx9ZWxzZSBrPW51bGwsbj1kO2lmKGshPT1uKXt0PUJkO0Y9XCJvbk1vdXNlTGVhdmVcIjt4PVwib25Nb3VzZUVudGVyXCI7dz1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXQ9VGQsRj1cIm9uUG9pbnRlckxlYXZlXCIseD1cIm9uUG9pbnRlckVudGVyXCIsdz1cInBvaW50ZXJcIjtKPW51bGw9PWs/aDp1ZShrKTt1PW51bGw9PW4/aDp1ZShuKTtoPW5ldyB0KEYsdytcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PUo7aC5yZWxhdGVkVGFyZ2V0PXU7Rj1udWxsO1djKGUpPT09ZCYmKHQ9bmV3IHQoeCx3K1wiZW50ZXJcIixuLGMsZSksdC50YXJnZXQ9dSx0LnJlbGF0ZWRUYXJnZXQ9SixGPXQpO0o9RjtpZihrJiZuKWI6e3Q9azt4PW47dz0wO2Zvcih1PXQ7dTt1PXZmKHUpKXcrKzt1PTA7Zm9yKEY9eDtGO0Y9dmYoRikpdSsrO2Zvcig7MDx3LXU7KXQ9dmYodCksdy0tO2Zvcig7MDx1LXc7KXg9XG52Zih4KSx1LS07Zm9yKDt3LS07KXtpZih0PT09eHx8bnVsbCE9PXgmJnQ9PT14LmFsdGVybmF0ZSlicmVhayBiO3Q9dmYodCk7eD12Zih4KX10PW51bGx9ZWxzZSB0PW51bGw7bnVsbCE9PWsmJndmKGcsaCxrLHQsITEpO251bGwhPT1uJiZudWxsIT09SiYmd2YoZyxKLG4sdCwhMCl9fX1hOntoPWQ/dWUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgbmE9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSluYT1GZTtlbHNle25hPURlO3ZhciB4YT1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKG5hPUVlKTtpZihuYSYmKG5hPW5hKGEsZCkpKXtuZShnLG5hLGMsZSk7YnJlYWsgYX14YSYmeGEoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJih4YT1oLl93cmFwcGVyU3RhdGUpJiZcbnhhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmNiKGgsXCJudW1iZXJcIixoLnZhbHVlKX14YT1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZSh4YSl8fFwidHJ1ZVwiPT09eGEuY29udGVudEVkaXRhYmxlKVFlPXhhLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgJGE7aWYoYWUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpiYT1cIm9uQ29tcG9zaXRpb25FbmRcIjtcbmJyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6YmE9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1iYT12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoYmE9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoYmE9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7YmEmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PWJhP1wib25Db21wb3NpdGlvbkVuZFwiPT09YmEmJmllJiYoJGE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSx4YT1vZShkLGJhKSwwPHhhLmxlbmd0aCYmKGJhPW5ldyBMZChiYSxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmJhLGxpc3RlbmVyczp4YX0pLCRhP2JhLmRhdGE9JGE6KCRhPWhlKGMpLG51bGwhPT0kYSYmKGJhLmRhdGE9JGEpKSkpO2lmKCRhPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLFxuMDxkLmxlbmd0aCYmKGU9bmV3IExkKFwib25CZWZvcmVJbnB1dFwiLFwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPSRhKX1zZShnLGIpfSl9ZnVuY3Rpb24gdGYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPUtiKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KHRmKGEsZixlKSksZj1LYihhLGIpLG51bGwhPWYmJmQucHVzaCh0ZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIHZmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiB3ZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPUtiKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KHRmKGMsayxoKSkpOmV8fChrPUtiKGMsZiksbnVsbCE9ayYmZy5wdXNoKHRmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9dmFyIHhmPS9cXHJcXG4/L2cseWY9L1xcdTAwMDB8XFx1RkZGRC9nO2Z1bmN0aW9uIHpmKGEpe3JldHVybihcInN0cmluZ1wiPT09dHlwZW9mIGE/YTpcIlwiK2EpLnJlcGxhY2UoeGYsXCJcXG5cIikucmVwbGFjZSh5ZixcIlwiKX1mdW5jdGlvbiBBZihhLGIsYyl7Yj16ZihiKTtpZih6ZihhKSE9PWImJmMpdGhyb3cgRXJyb3IocCg0MjUpKTt9ZnVuY3Rpb24gQmYoKXt9XG52YXIgQ2Y9bnVsbCxEZj1udWxsO2Z1bmN0aW9uIEVmKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfVxudmFyIEZmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLEdmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxIZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlOnZvaWQgMCxKZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcXVldWVNaWNyb3Rhc2s/cXVldWVNaWNyb3Rhc2s6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBIZj9mdW5jdGlvbihhKXtyZXR1cm4gSGYucmVzb2x2ZShudWxsKS50aGVuKGEpLmNhdGNoKElmKX06RmY7ZnVuY3Rpb24gSWYoYSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGE7fSl9XG5mdW5jdGlvbiBLZihhLGIpe3ZhciBjPWIsZD0wO2Rve3ZhciBlPWMubmV4dFNpYmxpbmc7YS5yZW1vdmVDaGlsZChjKTtpZihlJiY4PT09ZS5ub2RlVHlwZSlpZihjPWUuZGF0YSxcIi8kXCI9PT1jKXtpZigwPT09ZCl7YS5yZW1vdmVDaGlsZChlKTtiZChiKTtyZXR1cm59ZC0tfWVsc2VcIiRcIiE9PWMmJlwiJD9cIiE9PWMmJlwiJCFcIiE9PWN8fGQrKztjPWV9d2hpbGUoYyk7YmQoYil9ZnVuY3Rpb24gTGYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWs7aWYoOD09PWIpe2I9YS5kYXRhO2lmKFwiJFwiPT09Ynx8XCIkIVwiPT09Ynx8XCIkP1wiPT09YilicmVhaztpZihcIi8kXCI9PT1iKXJldHVybiBudWxsfX1yZXR1cm4gYX1cbmZ1bmN0aW9uIE1mKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciBOZj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxPZj1cIl9fcmVhY3RGaWJlciRcIitOZixQZj1cIl9fcmVhY3RQcm9wcyRcIitOZix1Zj1cIl9fcmVhY3RDb250YWluZXIkXCIrTmYsb2Y9XCJfX3JlYWN0RXZlbnRzJFwiK05mLFFmPVwiX19yZWFjdExpc3RlbmVycyRcIitOZixSZj1cIl9fcmVhY3RIYW5kbGVzJFwiK05mO1xuZnVuY3Rpb24gV2MoYSl7dmFyIGI9YVtPZl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbdWZdfHxjW09mXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPU1mKGEpO251bGwhPT1hOyl7aWYoYz1hW09mXSlyZXR1cm4gYzthPU1mKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbT2ZdfHxhW3VmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHAoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbUGZdfHxudWxsfXZhciBTZj1bXSxUZj0tMTtmdW5jdGlvbiBVZihhKXtyZXR1cm57Y3VycmVudDphfX1cbmZ1bmN0aW9uIEUoYSl7MD5UZnx8KGEuY3VycmVudD1TZltUZl0sU2ZbVGZdPW51bGwsVGYtLSl9ZnVuY3Rpb24gRyhhLGIpe1RmKys7U2ZbVGZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgVmY9e30sSD1VZihWZiksV2Y9VWYoITEpLFhmPVZmO2Z1bmN0aW9uIFlmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gVmY7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBaZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uICRmKCl7RShXZik7RShIKX1mdW5jdGlvbiBhZyhhLGIsYyl7aWYoSC5jdXJyZW50IT09VmYpdGhyb3cgRXJyb3IocCgxNjgpKTtHKEgsYik7RyhXZixjKX1mdW5jdGlvbiBiZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7Yj1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGIpKXRocm93IEVycm9yKHAoMTA4LFJhKGEpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIEEoe30sYyxkKX1cbmZ1bmN0aW9uIGNnKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxWZjtYZj1ILmN1cnJlbnQ7RyhILGEpO0coV2YsV2YuY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gZGcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHAoMTY5KSk7Yz8oYT1iZyhhLGIsWGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxFKFdmKSxFKEgpLEcoSCxhKSk6RShXZik7RyhXZixjKX12YXIgZWc9bnVsbCxmZz0hMSxnZz0hMTtmdW5jdGlvbiBoZyhhKXtudWxsPT09ZWc/ZWc9W2FdOmVnLnB1c2goYSl9ZnVuY3Rpb24gaWcoYSl7Zmc9ITA7aGcoYSl9XG5mdW5jdGlvbiBqZygpe2lmKCFnZyYmbnVsbCE9PWVnKXtnZz0hMDt2YXIgYT0wLGI9Qzt0cnl7dmFyIGM9ZWc7Zm9yKEM9MTthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXTtkbyBkPWQoITApO3doaWxlKG51bGwhPT1kKX1lZz1udWxsO2ZnPSExfWNhdGNoKGUpe3Rocm93IG51bGwhPT1lZyYmKGVnPWVnLnNsaWNlKGErMSkpLGFjKGZjLGpnKSxlO31maW5hbGx5e0M9YixnZz0hMX19cmV0dXJuIG51bGx9dmFyIGtnPVtdLGxnPTAsbWc9bnVsbCxuZz0wLG9nPVtdLHBnPTAscWc9bnVsbCxyZz0xLHNnPVwiXCI7ZnVuY3Rpb24gdGcoYSxiKXtrZ1tsZysrXT1uZztrZ1tsZysrXT1tZzttZz1hO25nPWJ9XG5mdW5jdGlvbiB1ZyhhLGIsYyl7b2dbcGcrK109cmc7b2dbcGcrK109c2c7b2dbcGcrK109cWc7cWc9YTt2YXIgZD1yZzthPXNnO3ZhciBlPTMyLW9jKGQpLTE7ZCY9figxPDxlKTtjKz0xO3ZhciBmPTMyLW9jKGIpK2U7aWYoMzA8Zil7dmFyIGc9ZS1lJTU7Zj0oZCYoMTw8ZyktMSkudG9TdHJpbmcoMzIpO2Q+Pj1nO2UtPWc7cmc9MTw8MzItb2MoYikrZXxjPDxlfGQ7c2c9ZithfWVsc2Ugcmc9MTw8ZnxjPDxlfGQsc2c9YX1mdW5jdGlvbiB2ZyhhKXtudWxsIT09YS5yZXR1cm4mJih0ZyhhLDEpLHVnKGEsMSwwKSl9ZnVuY3Rpb24gd2coYSl7Zm9yKDthPT09bWc7KW1nPWtnWy0tbGddLGtnW2xnXT1udWxsLG5nPWtnWy0tbGddLGtnW2xnXT1udWxsO2Zvcig7YT09PXFnOylxZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxzZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxyZz1vZ1stLXBnXSxvZ1twZ109bnVsbH12YXIgeGc9bnVsbCx5Zz1udWxsLEk9ITEsemc9bnVsbDtcbmZ1bmN0aW9uIEFnKGEsYil7dmFyIGM9QmcoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yj1hLmRlbGV0aW9ucztudWxsPT09Yj8oYS5kZWxldGlvbnM9W2NdLGEuZmxhZ3N8PTE2KTpiLnB1c2goYyl9XG5mdW5jdGlvbiBDZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPUxmKGIuZmlyc3RDaGlsZCksITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPW51bGwsITApOiExO2Nhc2UgMTM6cmV0dXJuIGI9OCE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhjPW51bGwhPT1xZz97aWQ6cmcsb3ZlcmZsb3c6c2d9Om51bGwsYS5tZW1vaXplZFN0YXRlPXtkZWh5ZHJhdGVkOmIsdHJlZUNvbnRleHQ6YyxyZXRyeUxhbmU6MTA3Mzc0MTgyNH0sYz1CZygxOCxudWxsLG51bGwsMCksYy5zdGF0ZU5vZGU9YixjLnJldHVybj1hLGEuY2hpbGQ9Yyx4Zz1hLHlnPVxubnVsbCwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gRGcoYSl7cmV0dXJuIDAhPT0oYS5tb2RlJjEpJiYwPT09KGEuZmxhZ3MmMTI4KX1mdW5jdGlvbiBFZyhhKXtpZihJKXt2YXIgYj15ZztpZihiKXt2YXIgYz1iO2lmKCFDZyhhLGIpKXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2I9TGYoYy5uZXh0U2libGluZyk7dmFyIGQ9eGc7YiYmQ2coYSxiKT9BZyhkLGMpOihhLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MixJPSExLHhnPWEpfX1lbHNle2lmKERnKGEpKXRocm93IEVycm9yKHAoNDE4KSk7YS5mbGFncz1hLmZsYWdzJi00MDk3fDI7ST0hMTt4Zz1hfX19ZnVuY3Rpb24gRmcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO3hnPWF9XG5mdW5jdGlvbiBHZyhhKXtpZihhIT09eGcpcmV0dXJuITE7aWYoIUkpcmV0dXJuIEZnKGEpLEk9ITAsITE7dmFyIGI7KGI9MyE9PWEudGFnKSYmIShiPTUhPT1hLnRhZykmJihiPWEudHlwZSxiPVwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhRWYoYS50eXBlLGEubWVtb2l6ZWRQcm9wcykpO2lmKGImJihiPXlnKSl7aWYoRGcoYSkpdGhyb3cgSGcoKSxFcnJvcihwKDQxOCkpO2Zvcig7YjspQWcoYSxiKSxiPUxmKGIubmV4dFNpYmxpbmcpfUZnKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IocCgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7eWc9TGYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ315Zz1cbm51bGx9fWVsc2UgeWc9eGc/TGYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gSGcoKXtmb3IodmFyIGE9eWc7YTspYT1MZihhLm5leHRTaWJsaW5nKX1mdW5jdGlvbiBJZygpe3lnPXhnPW51bGw7ST0hMX1mdW5jdGlvbiBKZyhhKXtudWxsPT09emc/emc9W2FdOnpnLnB1c2goYSl9dmFyIEtnPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO2Z1bmN0aW9uIExnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9QSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifXZhciBNZz1VZihudWxsKSxOZz1udWxsLE9nPW51bGwsUGc9bnVsbDtmdW5jdGlvbiBRZygpe1BnPU9nPU5nPW51bGx9ZnVuY3Rpb24gUmcoYSl7dmFyIGI9TWcuY3VycmVudDtFKE1nKTthLl9jdXJyZW50VmFsdWU9Yn1cbmZ1bmN0aW9uIFNnKGEsYixjKXtmb3IoO251bGwhPT1hOyl7dmFyIGQ9YS5hbHRlcm5hdGU7KGEuY2hpbGRMYW5lcyZiKSE9PWI/KGEuY2hpbGRMYW5lc3w9YixudWxsIT09ZCYmKGQuY2hpbGRMYW5lc3w9YikpOm51bGwhPT1kJiYoZC5jaGlsZExhbmVzJmIpIT09YiYmKGQuY2hpbGRMYW5lc3w9Yik7aWYoYT09PWMpYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gVGcoYSxiKXtOZz1hO1BnPU9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYoVWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gVmcoYSl7dmFyIGI9YS5fY3VycmVudFZhbHVlO2lmKFBnIT09YSlpZihhPXtjb250ZXh0OmEsbWVtb2l6ZWRWYWx1ZTpiLG5leHQ6bnVsbH0sbnVsbD09PU9nKXtpZihudWxsPT09TmcpdGhyb3cgRXJyb3IocCgzMDgpKTtPZz1hO05nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YX19ZWxzZSBPZz1PZy5uZXh0PWE7cmV0dXJuIGJ9dmFyIFdnPW51bGw7ZnVuY3Rpb24gWGcoYSl7bnVsbD09PVdnP1dnPVthXTpXZy5wdXNoKGEpfWZ1bmN0aW9uIFlnKGEsYixjLGQpe3ZhciBlPWIuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGMubmV4dD1jLFhnKGIpKTooYy5uZXh0PWUubmV4dCxlLm5leHQ9Yyk7Yi5pbnRlcmxlYXZlZD1jO3JldHVybiBaZyhhLGQpfVxuZnVuY3Rpb24gWmcoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfXZhciAkZz0hMTtmdW5jdGlvbiBhaChhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gYmgoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gY2goYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19XG5mdW5jdGlvbiBkaChhLGIsYyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtkPWQuc2hhcmVkO2lmKDAhPT0oSyYyKSl7dmFyIGU9ZC5wZW5kaW5nO251bGw9PT1lP2IubmV4dD1iOihiLm5leHQ9ZS5uZXh0LGUubmV4dD1iKTtkLnBlbmRpbmc9YjtyZXR1cm4gWmcoYSxjKX1lPWQuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGIubmV4dD1iLFhnKGQpKTooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5pbnRlcmxlYXZlZD1iO3JldHVybiBaZyhhLGMpfWZ1bmN0aW9uIGVoKGEsYixjKXtiPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIuc2hhcmVkLDAhPT0oYyY0MTk0MjQwKSkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG5mdW5jdGlvbiBmaChhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gZ2goYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTskZz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBtPWEuYWx0ZXJuYXRlO251bGwhPT1tJiYobT1tLnVwZGF0ZVF1ZXVlLGg9bS5sYXN0QmFzZVVwZGF0ZSxoIT09ZyYmKG51bGw9PT1oP20uZmlyc3RCYXNlVXBkYXRlPWw6aC5uZXh0PWwsbS5sYXN0QmFzZVVwZGF0ZT1rKSl9aWYobnVsbCE9PWYpe3ZhciBxPWUuYmFzZVN0YXRlO2c9MDttPWw9az1udWxsO2g9Zjtkb3t2YXIgcj1oLmxhbmUseT1oLmV2ZW50VGltZTtpZigoZCZyKT09PXIpe251bGwhPT1tJiYobT1tLm5leHQ9e2V2ZW50VGltZTp5LGxhbmU6MCx0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBuPWEsdD1oO3I9Yjt5PWM7c3dpdGNoKHQudGFnKXtjYXNlIDE6bj10LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4pe3E9bi5jYWxsKHkscSxyKTticmVhayBhfXE9bjticmVhayBhO2Nhc2UgMzpuLmZsYWdzPW4uZmxhZ3MmLTY1NTM3fDEyODtjYXNlIDA6bj10LnBheWxvYWQ7cj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbj9uLmNhbGwoeSxxLHIpOm47aWYobnVsbD09PXJ8fHZvaWQgMD09PXIpYnJlYWsgYTtxPUEoe30scSxyKTticmVhayBhO2Nhc2UgMjokZz0hMH19bnVsbCE9PWguY2FsbGJhY2smJjAhPT1oLmxhbmUmJihhLmZsYWdzfD02NCxyPWUuZWZmZWN0cyxudWxsPT09cj9lLmVmZmVjdHM9W2hdOnIucHVzaChoKSl9ZWxzZSB5PXtldmVudFRpbWU6eSxsYW5lOnIsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bT8obD1tPXksaz1xKTptPW0ubmV4dD15LGd8PXI7XG5oPWgubmV4dDtpZihudWxsPT09aClpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSByPWgsaD1yLm5leHQsci5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1yLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09bSYmKGs9cSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bTtiPWUuc2hhcmVkLmludGVybGVhdmVkO2lmKG51bGwhPT1iKXtlPWI7ZG8gZ3w9ZS5sYW5lLGU9ZS5uZXh0O3doaWxlKGUhPT1iKX1lbHNlIG51bGw9PT1mJiYoZS5zaGFyZWQubGFuZXM9MCk7aGh8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1xfX1cbmZ1bmN0aW9uIGloKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcihwKDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIGpoPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIGtoKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpBKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBuaD17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9WYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1MKCksZT1saChhKSxmPWNoKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9ZGgoYSxmLGUpO251bGwhPT1iJiYobWgoYixhLGUsZCksZWgoYixhLGUpKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1MKCksZT1saChhKSxmPWNoKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7Yj1kaChhLGYsZSk7bnVsbCE9PWImJihtaChiLGEsZSxkKSxlaChiLGEsZSkpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPUwoKSxkPVxubGgoYSksZT1jaChjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO2I9ZGgoYSxlLGQpO251bGwhPT1iJiYobWgoYixhLGQsYyksZWgoYixhLGQpKX19O2Z1bmN0aW9uIG9oKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUllKGMsZCl8fCFJZShlLGYpOiEwfVxuZnVuY3Rpb24gcGgoYSxiLGMpe3ZhciBkPSExLGU9VmY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9VmcoZik6KGU9WmYoYik/WGY6SC5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/WWYoYSxlKTpWZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPW5oO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gcWgoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJm5oLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gcmgoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1qaDthaChhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PVZnKGYpOihmPVpmKGIpP1hmOkguY3VycmVudCxlLmNvbnRleHQ9WWYoYSxmKSk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKGtoKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJm5oLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGdoKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQxOTQzMDgpfVxuZnVuY3Rpb24gc2goYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHAoMTQ3LGEpKTt2YXIgZT1kLGY9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWYpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZS5yZWZzO2I9PT1qaCYmKGI9ZS5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltmXTpiW2ZdPWF9O2IuX3N0cmluZ1JlZj1mO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcihwKDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcihwKDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gdGgoYSxiKXthPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTt0aHJvdyBFcnJvcihwKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1hP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmEpKTt9ZnVuY3Rpb24gdWgoYSl7dmFyIGI9YS5faW5pdDtyZXR1cm4gYihhLl9wYXlsb2FkKX1cbmZ1bmN0aW9uIHZoKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmRlbGV0aW9ucztudWxsPT09ZD8oYi5kZWxldGlvbnM9W2NdLGIuZmxhZ3N8PTE2KTpkLnB1c2goYyl9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPXdoKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYi5mbGFnc3w9MTA0ODU3NixjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3N8PTIsYyk6ZDtiLmZsYWdzfD0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmXG5udWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzfD0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9eGgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXt2YXIgZj1jLnR5cGU7aWYoZj09PXlhKXJldHVybiBtKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsYy5rZXkpO2lmKG51bGwhPT1iJiYoYi5lbGVtZW50VHlwZT09PWZ8fFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYuJCR0eXBlb2Y9PT1IYSYmdWgoZik9PT1iLnR5cGUpKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1zaChhLGIsYyksZC5yZXR1cm49YSxkO2Q9eWgoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9c2goYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxcbmIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj16aChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9QWgoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBxKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGImJlwiXCIhPT1ifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9eGgoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGM9eWgoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksXG5jLnJlZj1zaChhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2Ugd2E6cmV0dXJuIGI9emgoYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2Nhc2UgSGE6dmFyIGQ9Yi5faW5pdDtyZXR1cm4gcShhLGQoYi5fcGF5bG9hZCksYyl9aWYoZWIoYil8fEthKGIpKXJldHVybiBiPUFoKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO3RoKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcihhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYyYmXCJcIiE9PWN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGMua2V5PT09ZT9rKGEsYixjLGQpOm51bGw7Y2FzZSB3YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbDtjYXNlIEhhOnJldHVybiBlPWMuX2luaXQscihhLFxuYixlKGMuX3BheWxvYWQpLGQpfWlmKGViKGMpfHxLYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7dGgoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkJiZcIlwiIT09ZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKTtjYXNlIHdhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpO2Nhc2UgSGE6dmFyIGY9ZC5faW5pdDtyZXR1cm4geShhLGIsYyxmKGQuX3BheWxvYWQpLGUpfWlmKGViKGQpfHxLYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7dGgoYixkKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG4oZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbT1udWxsLHU9Zyx3PWc9MCx4PW51bGw7bnVsbCE9PXUmJnc8aC5sZW5ndGg7dysrKXt1LmluZGV4Pnc/KHg9dSx1PW51bGwpOng9dS5zaWJsaW5nO3ZhciBuPXIoZSx1LGhbd10sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT14KTticmVha31hJiZ1JiZudWxsPT09bi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHcpO251bGw9PT1tP2w9bjptLnNpYmxpbmc9bjttPW47dT14fWlmKHc9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLEkmJnRnKGUsdyksbDtpZihudWxsPT09dSl7Zm9yKDt3PGgubGVuZ3RoO3crKyl1PXEoZSxoW3ddLGspLG51bGwhPT11JiYoZz1mKHUsZyx3KSxudWxsPT09bT9sPXU6bS5zaWJsaW5nPXUsbT11KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcih1PWQoZSx1KTt3PGgubGVuZ3RoO3crKyl4PXkodSxlLHcsaFt3XSxrKSxudWxsIT09eCYmKGEmJm51bGwhPT14LmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PVxueC5rZXk/dzp4LmtleSksZz1mKHgsZyx3KSxudWxsPT09bT9sPXg6bS5zaWJsaW5nPXgsbT14KTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gdChlLGcsaCxrKXt2YXIgbD1LYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcihwKDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PWgpdGhyb3cgRXJyb3IocCgxNTEpKTtmb3IodmFyIHU9bD1udWxsLG09Zyx3PWc9MCx4PW51bGwsbj1oLm5leHQoKTtudWxsIT09bSYmIW4uZG9uZTt3Kyssbj1oLm5leHQoKSl7bS5pbmRleD53Pyh4PW0sbT1udWxsKTp4PW0uc2libGluZzt2YXIgdD1yKGUsbSxuLnZhbHVlLGspO2lmKG51bGw9PT10KXtudWxsPT09bSYmKG09eCk7YnJlYWt9YSYmbSYmbnVsbD09PXQuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHQsZyx3KTtudWxsPT09dT9sPXQ6dS5zaWJsaW5nPXQ7dT10O209eH1pZihuLmRvbmUpcmV0dXJuIGMoZSxcbm0pLEkmJnRnKGUsdyksbDtpZihudWxsPT09bSl7Zm9yKDshbi5kb25lO3crKyxuPWgubmV4dCgpKW49cShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO0kmJnRnKGUsdyk7cmV0dXJuIGx9Zm9yKG09ZChlLG0pOyFuLmRvbmU7dysrLG49aC5uZXh0KCkpbj15KG0sZSx3LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1uLmtleT93Om4ua2V5KSxnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mdW5jdGlvbiBKKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXlhJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYpe3N3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHZhOmE6e2Zvcih2YXIgaz1cbmYua2V5LGw9ZDtudWxsIT09bDspe2lmKGwua2V5PT09ayl7az1mLnR5cGU7aWYoaz09PXlhKXtpZig3PT09bC50YWcpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWVsc2UgaWYobC5lbGVtZW50VHlwZT09PWt8fFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1IYSYmdWgoayk9PT1sLnR5cGUpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMpO2QucmVmPXNoKGEsbCxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxsKTticmVha31lbHNlIGIoYSxsKTtsPWwuc2libGluZ31mLnR5cGU9PT15YT8oZD1BaChmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9eWgoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9c2goYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHdhOmE6e2ZvcihsPWYua2V5O251bGwhPT1cbmQ7KXtpZihkLmtleT09PWwpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9emgoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBIYTpyZXR1cm4gbD1mLl9pbml0LEooYSxkLGwoZi5fcGF5bG9hZCksaCl9aWYoZWIoZikpcmV0dXJuIG4oYSxkLGYsaCk7aWYoS2EoZikpcmV0dXJuIHQoYSxkLGYsaCk7dGgoYSxmKX1yZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGYmJlwiXCIhPT1mfHxcIm51bWJlclwiPT09dHlwZW9mIGY/KGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTpcbihjKGEsZCksZD14aChmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKSk6YyhhLGQpfXJldHVybiBKfXZhciBCaD12aCghMCksQ2g9dmgoITEpLERoPXt9LEVoPVVmKERoKSxGaD1VZihEaCksR2g9VWYoRGgpO2Z1bmN0aW9uIEhoKGEpe2lmKGE9PT1EaCl0aHJvdyBFcnJvcihwKDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIEloKGEsYil7RyhHaCxiKTtHKEZoLGEpO0coRWgsRGgpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bGIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPWxiKGIsYSl9RShFaCk7RyhFaCxiKX1mdW5jdGlvbiBKaCgpe0UoRWgpO0UoRmgpO0UoR2gpfVxuZnVuY3Rpb24gS2goYSl7SGgoR2guY3VycmVudCk7dmFyIGI9SGgoRWguY3VycmVudCk7dmFyIGM9bGIoYixhLnR5cGUpO2IhPT1jJiYoRyhGaCxhKSxHKEVoLGMpKX1mdW5jdGlvbiBMaChhKXtGaC5jdXJyZW50PT09YSYmKEUoRWgpLEUoRmgpKX12YXIgTT1VZigwKTtcbmZ1bmN0aW9uIE1oKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBOaD1bXTtcbmZ1bmN0aW9uIE9oKCl7Zm9yKHZhciBhPTA7YTxOaC5sZW5ndGg7YSsrKU5oW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7TmgubGVuZ3RoPTB9dmFyIFBoPXVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsUWg9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsUmg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxTaD0hMSxUaD0hMSxVaD0wLFZoPTA7ZnVuY3Rpb24gUSgpe3Rocm93IEVycm9yKHAoMzIxKSk7fWZ1bmN0aW9uIFdoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBYaChhLGIsYyxkLGUsZil7Umg9ZjtOPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDtQaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP1loOlpoO2E9YyhkLGUpO2lmKFRoKXtmPTA7ZG97VGg9ITE7VWg9MDtpZigyNTw9Zil0aHJvdyBFcnJvcihwKDMwMSkpO2YrPTE7UD1PPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO1BoLmN1cnJlbnQ9JGg7YT1jKGQsZSl9d2hpbGUoVGgpfVBoLmN1cnJlbnQ9YWk7Yj1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDtSaD0wO1A9Tz1OPW51bGw7U2g9ITE7aWYoYil0aHJvdyBFcnJvcihwKDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIGJpKCl7dmFyIGE9MCE9PVVoO1VoPTA7cmV0dXJuIGF9XG5mdW5jdGlvbiBjaSgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiBkaSgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gZWkoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBmaShhKXt2YXIgYj1kaSgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7Zj1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPW51bGwsaz1udWxsLGw9Zjtkb3t2YXIgbT1sLmxhbmU7aWYoKFJoJm0pPT09bSludWxsIT09ayYmKGs9ay5uZXh0PXtsYW5lOjAsYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLGVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9bC5oYXNFYWdlclN0YXRlP2wuZWFnZXJTdGF0ZTphKGQsbC5hY3Rpb24pO2Vsc2V7dmFyIHE9e2xhbmU6bSxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsXG5lYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1rPyhoPWs9cSxnPWQpOms9ay5uZXh0PXE7Ti5sYW5lc3w9bTtoaHw9bX1sPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWYpO251bGw9PT1rP2c9ZDprLm5leHQ9aDtIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChVZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZztiLmJhc2VRdWV1ZT1rO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1hPWMuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWEpe2U9YTtkbyBmPWUubGFuZSxOLmxhbmVzfD1mLGhofD1mLGU9ZS5uZXh0O3doaWxlKGUhPT1hKX1lbHNlIG51bGw9PT1lJiYoYy5sYW5lcz0wKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gZ2koYSl7dmFyIGI9ZGkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KFVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19ZnVuY3Rpb24gaGkoKXt9XG5mdW5jdGlvbiBpaShhLGIpe3ZhciBjPU4sZD1kaSgpLGU9YigpLGY9IUhlKGQubWVtb2l6ZWRTdGF0ZSxlKTtmJiYoZC5tZW1vaXplZFN0YXRlPWUsVWc9ITApO2Q9ZC5xdWV1ZTtqaShraS5iaW5kKG51bGwsYyxkLGEpLFthXSk7aWYoZC5nZXRTbmFwc2hvdCE9PWJ8fGZ8fG51bGwhPT1QJiZQLm1lbW9pemVkU3RhdGUudGFnJjEpe2MuZmxhZ3N8PTIwNDg7bGkoOSxtaS5iaW5kKG51bGwsYyxkLGUsYiksdm9pZCAwLG51bGwpO2lmKG51bGw9PT1SKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShSaCYzMCl8fG5pKGMsYixlKX1yZXR1cm4gZX1mdW5jdGlvbiBuaShhLGIsYyl7YS5mbGFnc3w9MTYzODQ7YT17Z2V0U25hcHNob3Q6Yix2YWx1ZTpjfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIuc3RvcmVzPVthXSk6KGM9Yi5zdG9yZXMsbnVsbD09PWM/Yi5zdG9yZXM9W2FdOmMucHVzaChhKSl9XG5mdW5jdGlvbiBtaShhLGIsYyxkKXtiLnZhbHVlPWM7Yi5nZXRTbmFwc2hvdD1kO29pKGIpJiZwaShhKX1mdW5jdGlvbiBraShhLGIsYyl7cmV0dXJuIGMoZnVuY3Rpb24oKXtvaShiKSYmcGkoYSl9KX1mdW5jdGlvbiBvaShhKXt2YXIgYj1hLmdldFNuYXBzaG90O2E9YS52YWx1ZTt0cnl7dmFyIGM9YigpO3JldHVybiFIZShhLGMpfWNhdGNoKGQpe3JldHVybiEwfX1mdW5jdGlvbiBwaShhKXt2YXIgYj1aZyhhLDEpO251bGwhPT1iJiZtaChiLGEsMSwtMSl9XG5mdW5jdGlvbiBxaShhKXt2YXIgYj1jaSgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmVpLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2IucXVldWU9YTthPWEuZGlzcGF0Y2g9cmkuYmluZChudWxsLE4sYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIGxpKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBzaSgpe3JldHVybiBkaSgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gdGkoYSxiLGMsZCl7dmFyIGU9Y2koKTtOLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1saSgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gdWkoYSxiLGMsZCl7dmFyIGU9ZGkoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZXaChkLGcuZGVwcykpe2UubWVtb2l6ZWRTdGF0ZT1saShiLGMsZixkKTtyZXR1cm59fU4uZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWxpKDF8YixjLGYsZCl9ZnVuY3Rpb24gdmkoYSxiKXtyZXR1cm4gdGkoODM5MDY1Niw4LGEsYil9ZnVuY3Rpb24gamkoYSxiKXtyZXR1cm4gdWkoMjA0OCw4LGEsYil9ZnVuY3Rpb24gd2koYSxiKXtyZXR1cm4gdWkoNCwyLGEsYil9ZnVuY3Rpb24geGkoYSxiKXtyZXR1cm4gdWkoNCw0LGEsYil9XG5mdW5jdGlvbiB5aShhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIHppKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gdWkoNCw0LHlpLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIEFpKCl7fWZ1bmN0aW9uIEJpKGEsYil7dmFyIGM9ZGkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJldoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gQ2koYSxiKXt2YXIgYz1kaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmV2goYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gRGkoYSxiLGMpe2lmKDA9PT0oUmgmMjEpKXJldHVybiBhLmJhc2VTdGF0ZSYmKGEuYmFzZVN0YXRlPSExLFVnPSEwKSxhLm1lbW9pemVkU3RhdGU9YztIZShjLGIpfHwoYz15YygpLE4ubGFuZXN8PWMsaGh8PWMsYS5iYXNlU3RhdGU9ITApO3JldHVybiBifWZ1bmN0aW9uIEVpKGEsYil7dmFyIGM9QztDPTAhPT1jJiY0PmM/Yzo0O2EoITApO3ZhciBkPVFoLnRyYW5zaXRpb247UWgudHJhbnNpdGlvbj17fTt0cnl7YSghMSksYigpfWZpbmFsbHl7Qz1jLFFoLnRyYW5zaXRpb249ZH19ZnVuY3Rpb24gRmkoKXtyZXR1cm4gZGkoKS5tZW1vaXplZFN0YXRlfVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPWxoKGEpO2M9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKEhpKGEpKUlpKGIsYyk7ZWxzZSBpZihjPVlnKGEsYixjLGQpLG51bGwhPT1jKXt2YXIgZT1MKCk7bWgoYyxhLGQsZSk7SmkoYyxiLGQpfX1cbmZ1bmN0aW9uIHJpKGEsYixjKXt2YXIgZD1saChhKSxlPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZihIaShhKSlJaShiLGUpO2Vsc2V7dmFyIGY9YS5hbHRlcm5hdGU7aWYoMD09PWEubGFuZXMmJihudWxsPT09Znx8MD09PWYubGFuZXMpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuaGFzRWFnZXJTdGF0ZT0hMDtlLmVhZ2VyU3RhdGU9aDtpZihIZShoLGcpKXt2YXIgaz1iLmludGVybGVhdmVkO251bGw9PT1rPyhlLm5leHQ9ZSxYZyhiKSk6KGUubmV4dD1rLm5leHQsay5uZXh0PWUpO2IuaW50ZXJsZWF2ZWQ9ZTtyZXR1cm59fWNhdGNoKGwpe31maW5hbGx5e31jPVlnKGEsYixlLGQpO251bGwhPT1jJiYoZT1MKCksbWgoYyxhLGQsZSksSmkoYyxiLGQpKX19XG5mdW5jdGlvbiBIaShhKXt2YXIgYj1hLmFsdGVybmF0ZTtyZXR1cm4gYT09PU58fG51bGwhPT1iJiZiPT09Tn1mdW5jdGlvbiBJaShhLGIpe1RoPVNoPSEwO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9ZnVuY3Rpb24gSmkoYSxiLGMpe2lmKDAhPT0oYyY0MTk0MjQwKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztDYyhhLGMpfX1cbnZhciBhaT17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6USx1c2VDb250ZXh0OlEsdXNlRWZmZWN0OlEsdXNlSW1wZXJhdGl2ZUhhbmRsZTpRLHVzZUluc2VydGlvbkVmZmVjdDpRLHVzZUxheW91dEVmZmVjdDpRLHVzZU1lbW86USx1c2VSZWR1Y2VyOlEsdXNlUmVmOlEsdXNlU3RhdGU6USx1c2VEZWJ1Z1ZhbHVlOlEsdXNlRGVmZXJyZWRWYWx1ZTpRLHVzZVRyYW5zaXRpb246USx1c2VNdXRhYmxlU291cmNlOlEsdXNlU3luY0V4dGVybmFsU3RvcmU6USx1c2VJZDpRLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWWg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7Y2koKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6dmksdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHRpKDQxOTQzMDgsXG40LHlpLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGkoNDE5NDMwOCw0LGEsYil9LHVzZUluc2VydGlvbkVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB0aSg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPWNpKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWNpKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2QucXVldWU9YTthPWEuZGlzcGF0Y2g9R2kuYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPVxuY2koKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6cWksdXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3JldHVybiBjaSgpLm1lbW9pemVkU3RhdGU9YX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPXFpKCExKSxiPWFbMF07YT1FaS5iaW5kKG51bGwsYVsxXSk7Y2koKS5tZW1vaXplZFN0YXRlPWE7cmV0dXJuW2IsYV19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oKXt9LHVzZVN5bmNFeHRlcm5hbFN0b3JlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1OLGU9Y2koKTtpZihJKXtpZih2b2lkIDA9PT1jKXRocm93IEVycm9yKHAoNDA3KSk7Yz1jKCl9ZWxzZXtjPWIoKTtpZihudWxsPT09Uil0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oUmgmMzApfHxuaShkLGIsYyl9ZS5tZW1vaXplZFN0YXRlPWM7dmFyIGY9e3ZhbHVlOmMsZ2V0U25hcHNob3Q6Yn07ZS5xdWV1ZT1mO3ZpKGtpLmJpbmQobnVsbCxkLFxuZixhKSxbYV0pO2QuZmxhZ3N8PTIwNDg7bGkoOSxtaS5iaW5kKG51bGwsZCxmLGMsYiksdm9pZCAwLG51bGwpO3JldHVybiBjfSx1c2VJZDpmdW5jdGlvbigpe3ZhciBhPWNpKCksYj1SLmlkZW50aWZpZXJQcmVmaXg7aWYoSSl7dmFyIGM9c2c7dmFyIGQ9cmc7Yz0oZCZ+KDE8PDMyLW9jKGQpLTEpKS50b1N0cmluZygzMikrYztiPVwiOlwiK2IrXCJSXCIrYztjPVVoKys7MDxjJiYoYis9XCJIXCIrYy50b1N0cmluZygzMikpO2IrPVwiOlwifWVsc2UgYz1WaCsrLGI9XCI6XCIrYitcInJcIitjLnRvU3RyaW5nKDMyKStcIjpcIjtyZXR1cm4gYS5tZW1vaXplZFN0YXRlPWJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWmg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOkJpLHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OmppLHVzZUltcGVyYXRpdmVIYW5kbGU6emksdXNlSW5zZXJ0aW9uRWZmZWN0OndpLHVzZUxheW91dEVmZmVjdDp4aSx1c2VNZW1vOkNpLHVzZVJlZHVjZXI6ZmksdXNlUmVmOnNpLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGZpKGVpKX0sXG51c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9ZGkoKTtyZXR1cm4gRGkoYixPLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1maShlaSlbMF0sYj1kaSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6aGksdXNlU3luY0V4dGVybmFsU3RvcmU6aWksdXNlSWQ6RmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSwkaD17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6QmksdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6amksdXNlSW1wZXJhdGl2ZUhhbmRsZTp6aSx1c2VJbnNlcnRpb25FZmZlY3Q6d2ksdXNlTGF5b3V0RWZmZWN0OnhpLHVzZU1lbW86Q2ksdXNlUmVkdWNlcjpnaSx1c2VSZWY6c2ksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gZ2koZWkpfSx1c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9ZGkoKTtyZXR1cm4gbnVsbD09PVxuTz9iLm1lbW9pemVkU3RhdGU9YTpEaShiLE8ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWdpKGVpKVswXSxiPWRpKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpoaSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTppaSx1c2VJZDpGaSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9O2Z1bmN0aW9uIEtpKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVBhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplLGRpZ2VzdDpudWxsfX1mdW5jdGlvbiBMaShhLGIsYyl7cmV0dXJue3ZhbHVlOmEsc291cmNlOm51bGwsc3RhY2s6bnVsbCE9Yz9jOm51bGwsZGlnZXN0Om51bGwhPWI/YjpudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBOaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBPaShhLGIsYyl7Yz1jaCgtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtQaXx8KFBpPSEwLFFpPWQpO01pKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gUmkoYSxiLGMpe2M9Y2goLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TWkoYSxiKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe01pKGEsYik7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09U2k/U2k9bmV3IFNldChbdGhpc10pOlNpLmFkZCh0aGlzKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBUaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7aWYobnVsbD09PWQpe2Q9YS5waW5nQ2FjaGU9bmV3IE5pO3ZhciBlPW5ldyBTZXQ7ZC5zZXQoYixlKX1lbHNlIGU9ZC5nZXQoYiksdm9pZCAwPT09ZSYmKGU9bmV3IFNldCxkLnNldChiLGUpKTtlLmhhcyhjKXx8KGUuYWRkKGMpLGE9VWkuYmluZChudWxsLGEsYixjKSxiLnRoZW4oYSxhKSl9ZnVuY3Rpb24gVmkoYSl7ZG97dmFyIGI7aWYoYj0xMz09PWEudGFnKWI9YS5tZW1vaXplZFN0YXRlLGI9bnVsbCE9PWI/bnVsbCE9PWIuZGVoeWRyYXRlZD8hMDohMTohMDtpZihiKXJldHVybiBhO2E9YS5yZXR1cm59d2hpbGUobnVsbCE9PWEpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gV2koYSxiLGMsZCxlKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gYT09PWI/YS5mbGFnc3w9NjU1MzY6KGEuZmxhZ3N8PTEyOCxjLmZsYWdzfD0xMzEwNzIsYy5mbGFncyY9LTUyODA1LDE9PT1jLnRhZyYmKG51bGw9PT1jLmFsdGVybmF0ZT9jLnRhZz0xNzooYj1jaCgtMSwxKSxiLnRhZz0yLGRoKGMsYiwxKSkpLGMubGFuZXN8PTEpLGE7YS5mbGFnc3w9NjU1MzY7YS5sYW5lcz1lO3JldHVybiBhfXZhciBYaT11YS5SZWFjdEN1cnJlbnRPd25lcixVZz0hMTtmdW5jdGlvbiBZaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP0NoKGIsbnVsbCxjLGQpOkJoKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gWmkoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO1RnKGIsZSk7ZD1YaChhLGIsYyxkLGYsZSk7Yz1iaSgpO2lmKG51bGwhPT1hJiYhVWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSwkaShhLGIsZSk7SSYmYyYmdmcoYik7Yi5mbGFnc3w9MTtZaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGFqKGEsYixjLGQsZSl7aWYobnVsbD09PWEpe3ZhciBmPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmIWJqKGYpJiZ2b2lkIDA9PT1mLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1mLGNqKGEsYixmLGQsZSk7YT15aChjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGUpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1mPWEuY2hpbGQ7aWYoMD09PShhLmxhbmVzJmUpKXt2YXIgZz1mLm1lbW9pemVkUHJvcHM7Yz1jLmNvbXBhcmU7Yz1udWxsIT09Yz9jOkllO2lmKGMoZyxkKSYmYS5yZWY9PT1iLnJlZilyZXR1cm4gJGkoYSxiLGUpfWIuZmxhZ3N8PTE7YT13aChmLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGNqKGEsYixjLGQsZSl7aWYobnVsbCE9PWEpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihJZShmLGQpJiZhLnJlZj09PWIucmVmKWlmKFVnPSExLGIucGVuZGluZ1Byb3BzPWQ9ZiwwIT09KGEubGFuZXMmZSkpMCE9PShhLmZsYWdzJjEzMTA3MikmJihVZz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLCRpKGEsYixlKX1yZXR1cm4gZGooYSxiLGMsZCxlKX1cbmZ1bmN0aW9uIGVqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sRyhmaixnaiksZ2p8PWM7ZWxzZXtpZigwPT09KGMmMTA3Mzc0MTgyNCkpcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxiLnVwZGF0ZVF1ZXVlPW51bGwsRyhmaixnaiksZ2p8PWEsbnVsbDtiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9O2Q9bnVsbCE9PWY/Zi5iYXNlTGFuZXM6YztHKGZqLGdqKTtnanw9ZH1lbHNlIG51bGwhPT1cbmY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLEcoZmosZ2opLGdqfD1kO1lpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGhqKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyfWZ1bmN0aW9uIGRqKGEsYixjLGQsZSl7dmFyIGY9WmYoYyk/WGY6SC5jdXJyZW50O2Y9WWYoYixmKTtUZyhiLGUpO2M9WGgoYSxiLGMsZCxmLGUpO2Q9YmkoKTtpZihudWxsIT09YSYmIVVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsJGkoYSxiLGUpO0kmJmQmJnZnKGIpO2IuZmxhZ3N8PTE7WWkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBpaihhLGIsYyxkLGUpe2lmKFpmKGMpKXt2YXIgZj0hMDtjZyhiKX1lbHNlIGY9ITE7VGcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpamooYSxiKSxwaChiLGMsZCkscmgoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9VmcobCk6KGw9WmYoYyk/WGY6SC5jdXJyZW50LGw9WWYoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGghPT1kfHxrIT09bCkmJnFoKGIsZyxkLGwpOyRnPSExO3ZhciByPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7Z2goYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHIhPT1rfHxXZi5jdXJyZW50fHwkZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihraChiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9JGd8fG9oKGIsYyxoLGQscixrLGwpKT8ocXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpKTpcbihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO2JoKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6TGcoYi50eXBlLGgpO2cucHJvcHM9bDtxPWIucGVuZGluZ1Byb3BzO3I9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9Vmcoayk6KGs9WmYoYyk/WGY6SC5jdXJyZW50LGs9WWYoYixrKSk7dmFyIHk9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG09XCJmdW5jdGlvblwiPT09dHlwZW9mIHl8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1xfHxyIT09aykmJnFoKGIsZyxkLGspOyRnPSExO3I9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cjtnaChiLGQsZyxlKTt2YXIgbj1iLm1lbW9pemVkU3RhdGU7aCE9PXF8fHIhPT1ufHxXZi5jdXJyZW50fHwkZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHkmJihraChiLGMseSxkKSxuPWIubWVtb2l6ZWRTdGF0ZSksKGw9JGd8fG9oKGIsYyxsLGQscixuLGspfHwhMSk/KG18fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXG5nLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0xMDI0KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPW4pLGcucHJvcHM9ZCxnLnN0YXRlPW4sZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09XG5hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGQ9ITEpfXJldHVybiBraihhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBraihhLGIsYyxkLGUsZil7aGooYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmMTI4KTtpZighZCYmIWcpcmV0dXJuIGUmJmRnKGIsYywhMSksJGkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7WGkuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1CaChiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPUJoKGIsbnVsbCxoLGYpKTpZaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZkZyhiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGxqKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/YWcoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmYWcoYSxiLmNvbnRleHQsITEpO0loKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIG1qKGEsYixjLGQsZSl7SWcoKTtKZyhlKTtiLmZsYWdzfD0yNTY7WWkoYSxiLGMsZCk7cmV0dXJuIGIuY2hpbGR9dmFyIG5qPXtkZWh5ZHJhdGVkOm51bGwsdHJlZUNvbnRleHQ6bnVsbCxyZXRyeUxhbmU6MH07ZnVuY3Rpb24gb2ooYSl7cmV0dXJue2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9fVxuZnVuY3Rpb24gcGooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9TS5jdXJyZW50LGY9ITEsZz0wIT09KGIuZmxhZ3MmMTI4KSxoOyhoPWcpfHwoaD1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2lmKGgpZj0hMCxiLmZsYWdzJj0tMTI5O2Vsc2UgaWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpZXw9MTtHKE0sZSYxKTtpZihudWxsPT09YSl7RWcoYik7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJihhPWEuZGVoeWRyYXRlZCxudWxsIT09YSkpcmV0dXJuIDA9PT0oYi5tb2RlJjEpP2IubGFuZXM9MTpcIiQhXCI9PT1hLmRhdGE/Yi5sYW5lcz04OmIubGFuZXM9MTA3Mzc0MTgyNCxudWxsO2c9ZC5jaGlsZHJlbjthPWQuZmFsbGJhY2s7cmV0dXJuIGY/KGQ9Yi5tb2RlLGY9Yi5jaGlsZCxnPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Z30sMD09PShkJjEpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9XG5nKTpmPXFqKGcsZCwwLG51bGwpLGE9QWgoYSxkLGMsbnVsbCksZi5yZXR1cm49YixhLnJldHVybj1iLGYuc2libGluZz1hLGIuY2hpbGQ9ZixiLmNoaWxkLm1lbW9pemVkU3RhdGU9b2ooYyksYi5tZW1vaXplZFN0YXRlPW5qLGEpOnJqKGIsZyl9ZT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUmJihoPWUuZGVoeWRyYXRlZCxudWxsIT09aCkpcmV0dXJuIHNqKGEsYixnLGQsaCxlLGMpO2lmKGYpe2Y9ZC5mYWxsYmFjaztnPWIubW9kZTtlPWEuY2hpbGQ7aD1lLnNpYmxpbmc7dmFyIGs9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpkLmNoaWxkcmVufTswPT09KGcmMSkmJmIuY2hpbGQhPT1lPyhkPWIuY2hpbGQsZC5jaGlsZExhbmVzPTAsZC5wZW5kaW5nUHJvcHM9ayxiLmRlbGV0aW9ucz1udWxsKTooZD13aChlLGspLGQuc3VidHJlZUZsYWdzPWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0KTtudWxsIT09aD9mPXdoKGgsZik6KGY9QWgoZixnLGMsbnVsbCksZi5mbGFnc3w9Mik7Zi5yZXR1cm49XG5iO2QucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kO2Q9ZjtmPWIuY2hpbGQ7Zz1hLmNoaWxkLm1lbW9pemVkU3RhdGU7Zz1udWxsPT09Zz9vaihjKTp7YmFzZUxhbmVzOmcuYmFzZUxhbmVzfGMsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc307Zi5tZW1vaXplZFN0YXRlPWc7Zi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YztiLm1lbW9pemVkU3RhdGU9bmo7cmV0dXJuIGR9Zj1hLmNoaWxkO2E9Zi5zaWJsaW5nO2Q9d2goZix7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSk7MD09PShiLm1vZGUmMSkmJihkLmxhbmVzPWMpO2QucmV0dXJuPWI7ZC5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihjPWIuZGVsZXRpb25zLG51bGw9PT1jPyhiLmRlbGV0aW9ucz1bYV0sYi5mbGFnc3w9MTYpOmMucHVzaChhKSk7Yi5jaGlsZD1kO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBkfVxuZnVuY3Rpb24gcmooYSxiKXtiPXFqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmJ9LGEubW9kZSwwLG51bGwpO2IucmV0dXJuPWE7cmV0dXJuIGEuY2hpbGQ9Yn1mdW5jdGlvbiB0aihhLGIsYyxkKXtudWxsIT09ZCYmSmcoZCk7QmgoYixhLmNoaWxkLG51bGwsYyk7YT1yaihiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKTthLmZsYWdzfD0yO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBhfVxuZnVuY3Rpb24gc2ooYSxiLGMsZCxlLGYsZyl7aWYoYyl7aWYoYi5mbGFncyYyNTYpcmV0dXJuIGIuZmxhZ3MmPS0yNTcsZD1MaShFcnJvcihwKDQyMikpKSx0aihhLGIsZyxkKTtpZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXJldHVybiBiLmNoaWxkPWEuY2hpbGQsYi5mbGFnc3w9MTI4LG51bGw7Zj1kLmZhbGxiYWNrO2U9Yi5tb2RlO2Q9cWooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0sZSwwLG51bGwpO2Y9QWgoZixlLGcsbnVsbCk7Zi5mbGFnc3w9MjtkLnJldHVybj1iO2YucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kOzAhPT0oYi5tb2RlJjEpJiZCaChiLGEuY2hpbGQsbnVsbCxnKTtiLmNoaWxkLm1lbW9pemVkU3RhdGU9b2ooZyk7Yi5tZW1vaXplZFN0YXRlPW5qO3JldHVybiBmfWlmKDA9PT0oYi5tb2RlJjEpKXJldHVybiB0aihhLGIsZyxudWxsKTtpZihcIiQhXCI9PT1lLmRhdGEpe2Q9ZS5uZXh0U2libGluZyYmZS5uZXh0U2libGluZy5kYXRhc2V0O1xuaWYoZCl2YXIgaD1kLmRnc3Q7ZD1oO2Y9RXJyb3IocCg0MTkpKTtkPUxpKGYsZCx2b2lkIDApO3JldHVybiB0aihhLGIsZyxkKX1oPTAhPT0oZyZhLmNoaWxkTGFuZXMpO2lmKFVnfHxoKXtkPVI7aWYobnVsbCE9PWQpe3N3aXRjaChnJi1nKXtjYXNlIDQ6ZT0yO2JyZWFrO2Nhc2UgMTY6ZT04O2JyZWFrO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDplPTMyO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmU9MjY4NDM1NDU2O2JyZWFrO2RlZmF1bHQ6ZT0wfWU9MCE9PShlJihkLnN1c3BlbmRlZExhbmVzfGcpKT8wOmU7XG4wIT09ZSYmZSE9PWYucmV0cnlMYW5lJiYoZi5yZXRyeUxhbmU9ZSxaZyhhLGUpLG1oKGQsYSxlLC0xKSl9dWooKTtkPUxpKEVycm9yKHAoNDIxKSkpO3JldHVybiB0aihhLGIsZyxkKX1pZihcIiQ/XCI9PT1lLmRhdGEpcmV0dXJuIGIuZmxhZ3N8PTEyOCxiLmNoaWxkPWEuY2hpbGQsYj12ai5iaW5kKG51bGwsYSksZS5fcmVhY3RSZXRyeT1iLG51bGw7YT1mLnRyZWVDb250ZXh0O3lnPUxmKGUubmV4dFNpYmxpbmcpO3hnPWI7ST0hMDt6Zz1udWxsO251bGwhPT1hJiYob2dbcGcrK109cmcsb2dbcGcrK109c2csb2dbcGcrK109cWcscmc9YS5pZCxzZz1hLm92ZXJmbG93LHFnPWIpO2I9cmooYixkLmNoaWxkcmVuKTtiLmZsYWdzfD00MDk2O3JldHVybiBifWZ1bmN0aW9uIHdqKGEsYixjKXthLmxhbmVzfD1iO3ZhciBkPWEuYWx0ZXJuYXRlO251bGwhPT1kJiYoZC5sYW5lc3w9Yik7U2coYS5yZXR1cm4sYixjKX1cbmZ1bmN0aW9uIHhqKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFN0YXRlO251bGw9PT1mP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmV9OihmLmlzQmFja3dhcmRzPWIsZi5yZW5kZXJpbmc9bnVsbCxmLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGYubGFzdD1kLGYudGFpbD1jLGYudGFpbE1vZGU9ZSl9XG5mdW5jdGlvbiB5aihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1lpKGEsYixkLmNoaWxkcmVuLGMpO2Q9TS5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTEyODtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJndqKGEsYyxiKTtlbHNlIGlmKDE5PT09YS50YWcpd2ooYSxjLGIpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1HKE0sZCk7aWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PU1oKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7eGooYiwhMSxlLGMsZik7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1NaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9eGooYiwhMCxjLG51bGwsZik7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6eGooYiwhMSxudWxsLG51bGwsdm9pZCAwKTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gamooYSxiKXswPT09KGIubW9kZSYxKSYmbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mil9ZnVuY3Rpb24gJGkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO2hofD1iLmxhbmVzO2lmKDA9PT0oYyZiLmNoaWxkTGFuZXMpKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcihwKDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz13aChhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9d2goYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHpqKGEsYixjKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpsaihiKTtJZygpO2JyZWFrO2Nhc2UgNTpLaChiKTticmVhaztjYXNlIDE6WmYoYi50eXBlKSYmY2coYik7YnJlYWs7Y2FzZSA0OkloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDp2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLm1lbW9pemVkUHJvcHMudmFsdWU7RyhNZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1lO2JyZWFrO2Nhc2UgMTM6ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQpe2lmKG51bGwhPT1kLmRlaHlkcmF0ZWQpcmV0dXJuIEcoTSxNLmN1cnJlbnQmMSksYi5mbGFnc3w9MTI4LG51bGw7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHBqKGEsYixjKTtHKE0sTS5jdXJyZW50JjEpO2E9JGkoYSxiLGMpO3JldHVybiBudWxsIT09YT9hLnNpYmxpbmc6bnVsbH1HKE0sTS5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmXG5iLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyYxMjgpKXtpZihkKXJldHVybiB5aihhLGIsYyk7Yi5mbGFnc3w9MTI4fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7RyhNLE0uY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gYi5sYW5lcz0wLGVqKGEsYixjKX1yZXR1cm4gJGkoYSxiLGMpfXZhciBBaixCaixDaixEajtcbkFqPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtCaj1mdW5jdGlvbigpe307XG5Daj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7SGgoRWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPUEoe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1CZil9dWIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmXG4oY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8KGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLFxuYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkQoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0RqPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O1xuZnVuY3Rpb24gRWooYSxiKXtpZighSSlzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gUyhhKXt2YXIgYj1udWxsIT09YS5hbHRlcm5hdGUmJmEuYWx0ZXJuYXRlLmNoaWxkPT09YS5jaGlsZCxjPTAsZD0wO2lmKGIpZm9yKHZhciBlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0LGR8PWUuZmxhZ3MmMTQ2ODAwNjQsZS5yZXR1cm49YSxlPWUuc2libGluZztlbHNlIGZvcihlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzLGR8PWUuZmxhZ3MsZS5yZXR1cm49YSxlPWUuc2libGluZzthLnN1YnRyZWVGbGFnc3w9ZDthLmNoaWxkTGFuZXM9YztyZXR1cm4gYn1cbmZ1bmN0aW9uIEZqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wczt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBTKGIpLG51bGw7Y2FzZSAxOnJldHVybiBaZihiLnR5cGUpJiYkZigpLFMoYiksbnVsbDtjYXNlIDM6ZD1iLnN0YXRlTm9kZTtKaCgpO0UoV2YpO0UoSCk7T2goKTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpR2coYik/Yi5mbGFnc3w9NDpudWxsPT09YXx8YS5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmMD09PShiLmZsYWdzJjI1Nil8fChiLmZsYWdzfD0xMDI0LG51bGwhPT16ZyYmKEdqKHpnKSx6Zz1udWxsKSk7QmooYSxiKTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNTpMaChiKTt2YXIgZT1IaChHaC5jdXJyZW50KTtcbmM9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlDaihhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mik7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7UyhiKTtyZXR1cm4gbnVsbH1hPUhoKEVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW09mXT1iO2RbUGZdPWY7YT0wIT09KGIubW9kZSYxKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixkKTtEKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGxmLmxlbmd0aDtlKyspRChsZltlXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5kKTtEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxEKFwiaW52YWxpZFwiLGQpfXViKGMsZik7ZT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LGgsYSksZT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LFxuaCxhKSxlPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6ZWEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJlwib25TY3JvbGxcIj09PWcmJkQoXCJzY3JvbGxcIixkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7ZGIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1CZil9ZD1lO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWEmJihhPWtiKGMpKTtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlxuXCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2FbT2ZdPWI7YVtQZl09ZDtBaihhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7YTp7Zz12YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGEpO0QoXCJjbG9zZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5hKTtEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1kO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPWdiKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH11YihjLGUpO2g9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj9zYihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbmIoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PVxuY3x8XCJcIiE9PWspJiZvYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmb2IoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihlYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZEKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmdGEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtkYihhLGQsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSxcbiEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXN3aXRjaChjKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmQ9ISFkLmF1dG9Gb2N1czticmVhayBhO2Nhc2UgXCJpbWdcIjpkPSEwO2JyZWFrIGE7ZGVmYXVsdDpkPSExfX1kJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpfVMoYik7cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKURqKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO2M9SGgoR2guY3VycmVudCk7SGgoRWguY3VycmVudCk7aWYoR2coYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtpZihmPWQubm9kZVZhbHVlIT09YylpZihhPVxueGcsbnVsbCE9PWEpc3dpdGNoKGEudGFnKXtjYXNlIDM6QWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSk7YnJlYWs7Y2FzZSA1OiEwIT09YS5tZW1vaXplZFByb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSl9ZiYmKGIuZmxhZ3N8PTQpfWVsc2UgZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbT2ZdPWIsYi5zdGF0ZU5vZGU9ZH1TKGIpO3JldHVybiBudWxsO2Nhc2UgMTM6RShNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtpZihJJiZudWxsIT09eWcmJjAhPT0oYi5tb2RlJjEpJiYwPT09KGIuZmxhZ3MmMTI4KSlIZygpLElnKCksYi5mbGFnc3w9OTg1NjAsZj0hMTtlbHNlIGlmKGY9R2coYiksbnVsbCE9PWQmJm51bGwhPT1kLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1cbmEpe2lmKCFmKXRocm93IEVycm9yKHAoMzE4KSk7Zj1iLm1lbW9pemVkU3RhdGU7Zj1udWxsIT09Zj9mLmRlaHlkcmF0ZWQ6bnVsbDtpZighZil0aHJvdyBFcnJvcihwKDMxNykpO2ZbT2ZdPWJ9ZWxzZSBJZygpLDA9PT0oYi5mbGFncyYxMjgpJiYoYi5tZW1vaXplZFN0YXRlPW51bGwpLGIuZmxhZ3N8PTQ7UyhiKTtmPSExfWVsc2UgbnVsbCE9PXpnJiYoR2ooemcpLHpnPW51bGwpLGY9ITA7aWYoIWYpcmV0dXJuIGIuZmxhZ3MmNjU1MzY/YjpudWxsfWlmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2QhPT0obnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUpJiZkJiYoYi5jaGlsZC5mbGFnc3w9ODE5MiwwIT09KGIubW9kZSYxKSYmKG51bGw9PT1hfHwwIT09KE0uY3VycmVudCYxKT8wPT09VCYmKFQ9Myk6dWooKSkpO251bGwhPT1iLnVwZGF0ZVF1ZXVlJiYoYi5mbGFnc3w9NCk7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIEpoKCksXG5CaihhLGIpLG51bGw9PT1hJiZzZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxTKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gUmcoYi50eXBlLl9jb250ZXh0KSxTKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAxOTpFKE0pO2Y9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1mKXJldHVybiBTKGIpLG51bGw7ZD0wIT09KGIuZmxhZ3MmMTI4KTtnPWYucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGQpRWooZiwhMSk7ZWxzZXtpZigwIT09VHx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPU1oKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD0xMjg7RWooZiwhMSk7ZD1nLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1kLGIuZmxhZ3N8PTQpO2Iuc3VidHJlZUZsYWdzPTA7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MTQ2ODAwNjYsXG5nPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYuc3VidHJlZUZsYWdzPTAsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLnN1YnRyZWVGbGFncz0wLGYuZGVsZXRpb25zPW51bGwsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztHKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1cbmEuc2libGluZ31udWxsIT09Zi50YWlsJiZCKCk+SGomJihiLmZsYWdzfD0xMjgsZD0hMCxFaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpfWVsc2V7aWYoIWQpaWYoYT1NaChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9MTI4LGQ9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLEVqKGYsITApLG51bGw9PT1mLnRhaWwmJlwiaGlkZGVuXCI9PT1mLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFJKXJldHVybiBTKGIpLG51bGx9ZWxzZSAyKkIoKS1mLnJlbmRlcmluZ1N0YXJ0VGltZT5IaiYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD0xMjgsZD0hMCxFaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpO2YuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9Zi5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxmLmxhc3Q9Zyl9aWYobnVsbCE9PWYudGFpbClyZXR1cm4gYj1mLnRhaWwsZi5yZW5kZXJpbmc9XG5iLGYudGFpbD1iLnNpYmxpbmcsZi5yZW5kZXJpbmdTdGFydFRpbWU9QigpLGIuc2libGluZz1udWxsLGM9TS5jdXJyZW50LEcoTSxkP2MmMXwyOmMmMSksYjtTKGIpO3JldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSWooKSxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT1kJiYoYi5mbGFnc3w9ODE5MiksZCYmMCE9PShiLm1vZGUmMSk/MCE9PShnaiYxMDczNzQxODI0KSYmKFMoYiksYi5zdWJ0cmVlRmxhZ3MmNiYmKGIuZmxhZ3N8PTgxOTIpKTpTKGIpLG51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtjYXNlIDI1OnJldHVybiBudWxsfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gSmooYSxiKXt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxhPWIuZmxhZ3MsYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDM6cmV0dXJuIEpoKCksRShXZiksRShIKSxPaCgpLGE9Yi5mbGFncywwIT09KGEmNjU1MzYpJiYwPT09KGEmMTI4KT8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDU6cmV0dXJuIExoKGIpLG51bGw7Y2FzZSAxMzpFKE0pO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXtpZihudWxsPT09Yi5hbHRlcm5hdGUpdGhyb3cgRXJyb3IocCgzNDApKTtJZygpfWE9Yi5mbGFncztyZXR1cm4gYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDE5OnJldHVybiBFKE0pLG51bGw7Y2FzZSA0OnJldHVybiBKaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gUmcoYi50eXBlLl9jb250ZXh0KSxudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSWooKSxcbm51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX12YXIgS2o9ITEsVT0hMSxMaj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldCxWPW51bGw7ZnVuY3Rpb24gTWooYSxiKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaChkKXtXKGEsYixkKX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIE5qKGEsYixjKXt0cnl7YygpfWNhdGNoKGQpe1coYSxiLGQpfX12YXIgT2o9ITE7XG5mdW5jdGlvbiBQaihhLGIpe0NmPWRkO2E9TWUoKTtpZihOZShhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYz17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Yz0oYz1hLm93bmVyRG9jdW1lbnQpJiZjLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGQ9Yy5nZXRTZWxlY3Rpb24mJmMuZ2V0U2VsZWN0aW9uKCk7aWYoZCYmMCE9PWQucmFuZ2VDb3VudCl7Yz1kLmFuY2hvck5vZGU7dmFyIGU9ZC5hbmNob3JPZmZzZXQsZj1kLmZvY3VzTm9kZTtkPWQuZm9jdXNPZmZzZXQ7dHJ5e2Mubm9kZVR5cGUsZi5ub2RlVHlwZX1jYXRjaChGKXtjPW51bGw7YnJlYWsgYX12YXIgZz0wLGg9LTEsaz0tMSxsPTAsbT0wLHE9YSxyPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgeTs7KXtxIT09Y3x8MCE9PWUmJjMhPT1xLm5vZGVUeXBlfHwoaD1nK2UpO3EhPT1mfHwwIT09ZCYmMyE9PXEubm9kZVR5cGV8fChrPWcrZCk7Mz09PXEubm9kZVR5cGUmJihnKz1cbnEubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh5PXEuZmlyc3RDaGlsZCkpYnJlYWs7cj1xO3E9eX1mb3IoOzspe2lmKHE9PT1hKWJyZWFrIGI7cj09PWMmJisrbD09PWUmJihoPWcpO3I9PT1mJiYrK209PT1kJiYoaz1nKTtpZihudWxsIT09KHk9cS5uZXh0U2libGluZykpYnJlYWs7cT1yO3I9cS5wYXJlbnROb2RlfXE9eX1jPS0xPT09aHx8LTE9PT1rP251bGw6e3N0YXJ0OmgsZW5kOmt9fWVsc2UgYz1udWxsfWM9Y3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYz1udWxsO0RmPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmN9O2RkPSExO2ZvcihWPWI7bnVsbCE9PVY7KWlmKGI9VixhPWIuY2hpbGQsMCE9PShiLnN1YnRyZWVGbGFncyYxMDI4KSYmbnVsbCE9PWEpYS5yZXR1cm49YixWPWE7ZWxzZSBmb3IoO251bGwhPT1WOyl7Yj1WO3RyeXt2YXIgbj1iLmFsdGVybmF0ZTtpZigwIT09KGIuZmxhZ3MmMTAyNCkpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmJyZWFrO1xuY2FzZSAxOmlmKG51bGwhPT1uKXt2YXIgdD1uLm1lbW9pemVkUHJvcHMsSj1uLm1lbW9pemVkU3RhdGUseD1iLnN0YXRlTm9kZSx3PXguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT90OkxnKGIudHlwZSx0KSxKKTt4Ll9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPXd9YnJlYWs7Y2FzZSAzOnZhciB1PWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87MT09PXUubm9kZVR5cGU/dS50ZXh0Q29udGVudD1cIlwiOjk9PT11Lm5vZGVUeXBlJiZ1LmRvY3VtZW50RWxlbWVudCYmdS5yZW1vdmVDaGlsZCh1LmRvY3VtZW50RWxlbWVudCk7YnJlYWs7Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fX1jYXRjaChGKXtXKGIsYi5yZXR1cm4sRil9YT1iLnNpYmxpbmc7aWYobnVsbCE9PWEpe2EucmV0dXJuPWIucmV0dXJuO1Y9YTticmVha31WPWIucmV0dXJufW49T2o7T2o9ITE7cmV0dXJuIG59XG5mdW5jdGlvbiBRaihhLGIsYyl7dmFyIGQ9Yi51cGRhdGVRdWV1ZTtkPW51bGwhPT1kP2QubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1kKXt2YXIgZT1kPWQubmV4dDtkb3tpZigoZS50YWcmYSk9PT1hKXt2YXIgZj1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1mJiZOaihiLGMsZil9ZT1lLm5leHR9d2hpbGUoZSE9PWQpfX1mdW5jdGlvbiBSaihhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gU2ooYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9YzticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX1cbmZ1bmN0aW9uIFRqKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO251bGwhPT1iJiYoYS5hbHRlcm5hdGU9bnVsbCxUaihiKSk7YS5jaGlsZD1udWxsO2EuZGVsZXRpb25zPW51bGw7YS5zaWJsaW5nPW51bGw7NT09PWEudGFnJiYoYj1hLnN0YXRlTm9kZSxudWxsIT09YiYmKGRlbGV0ZSBiW09mXSxkZWxldGUgYltQZl0sZGVsZXRlIGJbb2ZdLGRlbGV0ZSBiW1FmXSxkZWxldGUgYltSZl0pKTthLnN0YXRlTm9kZT1udWxsO2EucmV0dXJuPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIFVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gVmooYSl7YTpmb3IoOzspe2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8VWooYS5yZXR1cm4pKXJldHVybiBudWxsO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjtmb3IoYT1hLnNpYmxpbmc7NSE9PWEudGFnJiY2IT09YS50YWcmJjE4IT09YS50YWc7KXtpZihhLmZsYWdzJjIpY29udGludWUgYTtpZihudWxsPT09YS5jaGlsZHx8ND09PWEudGFnKWNvbnRpbnVlIGE7ZWxzZSBhLmNoaWxkLnJldHVybj1hLGE9YS5jaGlsZH1pZighKGEuZmxhZ3MmMikpcmV0dXJuIGEuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIFdqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1CZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihXaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVdqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFhqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoWGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylYaihhLGIsYyksYT1hLnNpYmxpbmd9dmFyIFg9bnVsbCxZaj0hMTtmdW5jdGlvbiBaaihhLGIsYyl7Zm9yKGM9Yy5jaGlsZDtudWxsIT09YzspYWsoYSxiLGMpLGM9Yy5zaWJsaW5nfVxuZnVuY3Rpb24gYWsoYSxiLGMpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclVubW91bnQpdHJ5e2xjLm9uQ29tbWl0RmliZXJVbm1vdW50KGtjLGMpfWNhdGNoKGgpe31zd2l0Y2goYy50YWcpe2Nhc2UgNTpVfHxNaihjLGIpO2Nhc2UgNjp2YXIgZD1YLGU9WWo7WD1udWxsO1pqKGEsYixjKTtYPWQ7WWo9ZTtudWxsIT09WCYmKFlqPyhhPVgsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYyk6YS5yZW1vdmVDaGlsZChjKSk6WC5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgMTg6bnVsbCE9PVgmJihZaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/S2YoYS5wYXJlbnROb2RlLGMpOjE9PT1hLm5vZGVUeXBlJiZLZihhLGMpLGJkKGEpKTpLZihYLGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSA0OmQ9WDtlPVlqO1g9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDtcblpqKGEsYixjKTtYPWQ7WWo9ZTticmVhaztjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6aWYoIVUmJihkPWMudXBkYXRlUXVldWUsbnVsbCE9PWQmJihkPWQubGFzdEVmZmVjdCxudWxsIT09ZCkpKXtlPWQ9ZC5uZXh0O2Rve3ZhciBmPWUsZz1mLmRlc3Ryb3k7Zj1mLnRhZzt2b2lkIDAhPT1nJiYoMCE9PShmJjIpP05qKGMsYixnKTowIT09KGYmNCkmJk5qKGMsYixnKSk7ZT1lLm5leHR9d2hpbGUoZSE9PWQpfVpqKGEsYixjKTticmVhaztjYXNlIDE6aWYoIVUmJihNaihjLGIpLGQ9Yy5zdGF0ZU5vZGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVubW91bnQpKXRyeXtkLnByb3BzPWMubWVtb2l6ZWRQcm9wcyxkLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZSxkLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goaCl7VyhjLGIsaCl9WmooYSxiLGMpO2JyZWFrO2Nhc2UgMjE6WmooYSxiLGMpO2JyZWFrO2Nhc2UgMjI6Yy5tb2RlJjE/KFU9KGQ9VSl8fG51bGwhPT1cbmMubWVtb2l6ZWRTdGF0ZSxaaihhLGIsYyksVT1kKTpaaihhLGIsYyk7YnJlYWs7ZGVmYXVsdDpaaihhLGIsYyl9fWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IExqKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9Y2suYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBkayhhLGIpe3ZhciBjPWIuZGVsZXRpb25zO2lmKG51bGwhPT1jKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO3RyeXt2YXIgZj1hLGc9YixoPWc7YTpmb3IoO251bGwhPT1oOyl7c3dpdGNoKGgudGFnKXtjYXNlIDU6WD1oLnN0YXRlTm9kZTtZaj0hMTticmVhayBhO2Nhc2UgMzpYPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7YnJlYWsgYTtjYXNlIDQ6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO2JyZWFrIGF9aD1oLnJldHVybn1pZihudWxsPT09WCl0aHJvdyBFcnJvcihwKDE2MCkpO2FrKGYsZyxlKTtYPW51bGw7WWo9ITE7dmFyIGs9ZS5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLnJldHVybj1udWxsKTtlLnJldHVybj1udWxsfWNhdGNoKGwpe1coZSxiLGwpfX1pZihiLnN1YnRyZWVGbGFncyYxMjg1NClmb3IoYj1iLmNoaWxkO251bGwhPT1iOyllayhiLGEpLGI9Yi5zaWJsaW5nfVxuZnVuY3Rpb24gZWsoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZSxkPWEuZmxhZ3M7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6ZGsoYixhKTtmayhhKTtpZihkJjQpe3RyeXtRaigzLGEsYS5yZXR1cm4pLFJqKDMsYSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfXRyeXtRaig1LGEsYS5yZXR1cm4pfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAxOmRrKGIsYSk7ZmsoYSk7ZCY1MTImJm51bGwhPT1jJiZNaihjLGMucmV0dXJuKTticmVhaztjYXNlIDU6ZGsoYixhKTtmayhhKTtkJjUxMiYmbnVsbCE9PWMmJk1qKGMsYy5yZXR1cm4pO2lmKGEuZmxhZ3MmMzIpe3ZhciBlPWEuc3RhdGVOb2RlO3RyeXtvYihlLFwiXCIpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19aWYoZCY0JiYoZT1hLnN0YXRlTm9kZSxudWxsIT1lKSl7dmFyIGY9YS5tZW1vaXplZFByb3BzLGc9bnVsbCE9PWM/Yy5tZW1vaXplZFByb3BzOmYsaD1hLnR5cGUsaz1hLnVwZGF0ZVF1ZXVlO1xuYS51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1rKXRyeXtcImlucHV0XCI9PT1oJiZcInJhZGlvXCI9PT1mLnR5cGUmJm51bGwhPWYubmFtZSYmYWIoZSxmKTt2YihoLGcpO3ZhciBsPXZiKGgsZik7Zm9yKGc9MDtnPGsubGVuZ3RoO2crPTIpe3ZhciBtPWtbZ10scT1rW2crMV07XCJzdHlsZVwiPT09bT9zYihlLHEpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PW0/bmIoZSxxKTpcImNoaWxkcmVuXCI9PT1tP29iKGUscSk6dGEoZSxtLHEsbCl9c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOmJiKGUsZik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoZSxmKTticmVhaztjYXNlIFwic2VsZWN0XCI6dmFyIHI9ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlO2UuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWYubXVsdGlwbGU7dmFyIHk9Zi52YWx1ZTtudWxsIT15P2ZiKGUsISFmLm11bHRpcGxlLHksITEpOnIhPT0hIWYubXVsdGlwbGUmJihudWxsIT1mLmRlZmF1bHRWYWx1ZT9mYihlLCEhZi5tdWx0aXBsZSxcbmYuZGVmYXVsdFZhbHVlLCEwKTpmYihlLCEhZi5tdWx0aXBsZSxmLm11bHRpcGxlP1tdOlwiXCIsITEpKX1lW1BmXT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSA2OmRrKGIsYSk7ZmsoYSk7aWYoZCY0KXtpZihudWxsPT09YS5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjIpKTtlPWEuc3RhdGVOb2RlO2Y9YS5tZW1vaXplZFByb3BzO3RyeXtlLm5vZGVWYWx1ZT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAzOmRrKGIsYSk7ZmsoYSk7aWYoZCY0JiZudWxsIT09YyYmYy5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl0cnl7YmQoYi5jb250YWluZXJJbmZvKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9YnJlYWs7Y2FzZSA0OmRrKGIsYSk7ZmsoYSk7YnJlYWs7Y2FzZSAxMzpkayhiLGEpO2ZrKGEpO2U9YS5jaGlsZDtlLmZsYWdzJjgxOTImJihmPW51bGwhPT1lLm1lbW9pemVkU3RhdGUsZS5zdGF0ZU5vZGUuaXNIaWRkZW49ZiwhZnx8XG5udWxsIT09ZS5hbHRlcm5hdGUmJm51bGwhPT1lLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlfHwoZ2s9QigpKSk7ZCY0JiZiayhhKTticmVhaztjYXNlIDIyOm09bnVsbCE9PWMmJm51bGwhPT1jLm1lbW9pemVkU3RhdGU7YS5tb2RlJjE/KFU9KGw9VSl8fG0sZGsoYixhKSxVPWwpOmRrKGIsYSk7ZmsoYSk7aWYoZCY4MTkyKXtsPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoKGEuc3RhdGVOb2RlLmlzSGlkZGVuPWwpJiYhbSYmMCE9PShhLm1vZGUmMSkpZm9yKFY9YSxtPWEuY2hpbGQ7bnVsbCE9PW07KXtmb3IocT1WPW07bnVsbCE9PVY7KXtyPVY7eT1yLmNoaWxkO3N3aXRjaChyLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OlFqKDQscixyLnJldHVybik7YnJlYWs7Y2FzZSAxOk1qKHIsci5yZXR1cm4pO3ZhciBuPXIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxVbm1vdW50KXtkPXI7Yz1yLnJldHVybjt0cnl7Yj1kLG4ucHJvcHM9XG5iLm1lbW9pemVkUHJvcHMsbi5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsbi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKHQpe1coZCxjLHQpfX1icmVhaztjYXNlIDU6TWoocixyLnJldHVybik7YnJlYWs7Y2FzZSAyMjppZihudWxsIT09ci5tZW1vaXplZFN0YXRlKXtoayhxKTtjb250aW51ZX19bnVsbCE9PXk/KHkucmV0dXJuPXIsVj15KTpoayhxKX1tPW0uc2libGluZ31hOmZvcihtPW51bGwscT1hOzspe2lmKDU9PT1xLnRhZyl7aWYobnVsbD09PW0pe209cTt0cnl7ZT1xLnN0YXRlTm9kZSxsPyhmPWUuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihoPXEuc3RhdGVOb2RlLGs9cS5tZW1vaXplZFByb3BzLnN0eWxlLGc9dm9pZCAwIT09ayYmbnVsbCE9PWsmJmsuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2suZGlzcGxheTpudWxsLGguc3R5bGUuZGlzcGxheT1cbnJiKFwiZGlzcGxheVwiLGcpKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fX1lbHNlIGlmKDY9PT1xLnRhZyl7aWYobnVsbD09PW0pdHJ5e3Euc3RhdGVOb2RlLm5vZGVWYWx1ZT1sP1wiXCI6cS5tZW1vaXplZFByb3BzfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19ZWxzZSBpZigoMjIhPT1xLnRhZyYmMjMhPT1xLnRhZ3x8bnVsbD09PXEubWVtb2l6ZWRTdGF0ZXx8cT09PWEpJiZudWxsIT09cS5jaGlsZCl7cS5jaGlsZC5yZXR1cm49cTtxPXEuY2hpbGQ7Y29udGludWV9aWYocT09PWEpYnJlYWsgYTtmb3IoO251bGw9PT1xLnNpYmxpbmc7KXtpZihudWxsPT09cS5yZXR1cm58fHEucmV0dXJuPT09YSlicmVhayBhO209PT1xJiYobT1udWxsKTtxPXEucmV0dXJufW09PT1xJiYobT1udWxsKTtxLnNpYmxpbmcucmV0dXJuPXEucmV0dXJuO3E9cS5zaWJsaW5nfX1icmVhaztjYXNlIDE5OmRrKGIsYSk7ZmsoYSk7ZCY0JiZiayhhKTticmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6ZGsoYixcbmEpLGZrKGEpfX1mdW5jdGlvbiBmayhhKXt2YXIgYj1hLmZsYWdzO2lmKGImMil7dHJ5e2E6e2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKFVqKGMpKXt2YXIgZD1jO2JyZWFrIGF9Yz1jLnJldHVybn10aHJvdyBFcnJvcihwKDE2MCkpO31zd2l0Y2goZC50YWcpe2Nhc2UgNTp2YXIgZT1kLnN0YXRlTm9kZTtkLmZsYWdzJjMyJiYob2IoZSxcIlwiKSxkLmZsYWdzJj0tMzMpO3ZhciBmPVZqKGEpO1hqKGEsZixlKTticmVhaztjYXNlIDM6Y2FzZSA0OnZhciBnPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saD1WaihhKTtXaihhLGgsZyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MSkpO319Y2F0Y2goayl7VyhhLGEucmV0dXJuLGspfWEuZmxhZ3MmPS0zfWImNDA5NiYmKGEuZmxhZ3MmPS00MDk3KX1mdW5jdGlvbiBpayhhLGIsYyl7Vj1hO2prKGEsYixjKX1cbmZ1bmN0aW9uIGprKGEsYixjKXtmb3IodmFyIGQ9MCE9PShhLm1vZGUmMSk7bnVsbCE9PVY7KXt2YXIgZT1WLGY9ZS5jaGlsZDtpZigyMj09PWUudGFnJiZkKXt2YXIgZz1udWxsIT09ZS5tZW1vaXplZFN0YXRlfHxLajtpZighZyl7dmFyIGg9ZS5hbHRlcm5hdGUsaz1udWxsIT09aCYmbnVsbCE9PWgubWVtb2l6ZWRTdGF0ZXx8VTtoPUtqO3ZhciBsPVU7S2o9ZztpZigoVT1rKSYmIWwpZm9yKFY9ZTtudWxsIT09VjspZz1WLGs9Zy5jaGlsZCwyMj09PWcudGFnJiZudWxsIT09Zy5tZW1vaXplZFN0YXRlP2trKGUpOm51bGwhPT1rPyhrLnJldHVybj1nLFY9ayk6a2soZSk7Zm9yKDtudWxsIT09ZjspVj1mLGprKGYsYixjKSxmPWYuc2libGluZztWPWU7S2o9aDtVPWx9bGsoYSxiLGMpfWVsc2UgMCE9PShlLnN1YnRyZWVGbGFncyY4NzcyKSYmbnVsbCE9PWY/KGYucmV0dXJuPWUsVj1mKTpsayhhLGIsYyl9fVxuZnVuY3Rpb24gbGsoYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXt2YXIgYz1iLmFsdGVybmF0ZTt0cnl7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVfHxSaig1LGIpO2JyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihiLmZsYWdzJjQmJiFVKWlmKG51bGw9PT1jKWQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBlPWIuZWxlbWVudFR5cGU9PT1iLnR5cGU/Yy5tZW1vaXplZFByb3BzOkxnKGIudHlwZSxjLm1lbW9pemVkUHJvcHMpO2QuY29tcG9uZW50RGlkVXBkYXRlKGUsYy5tZW1vaXplZFN0YXRlLGQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBmPWIudXBkYXRlUXVldWU7bnVsbCE9PWYmJmloKGIsZixkKTticmVhaztjYXNlIDM6dmFyIGc9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09Zyl7Yz1udWxsO2lmKG51bGwhPT1iLmNoaWxkKXN3aXRjaChiLmNoaWxkLnRhZyl7Y2FzZSA1OmM9XG5iLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Yz1iLmNoaWxkLnN0YXRlTm9kZX1paChiLGcsYyl9YnJlYWs7Y2FzZSA1OnZhciBoPWIuc3RhdGVOb2RlO2lmKG51bGw9PT1jJiZiLmZsYWdzJjQpe2M9aDt2YXIgaz1iLm1lbW9pemVkUHJvcHM7c3dpdGNoKGIudHlwZSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjprLmF1dG9Gb2N1cyYmYy5mb2N1cygpO2JyZWFrO2Nhc2UgXCJpbWdcIjprLnNyYyYmKGMuc3JjPWsuc3JjKX19YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6aWYobnVsbD09PWIubWVtb2l6ZWRTdGF0ZSl7dmFyIGw9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWwpe3ZhciBtPWwubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bSl7dmFyIHE9bS5kZWh5ZHJhdGVkO251bGwhPT1xJiZiZChxKX19fWJyZWFrO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIxOmNhc2UgMjI6Y2FzZSAyMzpjYXNlIDI1OmJyZWFrO1xuZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO31VfHxiLmZsYWdzJjUxMiYmU2ooYil9Y2F0Y2gocil7VyhiLGIucmV0dXJuLHIpfX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfWM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19ZnVuY3Rpb24gaGsoYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgYz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Y9YzticmVha31WPWIucmV0dXJufX1cbmZ1bmN0aW9uIGtrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO3RyeXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dmFyIGM9Yi5yZXR1cm47dHJ5e1JqKDQsYil9Y2F0Y2goayl7VyhiLGMsayl9YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50KXt2YXIgZT1iLnJldHVybjt0cnl7ZC5jb21wb25lbnREaWRNb3VudCgpfWNhdGNoKGspe1coYixlLGspfX12YXIgZj1iLnJldHVybjt0cnl7U2ooYil9Y2F0Y2goayl7VyhiLGYsayl9YnJlYWs7Y2FzZSA1OnZhciBnPWIucmV0dXJuO3RyeXtTaihiKX1jYXRjaChrKXtXKGIsZyxrKX19fWNhdGNoKGspe1coYixiLnJldHVybixrKX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfXZhciBoPWIuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Yi5yZXR1cm47Vj1oO2JyZWFrfVY9Yi5yZXR1cm59fVxudmFyIG1rPU1hdGguY2VpbCxuaz11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLG9rPXVhLlJlYWN0Q3VycmVudE93bmVyLHBrPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEs9MCxSPW51bGwsWT1udWxsLFo9MCxnaj0wLGZqPVVmKDApLFQ9MCxxaz1udWxsLGhoPTAscms9MCxzaz0wLHRrPW51bGwsdWs9bnVsbCxnaz0wLEhqPUluZmluaXR5LHZrPW51bGwsUGk9ITEsUWk9bnVsbCxTaT1udWxsLHdrPSExLHhrPW51bGwseWs9MCx6az0wLEFrPW51bGwsQms9LTEsQ2s9MDtmdW5jdGlvbiBMKCl7cmV0dXJuIDAhPT0oSyY2KT9CKCk6LTEhPT1Caz9CazpCaz1CKCl9XG5mdW5jdGlvbiBsaChhKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gMTtpZigwIT09KEsmMikmJjAhPT1aKXJldHVybiBaJi1aO2lmKG51bGwhPT1LZy50cmFuc2l0aW9uKXJldHVybiAwPT09Q2smJihDaz15YygpKSxDazthPUM7aWYoMCE9PWEpcmV0dXJuIGE7YT13aW5kb3cuZXZlbnQ7YT12b2lkIDA9PT1hPzE2OmpkKGEudHlwZSk7cmV0dXJuIGF9ZnVuY3Rpb24gbWgoYSxiLGMsZCl7aWYoNTA8emspdGhyb3cgems9MCxBaz1udWxsLEVycm9yKHAoMTg1KSk7QWMoYSxjLGQpO2lmKDA9PT0oSyYyKXx8YSE9PVIpYT09PVImJigwPT09KEsmMikmJihya3w9YyksND09PVQmJkRrKGEsWikpLEVrKGEsZCksMT09PWMmJjA9PT1LJiYwPT09KGIubW9kZSYxKSYmKEhqPUIoKSs1MDAsZmcmJmpnKCkpfVxuZnVuY3Rpb24gRWsoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTm9kZTt3YyhhLGIpO3ZhciBkPXVjKGEsYT09PVI/WjowKTtpZigwPT09ZCludWxsIT09YyYmYmMoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MDtlbHNlIGlmKGI9ZCYtZCxhLmNhbGxiYWNrUHJpb3JpdHkhPT1iKXtudWxsIT1jJiZiYyhjKTtpZigxPT09YikwPT09YS50YWc/aWcoRmsuYmluZChudWxsLGEpKTpoZyhGay5iaW5kKG51bGwsYSkpLEpmKGZ1bmN0aW9uKCl7MD09PShLJjYpJiZqZygpfSksYz1udWxsO2Vsc2V7c3dpdGNoKERjKGQpKXtjYXNlIDE6Yz1mYzticmVhaztjYXNlIDQ6Yz1nYzticmVhaztjYXNlIDE2OmM9aGM7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6Yz1qYzticmVhaztkZWZhdWx0OmM9aGN9Yz1HayhjLEhrLmJpbmQobnVsbCxhKSl9YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBIayhhLGIpe0JrPS0xO0NrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7dmFyIGM9YS5jYWxsYmFja05vZGU7aWYoSWsoKSYmYS5jYWxsYmFja05vZGUhPT1jKXJldHVybiBudWxsO3ZhciBkPXVjKGEsYT09PVI/WjowKTtpZigwPT09ZClyZXR1cm4gbnVsbDtpZigwIT09KGQmMzApfHwwIT09KGQmYS5leHBpcmVkTGFuZXMpfHxiKWI9SmsoYSxkKTtlbHNle2I9ZDt2YXIgZT1LO0t8PTI7dmFyIGY9S2soKTtpZihSIT09YXx8WiE9PWIpdms9bnVsbCxIaj1CKCkrNTAwLExrKGEsYik7ZG8gdHJ5e01rKCk7YnJlYWt9Y2F0Y2goaCl7TmsoYSxoKX13aGlsZSgxKTtRZygpO25rLmN1cnJlbnQ9ZjtLPWU7bnVsbCE9PVk/Yj0wOihSPW51bGwsWj0wLGI9VCl9aWYoMCE9PWIpezI9PT1iJiYoZT14YyhhKSwwIT09ZSYmKGQ9ZSxiPU9rKGEsZSkpKTtpZigxPT09Yil0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxkKSxFayhhLEIoKSksYztpZig2PT09YilEayhhLGQpO1xuZWxzZXtlPWEuY3VycmVudC5hbHRlcm5hdGU7aWYoMD09PShkJjMwKSYmIVBrKGUpJiYoYj1KayhhLGQpLDI9PT1iJiYoZj14YyhhKSwwIT09ZiYmKGQ9ZixiPU9rKGEsZikpKSwxPT09YikpdGhyb3cgYz1xayxMayhhLDApLERrKGEsZCksRWsoYSxCKCkpLGM7YS5maW5pc2hlZFdvcms9ZTthLmZpbmlzaGVkTGFuZXM9ZDtzd2l0Y2goYil7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcihwKDM0NSkpO2Nhc2UgMjpRayhhLHVrLHZrKTticmVhaztjYXNlIDM6RGsoYSxkKTtpZigoZCYxMzAwMjM0MjQpPT09ZCYmKGI9Z2srNTAwLUIoKSwxMDxiKSl7aWYoMCE9PXVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmQpIT09ZCl7TCgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9RmYoUWsuYmluZChudWxsLGEsdWssdmspLGIpO2JyZWFrfVFrKGEsdWssdmspO2JyZWFrO2Nhc2UgNDpEayhhLGQpO2lmKChkJjQxOTQyNDApPT09XG5kKWJyZWFrO2I9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8ZDspe3ZhciBnPTMxLW9jKGQpO2Y9MTw8ZztnPWJbZ107Zz5lJiYoZT1nKTtkJj1+Zn1kPWU7ZD1CKCktZDtkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKm1rKGQvMTk2MCkpLWQ7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUZmKFFrLmJpbmQobnVsbCxhLHVrLHZrKSxkKTticmVha31RayhhLHVrLHZrKTticmVhaztjYXNlIDU6UWsoYSx1ayx2ayk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMyOSkpO319fUVrKGEsQigpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1jP0hrLmJpbmQobnVsbCxhKTpudWxsfVxuZnVuY3Rpb24gT2soYSxiKXt2YXIgYz10azthLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJihMayhhLGIpLmZsYWdzfD0yNTYpO2E9SmsoYSxiKTsyIT09YSYmKGI9dWssdWs9YyxudWxsIT09YiYmR2ooYikpO3JldHVybiBhfWZ1bmN0aW9uIEdqKGEpe251bGw9PT11az91az1hOnVrLnB1c2guYXBwbHkodWssYSl9XG5mdW5jdGlvbiBQayhhKXtmb3IodmFyIGI9YTs7KXtpZihiLmZsYWdzJjE2Mzg0KXt2YXIgYz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jJiYoYz1jLnN0b3JlcyxudWxsIT09YykpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sZj1lLmdldFNuYXBzaG90O2U9ZS52YWx1ZTt0cnl7aWYoIUhlKGYoKSxlKSlyZXR1cm4hMX1jYXRjaChnKXtyZXR1cm4hMX19fWM9Yi5jaGlsZDtpZihiLnN1YnRyZWVGbGFncyYxNjM4NCYmbnVsbCE9PWMpYy5yZXR1cm49YixiPWM7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4hMDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiEwfVxuZnVuY3Rpb24gRGsoYSxiKXtiJj1+c2s7YiY9fnJrO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtb2MoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fWZ1bmN0aW9uIEZrKGEpe2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO0lrKCk7dmFyIGI9dWMoYSwwKTtpZigwPT09KGImMSkpcmV0dXJuIEVrKGEsQigpKSxudWxsO3ZhciBjPUprKGEsYik7aWYoMCE9PWEudGFnJiYyPT09Yyl7dmFyIGQ9eGMoYSk7MCE9PWQmJihiPWQsYz1PayhhLGQpKX1pZigxPT09Yyl0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxiKSxFayhhLEIoKSksYztpZig2PT09Yyl0aHJvdyBFcnJvcihwKDM0NSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7UWsoYSx1ayx2ayk7RWsoYSxCKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gUmsoYSxiKXt2YXIgYz1LO0t8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Sz1jLDA9PT1LJiYoSGo9QigpKzUwMCxmZyYmamcoKSl9fWZ1bmN0aW9uIFNrKGEpe251bGwhPT14ayYmMD09PXhrLnRhZyYmMD09PShLJjYpJiZJaygpO3ZhciBiPUs7S3w9MTt2YXIgYz1way50cmFuc2l0aW9uLGQ9Qzt0cnl7aWYocGsudHJhbnNpdGlvbj1udWxsLEM9MSxhKXJldHVybiBhKCl9ZmluYWxseXtDPWQscGsudHJhbnNpdGlvbj1jLEs9YiwwPT09KEsmNikmJmpnKCl9fWZ1bmN0aW9uIElqKCl7Z2o9ZmouY3VycmVudDtFKGZqKX1cbmZ1bmN0aW9uIExrKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLEdmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7d2coZCk7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJiRmKCk7YnJlYWs7Y2FzZSAzOkpoKCk7RShXZik7RShIKTtPaCgpO2JyZWFrO2Nhc2UgNTpMaChkKTticmVhaztjYXNlIDQ6SmgoKTticmVhaztjYXNlIDEzOkUoTSk7YnJlYWs7Y2FzZSAxOTpFKE0pO2JyZWFrO2Nhc2UgMTA6UmcoZC50eXBlLl9jb250ZXh0KTticmVhaztjYXNlIDIyOmNhc2UgMjM6SWooKX1jPWMucmV0dXJufVI9YTtZPWE9d2goYS5jdXJyZW50LG51bGwpO1o9Z2o9YjtUPTA7cWs9bnVsbDtzaz1yaz1oaD0wO3VrPXRrPW51bGw7aWYobnVsbCE9PVdnKXtmb3IoYj1cbjA7YjxXZy5sZW5ndGg7YisrKWlmKGM9V2dbYl0sZD1jLmludGVybGVhdmVkLG51bGwhPT1kKXtjLmludGVybGVhdmVkPW51bGw7dmFyIGU9ZC5uZXh0LGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXt2YXIgZz1mLm5leHQ7Zi5uZXh0PWU7ZC5uZXh0PWd9Yy5wZW5kaW5nPWR9V2c9bnVsbH1yZXR1cm4gYX1cbmZ1bmN0aW9uIE5rKGEsYil7ZG97dmFyIGM9WTt0cnl7UWcoKTtQaC5jdXJyZW50PWFpO2lmKFNoKXtmb3IodmFyIGQ9Ti5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH1TaD0hMX1SaD0wO1A9Tz1OPW51bGw7VGg9ITE7VWg9MDtvay5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7VD0xO3FrPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9WjtoLmZsYWdzfD0zMjc2ODtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rLG09aCxxPW0udGFnO2lmKDA9PT0obS5tb2RlJjEpJiYoMD09PXF8fDExPT09cXx8MTU9PT1xKSl7dmFyIHI9bS5hbHRlcm5hdGU7cj8obS51cGRhdGVRdWV1ZT1yLnVwZGF0ZVF1ZXVlLG0ubWVtb2l6ZWRTdGF0ZT1yLm1lbW9pemVkU3RhdGUsXG5tLmxhbmVzPXIubGFuZXMpOihtLnVwZGF0ZVF1ZXVlPW51bGwsbS5tZW1vaXplZFN0YXRlPW51bGwpfXZhciB5PVZpKGcpO2lmKG51bGwhPT15KXt5LmZsYWdzJj0tMjU3O1dpKHksZyxoLGYsYik7eS5tb2RlJjEmJlRpKGYsbCxiKTtiPXk7az1sO3ZhciBuPWIudXBkYXRlUXVldWU7aWYobnVsbD09PW4pe3ZhciB0PW5ldyBTZXQ7dC5hZGQoayk7Yi51cGRhdGVRdWV1ZT10fWVsc2Ugbi5hZGQoayk7YnJlYWsgYX1lbHNle2lmKDA9PT0oYiYxKSl7VGkoZixsLGIpO3VqKCk7YnJlYWsgYX1rPUVycm9yKHAoNDI2KSl9fWVsc2UgaWYoSSYmaC5tb2RlJjEpe3ZhciBKPVZpKGcpO2lmKG51bGwhPT1KKXswPT09KEouZmxhZ3MmNjU1MzYpJiYoSi5mbGFnc3w9MjU2KTtXaShKLGcsaCxmLGIpO0pnKEtpKGssaCkpO2JyZWFrIGF9fWY9az1LaShrLGgpOzQhPT1UJiYoVD0yKTtudWxsPT09dGs/dGs9W2ZdOnRrLnB1c2goZik7Zj1nO2Rve3N3aXRjaChmLnRhZyl7Y2FzZSAzOmYuZmxhZ3N8PTY1NTM2O1xuYiY9LWI7Zi5sYW5lc3w9Yjt2YXIgeD1PaShmLGssYik7ZmgoZix4KTticmVhayBhO2Nhc2UgMTpoPWs7dmFyIHc9Zi50eXBlLHU9Zi5zdGF0ZU5vZGU7aWYoMD09PShmLmZsYWdzJjEyOCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1TaXx8IVNpLmhhcyh1KSkpKXtmLmZsYWdzfD02NTUzNjtiJj0tYjtmLmxhbmVzfD1iO3ZhciBGPVJpKGYsaCxiKTtmaChmLEYpO2JyZWFrIGF9fWY9Zi5yZXR1cm59d2hpbGUobnVsbCE9PWYpfVRrKGMpfWNhdGNoKG5hKXtiPW5hO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9ZnVuY3Rpb24gS2soKXt2YXIgYT1uay5jdXJyZW50O25rLmN1cnJlbnQ9YWk7cmV0dXJuIG51bGw9PT1hP2FpOmF9XG5mdW5jdGlvbiB1aigpe2lmKDA9PT1UfHwzPT09VHx8Mj09PVQpVD00O251bGw9PT1SfHwwPT09KGhoJjI2ODQzNTQ1NSkmJjA9PT0ocmsmMjY4NDM1NDU1KXx8RGsoUixaKX1mdW5jdGlvbiBKayhhLGIpe3ZhciBjPUs7S3w9Mjt2YXIgZD1LaygpO2lmKFIhPT1hfHxaIT09Yil2az1udWxsLExrKGEsYik7ZG8gdHJ5e1VrKCk7YnJlYWt9Y2F0Y2goZSl7TmsoYSxlKX13aGlsZSgxKTtRZygpO0s9Yztuay5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IocCgyNjEpKTtSPW51bGw7Wj0wO3JldHVybiBUfWZ1bmN0aW9uIFVrKCl7Zm9yKDtudWxsIT09WTspVmsoWSl9ZnVuY3Rpb24gTWsoKXtmb3IoO251bGwhPT1ZJiYhY2MoKTspVmsoWSl9ZnVuY3Rpb24gVmsoYSl7dmFyIGI9V2soYS5hbHRlcm5hdGUsYSxnaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1RrKGEpOlk9Yjtvay5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBUayhhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjMyNzY4KSl7aWYoYz1GaihjLGIsZ2opLG51bGwhPT1jKXtZPWM7cmV0dXJufX1lbHNle2M9SmooYyxiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MzI3Njc7WT1jO3JldHVybn1pZihudWxsIT09YSlhLmZsYWdzfD0zMjc2OCxhLnN1YnRyZWVGbGFncz0wLGEuZGVsZXRpb25zPW51bGw7ZWxzZXtUPTY7WT1udWxsO3JldHVybn19Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1UJiYoVD01KX1mdW5jdGlvbiBRayhhLGIsYyl7dmFyIGQ9QyxlPXBrLnRyYW5zaXRpb247dHJ5e3BrLnRyYW5zaXRpb249bnVsbCxDPTEsWGsoYSxiLGMsZCl9ZmluYWxseXtway50cmFuc2l0aW9uPWUsQz1kfXJldHVybiBudWxsfVxuZnVuY3Rpb24gWGsoYSxiLGMsZCl7ZG8gSWsoKTt3aGlsZShudWxsIT09eGspO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO2M9YS5maW5pc2hlZFdvcms7dmFyIGU9YS5maW5pc2hlZExhbmVzO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcihwKDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja1ByaW9yaXR5PTA7dmFyIGY9Yy5sYW5lc3xjLmNoaWxkTGFuZXM7QmMoYSxmKTthPT09UiYmKFk9Uj1udWxsLFo9MCk7MD09PShjLnN1YnRyZWVGbGFncyYyMDY0KSYmMD09PShjLmZsYWdzJjIwNjQpfHx3a3x8KHdrPSEwLEdrKGhjLGZ1bmN0aW9uKCl7SWsoKTtyZXR1cm4gbnVsbH0pKTtmPTAhPT0oYy5mbGFncyYxNTk5MCk7aWYoMCE9PShjLnN1YnRyZWVGbGFncyYxNTk5MCl8fGYpe2Y9cGsudHJhbnNpdGlvbjtway50cmFuc2l0aW9uPW51bGw7XG52YXIgZz1DO0M9MTt2YXIgaD1LO0t8PTQ7b2suY3VycmVudD1udWxsO1BqKGEsYyk7ZWsoYyxhKTtPZShEZik7ZGQ9ISFDZjtEZj1DZj1udWxsO2EuY3VycmVudD1jO2lrKGMsYSxlKTtkYygpO0s9aDtDPWc7cGsudHJhbnNpdGlvbj1mfWVsc2UgYS5jdXJyZW50PWM7d2smJih3az0hMSx4az1hLHlrPWUpO2Y9YS5wZW5kaW5nTGFuZXM7MD09PWYmJihTaT1udWxsKTttYyhjLnN0YXRlTm9kZSxkKTtFayhhLEIoKSk7aWYobnVsbCE9PWIpZm9yKGQ9YS5vblJlY292ZXJhYmxlRXJyb3IsYz0wO2M8Yi5sZW5ndGg7YysrKWU9YltjXSxkKGUudmFsdWUse2NvbXBvbmVudFN0YWNrOmUuc3RhY2ssZGlnZXN0OmUuZGlnZXN0fSk7aWYoUGkpdGhyb3cgUGk9ITEsYT1RaSxRaT1udWxsLGE7MCE9PSh5ayYxKSYmMCE9PWEudGFnJiZJaygpO2Y9YS5wZW5kaW5nTGFuZXM7MCE9PShmJjEpP2E9PT1Baz96aysrOih6az0wLEFrPWEpOnprPTA7amcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIElrKCl7aWYobnVsbCE9PXhrKXt2YXIgYT1EYyh5ayksYj1way50cmFuc2l0aW9uLGM9Qzt0cnl7cGsudHJhbnNpdGlvbj1udWxsO0M9MTY+YT8xNjphO2lmKG51bGw9PT14ayl2YXIgZD0hMTtlbHNle2E9eGs7eGs9bnVsbDt5az0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMzMSkpO3ZhciBlPUs7S3w9NDtmb3IoVj1hLmN1cnJlbnQ7bnVsbCE9PVY7KXt2YXIgZj1WLGc9Zi5jaGlsZDtpZigwIT09KFYuZmxhZ3MmMTYpKXt2YXIgaD1mLmRlbGV0aW9ucztpZihudWxsIT09aCl7Zm9yKHZhciBrPTA7azxoLmxlbmd0aDtrKyspe3ZhciBsPWhba107Zm9yKFY9bDtudWxsIT09Vjspe3ZhciBtPVY7c3dpdGNoKG0udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlFqKDgsbSxmKX12YXIgcT1tLmNoaWxkO2lmKG51bGwhPT1xKXEucmV0dXJuPW0sVj1xO2Vsc2UgZm9yKDtudWxsIT09Vjspe209Vjt2YXIgcj1tLnNpYmxpbmcseT1tLnJldHVybjtUaihtKTtpZihtPT09XG5sKXtWPW51bGw7YnJlYWt9aWYobnVsbCE9PXIpe3IucmV0dXJuPXk7Vj1yO2JyZWFrfVY9eX19fXZhciBuPWYuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXt2YXIgdD1uLmNoaWxkO2lmKG51bGwhPT10KXtuLmNoaWxkPW51bGw7ZG97dmFyIEo9dC5zaWJsaW5nO3Quc2libGluZz1udWxsO3Q9Sn13aGlsZShudWxsIT09dCl9fVY9Zn19aWYoMCE9PShmLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PWcpZy5yZXR1cm49ZixWPWc7ZWxzZSBiOmZvcig7bnVsbCE9PVY7KXtmPVY7aWYoMCE9PShmLmZsYWdzJjIwNDgpKXN3aXRjaChmLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig5LGYsZi5yZXR1cm4pfXZhciB4PWYuc2libGluZztpZihudWxsIT09eCl7eC5yZXR1cm49Zi5yZXR1cm47Vj14O2JyZWFrIGJ9Vj1mLnJldHVybn19dmFyIHc9YS5jdXJyZW50O2ZvcihWPXc7bnVsbCE9PVY7KXtnPVY7dmFyIHU9Zy5jaGlsZDtpZigwIT09KGcuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09XG51KXUucmV0dXJuPWcsVj11O2Vsc2UgYjpmb3IoZz13O251bGwhPT1WOyl7aD1WO2lmKDAhPT0oaC5mbGFncyYyMDQ4KSl0cnl7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlJqKDksaCl9fWNhdGNoKG5hKXtXKGgsaC5yZXR1cm4sbmEpfWlmKGg9PT1nKXtWPW51bGw7YnJlYWsgYn12YXIgRj1oLnNpYmxpbmc7aWYobnVsbCE9PUYpe0YucmV0dXJuPWgucmV0dXJuO1Y9RjticmVhayBifVY9aC5yZXR1cm59fUs9ZTtqZygpO2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Qb3N0Q29tbWl0RmliZXJSb290KXRyeXtsYy5vblBvc3RDb21taXRGaWJlclJvb3Qoa2MsYSl9Y2F0Y2gobmEpe31kPSEwfXJldHVybiBkfWZpbmFsbHl7Qz1jLHBrLnRyYW5zaXRpb249Yn19cmV0dXJuITF9ZnVuY3Rpb24gWWsoYSxiLGMpe2I9S2koYyxiKTtiPU9pKGEsYiwxKTthPWRoKGEsYiwxKTtiPUwoKTtudWxsIT09YSYmKEFjKGEsMSxiKSxFayhhLGIpKX1cbmZ1bmN0aW9uIFcoYSxiLGMpe2lmKDM9PT1hLnRhZylZayhhLGEsYyk7ZWxzZSBmb3IoO251bGwhPT1iOyl7aWYoMz09PWIudGFnKXtZayhiLGEsYyk7YnJlYWt9ZWxzZSBpZigxPT09Yi50YWcpe3ZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1TaXx8IVNpLmhhcyhkKSkpe2E9S2koYyxhKTthPVJpKGIsYSwxKTtiPWRoKGIsYSwxKTthPUwoKTtudWxsIT09YiYmKEFjKGIsMSxhKSxFayhiLGEpKTticmVha319Yj1iLnJldHVybn19XG5mdW5jdGlvbiBVaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9TCgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztSPT09YSYmKFomYyk9PT1jJiYoND09PVR8fDM9PT1UJiYoWiYxMzAwMjM0MjQpPT09WiYmNTAwPkIoKS1naz9MayhhLDApOnNrfD1jKTtFayhhLGIpfWZ1bmN0aW9uIFprKGEsYil7MD09PWImJigwPT09KGEubW9kZSYxKT9iPTE6KGI9c2Msc2M8PD0xLDA9PT0oc2MmMTMwMDIzNDI0KSYmKHNjPTQxOTQzMDQpKSk7dmFyIGM9TCgpO2E9WmcoYSxiKTtudWxsIT09YSYmKEFjKGEsYixjKSxFayhhLGMpKX1mdW5jdGlvbiB2aihhKXt2YXIgYj1hLm1lbW9pemVkU3RhdGUsYz0wO251bGwhPT1iJiYoYz1iLnJldHJ5TGFuZSk7WmsoYSxjKX1cbmZ1bmN0aW9uIGNrKGEsYil7dmFyIGM9MDtzd2l0Y2goYS50YWcpe2Nhc2UgMTM6dmFyIGQ9YS5zdGF0ZU5vZGU7dmFyIGU9YS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoYz1lLnJldHJ5TGFuZSk7YnJlYWs7Y2FzZSAxOTpkPWEuc3RhdGVOb2RlO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMTQpKTt9bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1prKGEsYyl9dmFyIFdrO1xuV2s9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxXZi5jdXJyZW50KVVnPSEwO2Vsc2V7aWYoMD09PShhLmxhbmVzJmMpJiYwPT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gVWc9ITEsemooYSxiLGMpO1VnPTAhPT0oYS5mbGFncyYxMzEwNzIpPyEwOiExfWVsc2UgVWc9ITEsSSYmMCE9PShiLmZsYWdzJjEwNDg1NzYpJiZ1ZyhiLG5nLGIuaW5kZXgpO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjp2YXIgZD1iLnR5cGU7amooYSxiKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPVlmKGIsSC5jdXJyZW50KTtUZyhiLGMpO2U9WGgobnVsbCxiLGQsYSxlLGMpO3ZhciBmPWJpKCk7Yi5mbGFnc3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Y/KGIudGFnPTEsYi5tZW1vaXplZFN0YXRlPW51bGwsYi51cGRhdGVRdWV1ZT1cbm51bGwsWmYoZCk/KGY9ITAsY2coYikpOmY9ITEsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbCxhaChiKSxlLnVwZGF0ZXI9bmgsYi5zdGF0ZU5vZGU9ZSxlLl9yZWFjdEludGVybmFscz1iLHJoKGIsZCxhLGMpLGI9a2oobnVsbCxiLGQsITAsZixjKSk6KGIudGFnPTAsSSYmZiYmdmcoYiksWWkobnVsbCxiLGUsYyksYj1iLmNoaWxkKTtyZXR1cm4gYjtjYXNlIDE2OmQ9Yi5lbGVtZW50VHlwZTthOntqaihhLGIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1kLl9pbml0O2Q9ZShkLl9wYXlsb2FkKTtiLnR5cGU9ZDtlPWIudGFnPSRrKGQpO2E9TGcoZCxhKTtzd2l0Y2goZSl7Y2FzZSAwOmI9ZGoobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTpiPWlqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WmkobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1haihudWxsLGIsZCxMZyhkLnR5cGUsYSksYyk7YnJlYWsgYX10aHJvdyBFcnJvcihwKDMwNixcbmQsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksZGooYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksaWooYSxiLGQsZSxjKTtjYXNlIDM6YTp7bGooYik7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzODcpKTtkPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFN0YXRlO2U9Zi5lbGVtZW50O2JoKGEsYik7Z2goYixkLG51bGwsYyk7dmFyIGc9Yi5tZW1vaXplZFN0YXRlO2Q9Zy5lbGVtZW50O2lmKGYuaXNEZWh5ZHJhdGVkKWlmKGY9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6ITEsY2FjaGU6Zy5jYWNoZSxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOmcucGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfSxiLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1cbmYsYi5tZW1vaXplZFN0YXRlPWYsYi5mbGFncyYyNTYpe2U9S2koRXJyb3IocCg0MjMpKSxiKTtiPW1qKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGlmKGQhPT1lKXtlPUtpKEVycm9yKHAoNDI0KSksYik7Yj1taihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBmb3IoeWc9TGYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSx4Zz1iLEk9ITAsemc9bnVsbCxjPUNoKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8NDA5NixjPWMuc2libGluZztlbHNle0lnKCk7aWYoZD09PWUpe2I9JGkoYSxiLGMpO2JyZWFrIGF9WWkoYSxiLGQsYyl9Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gS2goYiksbnVsbD09PWEmJkVnKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sRWYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkVmKGQsZikmJihiLmZsYWdzfD0zMiksXG5oaihhLGIpLFlpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmRWcoYiksbnVsbDtjYXNlIDEzOnJldHVybiBwaihhLGIsYyk7Y2FzZSA0OnJldHVybiBJaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1CaChiLG51bGwsZCxjKTpZaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksWmkoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFByb3BzO1xuZz1lLnZhbHVlO0coTWcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZztpZihudWxsIT09ZilpZihIZShmLnZhbHVlLGcpKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIVdmLmN1cnJlbnQpe2I9JGkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGY9Yi5jaGlsZCxudWxsIT09ZiYmKGYucmV0dXJuPWIpO251bGwhPT1mOyl7dmFyIGg9Zi5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWgpe2c9Zi5jaGlsZDtmb3IodmFyIGs9aC5maXJzdENvbnRleHQ7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kKXtpZigxPT09Zi50YWcpe2s9Y2goLTEsYyYtYyk7ay50YWc9Mjt2YXIgbD1mLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1sKXtsPWwuc2hhcmVkO3ZhciBtPWwucGVuZGluZztudWxsPT09bT9rLm5leHQ9azooay5uZXh0PW0ubmV4dCxtLm5leHQ9ayk7bC5wZW5kaW5nPWt9fWYubGFuZXN8PWM7az1mLmFsdGVybmF0ZTtudWxsIT09ayYmKGsubGFuZXN8PWMpO1NnKGYucmV0dXJuLFxuYyxiKTtoLmxhbmVzfD1jO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGlmKDEwPT09Zi50YWcpZz1mLnR5cGU9PT1iLnR5cGU/bnVsbDpmLmNoaWxkO2Vsc2UgaWYoMTg9PT1mLnRhZyl7Zz1mLnJldHVybjtpZihudWxsPT09Zyl0aHJvdyBFcnJvcihwKDM0MSkpO2cubGFuZXN8PWM7aD1nLmFsdGVybmF0ZTtudWxsIT09aCYmKGgubGFuZXN8PWMpO1NnKGcsYyxiKTtnPWYuc2libGluZ31lbHNlIGc9Zi5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1mO2Vsc2UgZm9yKGc9ZjtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9Zj1nLnNpYmxpbmc7aWYobnVsbCE9PWYpe2YucmV0dXJuPWcucmV0dXJuO2c9ZjticmVha31nPWcucmV0dXJufWY9Z31ZaShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxkPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFRnKGIsYyksZT1WZyhlKSxkPWQoZSksYi5mbGFnc3w9MSxZaShhLGIsZCxjKSxcbmIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZD1iLnR5cGUsZT1MZyhkLGIucGVuZGluZ1Byb3BzKSxlPUxnKGQudHlwZSxlKSxhaihhLGIsZCxlLGMpO2Nhc2UgMTU6cmV0dXJuIGNqKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxqaihhLGIpLGIudGFnPTEsWmYoZCk/KGE9ITAsY2coYikpOmE9ITEsVGcoYixjKSxwaChiLGQsZSkscmgoYixkLGUsYyksa2oobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiB5aihhLGIsYyk7Y2FzZSAyMjpyZXR1cm4gZWooYSxiLGMpfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fTtmdW5jdGlvbiBHayhhLGIpe3JldHVybiBhYyhhLGIpfVxuZnVuY3Rpb24gYWwoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLnN1YnRyZWVGbGFncz10aGlzLmZsYWdzPTA7dGhpcy5kZWxldGlvbnM9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gQmcoYSxiLGMsZCl7cmV0dXJuIG5ldyBhbChhLGIsYyxkKX1mdW5jdGlvbiBiaihhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gJGsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGJqKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1EYSlyZXR1cm4gMTE7aWYoYT09PUdhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIHdoKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9QmcoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5zdWJ0cmVlRmxhZ3M9MCxjLmRlbGV0aW9ucz1udWxsKTtjLmZsYWdzPWEuZmxhZ3MmMTQ2ODAwNjQ7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHloKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSliaihhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm4gQWgoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSB6YTpnPTg7ZXw9ODticmVhaztjYXNlIEFhOnJldHVybiBhPUJnKDEyLGMsYixlfDIpLGEuZWxlbWVudFR5cGU9QWEsYS5sYW5lcz1mLGE7Y2FzZSBFYTpyZXR1cm4gYT1CZygxMyxjLGIsZSksYS5lbGVtZW50VHlwZT1FYSxhLmxhbmVzPWYsYTtjYXNlIEZhOnJldHVybiBhPUJnKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUZhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHFqKGMsZSxmLGIpO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBCYTpnPTEwO2JyZWFrIGE7Y2FzZSBDYTpnPTk7YnJlYWsgYTtjYXNlIERhOmc9MTE7XG5icmVhayBhO2Nhc2UgR2E6Zz0xNDticmVhayBhO2Nhc2UgSGE6Zz0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyBFcnJvcihwKDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPUJnKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT1CZyg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gcWooYSxiLGMsZCl7YT1CZygyMixhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7YS5zdGF0ZU5vZGU9e2lzSGlkZGVuOiExfTtyZXR1cm4gYX1mdW5jdGlvbiB4aChhLGIsYyl7YT1CZyg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiB6aChhLGIsYyl7Yj1CZyg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGJsKGEsYixjLGQsZSl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9emMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9emMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9emMoMCk7dGhpcy5pZGVudGlmaWVyUHJlZml4PWQ7dGhpcy5vblJlY292ZXJhYmxlRXJyb3I9ZTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9XG5udWxsfWZ1bmN0aW9uIGNsKGEsYixjLGQsZSxmLGcsaCxrKXthPW5ldyBibChhLGIsYyxoLGspOzE9PT1iPyhiPTEsITA9PT1mJiYoYnw9OCkpOmI9MDtmPUJnKDMsbnVsbCxudWxsLGIpO2EuY3VycmVudD1mO2Yuc3RhdGVOb2RlPWE7Zi5tZW1vaXplZFN0YXRlPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOmMsY2FjaGU6bnVsbCx0cmFuc2l0aW9uczpudWxsLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6bnVsbH07YWgoZik7cmV0dXJuIGF9ZnVuY3Rpb24gZGwoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp3YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGVsKGEpe2lmKCFhKXJldHVybiBWZjthPWEuX3JlYWN0SW50ZXJuYWxzO2E6e2lmKFZiKGEpIT09YXx8MSE9PWEudGFnKXRocm93IEVycm9yKHAoMTcwKSk7dmFyIGI9YTtkb3tzd2l0Y2goYi50YWcpe2Nhc2UgMzpiPWIuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYTtjYXNlIDE6aWYoWmYoYi50eXBlKSl7Yj1iLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBhfX1iPWIucmV0dXJufXdoaWxlKG51bGwhPT1iKTt0aHJvdyBFcnJvcihwKDE3MSkpO31pZigxPT09YS50YWcpe3ZhciBjPWEudHlwZTtpZihaZihjKSlyZXR1cm4gYmcoYSxjLGIpfXJldHVybiBifVxuZnVuY3Rpb24gZmwoYSxiLGMsZCxlLGYsZyxoLGspe2E9Y2woYyxkLCEwLGEsZSxmLGcsaCxrKTthLmNvbnRleHQ9ZWwobnVsbCk7Yz1hLmN1cnJlbnQ7ZD1MKCk7ZT1saChjKTtmPWNoKGQsZSk7Zi5jYWxsYmFjaz12b2lkIDAhPT1iJiZudWxsIT09Yj9iOm51bGw7ZGgoYyxmLGUpO2EuY3VycmVudC5sYW5lcz1lO0FjKGEsZSxkKTtFayhhLGQpO3JldHVybiBhfWZ1bmN0aW9uIGdsKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUwoKSxnPWxoKGUpO2M9ZWwoYyk7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1jaChmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTthPWRoKGUsYixnKTtudWxsIT09YSYmKG1oKGEsZSxnLGYpLGVoKGEsZSxnKSk7cmV0dXJuIGd9XG5mdW5jdGlvbiBobChhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGlsKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBqbChhLGIpe2lsKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZpbChhLGIpfWZ1bmN0aW9uIGtsKCl7cmV0dXJuIG51bGx9dmFyIGxsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXBvcnRFcnJvcj9yZXBvcnRFcnJvcjpmdW5jdGlvbihhKXtjb25zb2xlLmVycm9yKGEpfTtmdW5jdGlvbiBtbChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm5sLnByb3RvdHlwZS5yZW5kZXI9bWwucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCg0MDkpKTtnbChhLGIsbnVsbCxudWxsKX07bmwucHJvdG90eXBlLnVubW91bnQ9bWwucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbCE9PWEpe3RoaXMuX2ludGVybmFsUm9vdD1udWxsO3ZhciBiPWEuY29udGFpbmVySW5mbztTayhmdW5jdGlvbigpe2dsKG51bGwsYSxudWxsLG51bGwpfSk7Ylt1Zl09bnVsbH19O2Z1bmN0aW9uIG5sKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubmwucHJvdG90eXBlLnVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uPWZ1bmN0aW9uKGEpe2lmKGEpe3ZhciBiPUhjKCk7YT17YmxvY2tlZE9uOm51bGwsdGFyZ2V0OmEscHJpb3JpdHk6Yn07Zm9yKHZhciBjPTA7YzxRYy5sZW5ndGgmJjAhPT1iJiZiPFFjW2NdLnByaW9yaXR5O2MrKyk7UWMuc3BsaWNlKGMsMCxhKTswPT09YyYmVmMoYSl9fTtmdW5jdGlvbiBvbChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSl9ZnVuY3Rpb24gcGwoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIHFsKCl7fVxuZnVuY3Rpb24gcmwoYSxiLGMsZCxlKXtpZihlKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGY9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9aGwoZyk7Zi5jYWxsKGEpfX12YXIgZz1mbChiLGQsYSwwLG51bGwsITEsITEsXCJcIixxbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWc7YVt1Zl09Zy5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtTaygpO3JldHVybiBnfWZvcig7ZT1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChlKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGg9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9aGwoayk7aC5jYWxsKGEpfX12YXIgaz1jbChhLDAsITEsbnVsbCxudWxsLCExLCExLFwiXCIscWwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1rO2FbdWZdPWsuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7U2soZnVuY3Rpb24oKXtnbChiLGssYyxkKX0pO3JldHVybiBrfVxuZnVuY3Rpb24gc2woYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9ZjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9aGwoZyk7aC5jYWxsKGEpfX1nbChiLGcsYSxlKX1lbHNlIGc9cmwoYyxiLGEsZSxkKTtyZXR1cm4gaGwoZyl9RWM9ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDM6dmFyIGI9YS5zdGF0ZU5vZGU7aWYoYi5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXt2YXIgYz10YyhiLnBlbmRpbmdMYW5lcyk7MCE9PWMmJihDYyhiLGN8MSksRWsoYixCKCkpLDA9PT0oSyY2KSYmKEhqPUIoKSs1MDAsamcoKSkpfWJyZWFrO2Nhc2UgMTM6U2soZnVuY3Rpb24oKXt2YXIgYj1aZyhhLDEpO2lmKG51bGwhPT1iKXt2YXIgYz1MKCk7bWgoYixhLDEsYyl9fSksamwoYSwxKX19O1xuRmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9WmcoYSwxMzQyMTc3MjgpO2lmKG51bGwhPT1iKXt2YXIgYz1MKCk7bWgoYixhLDEzNDIxNzcyOCxjKX1qbChhLDEzNDIxNzcyOCl9fTtHYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1saChhKSxjPVpnKGEsYik7aWYobnVsbCE9PWMpe3ZhciBkPUwoKTttaChjLGEsYixkKX1qbChhLGIpfX07SGM9ZnVuY3Rpb24oKXtyZXR1cm4gQ307SWM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1DO3RyeXtyZXR1cm4gQz1hLGIoKX1maW5hbGx5e0M9Y319O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpiYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IocCg5MCkpO1dhKGQpO2JiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1SaztIYj1TaztcbnZhciB0bD17dXNpbmdDbGllbnRFbnRyeVBvaW50OiExLEV2ZW50czpbQ2IsdWUsRGIsRWIsRmIsUmtdfSx1bD17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6V2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxOC4yLjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHZsPXtidW5kbGVUeXBlOnVsLmJ1bmRsZVR5cGUsdmVyc2lvbjp1bC52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6dWwucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp1bC5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0RXJyb3JIYW5kbGVyOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjp1YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9WmIoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnVsLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbmtsLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGwscmVjb25jaWxlclZlcnNpb246XCIxOC4yLjAtbmV4dC05ZTNiNzcyYjgtMjAyMjA2MDhcIn07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB3bD1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXdsLmlzRGlzYWJsZWQmJndsLnN1cHBvcnRzRmliZXIpdHJ5e2tjPXdsLmluamVjdCh2bCksbGM9d2x9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXRsO1xuZXhwb3J0cy5jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighb2woYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gZGwoYSxiLG51bGwsYyl9O2V4cG9ydHMuY3JlYXRlUm9vdD1mdW5jdGlvbihhLGIpe2lmKCFvbChhKSl0aHJvdyBFcnJvcihwKDI5OSkpO3ZhciBjPSExLGQ9XCJcIixlPWxsO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoITA9PT1iLnVuc3RhYmxlX3N0cmljdE1vZGUmJihjPSEwKSx2b2lkIDAhPT1iLmlkZW50aWZpZXJQcmVmaXgmJihkPWIuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yi5vblJlY292ZXJhYmxlRXJyb3ImJihlPWIub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1jbChhLDEsITEsbnVsbCxudWxsLGMsITEsZCxlKTthW3VmXT1iLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO3JldHVybiBuZXcgbWwoYil9O1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcihwKDE4OCkpO2E9T2JqZWN0LmtleXMoYSkuam9pbihcIixcIik7dGhyb3cgRXJyb3IocCgyNjgsYSkpO31hPVpiKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSl7cmV0dXJuIFNrKGEpfTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFwbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBzbChudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLmh5ZHJhdGVSb290PWZ1bmN0aW9uKGEsYixjKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCg0MDUpKTt2YXIgZD1udWxsIT1jJiZjLmh5ZHJhdGVkU291cmNlc3x8bnVsbCxlPSExLGY9XCJcIixnPWxsO251bGwhPT1jJiZ2b2lkIDAhPT1jJiYoITA9PT1jLnVuc3RhYmxlX3N0cmljdE1vZGUmJihlPSEwKSx2b2lkIDAhPT1jLmlkZW50aWZpZXJQcmVmaXgmJihmPWMuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yy5vblJlY292ZXJhYmxlRXJyb3ImJihnPWMub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1mbChiLG51bGwsYSwxLG51bGwhPWM/YzpudWxsLGUsITEsZixnKTthW3VmXT1iLmN1cnJlbnQ7c2YoYSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWM9ZFthXSxlPWMuX2dldFZlcnNpb24sZT1lKGMuX3NvdXJjZSksbnVsbD09Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2IubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYyxlXTpiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChjLFxuZSk7cmV0dXJuIG5ldyBubChiKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFwbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBzbChudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFwbChhKSl0aHJvdyBFcnJvcihwKDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oU2soZnVuY3Rpb24oKXtzbChudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbdWZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1SaztcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXBsKGMpKXRocm93IEVycm9yKHAoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IocCgzOCkpO3JldHVybiBzbChhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMi4wLW5leHQtOWUzYjc3MmI4LTIwMjIwNjA4XCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBtLmNyZWF0ZVJvb3Q7XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBtLmh5ZHJhdGVSb290O1xufSBlbHNlIHtcbiAgdmFyIGkgPSBtLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBmdW5jdGlvbihjLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5jcmVhdGVSb290KGMsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIGgsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmh5ZHJhdGVSb290KGMsIGgsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxuPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikscD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIikscT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIikscj1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksdD1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksdT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSx2PVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSx3PVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSx4PVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHk9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksej1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxudmFyIEI9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEM9T2JqZWN0LmFzc2lnbixEPXt9O2Z1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn1FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O1xuRS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKFwic2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCIpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7QyhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPUFycmF5LmlzQXJyYXksSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2N1cnJlbnQ6bnVsbH0sTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGQsYz17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGQgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilKLmNhbGwoYixkKSYmIUwuaGFzT3duUHJvcGVydHkoZCkmJihjW2RdPWJbZF0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZyljLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2MuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZCBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09Y1tkXSYmKGNbZF09Z1tkXSk7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmMsX293bmVyOksuY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1sfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nO2Z1bmN0aW9uIFEoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBSKGEsYixlLGQsYyl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGw6Y2FzZSBuOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxjPWMoaCksYT1cIlwiPT09ZD9cIi5cIitRKGgsMCk6ZCxJKGMpPyhlPVwiXCIsbnVsbCE9YSYmKGU9YS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpLFIoYyxiLGUsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1jJiYoTyhjKSYmKGM9TihjLGUrKCFjLmtleXx8aCYmaC5rZXk9PT1jLmtleT9cIlwiOihcIlwiK2Mua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goYykpLDE7aD0wO2Q9XCJcIj09PWQ/XCIuXCI6ZCtcIjpcIjtpZihJKGEpKWZvcih2YXIgZz0wO2c8YS5sZW5ndGg7ZysrKXtrPVxuYVtnXTt2YXIgZj1kK1EoayxnKTtoKz1SKGssYixlLGYsYyl9ZWxzZSBpZihmPUEoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWQrUShrLGcrKyksaCs9UihrLGIsZSxmLGMpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1TdHJpbmcoYSksRXJyb3IoXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6IFwiKyhcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKStcIikuIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgaW5zdGVhZC5cIik7cmV0dXJuIGh9XG5mdW5jdGlvbiBTKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBkPVtdLGM9MDtSKGEsZCxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChlLGEsYysrKX0pO3JldHVybiBkfWZ1bmN0aW9uIFQoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWJ9LGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1ifSk7LTE9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MCxhLl9yZXN1bHQ9Yil9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0LmRlZmF1bHQ7dGhyb3cgYS5fcmVzdWx0O31cbnZhciBVPXtjdXJyZW50Om51bGx9LFY9e3RyYW5zaXRpb246bnVsbH0sVz17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpVLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOlYsUmVhY3RDdXJyZW50T3duZXI6S307ZXhwb3J0cy5DaGlsZHJlbj17bWFwOlMsZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7UyhhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGUpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1MoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBTKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoXCJSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC5cIik7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1FO2V4cG9ydHMuRnJhZ21lbnQ9cDtcbmV4cG9ydHMuUHJvZmlsZXI9cjtleHBvcnRzLlB1cmVDb21wb25lbnQ9RztleHBvcnRzLlN0cmljdE1vZGU9cTtleHBvcnRzLlN1c3BlbnNlPXc7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1XO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKFwiUmVhY3QuY2xvbmVFbGVtZW50KC4uLik6IFRoZSBhcmd1bWVudCBtdXN0IGJlIGEgUmVhY3QgZWxlbWVudCwgYnV0IHlvdSBwYXNzZWQgXCIrYStcIi5cIik7dmFyIGQ9Qyh7fSxhLnByb3BzKSxjPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1LLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoYz1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUouY2FsbChiLGYpJiYhTC5oYXNPd25Qcm9wZXJ0eShmKSYmKGRbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7XG5mb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpjLHJlZjprLHByb3BzOmQsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSl7YT17JCR0eXBlb2Y6dSxfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGwsX2RlZmF1bHRWYWx1ZTpudWxsLF9nbG9iYWxOYW1lOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnQsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtcbmV4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztleHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnksX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpUfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOngsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnN0YXJ0VHJhbnNpdGlvbj1mdW5jdGlvbihhKXt2YXIgYj1WLnRyYW5zaXRpb247Vi50cmFuc2l0aW9uPXt9O3RyeXthKCl9ZmluYWxseXtWLnRyYW5zaXRpb249Yn19O2V4cG9ydHMudW5zdGFibGVfYWN0PWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoXCJhY3QoLi4uKSBpcyBub3Qgc3VwcG9ydGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzIG9mIFJlYWN0LlwiKTt9O1xuZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlQ29udGV4dChhKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZURlZmVycmVkVmFsdWU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VEZWZlcnJlZFZhbHVlKGEpfTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZUlkKCl9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixlKX07XG5leHBvcnRzLnVzZUluc2VydGlvbkVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlSW5zZXJ0aW9uRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWR1Y2VyKGEsYixlKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VTdGF0ZShhKX07ZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VTeW5jRXh0ZXJuYWxTdG9yZShhLGIsZSl9O1xuZXhwb3J0cy51c2VUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VUcmFuc2l0aW9uKCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjIuMFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO2Z1bmN0aW9uIGYoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzA8Yzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKDA8ZyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gaChhKXtyZXR1cm4gMD09PWEubGVuZ3RoP251bGw6YVswXX1mdW5jdGlvbiBrKGEpe2lmKDA9PT1hLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgYj1hWzBdLGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aCx3PWU+Pj4xO2Q8dzspe3ZhciBtPTIqKGQrMSktMSxDPWFbbV0sbj1tKzEseD1hW25dO2lmKDA+ZyhDLGMpKW48ZSYmMD5nKHgsQyk/KGFbZF09eCxhW25dPWMsZD1uKTooYVtkXT1DLGFbbV09YyxkPW0pO2Vsc2UgaWYobjxlJiYwPmcoeCxjKSlhW2RdPXgsYVtuXT1jLGQ9bjtlbHNlIGJyZWFrIGF9fXJldHVybiBifVxuZnVuY3Rpb24gZyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH1pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19dmFyIHI9W10sdD1bXSx1PTEsdj1udWxsLHk9Myx6PSExLEE9ITEsQj0hMSxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bnVsbCxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0Om51bGwsRj1cInVuZGVmaW5lZFwiIT09dHlwZW9mIHNldEltbWVkaWF0ZT9zZXRJbW1lZGlhdGU6bnVsbDtcblwidW5kZWZpbmVkXCIhPT10eXBlb2YgbmF2aWdhdG9yJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZyYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcmJm5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nLmJpbmQobmF2aWdhdG9yLnNjaGVkdWxpbmcpO2Z1bmN0aW9uIEcoYSl7Zm9yKHZhciBiPWgodCk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylrKHQpO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpayh0KSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLGYocixiKTtlbHNlIGJyZWFrO2I9aCh0KX19ZnVuY3Rpb24gSChhKXtCPSExO0coYSk7aWYoIUEpaWYobnVsbCE9PWgocikpQT0hMCxJKEopO2Vsc2V7dmFyIGI9aCh0KTtudWxsIT09YiYmSyhILGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIEooYSxiKXtBPSExO0ImJihCPSExLEUoTCksTD0tMSk7ej0hMDt2YXIgYz15O3RyeXtHKGIpO2Zvcih2PWgocik7bnVsbCE9PXYmJighKHYuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFNKCkpOyl7dmFyIGQ9di5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7di5jYWxsYmFjaz1udWxsO3k9di5wcmlvcml0eUxldmVsO3ZhciBlPWQodi5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP3YuY2FsbGJhY2s9ZTp2PT09aChyKSYmayhyKTtHKGIpfWVsc2UgayhyKTt2PWgocil9aWYobnVsbCE9PXYpdmFyIHc9ITA7ZWxzZXt2YXIgbT1oKHQpO251bGwhPT1tJiZLKEgsbS5zdGFydFRpbWUtYik7dz0hMX1yZXR1cm4gd31maW5hbGx5e3Y9bnVsbCx5PWMsej0hMX19dmFyIE49ITEsTz1udWxsLEw9LTEsUD01LFE9LTE7XG5mdW5jdGlvbiBNKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCktUTxQPyExOiEwfWZ1bmN0aW9uIFIoKXtpZihudWxsIT09Tyl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtRPWE7dmFyIGI9ITA7dHJ5e2I9TyghMCxhKX1maW5hbGx5e2I/UygpOihOPSExLE89bnVsbCl9fWVsc2UgTj0hMX12YXIgUztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRilTPWZ1bmN0aW9uKCl7RihSKX07ZWxzZSBpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgVD1uZXcgTWVzc2FnZUNoYW5uZWwsVT1ULnBvcnQyO1QucG9ydDEub25tZXNzYWdlPVI7Uz1mdW5jdGlvbigpe1UucG9zdE1lc3NhZ2UobnVsbCl9fWVsc2UgUz1mdW5jdGlvbigpe0QoUiwwKX07ZnVuY3Rpb24gSShhKXtPPWE7Tnx8KE49ITAsUygpKX1mdW5jdGlvbiBLKGEsYil7TD1EKGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7QXx8enx8KEE9ITAsSShKKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6UD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiB5fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGgocil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goeSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9eX12YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e3k9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O1xuZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9eTt5PWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXt5PWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6dSsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsZih0LGEpLG51bGw9PT1oKHIpJiZhPT09aCh0KSYmKEI/KEUoTCksTD0tMSk6Qj0hMCxLKEgsYy1kKSkpOihhLnNvcnRJbmRleD1lLGYocixhKSxBfHx6fHwoQT0hMCxJKEopKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1NO2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPXk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e3k9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFJldHVybnMgYSB3cmFwcGVyIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHdyYXBwZWQgY2FsbGJhY2tcbi8vIFRoZSB3cmFwcGVyIGZ1bmN0aW9uIHNob3VsZCBkbyBzb21lIHN0dWZmLCBhbmQgcmV0dXJuIGFcbi8vIHByZXN1bWFibHkgZGlmZmVyZW50IGNhbGxiYWNrIGZ1bmN0aW9uLlxuLy8gVGhpcyBtYWtlcyBzdXJlIHRoYXQgb3duIHByb3BlcnRpZXMgYXJlIHJldGFpbmVkLCBzbyB0aGF0XG4vLyBkZWNvcmF0aW9ucyBhbmQgc3VjaCBhcmUgbm90IGxvc3QgYWxvbmcgdGhlIHdheS5cbm1vZHVsZS5leHBvcnRzID0gd3JhcHB5XG5mdW5jdGlvbiB3cmFwcHkgKGZuLCBjYikge1xuICBpZiAoZm4gJiYgY2IpIHJldHVybiB3cmFwcHkoZm4pKGNiKVxuXG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbmVlZCB3cmFwcGVyIGZ1bmN0aW9uJylcblxuICBPYmplY3Qua2V5cyhmbikuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgIHdyYXBwZXJba10gPSBmbltrXVxuICB9KVxuXG4gIHJldHVybiB3cmFwcGVyXG5cbiAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXVxuICAgIH1cbiAgICB2YXIgcmV0ID0gZm4uYXBwbHkodGhpcywgYXJncylcbiAgICB2YXIgY2IgPSBhcmdzW2FyZ3MubGVuZ3RoLTFdXG4gICAgaWYgKHR5cGVvZiByZXQgPT09ICdmdW5jdGlvbicgJiYgcmV0ICE9PSBjYikge1xuICAgICAgT2JqZWN0LmtleXMoY2IpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgICAgcmV0W2tdID0gY2Jba11cbiAgICAgIH0pXG4gICAgfVxuICAgIHJldHVybiByZXRcbiAgfVxufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmIgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHNlbGYubG9jYXRpb24uaHJlZjtcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzc6IDAsXG5cdDcxMjogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiLyoqXG4gKiBAcmVtaXgtcnVuL3JvdXRlciB2MS4xNC4xXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFR5cGVzIGFuZCBDb25zdGFudHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIEFjdGlvbnMgcmVwcmVzZW50IHRoZSB0eXBlIG9mIGNoYW5nZSB0byBhIGxvY2F0aW9uIHZhbHVlLlxuICovXG52YXIgQWN0aW9uO1xuKGZ1bmN0aW9uIChBY3Rpb24pIHtcbiAgLyoqXG4gICAqIEEgUE9QIGluZGljYXRlcyBhIGNoYW5nZSB0byBhbiBhcmJpdHJhcnkgaW5kZXggaW4gdGhlIGhpc3Rvcnkgc3RhY2ssIHN1Y2hcbiAgICogYXMgYSBiYWNrIG9yIGZvcndhcmQgbmF2aWdhdGlvbi4gSXQgZG9lcyBub3QgZGVzY3JpYmUgdGhlIGRpcmVjdGlvbiBvZiB0aGVcbiAgICogbmF2aWdhdGlvbiwgb25seSB0aGF0IHRoZSBjdXJyZW50IGluZGV4IGNoYW5nZWQuXG4gICAqXG4gICAqIE5vdGU6IFRoaXMgaXMgdGhlIGRlZmF1bHQgYWN0aW9uIGZvciBuZXdseSBjcmVhdGVkIGhpc3Rvcnkgb2JqZWN0cy5cbiAgICovXG4gIEFjdGlvbltcIlBvcFwiXSA9IFwiUE9QXCI7XG4gIC8qKlxuICAgKiBBIFBVU0ggaW5kaWNhdGVzIGEgbmV3IGVudHJ5IGJlaW5nIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoIGFzIHdoZW5cbiAgICogYSBsaW5rIGlzIGNsaWNrZWQgYW5kIGEgbmV3IHBhZ2UgbG9hZHMuIFdoZW4gdGhpcyBoYXBwZW5zLCBhbGwgc3Vic2VxdWVudFxuICAgKiBlbnRyaWVzIGluIHRoZSBzdGFjayBhcmUgbG9zdC5cbiAgICovXG4gIEFjdGlvbltcIlB1c2hcIl0gPSBcIlBVU0hcIjtcbiAgLyoqXG4gICAqIEEgUkVQTEFDRSBpbmRpY2F0ZXMgdGhlIGVudHJ5IGF0IHRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrXG4gICAqIGJlaW5nIHJlcGxhY2VkIGJ5IGEgbmV3IG9uZS5cbiAgICovXG4gIEFjdGlvbltcIlJlcGxhY2VcIl0gPSBcIlJFUExBQ0VcIjtcbn0pKEFjdGlvbiB8fCAoQWN0aW9uID0ge30pKTtcbmNvbnN0IFBvcFN0YXRlRXZlbnRUeXBlID0gXCJwb3BzdGF0ZVwiO1xuLyoqXG4gKiBNZW1vcnkgaGlzdG9yeSBzdG9yZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24gaW4gbWVtb3J5LiBJdCBpcyBkZXNpZ25lZCBmb3IgdXNlXG4gKiBpbiBzdGF0ZWZ1bCBub24tYnJvd3NlciBlbnZpcm9ubWVudHMgbGlrZSB0ZXN0cyBhbmQgUmVhY3QgTmF0aXZlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBsZXQge1xuICAgIGluaXRpYWxFbnRyaWVzID0gW1wiL1wiXSxcbiAgICBpbml0aWFsSW5kZXgsXG4gICAgdjVDb21wYXQgPSBmYWxzZVxuICB9ID0gb3B0aW9ucztcbiAgbGV0IGVudHJpZXM7IC8vIERlY2xhcmUgc28gd2UgY2FuIGFjY2VzcyBmcm9tIGNyZWF0ZU1lbW9yeUxvY2F0aW9uXG4gIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoKGVudHJ5LCBpbmRleCkgPT4gY3JlYXRlTWVtb3J5TG9jYXRpb24oZW50cnksIHR5cGVvZiBlbnRyeSA9PT0gXCJzdHJpbmdcIiA/IG51bGwgOiBlbnRyeS5zdGF0ZSwgaW5kZXggPT09IDAgPyBcImRlZmF1bHRcIiA6IHVuZGVmaW5lZCkpO1xuICBsZXQgaW5kZXggPSBjbGFtcEluZGV4KGluaXRpYWxJbmRleCA9PSBudWxsID8gZW50cmllcy5sZW5ndGggLSAxIDogaW5pdGlhbEluZGV4KTtcbiAgbGV0IGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIGxldCBsaXN0ZW5lciA9IG51bGw7XG4gIGZ1bmN0aW9uIGNsYW1wSW5kZXgobikge1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCAwKSwgZW50cmllcy5sZW5ndGggLSAxKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24oKSB7XG4gICAgcmV0dXJuIGVudHJpZXNbaW5kZXhdO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUxvY2F0aW9uKHRvLCBzdGF0ZSwga2V5KSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0gbnVsbDtcbiAgICB9XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oZW50cmllcyA/IGdldEN1cnJlbnRMb2NhdGlvbigpLnBhdGhuYW1lIDogXCIvXCIsIHRvLCBzdGF0ZSwga2V5KTtcbiAgICB3YXJuaW5nKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gXCIvXCIsIFwicmVsYXRpdmUgcGF0aG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIG1lbW9yeSBoaXN0b3J5OiBcIiArIEpTT04uc3RyaW5naWZ5KHRvKSk7XG4gICAgcmV0dXJuIGxvY2F0aW9uO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYodG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IHtcbiAgICBnZXQgaW5kZXgoKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfSxcbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBnZXRDdXJyZW50TG9jYXRpb24oKTtcbiAgICB9LFxuICAgIGNyZWF0ZUhyZWYsXG4gICAgY3JlYXRlVVJMKHRvKSB7XG4gICAgICByZXR1cm4gbmV3IFVSTChjcmVhdGVIcmVmKHRvKSwgXCJodHRwOi8vbG9jYWxob3N0XCIpO1xuICAgIH0sXG4gICAgZW5jb2RlTG9jYXRpb24odG8pIHtcbiAgICAgIGxldCBwYXRoID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aG5hbWU6IHBhdGgucGF0aG5hbWUgfHwgXCJcIixcbiAgICAgICAgc2VhcmNoOiBwYXRoLnNlYXJjaCB8fCBcIlwiLFxuICAgICAgICBoYXNoOiBwYXRoLmhhc2ggfHwgXCJcIlxuICAgICAgfTtcbiAgICB9LFxuICAgIHB1c2godG8sIHN0YXRlKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUpO1xuICAgICAgaW5kZXggKz0gMTtcbiAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCBlbnRyaWVzLmxlbmd0aCwgbmV4dExvY2F0aW9uKTtcbiAgICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sXG4gICAgICAgICAgZGVsdGE6IDFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXBsYWNlKHRvLCBzdGF0ZSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlKTtcbiAgICAgIGVudHJpZXNbaW5kZXhdID0gbmV4dExvY2F0aW9uO1xuICAgICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YTogMFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdvKGRlbHRhKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgICAgbGV0IG5leHRJbmRleCA9IGNsYW1wSW5kZXgoaW5kZXggKyBkZWx0YSk7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gZW50cmllc1tuZXh0SW5kZXhdO1xuICAgICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgIGRlbHRhXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgbGlzdGVuKGZuKSB7XG4gICAgICBsaXN0ZW5lciA9IGZuO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbGlzdGVuZXIgPSBudWxsO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuLyoqXG4gKiBCcm93c2VyIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiByZWd1bGFyIFVSTHMuIFRoaXMgaXMgdGhlIHN0YW5kYXJkIGZvclxuICogbW9zdCB3ZWIgYXBwcywgYnV0IGl0IHJlcXVpcmVzIHNvbWUgY29uZmlndXJhdGlvbiBvbiB0aGUgc2VydmVyIHRvIGVuc3VyZSB5b3VcbiAqIHNlcnZlIHRoZSBzYW1lIGFwcCBhdCBtdWx0aXBsZSBVUkxzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlYnJvd3Nlcmhpc3RvcnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpIHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24oXCJcIiwge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSxcbiAgICAvLyBzdGF0ZSBkZWZhdWx0cyB0byBgbnVsbGAgYmVjYXVzZSBgd2luZG93Lmhpc3Rvcnkuc3RhdGVgIGRvZXNcbiAgICBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUudXNyIHx8IG51bGwsIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS5rZXkgfHwgXCJkZWZhdWx0XCIpO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIcmVmKHdpbmRvdywgdG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgfVxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KGNyZWF0ZUJyb3dzZXJMb2NhdGlvbiwgY3JlYXRlQnJvd3NlckhyZWYsIG51bGwsIG9wdGlvbnMpO1xufVxuLyoqXG4gKiBIYXNoIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB3aW5kb3cubG9jYXRpb24uaGFzaC4gVGhpcyBtYWtlcyBpdCBpZGVhbFxuICogZm9yIHNpdHVhdGlvbnMgd2hlcmUgeW91IGRvbid0IHdhbnQgdG8gc2VuZCB0aGUgbG9jYXRpb24gdG8gdGhlIHNlcnZlciBmb3JcbiAqIHNvbWUgcmVhc29uLCBlaXRoZXIgYmVjYXVzZSB5b3UgZG8gY2Fubm90IGNvbmZpZ3VyZSBpdCBvciB0aGUgVVJMIHNwYWNlIGlzXG4gKiByZXNlcnZlZCBmb3Igc29tZXRoaW5nIGVsc2UuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNjcmVhdGVoYXNoaGlzdG9yeVxuICovXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlSGFzaExvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSkge1xuICAgIGxldCB7XG4gICAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgICAgc2VhcmNoID0gXCJcIixcbiAgICAgIGhhc2ggPSBcIlwiXG4gICAgfSA9IHBhcnNlUGF0aCh3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSkpO1xuICAgIC8vIEhhc2ggVVJMIHNob3VsZCBhbHdheXMgaGF2ZSBhIGxlYWRpbmcgLyBqdXN0IGxpa2Ugd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lXG4gICAgLy8gZG9lcywgc28gaWYgYW4gYXBwIGVuZHMgdXAgYXQgYSByb3V0ZSBsaWtlIC8jc29tZXRoaW5nIHRoZW4gd2UgYWRkIGFcbiAgICAvLyBsZWFkaW5nIHNsYXNoIHNvIGFsbCBvZiBvdXIgcGF0aC1tYXRjaGluZyBiZWhhdmVzIHRoZSBzYW1lIGFzIGlmIGl0IHdvdWxkXG4gICAgLy8gaW4gYSBicm93c2VyIHJvdXRlci4gIFRoaXMgaXMgcGFydGljdWxhcmx5IGltcG9ydGFudCB3aGVuIHRoZXJlIGV4aXN0cyBhXG4gICAgLy8gcm9vdCBzcGxhdCByb3V0ZSAoPFJvdXRlIHBhdGg9XCIqXCI+KSBzaW5jZSB0aGF0IG1hdGNoZXMgaW50ZXJuYWxseSBhZ2FpbnN0XG4gICAgLy8gXCIvKlwiIGFuZCB3ZSdkIGV4cGVjdCAvI3NvbWV0aGluZyB0byA0MDQgaW4gYSBoYXNoIHJvdXRlciBhcHAuXG4gICAgaWYgKCFwYXRobmFtZS5zdGFydHNXaXRoKFwiL1wiKSAmJiAhcGF0aG5hbWUuc3RhcnRzV2l0aChcIi5cIikpIHtcbiAgICAgIHBhdGhuYW1lID0gXCIvXCIgKyBwYXRobmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKFwiXCIsIHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaFxuICAgIH0sXG4gICAgLy8gc3RhdGUgZGVmYXVsdHMgdG8gYG51bGxgIGJlY2F1c2UgYHdpbmRvdy5oaXN0b3J5LnN0YXRlYCBkb2VzXG4gICAgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLnVzciB8fCBudWxsLCBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUua2V5IHx8IFwiZGVmYXVsdFwiKTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVIYXNoSHJlZih3aW5kb3csIHRvKSB7XG4gICAgbGV0IGJhc2UgPSB3aW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJhc2VcIik7XG4gICAgbGV0IGhyZWYgPSBcIlwiO1xuICAgIGlmIChiYXNlICYmIGJhc2UuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSkge1xuICAgICAgbGV0IHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgbGV0IGhhc2hJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcbiAgICAgIGhyZWYgPSBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuICAgIHJldHVybiBocmVmICsgXCIjXCIgKyAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKSk7XG4gIH1cbiAgZnVuY3Rpb24gdmFsaWRhdGVIYXNoTG9jYXRpb24obG9jYXRpb24sIHRvKSB7XG4gICAgd2FybmluZyhsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09IFwiL1wiLCBcInJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBoYXNoIGhpc3RvcnkucHVzaChcIiArIEpTT04uc3RyaW5naWZ5KHRvKSArIFwiKVwiKTtcbiAgfVxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KGNyZWF0ZUhhc2hMb2NhdGlvbiwgY3JlYXRlSGFzaEhyZWYsIHZhbGlkYXRlSGFzaExvY2F0aW9uLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGludmFyaWFudCh2YWx1ZSwgbWVzc2FnZSkge1xuICBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfVxufVxuZnVuY3Rpb24gd2FybmluZyhjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFdlbGNvbWUgdG8gZGVidWdnaW5nIGhpc3RvcnkhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSwgc28geW91IGNhbiBtb3JlIGVhc2lseVxuICAgICAgLy8gZmluZCB0aGUgc291cmNlIGZvciBhIHdhcm5pbmcgdGhhdCBhcHBlYXJzIGluIHRoZSBjb25zb2xlIGJ5XG4gICAgICAvLyBlbmFibGluZyBcInBhdXNlIG9uIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIEphdmFTY3JpcHQgZGVidWdnZXIuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOCk7XG59XG4vKipcbiAqIEZvciBicm93c2VyLWJhc2VkIGhpc3Rvcmllcywgd2UgY29tYmluZSB0aGUgc3RhdGUgYW5kIGtleSBpbnRvIGFuIG9iamVjdFxuICovXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb24sIGluZGV4KSB7XG4gIHJldHVybiB7XG4gICAgdXNyOiBsb2NhdGlvbi5zdGF0ZSxcbiAgICBrZXk6IGxvY2F0aW9uLmtleSxcbiAgICBpZHg6IGluZGV4XG4gIH07XG59XG4vKipcbiAqIENyZWF0ZXMgYSBMb2NhdGlvbiBvYmplY3Qgd2l0aCBhIHVuaXF1ZSBrZXkgZnJvbSB0aGUgZ2l2ZW4gUGF0aFxuICovXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihjdXJyZW50LCB0bywgc3RhdGUsIGtleSkge1xuICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgIHN0YXRlID0gbnVsbDtcbiAgfVxuICBsZXQgbG9jYXRpb24gPSBfZXh0ZW5kcyh7XG4gICAgcGF0aG5hbWU6IHR5cGVvZiBjdXJyZW50ID09PSBcInN0cmluZ1wiID8gY3VycmVudCA6IGN1cnJlbnQucGF0aG5hbWUsXG4gICAgc2VhcmNoOiBcIlwiLFxuICAgIGhhc2g6IFwiXCJcbiAgfSwgdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvLCB7XG4gICAgc3RhdGUsXG4gICAgLy8gVE9ETzogVGhpcyBjb3VsZCBiZSBjbGVhbmVkIHVwLiAgcHVzaC9yZXBsYWNlIHNob3VsZCBwcm9iYWJseSBqdXN0IHRha2VcbiAgICAvLyBmdWxsIExvY2F0aW9ucyBub3cgYW5kIGF2b2lkIHRoZSBuZWVkIHRvIHJ1biB0aHJvdWdoIHRoaXMgZmxvdyBhdCBhbGxcbiAgICAvLyBCdXQgdGhhdCdzIGEgcHJldHR5IGJpZyByZWZhY3RvciB0byB0aGUgY3VycmVudCB0ZXN0IHN1aXRlIHNvIGdvaW5nIHRvXG4gICAgLy8ga2VlcCBhcyBpcyBmb3IgdGhlIHRpbWUgYmVpbmcgYW5kIGp1c3QgbGV0IGFueSBpbmNvbWluZyBrZXlzIHRha2UgcHJlY2VkZW5jZVxuICAgIGtleTogdG8gJiYgdG8ua2V5IHx8IGtleSB8fCBjcmVhdGVLZXkoKVxuICB9KTtcbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgc3RyaW5nIFVSTCBwYXRoIGZyb20gdGhlIGdpdmVuIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgoX3JlZikge1xuICBsZXQge1xuICAgIHBhdGhuYW1lID0gXCIvXCIsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIlxuICB9ID0gX3JlZjtcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09IFwiP1wiKSBwYXRobmFtZSArPSBzZWFyY2guY2hhckF0KDApID09PSBcIj9cIiA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSBcIiNcIikgcGF0aG5hbWUgKz0gaGFzaC5jaGFyQXQoMCkgPT09IFwiI1wiID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGhuYW1lO1xufVxuLyoqXG4gKiBQYXJzZXMgYSBzdHJpbmcgVVJMIHBhdGggaW50byBpdHMgc2VwYXJhdGUgcGF0aG5hbWUsIHNlYXJjaCwgYW5kIGhhc2ggY29tcG9uZW50cy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgbGV0IHBhcnNlZFBhdGggPSB7fTtcbiAgaWYgKHBhdGgpIHtcbiAgICBsZXQgaGFzaEluZGV4ID0gcGF0aC5pbmRleE9mKFwiI1wiKTtcbiAgICBpZiAoaGFzaEluZGV4ID49IDApIHtcbiAgICAgIHBhcnNlZFBhdGguaGFzaCA9IHBhdGguc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgICB9XG4gICAgbGV0IHNlYXJjaEluZGV4ID0gcGF0aC5pbmRleE9mKFwiP1wiKTtcbiAgICBpZiAoc2VhcmNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5zZWFyY2ggPSBwYXRoLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICAgIH1cbiAgICBpZiAocGF0aCkge1xuICAgICAgcGFyc2VkUGF0aC5wYXRobmFtZSA9IHBhdGg7XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXJzZWRQYXRoO1xufVxuZnVuY3Rpb24gZ2V0VXJsQmFzZWRIaXN0b3J5KGdldExvY2F0aW9uLCBjcmVhdGVIcmVmLCB2YWxpZGF0ZUxvY2F0aW9uLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgbGV0IHtcbiAgICB3aW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldyxcbiAgICB2NUNvbXBhdCA9IGZhbHNlXG4gIH0gPSBvcHRpb25zO1xuICBsZXQgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICBsZXQgYWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgbGV0IGxpc3RlbmVyID0gbnVsbDtcbiAgbGV0IGluZGV4ID0gZ2V0SW5kZXgoKTtcbiAgLy8gSW5kZXggc2hvdWxkIG9ubHkgYmUgbnVsbCB3aGVuIHdlIGluaXRpYWxpemUuIElmIG5vdCwgaXQncyBiZWNhdXNlIHRoZVxuICAvLyB1c2VyIGNhbGxlZCBoaXN0b3J5LnB1c2hTdGF0ZSBvciBoaXN0b3J5LnJlcGxhY2VTdGF0ZSBkaXJlY3RseSwgaW4gd2hpY2hcbiAgLy8gY2FzZSB3ZSBzaG91bGQgbG9nIGEgd2FybmluZyBhcyBpdCB3aWxsIHJlc3VsdCBpbiBidWdzLlxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIGluZGV4ID0gMDtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShfZXh0ZW5kcyh7fSwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSwge1xuICAgICAgaWR4OiBpbmRleFxuICAgIH0pLCBcIlwiKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRJbmRleCgpIHtcbiAgICBsZXQgc3RhdGUgPSBnbG9iYWxIaXN0b3J5LnN0YXRlIHx8IHtcbiAgICAgIGlkeDogbnVsbFxuICAgIH07XG4gICAgcmV0dXJuIHN0YXRlLmlkeDtcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVQb3AoKSB7XG4gICAgYWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgICBsZXQgbmV4dEluZGV4ID0gZ2V0SW5kZXgoKTtcbiAgICBsZXQgZGVsdGEgPSBuZXh0SW5kZXggPT0gbnVsbCA/IG51bGwgOiBuZXh0SW5kZXggLSBpbmRleDtcbiAgICBpbmRleCA9IG5leHRJbmRleDtcbiAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgZGVsdGFcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBwdXNoKHRvLCBzdGF0ZSkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGhpc3RvcnkubG9jYXRpb24sIHRvLCBzdGF0ZSk7XG4gICAgaWYgKHZhbGlkYXRlTG9jYXRpb24pIHZhbGlkYXRlTG9jYXRpb24obG9jYXRpb24sIHRvKTtcbiAgICBpbmRleCA9IGdldEluZGV4KCkgKyAxO1xuICAgIGxldCBoaXN0b3J5U3RhdGUgPSBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb24sIGluZGV4KTtcbiAgICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAvLyB0cnkuLi5jYXRjaCBiZWNhdXNlIGlPUyBsaW1pdHMgdXMgdG8gMTAwIHB1c2hTdGF0ZSBjYWxscyA6L1xuICAgIHRyeSB7XG4gICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZShoaXN0b3J5U3RhdGUsIFwiXCIsIHVybCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIElmIHRoZSBleGNlcHRpb24gaXMgYmVjYXVzZSBgc3RhdGVgIGNhbid0IGJlIHNlcmlhbGl6ZWQsIGxldCB0aGF0IHRocm93XG4gICAgICAvLyBvdXR3YXJkcyBqdXN0IGxpa2UgYSByZXBsYWNlIGNhbGwgd291bGQgc28gdGhlIGRldiBrbm93cyB0aGUgY2F1c2VcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL25hdi1oaXN0b3J5LWFwaXMuaHRtbCNzaGFyZWQtaGlzdG9yeS1wdXNoL3JlcGxhY2Utc3RhdGUtc3RlcHNcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N0cnVjdHVyZWQtZGF0YS5odG1sI3N0cnVjdHVyZWRzZXJpYWxpemVpbnRlcm5hbFxuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRE9NRXhjZXB0aW9uICYmIGVycm9yLm5hbWUgPT09IFwiRGF0YUNsb25lRXJyb3JcIikge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICAgIC8vIFRoZXkgYXJlIGdvaW5nIHRvIGxvc2Ugc3RhdGUgaGVyZSwgYnV0IHRoZXJlIGlzIG5vIHJlYWxcbiAgICAgIC8vIHdheSB0byB3YXJuIHRoZW0gYWJvdXQgaXQgc2luY2UgdGhlIHBhZ2Ugd2lsbCByZWZyZXNoLi4uXG4gICAgICB3aW5kb3cubG9jYXRpb24uYXNzaWduKHVybCk7XG4gICAgfVxuICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoe1xuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICBkZWx0YTogMVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgYWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oaGlzdG9yeS5sb2NhdGlvbiwgdG8sIHN0YXRlKTtcbiAgICBpZiAodmFsaWRhdGVMb2NhdGlvbikgdmFsaWRhdGVMb2NhdGlvbihsb2NhdGlvbiwgdG8pO1xuICAgIGluZGV4ID0gZ2V0SW5kZXgoKTtcbiAgICBsZXQgaGlzdG9yeVN0YXRlID0gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uLCBpbmRleCk7XG4gICAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoaGlzdG9yeVN0YXRlLCBcIlwiLCB1cmwpO1xuICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoe1xuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICBkZWx0YTogMFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZVVSTCh0bykge1xuICAgIC8vIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gaXMgXCJudWxsXCIgKHRoZSBsaXRlcmFsIHN0cmluZyB2YWx1ZSkgaW4gRmlyZWZveFxuICAgIC8vIHVuZGVyIGNlcnRhaW4gY29uZGl0aW9ucywgbm90YWJseSB3aGVuIHNlcnZpbmcgZnJvbSBhIGxvY2FsIEhUTUwgZmlsZVxuICAgIC8vIFNlZSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04NzgyOTdcbiAgICBsZXQgYmFzZSA9IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gIT09IFwibnVsbFwiID8gd2luZG93LmxvY2F0aW9uLm9yaWdpbiA6IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgIGxldCBocmVmID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgICBpbnZhcmlhbnQoYmFzZSwgXCJObyB3aW5kb3cubG9jYXRpb24uKG9yaWdpbnxocmVmKSBhdmFpbGFibGUgdG8gY3JlYXRlIFVSTCBmb3IgaHJlZjogXCIgKyBocmVmKTtcbiAgICByZXR1cm4gbmV3IFVSTChocmVmLCBiYXNlKTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IHtcbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBnZXRMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpO1xuICAgIH0sXG4gICAgbGlzdGVuKGZuKSB7XG4gICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQSBoaXN0b3J5IG9ubHkgYWNjZXB0cyBvbmUgYWN0aXZlIGxpc3RlbmVyXCIpO1xuICAgICAgfVxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudFR5cGUsIGhhbmRsZVBvcCk7XG4gICAgICBsaXN0ZW5lciA9IGZuO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudFR5cGUsIGhhbmRsZVBvcCk7XG4gICAgICAgIGxpc3RlbmVyID0gbnVsbDtcbiAgICAgIH07XG4gICAgfSxcbiAgICBjcmVhdGVIcmVmKHRvKSB7XG4gICAgICByZXR1cm4gY3JlYXRlSHJlZih3aW5kb3csIHRvKTtcbiAgICB9LFxuICAgIGNyZWF0ZVVSTCxcbiAgICBlbmNvZGVMb2NhdGlvbih0bykge1xuICAgICAgLy8gRW5jb2RlIGEgTG9jYXRpb24gdGhlIHNhbWUgd2F5IHdpbmRvdy5sb2NhdGlvbiB3b3VsZFxuICAgICAgbGV0IHVybCA9IGNyZWF0ZVVSTCh0byk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZTogdXJsLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2g6IHVybC5zZWFyY2gsXG4gICAgICAgIGhhc2g6IHVybC5oYXNoXG4gICAgICB9O1xuICAgIH0sXG4gICAgcHVzaCxcbiAgICByZXBsYWNlLFxuICAgIGdvKG4pIHtcbiAgICAgIHJldHVybiBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG4vLyNlbmRyZWdpb25cblxudmFyIFJlc3VsdFR5cGU7XG4oZnVuY3Rpb24gKFJlc3VsdFR5cGUpIHtcbiAgUmVzdWx0VHlwZVtcImRhdGFcIl0gPSBcImRhdGFcIjtcbiAgUmVzdWx0VHlwZVtcImRlZmVycmVkXCJdID0gXCJkZWZlcnJlZFwiO1xuICBSZXN1bHRUeXBlW1wicmVkaXJlY3RcIl0gPSBcInJlZGlyZWN0XCI7XG4gIFJlc3VsdFR5cGVbXCJlcnJvclwiXSA9IFwiZXJyb3JcIjtcbn0pKFJlc3VsdFR5cGUgfHwgKFJlc3VsdFR5cGUgPSB7fSkpO1xuY29uc3QgaW1tdXRhYmxlUm91dGVLZXlzID0gbmV3IFNldChbXCJsYXp5XCIsIFwiY2FzZVNlbnNpdGl2ZVwiLCBcInBhdGhcIiwgXCJpZFwiLCBcImluZGV4XCIsIFwiY2hpbGRyZW5cIl0pO1xuZnVuY3Rpb24gaXNJbmRleFJvdXRlKHJvdXRlKSB7XG4gIHJldHVybiByb3V0ZS5pbmRleCA9PT0gdHJ1ZTtcbn1cbi8vIFdhbGsgdGhlIHJvdXRlIHRyZWUgZ2VuZXJhdGluZyB1bmlxdWUgSURzIHdoZXJlIG5lY2Vzc2FyeSwgc28gd2UgYXJlIHdvcmtpbmdcbi8vIHNvbGVseSB3aXRoIEFnbm9zdGljRGF0YVJvdXRlT2JqZWN0J3Mgd2l0aGluIHRoZSBSb3V0ZXJcbmZ1bmN0aW9uIGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGVzLCBtYXBSb3V0ZVByb3BlcnRpZXMsIHBhcmVudFBhdGgsIG1hbmlmZXN0KSB7XG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gW107XG4gIH1cbiAgaWYgKG1hbmlmZXN0ID09PSB2b2lkIDApIHtcbiAgICBtYW5pZmVzdCA9IHt9O1xuICB9XG4gIHJldHVybiByb3V0ZXMubWFwKChyb3V0ZSwgaW5kZXgpID0+IHtcbiAgICBsZXQgdHJlZVBhdGggPSBbLi4ucGFyZW50UGF0aCwgaW5kZXhdO1xuICAgIGxldCBpZCA9IHR5cGVvZiByb3V0ZS5pZCA9PT0gXCJzdHJpbmdcIiA/IHJvdXRlLmlkIDogdHJlZVBhdGguam9pbihcIi1cIik7XG4gICAgaW52YXJpYW50KHJvdXRlLmluZGV4ICE9PSB0cnVlIHx8ICFyb3V0ZS5jaGlsZHJlbiwgXCJDYW5ub3Qgc3BlY2lmeSBjaGlsZHJlbiBvbiBhbiBpbmRleCByb3V0ZVwiKTtcbiAgICBpbnZhcmlhbnQoIW1hbmlmZXN0W2lkXSwgXCJGb3VuZCBhIHJvdXRlIGlkIGNvbGxpc2lvbiBvbiBpZCBcXFwiXCIgKyBpZCArIFwiXFxcIi4gIFJvdXRlIFwiICsgXCJpZCdzIG11c3QgYmUgZ2xvYmFsbHkgdW5pcXVlIHdpdGhpbiBEYXRhIFJvdXRlciB1c2FnZXNcIik7XG4gICAgaWYgKGlzSW5kZXhSb3V0ZShyb3V0ZSkpIHtcbiAgICAgIGxldCBpbmRleFJvdXRlID0gX2V4dGVuZHMoe30sIHJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGUpLCB7XG4gICAgICAgIGlkXG4gICAgICB9KTtcbiAgICAgIG1hbmlmZXN0W2lkXSA9IGluZGV4Um91dGU7XG4gICAgICByZXR1cm4gaW5kZXhSb3V0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHBhdGhPckxheW91dFJvdXRlID0gX2V4dGVuZHMoe30sIHJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGUpLCB7XG4gICAgICAgIGlkLFxuICAgICAgICBjaGlsZHJlbjogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIG1hbmlmZXN0W2lkXSA9IHBhdGhPckxheW91dFJvdXRlO1xuICAgICAgaWYgKHJvdXRlLmNoaWxkcmVuKSB7XG4gICAgICAgIHBhdGhPckxheW91dFJvdXRlLmNoaWxkcmVuID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgbWFwUm91dGVQcm9wZXJ0aWVzLCB0cmVlUGF0aCwgbWFuaWZlc3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhdGhPckxheW91dFJvdXRlO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIE1hdGNoZXMgdGhlIGdpdmVuIHJvdXRlcyB0byBhIGxvY2F0aW9uIGFuZCByZXR1cm5zIHRoZSBtYXRjaCBkYXRhLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvbWF0Y2gtcm91dGVzXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUm91dGVzKHJvdXRlcywgbG9jYXRpb25BcmcsIGJhc2VuYW1lKSB7XG4gIGlmIChiYXNlbmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgYmFzZW5hbWUgPSBcIi9cIjtcbiAgfVxuICBsZXQgbG9jYXRpb24gPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gIGxldCBwYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCIsIGJhc2VuYW1lKTtcbiAgaWYgKHBhdGhuYW1lID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBsZXQgYnJhbmNoZXMgPSBmbGF0dGVuUm91dGVzKHJvdXRlcyk7XG4gIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzKTtcbiAgbGV0IG1hdGNoZXMgPSBudWxsO1xuICBmb3IgKGxldCBpID0gMDsgbWF0Y2hlcyA9PSBudWxsICYmIGkgPCBicmFuY2hlcy5sZW5ndGg7ICsraSkge1xuICAgIG1hdGNoZXMgPSBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaGVzW2ldLFxuICAgIC8vIEluY29taW5nIHBhdGhuYW1lcyBhcmUgZ2VuZXJhbGx5IGVuY29kZWQgZnJvbSBlaXRoZXIgd2luZG93LmxvY2F0aW9uXG4gICAgLy8gb3IgZnJvbSByb3V0ZXIubmF2aWdhdGUsIGJ1dCB3ZSB3YW50IHRvIG1hdGNoIGFnYWluc3QgdGhlIHVuZW5jb2RlZFxuICAgIC8vIHBhdGhzIGluIHRoZSByb3V0ZSBkZWZpbml0aW9ucy4gIE1lbW9yeSByb3V0ZXIgbG9jYXRpb25zIHdvbid0IGJlXG4gICAgLy8gZW5jb2RlZCBoZXJlIGJ1dCB0aGVyZSBhbHNvIHNob3VsZG4ndCBiZSBhbnl0aGluZyB0byBkZWNvZGUgc28gdGhpc1xuICAgIC8vIHNob3VsZCBiZSBhIHNhZmUgb3BlcmF0aW9uLiAgVGhpcyBhdm9pZHMgbmVlZGluZyBtYXRjaFJvdXRlcyB0byBiZVxuICAgIC8vIGhpc3RvcnktYXdhcmUuXG4gICAgc2FmZWx5RGVjb2RlVVJJKHBhdGhuYW1lKSk7XG4gIH1cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG5mdW5jdGlvbiBjb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaChtYXRjaCwgbG9hZGVyRGF0YSkge1xuICBsZXQge1xuICAgIHJvdXRlLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtc1xuICB9ID0gbWF0Y2g7XG4gIHJldHVybiB7XG4gICAgaWQ6IHJvdXRlLmlkLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtcyxcbiAgICBkYXRhOiBsb2FkZXJEYXRhW3JvdXRlLmlkXSxcbiAgICBoYW5kbGU6IHJvdXRlLmhhbmRsZVxuICB9O1xufVxuZnVuY3Rpb24gZmxhdHRlblJvdXRlcyhyb3V0ZXMsIGJyYW5jaGVzLCBwYXJlbnRzTWV0YSwgcGFyZW50UGF0aCkge1xuICBpZiAoYnJhbmNoZXMgPT09IHZvaWQgMCkge1xuICAgIGJyYW5jaGVzID0gW107XG4gIH1cbiAgaWYgKHBhcmVudHNNZXRhID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRzTWV0YSA9IFtdO1xuICB9XG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gXCJcIjtcbiAgfVxuICBsZXQgZmxhdHRlblJvdXRlID0gKHJvdXRlLCBpbmRleCwgcmVsYXRpdmVQYXRoKSA9PiB7XG4gICAgbGV0IG1ldGEgPSB7XG4gICAgICByZWxhdGl2ZVBhdGg6IHJlbGF0aXZlUGF0aCA9PT0gdW5kZWZpbmVkID8gcm91dGUucGF0aCB8fCBcIlwiIDogcmVsYXRpdmVQYXRoLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogcm91dGUuY2FzZVNlbnNpdGl2ZSA9PT0gdHJ1ZSxcbiAgICAgIGNoaWxkcmVuSW5kZXg6IGluZGV4LFxuICAgICAgcm91dGVcbiAgICB9O1xuICAgIGlmIChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgaW52YXJpYW50KG1ldGEucmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgocGFyZW50UGF0aCksIFwiQWJzb2x1dGUgcm91dGUgcGF0aCBcXFwiXCIgKyBtZXRhLnJlbGF0aXZlUGF0aCArIFwiXFxcIiBuZXN0ZWQgdW5kZXIgcGF0aCBcIiArIChcIlxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCIgaXMgbm90IHZhbGlkLiBBbiBhYnNvbHV0ZSBjaGlsZCByb3V0ZSBwYXRoIFwiKSArIFwibXVzdCBzdGFydCB3aXRoIHRoZSBjb21iaW5lZCBwYXRoIG9mIGFsbCBpdHMgcGFyZW50IHJvdXRlcy5cIik7XG4gICAgICBtZXRhLnJlbGF0aXZlUGF0aCA9IG1ldGEucmVsYXRpdmVQYXRoLnNsaWNlKHBhcmVudFBhdGgubGVuZ3RoKTtcbiAgICB9XG4gICAgbGV0IHBhdGggPSBqb2luUGF0aHMoW3BhcmVudFBhdGgsIG1ldGEucmVsYXRpdmVQYXRoXSk7XG4gICAgbGV0IHJvdXRlc01ldGEgPSBwYXJlbnRzTWV0YS5jb25jYXQobWV0YSk7XG4gICAgLy8gQWRkIHRoZSBjaGlsZHJlbiBiZWZvcmUgYWRkaW5nIHRoaXMgcm91dGUgdG8gdGhlIGFycmF5LCBzbyB3ZSB0cmF2ZXJzZSB0aGVcbiAgICAvLyByb3V0ZSB0cmVlIGRlcHRoLWZpcnN0IGFuZCBjaGlsZCByb3V0ZXMgYXBwZWFyIGJlZm9yZSB0aGVpciBwYXJlbnRzIGluXG4gICAgLy8gdGhlIFwiZmxhdHRlbmVkXCIgdmVyc2lvbi5cbiAgICBpZiAocm91dGUuY2hpbGRyZW4gJiYgcm91dGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgLy8gT3VyIHR5cGVzIGtub3cgYmV0dGVyLCBidXQgcnVudGltZSBKUyBtYXkgbm90IVxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgcm91dGUuaW5kZXggIT09IHRydWUsIFwiSW5kZXggcm91dGVzIG11c3Qgbm90IGhhdmUgY2hpbGQgcm91dGVzLiBQbGVhc2UgcmVtb3ZlIFwiICsgKFwiYWxsIGNoaWxkIHJvdXRlcyBmcm9tIHJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIi5cIikpO1xuICAgICAgZmxhdHRlblJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgYnJhbmNoZXMsIHJvdXRlc01ldGEsIHBhdGgpO1xuICAgIH1cbiAgICAvLyBSb3V0ZXMgd2l0aG91dCBhIHBhdGggc2hvdWxkbid0IGV2ZXIgbWF0Y2ggYnkgdGhlbXNlbHZlcyB1bmxlc3MgdGhleSBhcmVcbiAgICAvLyBpbmRleCByb3V0ZXMsIHNvIGRvbid0IGFkZCB0aGVtIHRvIHRoZSBsaXN0IG9mIHBvc3NpYmxlIGJyYW5jaGVzLlxuICAgIGlmIChyb3V0ZS5wYXRoID09IG51bGwgJiYgIXJvdXRlLmluZGV4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGJyYW5jaGVzLnB1c2goe1xuICAgICAgcGF0aCxcbiAgICAgIHNjb3JlOiBjb21wdXRlU2NvcmUocGF0aCwgcm91dGUuaW5kZXgpLFxuICAgICAgcm91dGVzTWV0YVxuICAgIH0pO1xuICB9O1xuICByb3V0ZXMuZm9yRWFjaCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgdmFyIF9yb3V0ZSRwYXRoO1xuICAgIC8vIGNvYXJzZS1ncmFpbiBjaGVjayBmb3Igb3B0aW9uYWwgcGFyYW1zXG4gICAgaWYgKHJvdXRlLnBhdGggPT09IFwiXCIgfHwgISgoX3JvdXRlJHBhdGggPSByb3V0ZS5wYXRoKSAhPSBudWxsICYmIF9yb3V0ZSRwYXRoLmluY2x1ZGVzKFwiP1wiKSkpIHtcbiAgICAgIGZsYXR0ZW5Sb3V0ZShyb3V0ZSwgaW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBleHBsb2RlZCBvZiBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhyb3V0ZS5wYXRoKSkge1xuICAgICAgICBmbGF0dGVuUm91dGUocm91dGUsIGluZGV4LCBleHBsb2RlZCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGJyYW5jaGVzO1xufVxuLyoqXG4gKiBDb21wdXRlcyBhbGwgY29tYmluYXRpb25zIG9mIG9wdGlvbmFsIHBhdGggc2VnbWVudHMgZm9yIGEgZ2l2ZW4gcGF0aCxcbiAqIGV4Y2x1ZGluZyBjb21iaW5hdGlvbnMgdGhhdCBhcmUgYW1iaWd1b3VzIGFuZCBvZiBsb3dlciBwcmlvcml0eS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgYC9vbmUvOnR3bz8vdGhyZWUvOmZvdXI/LzpmaXZlP2AgZXhwbG9kZXMgdG86XG4gKiAtIGAvb25lL3RocmVlYFxuICogLSBgL29uZS86dHdvL3RocmVlYFxuICogLSBgL29uZS90aHJlZS86Zm91cmBcbiAqIC0gYC9vbmUvdGhyZWUvOmZpdmVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZvdXJgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZpdmVgXG4gKiAtIGAvb25lL3RocmVlLzpmb3VyLzpmaXZlYFxuICogLSBgL29uZS86dHdvL3RocmVlLzpmb3VyLzpmaXZlYFxuICovXG5mdW5jdGlvbiBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhwYXRoKSB7XG4gIGxldCBzZWdtZW50cyA9IHBhdGguc3BsaXQoXCIvXCIpO1xuICBpZiAoc2VnbWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gW107XG4gIGxldCBbZmlyc3QsIC4uLnJlc3RdID0gc2VnbWVudHM7XG4gIC8vIE9wdGlvbmFsIHBhdGggc2VnbWVudHMgYXJlIGRlbm90ZWQgYnkgYSB0cmFpbGluZyBgP2BcbiAgbGV0IGlzT3B0aW9uYWwgPSBmaXJzdC5lbmRzV2l0aChcIj9cIik7XG4gIC8vIENvbXB1dGUgdGhlIGNvcnJlc3BvbmRpbmcgcmVxdWlyZWQgc2VnbWVudDogYGZvbz9gIC0+IGBmb29gXG4gIGxldCByZXF1aXJlZCA9IGZpcnN0LnJlcGxhY2UoL1xcPyQvLCBcIlwiKTtcbiAgaWYgKHJlc3QubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSW50ZXByZXQgZW1wdHkgc3RyaW5nIGFzIG9taXR0aW5nIGFuIG9wdGlvbmFsIHNlZ21lbnRcbiAgICAvLyBgW1wib25lXCIsIFwiXCIsIFwidGhyZWVcIl1gIGNvcnJlc3BvbmRzIHRvIG9taXR0aW5nIGA6dHdvYCBmcm9tIGAvb25lLzp0d28/L3RocmVlYCAtPiBgL29uZS90aHJlZWBcbiAgICByZXR1cm4gaXNPcHRpb25hbCA/IFtyZXF1aXJlZCwgXCJcIl0gOiBbcmVxdWlyZWRdO1xuICB9XG4gIGxldCByZXN0RXhwbG9kZWQgPSBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhyZXN0LmpvaW4oXCIvXCIpKTtcbiAgbGV0IHJlc3VsdCA9IFtdO1xuICAvLyBBbGwgY2hpbGQgcGF0aHMgd2l0aCB0aGUgcHJlZml4LiAgRG8gdGhpcyBmb3IgYWxsIGNoaWxkcmVuIGJlZm9yZSB0aGVcbiAgLy8gb3B0aW9uYWwgdmVyc2lvbiBmb3IgYWxsIGNoaWxkcmVuLCBzbyB3ZSBnZXQgY29uc2lzdGVudCBvcmRlcmluZyB3aGVyZSB0aGVcbiAgLy8gcGFyZW50IG9wdGlvbmFsIGFzcGVjdCBpcyBwcmVmZXJyZWQgYXMgcmVxdWlyZWQuICBPdGhlcndpc2UsIHdlIGNhbiBnZXRcbiAgLy8gY2hpbGQgc2VjdGlvbnMgaW50ZXJzcGVyc2VkIHdoZXJlIGRlZXBlciBvcHRpb25hbCBzZWdtZW50cyBhcmUgaGlnaGVyIHRoYW5cbiAgLy8gcGFyZW50IG9wdGlvbmFsIHNlZ21lbnRzLCB3aGVyZSBmb3IgZXhhbXBsZSwgLzp0d28gd291bGQgZXhwbG9kZSBfZWFybGllcl9cbiAgLy8gdGhlbiAvOm9uZS4gIEJ5IGFsd2F5cyBpbmNsdWRpbmcgdGhlIHBhcmVudCBhcyByZXF1aXJlZCBfZm9yIGFsbCBjaGlsZHJlbl9cbiAgLy8gZmlyc3QsIHdlIGF2b2lkIHRoaXMgaXNzdWVcbiAgcmVzdWx0LnB1c2goLi4ucmVzdEV4cGxvZGVkLm1hcChzdWJwYXRoID0+IHN1YnBhdGggPT09IFwiXCIgPyByZXF1aXJlZCA6IFtyZXF1aXJlZCwgc3VicGF0aF0uam9pbihcIi9cIikpKTtcbiAgLy8gVGhlbiwgaWYgdGhpcyBpcyBhbiBvcHRpb25hbCB2YWx1ZSwgYWRkIGFsbCBjaGlsZCB2ZXJzaW9ucyB3aXRob3V0XG4gIGlmIChpc09wdGlvbmFsKSB7XG4gICAgcmVzdWx0LnB1c2goLi4ucmVzdEV4cGxvZGVkKTtcbiAgfVxuICAvLyBmb3IgYWJzb2x1dGUgcGF0aHMsIGVuc3VyZSBgL2AgaW5zdGVhZCBvZiBlbXB0eSBzZWdtZW50XG4gIHJldHVybiByZXN1bHQubWFwKGV4cGxvZGVkID0+IHBhdGguc3RhcnRzV2l0aChcIi9cIikgJiYgZXhwbG9kZWQgPT09IFwiXCIgPyBcIi9cIiA6IGV4cGxvZGVkKTtcbn1cbmZ1bmN0aW9uIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzKSB7XG4gIGJyYW5jaGVzLnNvcnQoKGEsIGIpID0+IGEuc2NvcmUgIT09IGIuc2NvcmUgPyBiLnNjb3JlIC0gYS5zY29yZSAvLyBIaWdoZXIgc2NvcmUgZmlyc3RcbiAgOiBjb21wYXJlSW5kZXhlcyhhLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSwgYi5yb3V0ZXNNZXRhLm1hcChtZXRhID0+IG1ldGEuY2hpbGRyZW5JbmRleCkpKTtcbn1cbmNvbnN0IHBhcmFtUmUgPSAvXjpcXHcrJC87XG5jb25zdCBkeW5hbWljU2VnbWVudFZhbHVlID0gMztcbmNvbnN0IGluZGV4Um91dGVWYWx1ZSA9IDI7XG5jb25zdCBlbXB0eVNlZ21lbnRWYWx1ZSA9IDE7XG5jb25zdCBzdGF0aWNTZWdtZW50VmFsdWUgPSAxMDtcbmNvbnN0IHNwbGF0UGVuYWx0eSA9IC0yO1xuY29uc3QgaXNTcGxhdCA9IHMgPT4gcyA9PT0gXCIqXCI7XG5mdW5jdGlvbiBjb21wdXRlU2NvcmUocGF0aCwgaW5kZXgpIHtcbiAgbGV0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIGxldCBpbml0aWFsU2NvcmUgPSBzZWdtZW50cy5sZW5ndGg7XG4gIGlmIChzZWdtZW50cy5zb21lKGlzU3BsYXQpKSB7XG4gICAgaW5pdGlhbFNjb3JlICs9IHNwbGF0UGVuYWx0eTtcbiAgfVxuICBpZiAoaW5kZXgpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gaW5kZXhSb3V0ZVZhbHVlO1xuICB9XG4gIHJldHVybiBzZWdtZW50cy5maWx0ZXIocyA9PiAhaXNTcGxhdChzKSkucmVkdWNlKChzY29yZSwgc2VnbWVudCkgPT4gc2NvcmUgKyAocGFyYW1SZS50ZXN0KHNlZ21lbnQpID8gZHluYW1pY1NlZ21lbnRWYWx1ZSA6IHNlZ21lbnQgPT09IFwiXCIgPyBlbXB0eVNlZ21lbnRWYWx1ZSA6IHN0YXRpY1NlZ21lbnRWYWx1ZSksIGluaXRpYWxTY29yZSk7XG59XG5mdW5jdGlvbiBjb21wYXJlSW5kZXhlcyhhLCBiKSB7XG4gIGxldCBzaWJsaW5ncyA9IGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLnNsaWNlKDAsIC0xKS5ldmVyeSgobiwgaSkgPT4gbiA9PT0gYltpXSk7XG4gIHJldHVybiBzaWJsaW5ncyA/XG4gIC8vIElmIHR3byByb3V0ZXMgYXJlIHNpYmxpbmdzLCB3ZSBzaG91bGQgdHJ5IHRvIG1hdGNoIHRoZSBlYXJsaWVyIHNpYmxpbmdcbiAgLy8gZmlyc3QuIFRoaXMgYWxsb3dzIHBlb3BsZSB0byBoYXZlIGZpbmUtZ3JhaW5lZCBjb250cm9sIG92ZXIgdGhlIG1hdGNoaW5nXG4gIC8vIGJlaGF2aW9yIGJ5IHNpbXBseSBwdXR0aW5nIHJvdXRlcyB3aXRoIGlkZW50aWNhbCBwYXRocyBpbiB0aGUgb3JkZXIgdGhleVxuICAvLyB3YW50IHRoZW0gdHJpZWQuXG4gIGFbYS5sZW5ndGggLSAxXSAtIGJbYi5sZW5ndGggLSAxXSA6XG4gIC8vIE90aGVyd2lzZSwgaXQgZG9lc24ndCByZWFsbHkgbWFrZSBzZW5zZSB0byByYW5rIG5vbi1zaWJsaW5ncyBieSBpbmRleCxcbiAgLy8gc28gdGhleSBzb3J0IGVxdWFsbHkuXG4gIDA7XG59XG5mdW5jdGlvbiBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaCwgcGF0aG5hbWUpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXNNZXRhXG4gIH0gPSBicmFuY2g7XG4gIGxldCBtYXRjaGVkUGFyYW1zID0ge307XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBcIi9cIjtcbiAgbGV0IG1hdGNoZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3V0ZXNNZXRhLmxlbmd0aDsgKytpKSB7XG4gICAgbGV0IG1ldGEgPSByb3V0ZXNNZXRhW2ldO1xuICAgIGxldCBlbmQgPSBpID09PSByb3V0ZXNNZXRhLmxlbmd0aCAtIDE7XG4gICAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID0gbWF0Y2hlZFBhdGhuYW1lID09PSBcIi9cIiA/IHBhdGhuYW1lIDogcGF0aG5hbWUuc2xpY2UobWF0Y2hlZFBhdGhuYW1lLmxlbmd0aCkgfHwgXCIvXCI7XG4gICAgbGV0IG1hdGNoID0gbWF0Y2hQYXRoKHtcbiAgICAgIHBhdGg6IG1ldGEucmVsYXRpdmVQYXRoLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogbWV0YS5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZW5kXG4gICAgfSwgcmVtYWluaW5nUGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIE9iamVjdC5hc3NpZ24obWF0Y2hlZFBhcmFtcywgbWF0Y2gucGFyYW1zKTtcbiAgICBsZXQgcm91dGUgPSBtZXRhLnJvdXRlO1xuICAgIG1hdGNoZXMucHVzaCh7XG4gICAgICAvLyBUT0RPOiBDYW4gdGhpcyBhcyBiZSBhdm9pZGVkP1xuICAgICAgcGFyYW1zOiBtYXRjaGVkUGFyYW1zLFxuICAgICAgcGF0aG5hbWU6IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZV0pLFxuICAgICAgcGF0aG5hbWVCYXNlOiBub3JtYWxpemVQYXRobmFtZShqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSkpLFxuICAgICAgcm91dGVcbiAgICB9KTtcbiAgICBpZiAobWF0Y2gucGF0aG5hbWVCYXNlICE9PSBcIi9cIikge1xuICAgICAgbWF0Y2hlZFBhdGhuYW1lID0gam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lQmFzZV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWF0Y2hlcztcbn1cbi8qKlxuICogUmV0dXJucyBhIHBhdGggd2l0aCBwYXJhbXMgaW50ZXJwb2xhdGVkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvZ2VuZXJhdGUtcGF0aFxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgob3JpZ2luYWxQYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyYW1zID0ge307XG4gIH1cbiAgbGV0IHBhdGggPSBvcmlnaW5hbFBhdGg7XG4gIGlmIChwYXRoLmVuZHNXaXRoKFwiKlwiKSAmJiBwYXRoICE9PSBcIipcIiAmJiAhcGF0aC5lbmRzV2l0aChcIi8qXCIpKSB7XG4gICAgd2FybmluZyhmYWxzZSwgXCJSb3V0ZSBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdlcmUgXCIgKyAoXCJcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiIGJlY2F1c2UgdGhlIGAqYCBjaGFyYWN0ZXIgbXVzdCBcIikgKyBcImFsd2F5cyBmb2xsb3cgYSBgL2AgaW4gdGhlIHBhdHRlcm4uIFRvIGdldCByaWQgb2YgdGhpcyB3YXJuaW5nLCBcIiArIChcInBsZWFzZSBjaGFuZ2UgdGhlIHJvdXRlIHBhdGggdG8gXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIi5cIikpO1xuICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpO1xuICB9XG4gIC8vIGVuc3VyZSBgL2AgaXMgYWRkZWQgYXQgdGhlIGJlZ2lubmluZyBpZiB0aGUgcGF0aCBpcyBhYnNvbHV0ZVxuICBjb25zdCBwcmVmaXggPSBwYXRoLnN0YXJ0c1dpdGgoXCIvXCIpID8gXCIvXCIgOiBcIlwiO1xuICBjb25zdCBzdHJpbmdpZnkgPSBwID0+IHAgPT0gbnVsbCA/IFwiXCIgOiB0eXBlb2YgcCA9PT0gXCJzdHJpbmdcIiA/IHAgOiBTdHJpbmcocCk7XG4gIGNvbnN0IHNlZ21lbnRzID0gcGF0aC5zcGxpdCgvXFwvKy8pLm1hcCgoc2VnbWVudCwgaW5kZXgsIGFycmF5KSA9PiB7XG4gICAgY29uc3QgaXNMYXN0U2VnbWVudCA9IGluZGV4ID09PSBhcnJheS5sZW5ndGggLSAxO1xuICAgIC8vIG9ubHkgYXBwbHkgdGhlIHNwbGF0IGlmIGl0J3MgdGhlIGxhc3Qgc2VnbWVudFxuICAgIGlmIChpc0xhc3RTZWdtZW50ICYmIHNlZ21lbnQgPT09IFwiKlwiKSB7XG4gICAgICBjb25zdCBzdGFyID0gXCIqXCI7XG4gICAgICAvLyBBcHBseSB0aGUgc3BsYXRcbiAgICAgIHJldHVybiBzdHJpbmdpZnkocGFyYW1zW3N0YXJdKTtcbiAgICB9XG4gICAgY29uc3Qga2V5TWF0Y2ggPSBzZWdtZW50Lm1hdGNoKC9eOihcXHcrKShcXD8/KSQvKTtcbiAgICBpZiAoa2V5TWF0Y2gpIHtcbiAgICAgIGNvbnN0IFssIGtleSwgb3B0aW9uYWxdID0ga2V5TWF0Y2g7XG4gICAgICBsZXQgcGFyYW0gPSBwYXJhbXNba2V5XTtcbiAgICAgIGludmFyaWFudChvcHRpb25hbCA9PT0gXCI/XCIgfHwgcGFyYW0gIT0gbnVsbCwgXCJNaXNzaW5nIFxcXCI6XCIgKyBrZXkgKyBcIlxcXCIgcGFyYW1cIik7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5KHBhcmFtKTtcbiAgICB9XG4gICAgLy8gUmVtb3ZlIGFueSBvcHRpb25hbCBtYXJrZXJzIGZyb20gb3B0aW9uYWwgc3RhdGljIHNlZ21lbnRzXG4gICAgcmV0dXJuIHNlZ21lbnQucmVwbGFjZSgvXFw/JC9nLCBcIlwiKTtcbiAgfSlcbiAgLy8gUmVtb3ZlIGVtcHR5IHNlZ21lbnRzXG4gIC5maWx0ZXIoc2VnbWVudCA9PiAhIXNlZ21lbnQpO1xuICByZXR1cm4gcHJlZml4ICsgc2VnbWVudHMuam9pbihcIi9cIik7XG59XG4vKipcbiAqIFBlcmZvcm1zIHBhdHRlcm4gbWF0Y2hpbmcgb24gYSBVUkwgcGF0aG5hbWUgYW5kIHJldHVybnMgaW5mb3JtYXRpb24gYWJvdXRcbiAqIHRoZSBtYXRjaC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL21hdGNoLXBhdGhcbiAqL1xuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdHRlcm4sIHBhdGhuYW1lKSB7XG4gIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gXCJzdHJpbmdcIikge1xuICAgIHBhdHRlcm4gPSB7XG4gICAgICBwYXRoOiBwYXR0ZXJuLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogZmFsc2UsXG4gICAgICBlbmQ6IHRydWVcbiAgICB9O1xuICB9XG4gIGxldCBbbWF0Y2hlciwgY29tcGlsZWRQYXJhbXNdID0gY29tcGlsZVBhdGgocGF0dGVybi5wYXRoLCBwYXR0ZXJuLmNhc2VTZW5zaXRpdmUsIHBhdHRlcm4uZW5kKTtcbiAgbGV0IG1hdGNoID0gcGF0aG5hbWUubWF0Y2gobWF0Y2hlcik7XG4gIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gbWF0Y2hbMF07XG4gIGxldCBwYXRobmFtZUJhc2UgPSBtYXRjaGVkUGF0aG5hbWUucmVwbGFjZSgvKC4pXFwvKyQvLCBcIiQxXCIpO1xuICBsZXQgY2FwdHVyZUdyb3VwcyA9IG1hdGNoLnNsaWNlKDEpO1xuICBsZXQgcGFyYW1zID0gY29tcGlsZWRQYXJhbXMucmVkdWNlKChtZW1vLCBfcmVmLCBpbmRleCkgPT4ge1xuICAgIGxldCB7XG4gICAgICBwYXJhbU5hbWUsXG4gICAgICBpc09wdGlvbmFsXG4gICAgfSA9IF9yZWY7XG4gICAgLy8gV2UgbmVlZCB0byBjb21wdXRlIHRoZSBwYXRobmFtZUJhc2UgaGVyZSB1c2luZyB0aGUgcmF3IHNwbGF0IHZhbHVlXG4gICAgLy8gaW5zdGVhZCBvZiB1c2luZyBwYXJhbXNbXCIqXCJdIGxhdGVyIGJlY2F1c2UgaXQgd2lsbCBiZSBkZWNvZGVkIHRoZW5cbiAgICBpZiAocGFyYW1OYW1lID09PSBcIipcIikge1xuICAgICAgbGV0IHNwbGF0VmFsdWUgPSBjYXB0dXJlR3JvdXBzW2luZGV4XSB8fCBcIlwiO1xuICAgICAgcGF0aG5hbWVCYXNlID0gbWF0Y2hlZFBhdGhuYW1lLnNsaWNlKDAsIG1hdGNoZWRQYXRobmFtZS5sZW5ndGggLSBzcGxhdFZhbHVlLmxlbmd0aCkucmVwbGFjZSgvKC4pXFwvKyQvLCBcIiQxXCIpO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IGNhcHR1cmVHcm91cHNbaW5kZXhdO1xuICAgIGlmIChpc09wdGlvbmFsICYmICF2YWx1ZSkge1xuICAgICAgbWVtb1twYXJhbU5hbWVdID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBtZW1vW3BhcmFtTmFtZV0gPSBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQodmFsdWUgfHwgXCJcIiwgcGFyYW1OYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW87XG4gIH0sIHt9KTtcbiAgcmV0dXJuIHtcbiAgICBwYXJhbXMsXG4gICAgcGF0aG5hbWU6IG1hdGNoZWRQYXRobmFtZSxcbiAgICBwYXRobmFtZUJhc2UsXG4gICAgcGF0dGVyblxuICB9O1xufVxuZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCwgY2FzZVNlbnNpdGl2ZSwgZW5kKSB7XG4gIGlmIChjYXNlU2Vuc2l0aXZlID09PSB2b2lkIDApIHtcbiAgICBjYXNlU2Vuc2l0aXZlID0gZmFsc2U7XG4gIH1cbiAgaWYgKGVuZCA9PT0gdm9pZCAwKSB7XG4gICAgZW5kID0gdHJ1ZTtcbiAgfVxuICB3YXJuaW5nKHBhdGggPT09IFwiKlwiIHx8ICFwYXRoLmVuZHNXaXRoKFwiKlwiKSB8fCBwYXRoLmVuZHNXaXRoKFwiLypcIiksIFwiUm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiIHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3ZXJlIFwiICsgKFwiXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIiBiZWNhdXNlIHRoZSBgKmAgY2hhcmFjdGVyIG11c3QgXCIpICsgXCJhbHdheXMgZm9sbG93IGEgYC9gIGluIHRoZSBwYXR0ZXJuLiBUbyBnZXQgcmlkIG9mIHRoaXMgd2FybmluZywgXCIgKyAoXCJwbGVhc2UgY2hhbmdlIHRoZSByb3V0ZSBwYXRoIHRvIFxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIuXCIpKTtcbiAgbGV0IHBhcmFtcyA9IFtdO1xuICBsZXQgcmVnZXhwU291cmNlID0gXCJeXCIgKyBwYXRoLnJlcGxhY2UoL1xcLypcXCo/JC8sIFwiXCIpIC8vIElnbm9yZSB0cmFpbGluZyAvIGFuZCAvKiwgd2UnbGwgaGFuZGxlIGl0IGJlbG93XG4gIC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKSAvLyBNYWtlIHN1cmUgaXQgaGFzIGEgbGVhZGluZyAvXG4gIC5yZXBsYWNlKC9bXFxcXC4qK14ke318KClbXFxdXS9nLCBcIlxcXFwkJlwiKSAvLyBFc2NhcGUgc3BlY2lhbCByZWdleCBjaGFyc1xuICAucmVwbGFjZSgvXFwvOihcXHcrKShcXD8pPy9nLCAoXywgcGFyYW1OYW1lLCBpc09wdGlvbmFsKSA9PiB7XG4gICAgcGFyYW1zLnB1c2goe1xuICAgICAgcGFyYW1OYW1lLFxuICAgICAgaXNPcHRpb25hbDogaXNPcHRpb25hbCAhPSBudWxsXG4gICAgfSk7XG4gICAgcmV0dXJuIGlzT3B0aW9uYWwgPyBcIi8/KFteXFxcXC9dKyk/XCIgOiBcIi8oW15cXFxcL10rKVwiO1xuICB9KTtcbiAgaWYgKHBhdGguZW5kc1dpdGgoXCIqXCIpKSB7XG4gICAgcGFyYW1zLnB1c2goe1xuICAgICAgcGFyYW1OYW1lOiBcIipcIlxuICAgIH0pO1xuICAgIHJlZ2V4cFNvdXJjZSArPSBwYXRoID09PSBcIipcIiB8fCBwYXRoID09PSBcIi8qXCIgPyBcIiguKikkXCIgLy8gQWxyZWFkeSBtYXRjaGVkIHRoZSBpbml0aWFsIC8sIGp1c3QgbWF0Y2ggdGhlIHJlc3RcbiAgICA6IFwiKD86XFxcXC8oLispfFxcXFwvKikkXCI7IC8vIERvbid0IGluY2x1ZGUgdGhlIC8gaW4gcGFyYW1zW1wiKlwiXVxuICB9IGVsc2UgaWYgKGVuZCkge1xuICAgIC8vIFdoZW4gbWF0Y2hpbmcgdG8gdGhlIGVuZCwgaWdub3JlIHRyYWlsaW5nIHNsYXNoZXNcbiAgICByZWdleHBTb3VyY2UgKz0gXCJcXFxcLyokXCI7XG4gIH0gZWxzZSBpZiAocGF0aCAhPT0gXCJcIiAmJiBwYXRoICE9PSBcIi9cIikge1xuICAgIC8vIElmIG91ciBwYXRoIGlzIG5vbi1lbXB0eSBhbmQgY29udGFpbnMgYW55dGhpbmcgYmV5b25kIGFuIGluaXRpYWwgc2xhc2gsXG4gICAgLy8gdGhlbiB3ZSBoYXZlIF9zb21lXyBmb3JtIG9mIHBhdGggaW4gb3VyIHJlZ2V4LCBzbyB3ZSBzaG91bGQgZXhwZWN0IHRvXG4gICAgLy8gbWF0Y2ggb25seSBpZiB3ZSBmaW5kIHRoZSBlbmQgb2YgdGhpcyBwYXRoIHNlZ21lbnQuICBMb29rIGZvciBhbiBvcHRpb25hbFxuICAgIC8vIG5vbi1jYXB0dXJlZCB0cmFpbGluZyBzbGFzaCAodG8gbWF0Y2ggYSBwb3J0aW9uIG9mIHRoZSBVUkwpIG9yIHRoZSBlbmRcbiAgICAvLyBvZiB0aGUgcGF0aCAoaWYgd2UndmUgbWF0Y2hlZCB0byB0aGUgZW5kKS4gIFdlIHVzZWQgdG8gZG8gdGhpcyB3aXRoIGFcbiAgICAvLyB3b3JkIGJvdW5kYXJ5IGJ1dCB0aGF0IGdpdmVzIGZhbHNlIHBvc2l0aXZlcyBvbiByb3V0ZXMgbGlrZVxuICAgIC8vIC91c2VyLXByZWZlcmVuY2VzIHNpbmNlIGAtYCBjb3VudHMgYXMgYSB3b3JkIGJvdW5kYXJ5LlxuICAgIHJlZ2V4cFNvdXJjZSArPSBcIig/Oig/PVxcXFwvfCQpKVwiO1xuICB9IGVsc2UgO1xuICBsZXQgbWF0Y2hlciA9IG5ldyBSZWdFeHAocmVnZXhwU291cmNlLCBjYXNlU2Vuc2l0aXZlID8gdW5kZWZpbmVkIDogXCJpXCIpO1xuICByZXR1cm4gW21hdGNoZXIsIHBhcmFtc107XG59XG5mdW5jdGlvbiBzYWZlbHlEZWNvZGVVUkkodmFsdWUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJKHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB3YXJuaW5nKGZhbHNlLCBcIlRoZSBVUkwgcGF0aCBcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiBjb3VsZCBub3QgYmUgZGVjb2RlZCBiZWNhdXNlIGl0IGlzIGlzIGEgXCIgKyBcIm1hbGZvcm1lZCBVUkwgc2VnbWVudC4gVGhpcyBpcyBwcm9iYWJseSBkdWUgdG8gYSBiYWQgcGVyY2VudCBcIiArIChcImVuY29kaW5nIChcIiArIGVycm9yICsgXCIpLlwiKSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5mdW5jdGlvbiBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQodmFsdWUsIHBhcmFtTmFtZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdhcm5pbmcoZmFsc2UsIFwiVGhlIHZhbHVlIGZvciB0aGUgVVJMIHBhcmFtIFxcXCJcIiArIHBhcmFtTmFtZSArIFwiXFxcIiB3aWxsIG5vdCBiZSBkZWNvZGVkIGJlY2F1c2VcIiArIChcIiB0aGUgc3RyaW5nIFxcXCJcIiArIHZhbHVlICsgXCJcXFwiIGlzIGEgbWFsZm9ybWVkIFVSTCBzZWdtZW50LiBUaGlzIGlzIHByb2JhYmx5XCIpICsgKFwiIGR1ZSB0byBhIGJhZCBwZXJjZW50IGVuY29kaW5nIChcIiArIGVycm9yICsgXCIpLlwiKSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aG5hbWUsIGJhc2VuYW1lKSB7XG4gIGlmIChiYXNlbmFtZSA9PT0gXCIvXCIpIHJldHVybiBwYXRobmFtZTtcbiAgaWYgKCFwYXRobmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoYmFzZW5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvLyBXZSB3YW50IHRvIGxlYXZlIHRyYWlsaW5nIHNsYXNoIGJlaGF2aW9yIGluIHRoZSB1c2VyJ3MgY29udHJvbCwgc28gaWYgdGhleVxuICAvLyBzcGVjaWZ5IGEgYmFzZW5hbWUgd2l0aCBhIHRyYWlsaW5nIHNsYXNoLCB3ZSBzaG91bGQgc3VwcG9ydCBpdFxuICBsZXQgc3RhcnRJbmRleCA9IGJhc2VuYW1lLmVuZHNXaXRoKFwiL1wiKSA/IGJhc2VuYW1lLmxlbmd0aCAtIDEgOiBiYXNlbmFtZS5sZW5ndGg7XG4gIGxldCBuZXh0Q2hhciA9IHBhdGhuYW1lLmNoYXJBdChzdGFydEluZGV4KTtcbiAgaWYgKG5leHRDaGFyICYmIG5leHRDaGFyICE9PSBcIi9cIikge1xuICAgIC8vIHBhdGhuYW1lIGRvZXMgbm90IHN0YXJ0IHdpdGggYmFzZW5hbWUvXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIHBhdGhuYW1lLnNsaWNlKHN0YXJ0SW5kZXgpIHx8IFwiL1wiO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgcmVzb2x2ZWQgcGF0aCBvYmplY3QgcmVsYXRpdmUgdG8gdGhlIGdpdmVuIHBhdGhuYW1lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvcmVzb2x2ZS1wYXRoXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVQYXRoKHRvLCBmcm9tUGF0aG5hbWUpIHtcbiAgaWYgKGZyb21QYXRobmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgZnJvbVBhdGhuYW1lID0gXCIvXCI7XG4gIH1cbiAgbGV0IHtcbiAgICBwYXRobmFtZTogdG9QYXRobmFtZSxcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiXG4gIH0gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG87XG4gIGxldCBwYXRobmFtZSA9IHRvUGF0aG5hbWUgPyB0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIvXCIpID8gdG9QYXRobmFtZSA6IHJlc29sdmVQYXRobmFtZSh0b1BhdGhuYW1lLCBmcm9tUGF0aG5hbWUpIDogZnJvbVBhdGhuYW1lO1xuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lLFxuICAgIHNlYXJjaDogbm9ybWFsaXplU2VhcmNoKHNlYXJjaCksXG4gICAgaGFzaDogbm9ybWFsaXplSGFzaChoYXNoKVxuICB9O1xufVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHJlbGF0aXZlUGF0aCwgZnJvbVBhdGhuYW1lKSB7XG4gIGxldCBzZWdtZW50cyA9IGZyb21QYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgbGV0IHJlbGF0aXZlU2VnbWVudHMgPSByZWxhdGl2ZVBhdGguc3BsaXQoXCIvXCIpO1xuICByZWxhdGl2ZVNlZ21lbnRzLmZvckVhY2goc2VnbWVudCA9PiB7XG4gICAgaWYgKHNlZ21lbnQgPT09IFwiLi5cIikge1xuICAgICAgLy8gS2VlcCB0aGUgcm9vdCBcIlwiIHNlZ21lbnQgc28gdGhlIHBhdGhuYW1lIHN0YXJ0cyBhdCAvXG4gICAgICBpZiAoc2VnbWVudHMubGVuZ3RoID4gMSkgc2VnbWVudHMucG9wKCk7XG4gICAgfSBlbHNlIGlmIChzZWdtZW50ICE9PSBcIi5cIikge1xuICAgICAgc2VnbWVudHMucHVzaChzZWdtZW50KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc2VnbWVudHMubGVuZ3RoID4gMSA/IHNlZ21lbnRzLmpvaW4oXCIvXCIpIDogXCIvXCI7XG59XG5mdW5jdGlvbiBnZXRJbnZhbGlkUGF0aEVycm9yKGNoYXIsIGZpZWxkLCBkZXN0LCBwYXRoKSB7XG4gIHJldHVybiBcIkNhbm5vdCBpbmNsdWRlIGEgJ1wiICsgY2hhciArIFwiJyBjaGFyYWN0ZXIgaW4gYSBtYW51YWxseSBzcGVjaWZpZWQgXCIgKyAoXCJgdG8uXCIgKyBmaWVsZCArIFwiYCBmaWVsZCBbXCIgKyBKU09OLnN0cmluZ2lmeShwYXRoKSArIFwiXS4gIFBsZWFzZSBzZXBhcmF0ZSBpdCBvdXQgdG8gdGhlIFwiKSArIChcImB0by5cIiArIGRlc3QgKyBcImAgZmllbGQuIEFsdGVybmF0aXZlbHkgeW91IG1heSBwcm92aWRlIHRoZSBmdWxsIHBhdGggYXMgXCIpICsgXCJhIHN0cmluZyBpbiA8TGluayB0bz1cXFwiLi4uXFxcIj4gYW5kIHRoZSByb3V0ZXIgd2lsbCBwYXJzZSBpdCBmb3IgeW91LlwiO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICpcbiAqIFdoZW4gcHJvY2Vzc2luZyByZWxhdGl2ZSBuYXZpZ2F0aW9uIHdlIHdhbnQgdG8gaWdub3JlIGFuY2VzdG9yIHJvdXRlcyB0aGF0XG4gKiBkbyBub3QgY29udHJpYnV0ZSB0byB0aGUgcGF0aCwgc3VjaCB0aGF0IGluZGV4L3BhdGhsZXNzIGxheW91dCByb3V0ZXMgZG9uJ3RcbiAqIGludGVyZmVyZS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgd2hlbiBtb3ZpbmcgYSByb3V0ZSBlbGVtZW50IGludG8gYW4gaW5kZXggcm91dGUgYW5kL29yIGFcbiAqIHBhdGhsZXNzIGxheW91dCByb3V0ZSwgcmVsYXRpdmUgbGluayBiZWhhdmlvciBjb250YWluZWQgd2l0aGluIHNob3VsZCBzdGF5XG4gKiB0aGUgc2FtZS4gIEJvdGggb2YgdGhlIGZvbGxvd2luZyBleGFtcGxlcyBzaG91bGQgbGluayBiYWNrIHRvIHRoZSByb290OlxuICpcbiAqICAgPFJvdXRlIHBhdGg9XCIvXCI+XG4gKiAgICAgPFJvdXRlIHBhdGg9XCJhY2NvdW50c1wiIGVsZW1lbnQ9ezxMaW5rIHRvPVwiLi5cIn0+XG4gKiAgIDwvUm91dGU+XG4gKlxuICogICA8Um91dGUgcGF0aD1cIi9cIj5cbiAqICAgICA8Um91dGUgcGF0aD1cImFjY291bnRzXCI+XG4gKiAgICAgICA8Um91dGUgZWxlbWVudD17PEFjY291bnRzTGF5b3V0IC8+fT4gICAgICAgLy8gPC0tIERvZXMgbm90IGNvbnRyaWJ1dGVcbiAqICAgICAgICAgPFJvdXRlIGluZGV4IGVsZW1lbnQ9ezxMaW5rIHRvPVwiLi5cIn0gLz4gIC8vIDwtLSBEb2VzIG5vdCBjb250cmlidXRlXG4gKiAgICAgICA8L1JvdXRlXG4gKiAgICAgPC9Sb3V0ZT5cbiAqICAgPC9Sb3V0ZT5cbiAqL1xuZnVuY3Rpb24gZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcykge1xuICByZXR1cm4gbWF0Y2hlcy5maWx0ZXIoKG1hdGNoLCBpbmRleCkgPT4gaW5kZXggPT09IDAgfHwgbWF0Y2gucm91dGUucGF0aCAmJiBtYXRjaC5yb3V0ZS5wYXRoLmxlbmd0aCA+IDApO1xufVxuLy8gUmV0dXJuIHRoZSBhcnJheSBvZiBwYXRobmFtZXMgZm9yIHRoZSBjdXJyZW50IHJvdXRlIG1hdGNoZXMgLSB1c2VkIHRvXG4vLyBnZW5lcmF0ZSB0aGUgcm91dGVQYXRobmFtZXMgaW5wdXQgZm9yIHJlc29sdmVUbygpXG5mdW5jdGlvbiBnZXRSZXNvbHZlVG9NYXRjaGVzKG1hdGNoZXMsIHY3X3JlbGF0aXZlU3BsYXRQYXRoKSB7XG4gIGxldCBwYXRoTWF0Y2hlcyA9IGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpO1xuICAvLyBXaGVuIHY3X3JlbGF0aXZlU3BsYXRQYXRoIGlzIGVuYWJsZWQsIHVzZSB0aGUgZnVsbCBwYXRobmFtZSBmb3IgdGhlIGxlYWZcbiAgLy8gbWF0Y2ggc28gd2UgaW5jbHVkZSBzcGxhdCB2YWx1ZXMgZm9yIFwiLlwiIGxpbmtzLiAgU2VlOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlYWN0LXJvdXRlci9pc3N1ZXMvMTEwNTIjaXNzdWVjb21tZW50LTE4MzY1ODkzMjlcbiAgaWYgKHY3X3JlbGF0aXZlU3BsYXRQYXRoKSB7XG4gICAgcmV0dXJuIHBhdGhNYXRjaGVzLm1hcCgobWF0Y2gsIGlkeCkgPT4gaWR4ID09PSBtYXRjaGVzLmxlbmd0aCAtIDEgPyBtYXRjaC5wYXRobmFtZSA6IG1hdGNoLnBhdGhuYW1lQmFzZSk7XG4gIH1cbiAgcmV0dXJuIHBhdGhNYXRjaGVzLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZXNvbHZlVG8odG9BcmcsIHJvdXRlUGF0aG5hbWVzLCBsb2NhdGlvblBhdGhuYW1lLCBpc1BhdGhSZWxhdGl2ZSkge1xuICBpZiAoaXNQYXRoUmVsYXRpdmUgPT09IHZvaWQgMCkge1xuICAgIGlzUGF0aFJlbGF0aXZlID0gZmFsc2U7XG4gIH1cbiAgbGV0IHRvO1xuICBpZiAodHlwZW9mIHRvQXJnID09PSBcInN0cmluZ1wiKSB7XG4gICAgdG8gPSBwYXJzZVBhdGgodG9BcmcpO1xuICB9IGVsc2Uge1xuICAgIHRvID0gX2V4dGVuZHMoe30sIHRvQXJnKTtcbiAgICBpbnZhcmlhbnQoIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIj9cIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCI/XCIsIFwicGF0aG5hbWVcIiwgXCJzZWFyY2hcIiwgdG8pKTtcbiAgICBpbnZhcmlhbnQoIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIiNcIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCIjXCIsIFwicGF0aG5hbWVcIiwgXCJoYXNoXCIsIHRvKSk7XG4gICAgaW52YXJpYW50KCF0by5zZWFyY2ggfHwgIXRvLnNlYXJjaC5pbmNsdWRlcyhcIiNcIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCIjXCIsIFwic2VhcmNoXCIsIFwiaGFzaFwiLCB0bykpO1xuICB9XG4gIGxldCBpc0VtcHR5UGF0aCA9IHRvQXJnID09PSBcIlwiIHx8IHRvLnBhdGhuYW1lID09PSBcIlwiO1xuICBsZXQgdG9QYXRobmFtZSA9IGlzRW1wdHlQYXRoID8gXCIvXCIgOiB0by5wYXRobmFtZTtcbiAgbGV0IGZyb207XG4gIC8vIFJvdXRpbmcgaXMgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgcGF0aG5hbWUgaWYgZXhwbGljaXRseSByZXF1ZXN0ZWQuXG4gIC8vXG4gIC8vIElmIGEgcGF0aG5hbWUgaXMgZXhwbGljaXRseSBwcm92aWRlZCBpbiBgdG9gLCBpdCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlXG4gIC8vIHJvdXRlIGNvbnRleHQuIFRoaXMgaXMgZXhwbGFpbmVkIGluIGBOb3RlIG9uIGA8TGluayB0bz5gIHZhbHVlc2AgaW4gb3VyXG4gIC8vIG1pZ3JhdGlvbiBndWlkZSBmcm9tIHY1IGFzIGEgbWVhbnMgb2YgZGlzYW1iaWd1YXRpb24gYmV0d2VlbiBgdG9gIHZhbHVlc1xuICAvLyB0aGF0IGJlZ2luIHdpdGggYC9gIGFuZCB0aG9zZSB0aGF0IGRvIG5vdC4gSG93ZXZlciwgdGhpcyBpcyBwcm9ibGVtYXRpYyBmb3JcbiAgLy8gYHRvYCB2YWx1ZXMgdGhhdCBkbyBub3QgcHJvdmlkZSBhIHBhdGhuYW1lLiBgdG9gIGNhbiBzaW1wbHkgYmUgYSBzZWFyY2ggb3JcbiAgLy8gaGFzaCBzdHJpbmcsIGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGFzc3VtZSB0aGF0IHRoZSBuYXZpZ2F0aW9uIGlzIHJlbGF0aXZlXG4gIC8vIHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uJ3MgcGF0aG5hbWUgYW5kICpub3QqIHRoZSByb3V0ZSBwYXRobmFtZS5cbiAgaWYgKHRvUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIGZyb20gPSBsb2NhdGlvblBhdGhuYW1lO1xuICB9IGVsc2Uge1xuICAgIGxldCByb3V0ZVBhdGhuYW1lSW5kZXggPSByb3V0ZVBhdGhuYW1lcy5sZW5ndGggLSAxO1xuICAgIC8vIFdpdGggcmVsYXRpdmU9XCJyb3V0ZVwiICh0aGUgZGVmYXVsdCksIGVhY2ggbGVhZGluZyAuLiBzZWdtZW50IG1lYW5zXG4gICAgLy8gXCJnbyB1cCBvbmUgcm91dGVcIiBpbnN0ZWFkIG9mIFwiZ28gdXAgb25lIFVSTCBzZWdtZW50XCIuICBUaGlzIGlzIGEga2V5XG4gICAgLy8gZGlmZmVyZW5jZSBmcm9tIGhvdyA8YSBocmVmPiB3b3JrcyBhbmQgYSBtYWpvciByZWFzb24gd2UgY2FsbCB0aGlzIGFcbiAgICAvLyBcInRvXCIgdmFsdWUgaW5zdGVhZCBvZiBhIFwiaHJlZlwiLlxuICAgIGlmICghaXNQYXRoUmVsYXRpdmUgJiYgdG9QYXRobmFtZS5zdGFydHNXaXRoKFwiLi5cIikpIHtcbiAgICAgIGxldCB0b1NlZ21lbnRzID0gdG9QYXRobmFtZS5zcGxpdChcIi9cIik7XG4gICAgICB3aGlsZSAodG9TZWdtZW50c1swXSA9PT0gXCIuLlwiKSB7XG4gICAgICAgIHRvU2VnbWVudHMuc2hpZnQoKTtcbiAgICAgICAgcm91dGVQYXRobmFtZUluZGV4IC09IDE7XG4gICAgICB9XG4gICAgICB0by5wYXRobmFtZSA9IHRvU2VnbWVudHMuam9pbihcIi9cIik7XG4gICAgfVxuICAgIGZyb20gPSByb3V0ZVBhdGhuYW1lSW5kZXggPj0gMCA/IHJvdXRlUGF0aG5hbWVzW3JvdXRlUGF0aG5hbWVJbmRleF0gOiBcIi9cIjtcbiAgfVxuICBsZXQgcGF0aCA9IHJlc29sdmVQYXRoKHRvLCBmcm9tKTtcbiAgLy8gRW5zdXJlIHRoZSBwYXRobmFtZSBoYXMgYSB0cmFpbGluZyBzbGFzaCBpZiB0aGUgb3JpZ2luYWwgXCJ0b1wiIGhhZCBvbmVcbiAgbGV0IGhhc0V4cGxpY2l0VHJhaWxpbmdTbGFzaCA9IHRvUGF0aG5hbWUgJiYgdG9QYXRobmFtZSAhPT0gXCIvXCIgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIik7XG4gIC8vIE9yIGlmIHRoaXMgd2FzIGEgbGluayB0byB0aGUgY3VycmVudCBwYXRoIHdoaWNoIGhhcyBhIHRyYWlsaW5nIHNsYXNoXG4gIGxldCBoYXNDdXJyZW50VHJhaWxpbmdTbGFzaCA9IChpc0VtcHR5UGF0aCB8fCB0b1BhdGhuYW1lID09PSBcIi5cIikgJiYgbG9jYXRpb25QYXRobmFtZS5lbmRzV2l0aChcIi9cIik7XG4gIGlmICghcGF0aC5wYXRobmFtZS5lbmRzV2l0aChcIi9cIikgJiYgKGhhc0V4cGxpY2l0VHJhaWxpbmdTbGFzaCB8fCBoYXNDdXJyZW50VHJhaWxpbmdTbGFzaCkpIHtcbiAgICBwYXRoLnBhdGhuYW1lICs9IFwiL1wiO1xuICB9XG4gIHJldHVybiBwYXRoO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXRUb1BhdGhuYW1lKHRvKSB7XG4gIC8vIEVtcHR5IHN0cmluZ3Mgc2hvdWxkIGJlIHRyZWF0ZWQgdGhlIHNhbWUgYXMgLyBwYXRoc1xuICByZXR1cm4gdG8gPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCIgPyBcIi9cIiA6IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykucGF0aG5hbWUgOiB0by5wYXRobmFtZTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3Qgam9pblBhdGhzID0gcGF0aHMgPT4gcGF0aHMuam9pbihcIi9cIikucmVwbGFjZSgvXFwvXFwvKy9nLCBcIi9cIik7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IG5vcm1hbGl6ZVBhdGhuYW1lID0gcGF0aG5hbWUgPT4gcGF0aG5hbWUucmVwbGFjZSgvXFwvKyQvLCBcIlwiKS5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3Qgbm9ybWFsaXplU2VhcmNoID0gc2VhcmNoID0+ICFzZWFyY2ggfHwgc2VhcmNoID09PSBcIj9cIiA/IFwiXCIgOiBzZWFyY2guc3RhcnRzV2l0aChcIj9cIikgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3Qgbm9ybWFsaXplSGFzaCA9IGhhc2ggPT4gIWhhc2ggfHwgaGFzaCA9PT0gXCIjXCIgPyBcIlwiIDogaGFzaC5zdGFydHNXaXRoKFwiI1wiKSA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4vKipcbiAqIFRoaXMgaXMgYSBzaG9ydGN1dCBmb3IgY3JlYXRpbmcgYGFwcGxpY2F0aW9uL2pzb25gIHJlc3BvbnNlcy4gQ29udmVydHMgYGRhdGFgXG4gKiB0byBKU09OIGFuZCBzZXRzIHRoZSBgQ29udGVudC1UeXBlYCBoZWFkZXIuXG4gKi9cbmNvbnN0IGpzb24gPSBmdW5jdGlvbiBqc29uKGRhdGEsIGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSB7fTtcbiAgfVxuICBsZXQgcmVzcG9uc2VJbml0ID0gdHlwZW9mIGluaXQgPT09IFwibnVtYmVyXCIgPyB7XG4gICAgc3RhdHVzOiBpbml0XG4gIH0gOiBpbml0O1xuICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHJlc3BvbnNlSW5pdC5oZWFkZXJzKTtcbiAgaWYgKCFoZWFkZXJzLmhhcyhcIkNvbnRlbnQtVHlwZVwiKSkge1xuICAgIGhlYWRlcnMuc2V0KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiKTtcbiAgfVxuICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KGRhdGEpLCBfZXh0ZW5kcyh7fSwgcmVzcG9uc2VJbml0LCB7XG4gICAgaGVhZGVyc1xuICB9KSk7XG59O1xuY2xhc3MgQWJvcnRlZERlZmVycmVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7fVxuY2xhc3MgRGVmZXJyZWREYXRhIHtcbiAgY29uc3RydWN0b3IoZGF0YSwgcmVzcG9uc2VJbml0KSB7XG4gICAgdGhpcy5wZW5kaW5nS2V5c1NldCA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLnN1YnNjcmliZXJzID0gbmV3IFNldCgpO1xuICAgIHRoaXMuZGVmZXJyZWRLZXlzID0gW107XG4gICAgaW52YXJpYW50KGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09IFwib2JqZWN0XCIgJiYgIUFycmF5LmlzQXJyYXkoZGF0YSksIFwiZGVmZXIoKSBvbmx5IGFjY2VwdHMgcGxhaW4gb2JqZWN0c1wiKTtcbiAgICAvLyBTZXQgdXAgYW4gQWJvcnRDb250cm9sbGVyICsgUHJvbWlzZSB3ZSBjYW4gcmFjZSBhZ2FpbnN0IHRvIGV4aXQgZWFybHlcbiAgICAvLyBjYW5jZWxsYXRpb25cbiAgICBsZXQgcmVqZWN0O1xuICAgIHRoaXMuYWJvcnRQcm9taXNlID0gbmV3IFByb21pc2UoKF8sIHIpID0+IHJlamVjdCA9IHIpO1xuICAgIHRoaXMuY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgb25BYm9ydCA9ICgpID0+IHJlamVjdChuZXcgQWJvcnRlZERlZmVycmVkRXJyb3IoXCJEZWZlcnJlZCBkYXRhIGFib3J0ZWRcIikpO1xuICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCA9ICgpID0+IHRoaXMuY29udHJvbGxlci5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgIHRoaXMuY29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgIHRoaXMuZGF0YSA9IE9iamVjdC5lbnRyaWVzKGRhdGEpLnJlZHVjZSgoYWNjLCBfcmVmMikgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWYyO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgIFtrZXldOiB0aGlzLnRyYWNrUHJvbWlzZShrZXksIHZhbHVlKVxuICAgICAgfSk7XG4gICAgfSwge30pO1xuICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgIC8vIEFsbCBpbmNvbWluZyB2YWx1ZXMgd2VyZSByZXNvbHZlZFxuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgfVxuICAgIHRoaXMuaW5pdCA9IHJlc3BvbnNlSW5pdDtcbiAgfVxuICB0cmFja1Byb21pc2Uoa2V5LCB2YWx1ZSkge1xuICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgdGhpcy5kZWZlcnJlZEtleXMucHVzaChrZXkpO1xuICAgIHRoaXMucGVuZGluZ0tleXNTZXQuYWRkKGtleSk7XG4gICAgLy8gV2Ugc3RvcmUgYSBsaXR0bGUgd3JhcHBlciBwcm9taXNlIHRoYXQgd2lsbCBiZSBleHRlbmRlZCB3aXRoXG4gICAgLy8gX2RhdGEvX2Vycm9yIHByb3BzIHVwb24gcmVzb2x2ZS9yZWplY3RcbiAgICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmFjZShbdmFsdWUsIHRoaXMuYWJvcnRQcm9taXNlXSkudGhlbihkYXRhID0+IHRoaXMub25TZXR0bGUocHJvbWlzZSwga2V5LCB1bmRlZmluZWQsIGRhdGEpLCBlcnJvciA9PiB0aGlzLm9uU2V0dGxlKHByb21pc2UsIGtleSwgZXJyb3IpKTtcbiAgICAvLyBSZWdpc3RlciByZWplY3Rpb24gbGlzdGVuZXJzIHRvIGF2b2lkIHVuY2F1Z2h0IHByb21pc2UgcmVqZWN0aW9ucyBvblxuICAgIC8vIGVycm9ycyBvciBhYm9ydGVkIGRlZmVycmVkIHZhbHVlc1xuICAgIHByb21pc2UuY2F0Y2goKCkgPT4ge30pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgIGdldDogKCkgPT4gdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG4gIG9uU2V0dGxlKHByb21pc2UsIGtleSwgZXJyb3IsIGRhdGEpIHtcbiAgICBpZiAodGhpcy5jb250cm9sbGVyLnNpZ25hbC5hYm9ydGVkICYmIGVycm9yIGluc3RhbmNlb2YgQWJvcnRlZERlZmVycmVkRXJyb3IpIHtcbiAgICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCgpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBlcnJvclxuICAgICAgfSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmRlbGV0ZShrZXkpO1xuICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgIC8vIE5vdGhpbmcgbGVmdCB0byBhYm9ydCFcbiAgICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCgpO1xuICAgIH1cbiAgICAvLyBJZiB0aGUgcHJvbWlzZSB3YXMgcmVzb2x2ZWQvcmVqZWN0ZWQgd2l0aCB1bmRlZmluZWQsIHdlJ2xsIHRocm93IGFuIGVycm9yIGFzIHlvdVxuICAgIC8vIHNob3VsZCBhbHdheXMgcmVzb2x2ZSB3aXRoIGEgdmFsdWUgb3IgbnVsbFxuICAgIGlmIChlcnJvciA9PT0gdW5kZWZpbmVkICYmIGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IHVuZGVmaW5lZEVycm9yID0gbmV3IEVycm9yKFwiRGVmZXJyZWQgZGF0YSBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIiByZXNvbHZlZC9yZWplY3RlZCB3aXRoIGB1bmRlZmluZWRgLCBcIiArIFwieW91IG11c3QgcmVzb2x2ZS9yZWplY3Qgd2l0aCBhIHZhbHVlIG9yIGBudWxsYC5cIik7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHVuZGVmaW5lZEVycm9yXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZW1pdChmYWxzZSwga2V5KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh1bmRlZmluZWRFcnJvcik7XG4gICAgfVxuICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pO1xuICAgICAgdGhpcy5lbWl0KGZhbHNlLCBrZXkpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2RhdGFcIiwge1xuICAgICAgZ2V0OiAoKSA9PiBkYXRhXG4gICAgfSk7XG4gICAgdGhpcy5lbWl0KGZhbHNlLCBrZXkpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG4gIGVtaXQoYWJvcnRlZCwgc2V0dGxlZEtleSkge1xuICAgIHRoaXMuc3Vic2NyaWJlcnMuZm9yRWFjaChzdWJzY3JpYmVyID0+IHN1YnNjcmliZXIoYWJvcnRlZCwgc2V0dGxlZEtleSkpO1xuICB9XG4gIHN1YnNjcmliZShmbikge1xuICAgIHRoaXMuc3Vic2NyaWJlcnMuYWRkKGZuKTtcbiAgICByZXR1cm4gKCkgPT4gdGhpcy5zdWJzY3JpYmVycy5kZWxldGUoZm4pO1xuICB9XG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmZvckVhY2goKHYsIGspID0+IHRoaXMucGVuZGluZ0tleXNTZXQuZGVsZXRlKGspKTtcbiAgICB0aGlzLmVtaXQodHJ1ZSk7XG4gIH1cbiAgYXN5bmMgcmVzb2x2ZURhdGEoc2lnbmFsKSB7XG4gICAgbGV0IGFib3J0ZWQgPSBmYWxzZTtcbiAgICBpZiAoIXRoaXMuZG9uZSkge1xuICAgICAgbGV0IG9uQWJvcnQgPSAoKSA9PiB0aGlzLmNhbmNlbCgpO1xuICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICAgIGFib3J0ZWQgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmUoYWJvcnRlZCA9PiB7XG4gICAgICAgICAgc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICAgICAgICBpZiAoYWJvcnRlZCB8fCB0aGlzLmRvbmUpIHtcbiAgICAgICAgICAgIHJlc29sdmUoYWJvcnRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWJvcnRlZDtcbiAgfVxuICBnZXQgZG9uZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wZW5kaW5nS2V5c1NldC5zaXplID09PSAwO1xuICB9XG4gIGdldCB1bndyYXBwZWREYXRhKCkge1xuICAgIGludmFyaWFudCh0aGlzLmRhdGEgIT09IG51bGwgJiYgdGhpcy5kb25lLCBcIkNhbiBvbmx5IHVud3JhcCBkYXRhIG9uIGluaXRpYWxpemVkIGFuZCBzZXR0bGVkIGRlZmVycmVkc1wiKTtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy5kYXRhKS5yZWR1Y2UoKGFjYywgX3JlZjMpID0+IHtcbiAgICAgIGxldCBba2V5LCB2YWx1ZV0gPSBfcmVmMztcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGFjYywge1xuICAgICAgICBba2V5XTogdW53cmFwVHJhY2tlZFByb21pc2UodmFsdWUpXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG4gIH1cbiAgZ2V0IHBlbmRpbmdLZXlzKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMucGVuZGluZ0tleXNTZXQpO1xuICB9XG59XG5mdW5jdGlvbiBpc1RyYWNrZWRQcm9taXNlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2UgJiYgdmFsdWUuX3RyYWNrZWQgPT09IHRydWU7XG59XG5mdW5jdGlvbiB1bndyYXBUcmFja2VkUHJvbWlzZSh2YWx1ZSkge1xuICBpZiAoIWlzVHJhY2tlZFByb21pc2UodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICh2YWx1ZS5fZXJyb3IpIHtcbiAgICB0aHJvdyB2YWx1ZS5fZXJyb3I7XG4gIH1cbiAgcmV0dXJuIHZhbHVlLl9kYXRhO1xufVxuY29uc3QgZGVmZXIgPSBmdW5jdGlvbiBkZWZlcihkYXRhLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0ge307XG4gIH1cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IHR5cGVvZiBpbml0ID09PSBcIm51bWJlclwiID8ge1xuICAgIHN0YXR1czogaW5pdFxuICB9IDogaW5pdDtcbiAgcmV0dXJuIG5ldyBEZWZlcnJlZERhdGEoZGF0YSwgcmVzcG9uc2VJbml0KTtcbn07XG4vKipcbiAqIEEgcmVkaXJlY3QgcmVzcG9uc2UuIFNldHMgdGhlIHN0YXR1cyBjb2RlIGFuZCB0aGUgYExvY2F0aW9uYCBoZWFkZXIuXG4gKiBEZWZhdWx0cyB0byBcIjMwMiBGb3VuZFwiLlxuICovXG5jb25zdCByZWRpcmVjdCA9IGZ1bmN0aW9uIHJlZGlyZWN0KHVybCwgaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IDMwMjtcbiAgfVxuICBsZXQgcmVzcG9uc2VJbml0ID0gaW5pdDtcbiAgaWYgKHR5cGVvZiByZXNwb25zZUluaXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXNwb25zZUluaXQgPSB7XG4gICAgICBzdGF0dXM6IHJlc3BvbnNlSW5pdFxuICAgIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIHJlc3BvbnNlSW5pdC5zdGF0dXMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXNwb25zZUluaXQuc3RhdHVzID0gMzAyO1xuICB9XG4gIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMocmVzcG9uc2VJbml0LmhlYWRlcnMpO1xuICBoZWFkZXJzLnNldChcIkxvY2F0aW9uXCIsIHVybCk7XG4gIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwgX2V4dGVuZHMoe30sIHJlc3BvbnNlSW5pdCwge1xuICAgIGhlYWRlcnNcbiAgfSkpO1xufTtcbi8qKlxuICogQSByZWRpcmVjdCByZXNwb25zZSB0aGF0IHdpbGwgZm9yY2UgYSBkb2N1bWVudCByZWxvYWQgdG8gdGhlIG5ldyBsb2NhdGlvbi5cbiAqIFNldHMgdGhlIHN0YXR1cyBjb2RlIGFuZCB0aGUgYExvY2F0aW9uYCBoZWFkZXIuXG4gKiBEZWZhdWx0cyB0byBcIjMwMiBGb3VuZFwiLlxuICovXG5jb25zdCByZWRpcmVjdERvY3VtZW50ID0gKHVybCwgaW5pdCkgPT4ge1xuICBsZXQgcmVzcG9uc2UgPSByZWRpcmVjdCh1cmwsIGluaXQpO1xuICByZXNwb25zZS5oZWFkZXJzLnNldChcIlgtUmVtaXgtUmVsb2FkLURvY3VtZW50XCIsIFwidHJ1ZVwiKTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbi8qKlxuICogQHByaXZhdGVcbiAqIFV0aWxpdHkgY2xhc3Mgd2UgdXNlIHRvIGhvbGQgYXV0by11bndyYXBwZWQgNHh4LzV4eCBSZXNwb25zZSBib2RpZXNcbiAqXG4gKiBXZSBkb24ndCBleHBvcnQgdGhlIGNsYXNzIGZvciBwdWJsaWMgdXNlIHNpbmNlIGl0J3MgYW4gaW1wbGVtZW50YXRpb25cbiAqIGRldGFpbCwgYnV0IHdlIGV4cG9ydCB0aGUgaW50ZXJmYWNlIGFib3ZlIHNvIGZvbGtzIGNhbiBidWlsZCB0aGVpciBvd25cbiAqIGFic3RyYWN0aW9ucyBhcm91bmQgaW5zdGFuY2VzIHZpYSBpc1JvdXRlRXJyb3JSZXNwb25zZSgpXG4gKi9cbmNsYXNzIEVycm9yUmVzcG9uc2VJbXBsIHtcbiAgY29uc3RydWN0b3Ioc3RhdHVzLCBzdGF0dXNUZXh0LCBkYXRhLCBpbnRlcm5hbCkge1xuICAgIGlmIChpbnRlcm5hbCA9PT0gdm9pZCAwKSB7XG4gICAgICBpbnRlcm5hbCA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICB0aGlzLnN0YXR1c1RleHQgPSBzdGF0dXNUZXh0IHx8IFwiXCI7XG4gICAgdGhpcy5pbnRlcm5hbCA9IGludGVybmFsO1xuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGEudG9TdHJpbmcoKTtcbiAgICAgIHRoaXMuZXJyb3IgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZXJyb3IgaXMgYW4gRXJyb3JSZXNwb25zZSBnZW5lcmF0ZWQgZnJvbSBhIDR4eC81eHhcbiAqIFJlc3BvbnNlIHRocm93biBmcm9tIGFuIGFjdGlvbi9sb2FkZXJcbiAqL1xuZnVuY3Rpb24gaXNSb3V0ZUVycm9yUmVzcG9uc2UoZXJyb3IpIHtcbiAgcmV0dXJuIGVycm9yICE9IG51bGwgJiYgdHlwZW9mIGVycm9yLnN0YXR1cyA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgZXJyb3Iuc3RhdHVzVGV4dCA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgZXJyb3IuaW50ZXJuYWwgPT09IFwiYm9vbGVhblwiICYmIFwiZGF0YVwiIGluIGVycm9yO1xufVxuXG5jb25zdCB2YWxpZE11dGF0aW9uTWV0aG9kc0FyciA9IFtcInBvc3RcIiwgXCJwdXRcIiwgXCJwYXRjaFwiLCBcImRlbGV0ZVwiXTtcbmNvbnN0IHZhbGlkTXV0YXRpb25NZXRob2RzID0gbmV3IFNldCh2YWxpZE11dGF0aW9uTWV0aG9kc0Fycik7XG5jb25zdCB2YWxpZFJlcXVlc3RNZXRob2RzQXJyID0gW1wiZ2V0XCIsIC4uLnZhbGlkTXV0YXRpb25NZXRob2RzQXJyXTtcbmNvbnN0IHZhbGlkUmVxdWVzdE1ldGhvZHMgPSBuZXcgU2V0KHZhbGlkUmVxdWVzdE1ldGhvZHNBcnIpO1xuY29uc3QgcmVkaXJlY3RTdGF0dXNDb2RlcyA9IG5ldyBTZXQoWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XSk7XG5jb25zdCByZWRpcmVjdFByZXNlcnZlTWV0aG9kU3RhdHVzQ29kZXMgPSBuZXcgU2V0KFszMDcsIDMwOF0pO1xuY29uc3QgSURMRV9OQVZJR0FUSU9OID0ge1xuICBzdGF0ZTogXCJpZGxlXCIsXG4gIGxvY2F0aW9uOiB1bmRlZmluZWQsXG4gIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICBqc29uOiB1bmRlZmluZWQsXG4gIHRleHQ6IHVuZGVmaW5lZFxufTtcbmNvbnN0IElETEVfRkVUQ0hFUiA9IHtcbiAgc3RhdGU6IFwiaWRsZVwiLFxuICBkYXRhOiB1bmRlZmluZWQsXG4gIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICBqc29uOiB1bmRlZmluZWQsXG4gIHRleHQ6IHVuZGVmaW5lZFxufTtcbmNvbnN0IElETEVfQkxPQ0tFUiA9IHtcbiAgc3RhdGU6IFwidW5ibG9ja2VkXCIsXG4gIHByb2NlZWQ6IHVuZGVmaW5lZCxcbiAgcmVzZXQ6IHVuZGVmaW5lZCxcbiAgbG9jYXRpb246IHVuZGVmaW5lZFxufTtcbmNvbnN0IEFCU09MVVRFX1VSTF9SRUdFWCA9IC9eKD86W2Etel1bYS16MC05Ky4tXSo6fFxcL1xcLykvaTtcbmNvbnN0IGRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXMgPSByb3V0ZSA9PiAoe1xuICBoYXNFcnJvckJvdW5kYXJ5OiBCb29sZWFuKHJvdXRlLmhhc0Vycm9yQm91bmRhcnkpXG59KTtcbmNvbnN0IFRSQU5TSVRJT05TX1NUT1JBR0VfS0VZID0gXCJyZW1peC1yb3V0ZXItdHJhbnNpdGlvbnNcIjtcbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBjcmVhdGVSb3V0ZXJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIENyZWF0ZSBhIHJvdXRlciBhbmQgbGlzdGVuIHRvIGhpc3RvcnkgUE9QIG5hdmlnYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlcihpbml0KSB7XG4gIGNvbnN0IHJvdXRlcldpbmRvdyA9IGluaXQud2luZG93ID8gaW5pdC53aW5kb3cgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdW5kZWZpbmVkO1xuICBjb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygcm91dGVyV2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiByb3V0ZXJXaW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHJvdXRlcldpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xuICBjb25zdCBpc1NlcnZlciA9ICFpc0Jyb3dzZXI7XG4gIGludmFyaWFudChpbml0LnJvdXRlcy5sZW5ndGggPiAwLCBcIllvdSBtdXN0IHByb3ZpZGUgYSBub24tZW1wdHkgcm91dGVzIGFycmF5IHRvIGNyZWF0ZVJvdXRlclwiKTtcbiAgbGV0IG1hcFJvdXRlUHJvcGVydGllcztcbiAgaWYgKGluaXQubWFwUm91dGVQcm9wZXJ0aWVzKSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gaW5pdC5tYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH0gZWxzZSBpZiAoaW5pdC5kZXRlY3RFcnJvckJvdW5kYXJ5KSB7XG4gICAgLy8gSWYgdGhleSBhcmUgc3RpbGwgdXNpbmcgdGhlIGRlcHJlY2F0ZWQgdmVyc2lvbiwgd3JhcCBpdCB3aXRoIHRoZSBuZXcgQVBJXG4gICAgbGV0IGRldGVjdEVycm9yQm91bmRhcnkgPSBpbml0LmRldGVjdEVycm9yQm91bmRhcnk7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gcm91dGUgPT4gKHtcbiAgICAgIGhhc0Vycm9yQm91bmRhcnk6IGRldGVjdEVycm9yQm91bmRhcnkocm91dGUpXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gZGVmYXVsdE1hcFJvdXRlUHJvcGVydGllcztcbiAgfVxuICAvLyBSb3V0ZXMga2V5ZWQgYnkgSURcbiAgbGV0IG1hbmlmZXN0ID0ge307XG4gIC8vIFJvdXRlcyBpbiB0cmVlIGZvcm1hdCBmb3IgbWF0Y2hpbmdcbiAgbGV0IGRhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKGluaXQucm91dGVzLCBtYXBSb3V0ZVByb3BlcnRpZXMsIHVuZGVmaW5lZCwgbWFuaWZlc3QpO1xuICBsZXQgaW5GbGlnaHREYXRhUm91dGVzO1xuICBsZXQgYmFzZW5hbWUgPSBpbml0LmJhc2VuYW1lIHx8IFwiL1wiO1xuICAvLyBDb25maWcgZHJpdmVuIGJlaGF2aW9yIGZsYWdzXG4gIGxldCBmdXR1cmUgPSBfZXh0ZW5kcyh7XG4gICAgdjdfZmV0Y2hlclBlcnNpc3Q6IGZhbHNlLFxuICAgIHY3X25vcm1hbGl6ZUZvcm1NZXRob2Q6IGZhbHNlLFxuICAgIHY3X3BhcnRpYWxIeWRyYXRpb246IGZhbHNlLFxuICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogZmFsc2UsXG4gICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IGZhbHNlXG4gIH0sIGluaXQuZnV0dXJlKTtcbiAgLy8gQ2xlYW51cCBmdW5jdGlvbiBmb3IgaGlzdG9yeVxuICBsZXQgdW5saXN0ZW5IaXN0b3J5ID0gbnVsbDtcbiAgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbnMgdG8gY2FsbCBvbiBhbGwgc3RhdGUgY2hhbmdlc1xuICBsZXQgc3Vic2NyaWJlcnMgPSBuZXcgU2V0KCk7XG4gIC8vIEV4dGVybmFsbHktcHJvdmlkZWQgb2JqZWN0IHRvIGhvbGQgc2Nyb2xsIHJlc3RvcmF0aW9uIGxvY2F0aW9ucyBkdXJpbmcgcm91dGluZ1xuICBsZXQgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBudWxsO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9uIHRvIGdldCBzY3JvbGwgcmVzdG9yYXRpb24ga2V5c1xuICBsZXQgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgPSBudWxsO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9uIHRvIGdldCBjdXJyZW50IHNjcm9sbCBwb3NpdGlvblxuICBsZXQgZ2V0U2Nyb2xsUG9zaXRpb24gPSBudWxsO1xuICAvLyBPbmUtdGltZSBmbGFnIHRvIGNvbnRyb2wgdGhlIGluaXRpYWwgaHlkcmF0aW9uIHNjcm9sbCByZXN0b3JhdGlvbi4gIEJlY2F1c2VcbiAgLy8gd2UgZG9uJ3QgZ2V0IHRoZSBzYXZlZCBwb3NpdGlvbnMgZnJvbSA8U2Nyb2xsUmVzdG9yYXRpb24gLz4gdW50aWwgX2FmdGVyX1xuICAvLyB0aGUgaW5pdGlhbCByZW5kZXIsIHdlIG5lZWQgdG8gbWFudWFsbHkgdHJpZ2dlciBhIHNlcGFyYXRlIHVwZGF0ZVN0YXRlIHRvXG4gIC8vIHNlbmQgYWxvbmcgdGhlIHJlc3RvcmVTY3JvbGxQb3NpdGlvblxuICAvLyBTZXQgdG8gdHJ1ZSBpZiB3ZSBoYXZlIGBoeWRyYXRpb25EYXRhYCBzaW5jZSB3ZSBhc3N1bWUgd2Ugd2VyZSBTU1InZCBhbmQgdGhhdFxuICAvLyBTU1IgZGlkIHRoZSBpbml0aWFsIHNjcm9sbCByZXN0b3JhdGlvbi5cbiAgbGV0IGluaXRpYWxTY3JvbGxSZXN0b3JlZCA9IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsO1xuICBsZXQgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBpbml0Lmhpc3RvcnkubG9jYXRpb24sIGJhc2VuYW1lKTtcbiAgbGV0IGluaXRpYWxFcnJvcnMgPSBudWxsO1xuICBpZiAoaW5pdGlhbE1hdGNoZXMgPT0gbnVsbCkge1xuICAgIC8vIElmIHdlIGRvIG5vdCBtYXRjaCBhIHVzZXItcHJvdmlkZWQtcm91dGUsIGZhbGwgYmFjayB0byB0aGUgcm9vdFxuICAgIC8vIHRvIGFsbG93IHRoZSBlcnJvciBib3VuZGFyeSB0byB0YWtlIG92ZXJcbiAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgcGF0aG5hbWU6IGluaXQuaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZVxuICAgIH0pO1xuICAgIGxldCB7XG4gICAgICBtYXRjaGVzLFxuICAgICAgcm91dGVcbiAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICBpbml0aWFsTWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgaW5pdGlhbEVycm9ycyA9IHtcbiAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgfTtcbiAgfVxuICBsZXQgaW5pdGlhbGl6ZWQ7XG4gIGxldCBoYXNMYXp5Um91dGVzID0gaW5pdGlhbE1hdGNoZXMuc29tZShtID0+IG0ucm91dGUubGF6eSk7XG4gIGxldCBoYXNMb2FkZXJzID0gaW5pdGlhbE1hdGNoZXMuc29tZShtID0+IG0ucm91dGUubG9hZGVyKTtcbiAgaWYgKGhhc0xhenlSb3V0ZXMpIHtcbiAgICAvLyBBbGwgaW5pdGlhbE1hdGNoZXMgbmVlZCB0byBiZSBsb2FkZWQgYmVmb3JlIHdlJ3JlIHJlYWR5LiAgSWYgd2UgaGF2ZSBsYXp5XG4gICAgLy8gZnVuY3Rpb25zIGFyb3VuZCBzdGlsbCB0aGVuIHdlJ2xsIG5lZWQgdG8gcnVuIHRoZW0gaW4gaW5pdGlhbGl6ZSgpXG4gICAgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgfSBlbHNlIGlmICghaGFzTG9hZGVycykge1xuICAgIC8vIElmIHdlJ3ZlIGdvdCBubyBsb2FkZXJzIHRvIHJ1biwgdGhlbiB3ZSdyZSBnb29kIHRvIGdvXG4gICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICB9IGVsc2UgaWYgKGZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uKSB7XG4gICAgLy8gSWYgcGFydGlhbCBoeWRyYXRpb24gaXMgZW5hYmxlZCwgd2UncmUgaW5pdGlhbGl6ZWQgc28gbG9uZyBhcyB3ZSB3ZXJlXG4gICAgLy8gcHJvdmlkZWQgd2l0aCBoeWRyYXRpb25EYXRhIGZvciBldmVyeSByb3V0ZSB3aXRoIGEgbG9hZGVyLCBhbmQgbm8gbG9hZGVyc1xuICAgIC8vIHdlcmUgbWFya2VkIGZvciBleHBsaWNpdCBoeWRyYXRpb25cbiAgICBsZXQgbG9hZGVyRGF0YSA9IGluaXQuaHlkcmF0aW9uRGF0YSA/IGluaXQuaHlkcmF0aW9uRGF0YS5sb2FkZXJEYXRhIDogbnVsbDtcbiAgICBsZXQgZXJyb3JzID0gaW5pdC5oeWRyYXRpb25EYXRhID8gaW5pdC5oeWRyYXRpb25EYXRhLmVycm9ycyA6IG51bGw7XG4gICAgaW5pdGlhbGl6ZWQgPSBpbml0aWFsTWF0Y2hlcy5ldmVyeShtID0+IG0ucm91dGUubG9hZGVyICYmIG0ucm91dGUubG9hZGVyLmh5ZHJhdGUgIT09IHRydWUgJiYgKGxvYWRlckRhdGEgJiYgbG9hZGVyRGF0YVttLnJvdXRlLmlkXSAhPT0gdW5kZWZpbmVkIHx8IGVycm9ycyAmJiBlcnJvcnNbbS5yb3V0ZS5pZF0gIT09IHVuZGVmaW5lZCkpO1xuICB9IGVsc2Uge1xuICAgIC8vIFdpdGhvdXQgcGFydGlhbCBoeWRyYXRpb24gLSB3ZSdyZSBpbml0aWFsaXplZCBpZiB3ZSB3ZXJlIHByb3ZpZGVkIGFueVxuICAgIC8vIGh5ZHJhdGlvbkRhdGEgLSB3aGljaCBpcyBleHBlY3RlZCB0byBiZSBjb21wbGV0ZVxuICAgIGluaXRpYWxpemVkID0gaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGw7XG4gIH1cbiAgbGV0IHJvdXRlcjtcbiAgbGV0IHN0YXRlID0ge1xuICAgIGhpc3RvcnlBY3Rpb246IGluaXQuaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGluaXQuaGlzdG9yeS5sb2NhdGlvbixcbiAgICBtYXRjaGVzOiBpbml0aWFsTWF0Y2hlcyxcbiAgICBpbml0aWFsaXplZCxcbiAgICBuYXZpZ2F0aW9uOiBJRExFX05BVklHQVRJT04sXG4gICAgLy8gRG9uJ3QgcmVzdG9yZSBvbiBpbml0aWFsIHVwZGF0ZVN0YXRlKCkgaWYgd2Ugd2VyZSBTU1InZFxuICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGwgPyBmYWxzZSA6IG51bGwsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0OiBmYWxzZSxcbiAgICByZXZhbGlkYXRpb246IFwiaWRsZVwiLFxuICAgIGxvYWRlckRhdGE6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEubG9hZGVyRGF0YSB8fCB7fSxcbiAgICBhY3Rpb25EYXRhOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmFjdGlvbkRhdGEgfHwgbnVsbCxcbiAgICBlcnJvcnM6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEuZXJyb3JzIHx8IGluaXRpYWxFcnJvcnMsXG4gICAgZmV0Y2hlcnM6IG5ldyBNYXAoKSxcbiAgICBibG9ja2VyczogbmV3IE1hcCgpXG4gIH07XG4gIC8vIC0tIFN0YXRlZnVsIGludGVybmFsIHZhcmlhYmxlcyB0byBtYW5hZ2UgbmF2aWdhdGlvbnMgLS1cbiAgLy8gQ3VycmVudCBuYXZpZ2F0aW9uIGluIHByb2dyZXNzICh0byBiZSBjb21taXR0ZWQgaW4gY29tcGxldGVOYXZpZ2F0aW9uKVxuICBsZXQgcGVuZGluZ0FjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIC8vIFNob3VsZCB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIHByZXZlbnQgdGhlIHNjcm9sbCByZXNldCBpZiBzY3JvbGwgY2Fubm90XG4gIC8vIGJlIHJlc3RvcmVkP1xuICBsZXQgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IGZhbHNlO1xuICAvLyBBYm9ydENvbnRyb2xsZXIgZm9yIHRoZSBhY3RpdmUgbmF2aWdhdGlvblxuICBsZXQgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyO1xuICAvLyBTaG91bGQgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBlbmFibGUgZG9jdW1lbnQuc3RhcnRWaWV3VHJhbnNpdGlvbj9cbiAgbGV0IHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQgPSBmYWxzZTtcbiAgLy8gU3RvcmUgYXBwbGllZCB2aWV3IHRyYW5zaXRpb25zIHNvIHdlIGNhbiBhcHBseSB0aGVtIG9uIFBPUFxuICBsZXQgYXBwbGllZFZpZXdUcmFuc2l0aW9ucyA9IG5ldyBNYXAoKTtcbiAgLy8gQ2xlYW51cCBmdW5jdGlvbiBmb3IgcGVyc2lzdGluZyBhcHBsaWVkIHRyYW5zaXRpb25zIHRvIHNlc3Npb25TdG9yYWdlXG4gIGxldCByZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIgPSBudWxsO1xuICAvLyBXZSB1c2UgdGhpcyB0byBhdm9pZCB0b3VjaGluZyBoaXN0b3J5IGluIGNvbXBsZXRlTmF2aWdhdGlvbiBpZiBhXG4gIC8vIHJldmFsaWRhdGlvbiBpcyBlbnRpcmVseSB1bmludGVycnVwdGVkXG4gIGxldCBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSBmYWxzZTtcbiAgLy8gVXNlIHRoaXMgaW50ZXJuYWwgZmxhZyB0byBmb3JjZSByZXZhbGlkYXRpb24gb2YgYWxsIGxvYWRlcnM6XG4gIC8vICAtIHN1Ym1pc3Npb25zIChjb21wbGV0ZWQgb3IgaW50ZXJydXB0ZWQpXG4gIC8vICAtIHVzZVJldmFsaWRhdG9yKClcbiAgLy8gIC0gWC1SZW1peC1SZXZhbGlkYXRlIChmcm9tIHJlZGlyZWN0KVxuICBsZXQgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlO1xuICAvLyBVc2UgdGhpcyBpbnRlcm5hbCBhcnJheSB0byBjYXB0dXJlIHJvdXRlcyB0aGF0IHJlcXVpcmUgcmV2YWxpZGF0aW9uIGR1ZVxuICAvLyB0byBhIGNhbmNlbGxlZCBkZWZlcnJlZCBvbiBhY3Rpb24gc3VibWlzc2lvblxuICBsZXQgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMgPSBbXTtcbiAgLy8gVXNlIHRoaXMgaW50ZXJuYWwgYXJyYXkgdG8gY2FwdHVyZSBmZXRjaGVyIGxvYWRzIHRoYXQgd2VyZSBjYW5jZWxsZWQgYnkgYW5cbiAgLy8gYWN0aW9uIG5hdmlnYXRpb24gYW5kIHJlcXVpcmUgcmV2YWxpZGF0aW9uXG4gIGxldCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMgPSBbXTtcbiAgLy8gQWJvcnRDb250cm9sbGVycyBmb3IgYW55IGluLWZsaWdodCBmZXRjaGVyc1xuICBsZXQgZmV0Y2hDb250cm9sbGVycyA9IG5ldyBNYXAoKTtcbiAgLy8gVHJhY2sgbG9hZHMgYmFzZWQgb24gdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgc3RhcnRlZFxuICBsZXQgaW5jcmVtZW50aW5nTG9hZElkID0gMDtcbiAgLy8gVHJhY2sgdGhlIG91dHN0YW5kaW5nIHBlbmRpbmcgbmF2aWdhdGlvbiBkYXRhIGxvYWQgdG8gYmUgY29tcGFyZWQgYWdhaW5zdFxuICAvLyB0aGUgZ2xvYmFsbHkgaW5jcmVtZW50aW5nIGxvYWQgd2hlbiBhIGZldGNoZXIgbG9hZCBsYW5kcyBhZnRlciBhIGNvbXBsZXRlZFxuICAvLyBuYXZpZ2F0aW9uXG4gIGxldCBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA9IC0xO1xuICAvLyBGZXRjaGVycyB0aGF0IHRyaWdnZXJlZCBkYXRhIHJlbG9hZHMgYXMgYSByZXN1bHQgb2YgdGhlaXIgYWN0aW9uc1xuICBsZXQgZmV0Y2hSZWxvYWRJZHMgPSBuZXcgTWFwKCk7XG4gIC8vIEZldGNoZXJzIHRoYXQgdHJpZ2dlcmVkIHJlZGlyZWN0IG5hdmlnYXRpb25zXG4gIGxldCBmZXRjaFJlZGlyZWN0SWRzID0gbmV3IFNldCgpO1xuICAvLyBNb3N0IHJlY2VudCBocmVmL21hdGNoIGZvciBmZXRjaGVyLmxvYWQgY2FsbHMgZm9yIGZldGNoZXJzXG4gIGxldCBmZXRjaExvYWRNYXRjaGVzID0gbmV3IE1hcCgpO1xuICAvLyBSZWYtY291bnQgbW91bnRlZCBmZXRjaGVycyBzbyB3ZSBrbm93IHdoZW4gaXQncyBvayB0byBjbGVhbiB0aGVtIHVwXG4gIGxldCBhY3RpdmVGZXRjaGVycyA9IG5ldyBNYXAoKTtcbiAgLy8gRmV0Y2hlcnMgdGhhdCBoYXZlIHJlcXVlc3RlZCBhIGRlbGV0ZSB3aGVuIHVzaW5nIHY3X2ZldGNoZXJQZXJzaXN0LFxuICAvLyB0aGV5J2xsIGJlIG9mZmljaWFsbHkgcmVtb3ZlZCBhZnRlciB0aGV5IHJldHVybiB0byBpZGxlXG4gIGxldCBkZWxldGVkRmV0Y2hlcnMgPSBuZXcgU2V0KCk7XG4gIC8vIFN0b3JlIERlZmVycmVkRGF0YSBpbnN0YW5jZXMgZm9yIGFjdGl2ZSByb3V0ZSBtYXRjaGVzLiAgV2hlbiBhXG4gIC8vIHJvdXRlIGxvYWRlciByZXR1cm5zIGRlZmVyKCkgd2Ugc3RpY2sgb25lIGluIGhlcmUuICBUaGVuLCB3aGVuIGEgbmVzdGVkXG4gIC8vIHByb21pc2UgcmVzb2x2ZXMgd2UgdXBkYXRlIGxvYWRlckRhdGEuICBJZiBhIG5ldyBuYXZpZ2F0aW9uIHN0YXJ0cyB3ZVxuICAvLyBjYW5jZWwgYWN0aXZlIGRlZmVycmVkcyBmb3IgZWxpbWluYXRlZCByb3V0ZXMuXG4gIGxldCBhY3RpdmVEZWZlcnJlZHMgPSBuZXcgTWFwKCk7XG4gIC8vIFN0b3JlIGJsb2NrZXIgZnVuY3Rpb25zIGluIGEgc2VwYXJhdGUgTWFwIG91dHNpZGUgb2Ygcm91dGVyIHN0YXRlIHNpbmNlXG4gIC8vIHdlIGRvbid0IG5lZWQgdG8gdXBkYXRlIFVJIHN0YXRlIGlmIHRoZXkgY2hhbmdlXG4gIGxldCBibG9ja2VyRnVuY3Rpb25zID0gbmV3IE1hcCgpO1xuICAvLyBGbGFnIHRvIGlnbm9yZSB0aGUgbmV4dCBoaXN0b3J5IHVwZGF0ZSwgc28gd2UgY2FuIHJldmVydCB0aGUgVVJMIGNoYW5nZSBvblxuICAvLyBhIFBPUCBuYXZpZ2F0aW9uIHRoYXQgd2FzIGJsb2NrZWQgYnkgdGhlIHVzZXIgd2l0aG91dCB0b3VjaGluZyByb3V0ZXIgc3RhdGVcbiAgbGV0IGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gZmFsc2U7XG4gIC8vIEluaXRpYWxpemUgdGhlIHJvdXRlciwgYWxsIHNpZGUgZWZmZWN0cyBzaG91bGQgYmUga2lja2VkIG9mZiBmcm9tIGhlcmUuXG4gIC8vIEltcGxlbWVudGVkIGFzIGEgRmx1ZW50IEFQSSBmb3IgZWFzZSBvZjpcbiAgLy8gICBsZXQgcm91dGVyID0gY3JlYXRlUm91dGVyKGluaXQpLmluaXRpYWxpemUoKTtcbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICAvLyBJZiBoaXN0b3J5IGluZm9ybXMgdXMgb2YgYSBQT1AgbmF2aWdhdGlvbiwgc3RhcnQgdGhlIG5hdmlnYXRpb24gYnV0IGRvIG5vdCB1cGRhdGVcbiAgICAvLyBzdGF0ZS4gIFdlJ2xsIHVwZGF0ZSBvdXIgb3duIHN0YXRlIG9uY2UgdGhlIG5hdmlnYXRpb24gY29tcGxldGVzXG4gICAgdW5saXN0ZW5IaXN0b3J5ID0gaW5pdC5oaXN0b3J5Lmxpc3RlbihfcmVmID0+IHtcbiAgICAgIGxldCB7XG4gICAgICAgIGFjdGlvbjogaGlzdG9yeUFjdGlvbixcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIGRlbHRhXG4gICAgICB9ID0gX3JlZjtcbiAgICAgIC8vIElnbm9yZSB0aGlzIGV2ZW50IGlmIGl0IHdhcyBqdXN0IHVzIHJlc2V0dGluZyB0aGUgVVJMIGZyb20gYVxuICAgICAgLy8gYmxvY2tlZCBQT1AgbmF2aWdhdGlvblxuICAgICAgaWYgKGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlKSB7XG4gICAgICAgIGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHdhcm5pbmcoYmxvY2tlckZ1bmN0aW9ucy5zaXplID09PSAwIHx8IGRlbHRhICE9IG51bGwsIFwiWW91IGFyZSB0cnlpbmcgdG8gdXNlIGEgYmxvY2tlciBvbiBhIFBPUCBuYXZpZ2F0aW9uIHRvIGEgbG9jYXRpb24gXCIgKyBcInRoYXQgd2FzIG5vdCBjcmVhdGVkIGJ5IEByZW1peC1ydW4vcm91dGVyLiBUaGlzIHdpbGwgZmFpbCBzaWxlbnRseSBpbiBcIiArIFwicHJvZHVjdGlvbi4gVGhpcyBjYW4gaGFwcGVuIGlmIHlvdSBhcmUgbmF2aWdhdGluZyBvdXRzaWRlIHRoZSByb3V0ZXIgXCIgKyBcInZpYSBgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlYC9gd2luZG93LmxvY2F0aW9uLmhhc2hgIGluc3RlYWQgb2YgdXNpbmcgXCIgKyBcInJvdXRlciBuYXZpZ2F0aW9uIEFQSXMuICBUaGlzIGNhbiBhbHNvIGhhcHBlbiBpZiB5b3UgYXJlIHVzaW5nIFwiICsgXCJjcmVhdGVIYXNoUm91dGVyIGFuZCB0aGUgdXNlciBtYW51YWxseSBjaGFuZ2VzIHRoZSBVUkwuXCIpO1xuICAgICAgbGV0IGJsb2NrZXJLZXkgPSBzaG91bGRCbG9ja05hdmlnYXRpb24oe1xuICAgICAgICBjdXJyZW50TG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBuZXh0TG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBoaXN0b3J5QWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGlmIChibG9ja2VyS2V5ICYmIGRlbHRhICE9IG51bGwpIHtcbiAgICAgICAgLy8gUmVzdG9yZSB0aGUgVVJMIHRvIG1hdGNoIHRoZSBjdXJyZW50IFVJLCBidXQgZG9uJ3QgdXBkYXRlIHJvdXRlciBzdGF0ZVxuICAgICAgICBpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSA9IHRydWU7XG4gICAgICAgIGluaXQuaGlzdG9yeS5nbyhkZWx0YSAqIC0xKTtcbiAgICAgICAgLy8gUHV0IHRoZSBibG9ja2VyIGludG8gYSBibG9ja2VkIHN0YXRlXG4gICAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICAgIHN0YXRlOiBcImJsb2NrZWRcIixcbiAgICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgICBwcm9jZWVkKCkge1xuICAgICAgICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgICAgICAgIHN0YXRlOiBcInByb2NlZWRpbmdcIixcbiAgICAgICAgICAgICAgcHJvY2VlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICByZXNldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBsb2NhdGlvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBSZS1kbyB0aGUgc2FtZSBQT1AgbmF2aWdhdGlvbiB3ZSBqdXN0IGJsb2NrZWRcbiAgICAgICAgICAgIGluaXQuaGlzdG9yeS5nbyhkZWx0YSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXNldCgpIHtcbiAgICAgICAgICAgIGxldCBibG9ja2VycyA9IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpO1xuICAgICAgICAgICAgYmxvY2tlcnMuc2V0KGJsb2NrZXJLZXksIElETEVfQkxPQ0tFUik7XG4gICAgICAgICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgICAgICAgIGJsb2NrZXJzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIGxvY2F0aW9uKTtcbiAgICB9KTtcbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICAvLyBGSVhNRTogVGhpcyBmZWVscyBncm9zcy4gIEhvdyBjYW4gd2UgY2xlYW51cCB0aGUgbGluZXMgYmV0d2VlblxuICAgICAgLy8gc2Nyb2xsUmVzdG9yYXRpb24vYXBwbGllZFRyYW5zaXRpb25zIHBlcnNpc3RhbmNlP1xuICAgICAgcmVzdG9yZUFwcGxpZWRUcmFuc2l0aW9ucyhyb3V0ZXJXaW5kb3csIGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMpO1xuICAgICAgbGV0IF9zYXZlQXBwbGllZFRyYW5zaXRpb25zID0gKCkgPT4gcGVyc2lzdEFwcGxpZWRUcmFuc2l0aW9ucyhyb3V0ZXJXaW5kb3csIGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMpO1xuICAgICAgcm91dGVyV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBfc2F2ZUFwcGxpZWRUcmFuc2l0aW9ucyk7XG4gICAgICByZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIgPSAoKSA9PiByb3V0ZXJXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIF9zYXZlQXBwbGllZFRyYW5zaXRpb25zKTtcbiAgICB9XG4gICAgLy8gS2ljayBvZmYgaW5pdGlhbCBkYXRhIGxvYWQgaWYgbmVlZGVkLiAgVXNlIFBvcCB0byBhdm9pZCBtb2RpZnlpbmcgaGlzdG9yeVxuICAgIC8vIE5vdGUgd2UgZG9uJ3QgZG8gYW55IGhhbmRsaW5nIG9mIGxhenkgaGVyZS4gIEZvciBTUEEncyBpdCdsbCBnZXQgaGFuZGxlZFxuICAgIC8vIGluIHRoZSBub3JtYWwgbmF2aWdhdGlvbiBmbG93LiAgRm9yIFNTUiBpdCdzIGV4cGVjdGVkIHRoYXQgbGF6eSBtb2R1bGVzIGFyZVxuICAgIC8vIHJlc29sdmVkIHByaW9yIHRvIHJvdXRlciBjcmVhdGlvbiBzaW5jZSB3ZSBjYW4ndCBnbyBpbnRvIGEgZmFsbGJhY2tFbGVtZW50XG4gICAgLy8gVUkgZm9yIFNTUidkIGFwcHNcbiAgICBpZiAoIXN0YXRlLmluaXRpYWxpemVkKSB7XG4gICAgICBzdGFydE5hdmlnYXRpb24oQWN0aW9uLlBvcCwgc3RhdGUubG9jYXRpb24sIHtcbiAgICAgICAgaW5pdGlhbEh5ZHJhdGlvbjogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByb3V0ZXI7XG4gIH1cbiAgLy8gQ2xlYW4gdXAgYSByb3V0ZXIgYW5kIGl0J3Mgc2lkZSBlZmZlY3RzXG4gIGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgaWYgKHVubGlzdGVuSGlzdG9yeSkge1xuICAgICAgdW5saXN0ZW5IaXN0b3J5KCk7XG4gICAgfVxuICAgIGlmIChyZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHJlbW92ZVBhZ2VIaWRlRXZlbnRMaXN0ZW5lcigpO1xuICAgIH1cbiAgICBzdWJzY3JpYmVycy5jbGVhcigpO1xuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBzdGF0ZS5mZXRjaGVycy5mb3JFYWNoKChfLCBrZXkpID0+IGRlbGV0ZUZldGNoZXIoa2V5KSk7XG4gICAgc3RhdGUuYmxvY2tlcnMuZm9yRWFjaCgoXywga2V5KSA9PiBkZWxldGVCbG9ja2VyKGtleSkpO1xuICB9XG4gIC8vIFN1YnNjcmliZSB0byBzdGF0ZSB1cGRhdGVzIGZvciB0aGUgcm91dGVyXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShmbikge1xuICAgIHN1YnNjcmliZXJzLmFkZChmbik7XG4gICAgcmV0dXJuICgpID0+IHN1YnNjcmliZXJzLmRlbGV0ZShmbik7XG4gIH1cbiAgLy8gVXBkYXRlIG91ciBzdGF0ZSBhbmQgbm90aWZ5IHRoZSBjYWxsaW5nIGNvbnRleHQgb2YgdGhlIGNoYW5nZVxuICBmdW5jdGlvbiB1cGRhdGVTdGF0ZShuZXdTdGF0ZSwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG4gICAgc3RhdGUgPSBfZXh0ZW5kcyh7fSwgc3RhdGUsIG5ld1N0YXRlKTtcbiAgICAvLyBQcmVwIGZldGNoZXIgY2xlYW51cCBzbyB3ZSBjYW4gdGVsbCB0aGUgVUkgd2hpY2ggZmV0Y2hlciBkYXRhIGVudHJpZXNcbiAgICAvLyBjYW4gYmUgcmVtb3ZlZFxuICAgIGxldCBjb21wbGV0ZWRGZXRjaGVycyA9IFtdO1xuICAgIGxldCBkZWxldGVkRmV0Y2hlcnNLZXlzID0gW107XG4gICAgaWYgKGZ1dHVyZS52N19mZXRjaGVyUGVyc2lzdCkge1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuZm9yRWFjaCgoZmV0Y2hlciwga2V5KSA9PiB7XG4gICAgICAgIGlmIChmZXRjaGVyLnN0YXRlID09PSBcImlkbGVcIikge1xuICAgICAgICAgIGlmIChkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIC8vIFVubW91bnRlZCBmcm9tIHRoZSBVSSBhbmQgY2FuIGJlIHRvdGFsbHkgcmVtb3ZlZFxuICAgICAgICAgICAgZGVsZXRlZEZldGNoZXJzS2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFJldHVybmVkIHRvIGlkbGUgYnV0IHN0aWxsIG1vdW50ZWQgaW4gdGhlIFVJLCBzbyBzZW1pLXJlbWFpbnMgZm9yXG4gICAgICAgICAgICAvLyByZXZhbGlkYXRpb25zIGFuZCBzdWNoXG4gICAgICAgICAgICBjb21wbGV0ZWRGZXRjaGVycy5wdXNoKGtleSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGEgbG9jYWwgY29weSBzbyB0aGF0IGlmIGZsdXNoU3luYyBpcyB1c2VkIGFuZCB3ZSBlbmQgdXBcbiAgICAvLyByZW1vdmluZyBhbmQgYWRkaW5nIGEgbmV3IHN1YnNjcmliZXIgZHVlIHRvIHRoZSB1c2VDYWxsYmFjayBkZXBlbmRlbmNpZXMsXG4gICAgLy8gd2UgZG9uJ3QgZ2V0IG91cnNlbHZlcyBpbnRvIGEgbG9vcCBjYWxsaW5nIHRoZSBuZXcgc3Vic2NyaWJlciBpbW1lZGlhdGVseVxuICAgIFsuLi5zdWJzY3JpYmVyc10uZm9yRWFjaChzdWJzY3JpYmVyID0+IHN1YnNjcmliZXIoc3RhdGUsIHtcbiAgICAgIGRlbGV0ZWRGZXRjaGVyczogZGVsZXRlZEZldGNoZXJzS2V5cyxcbiAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uT3B0czogb3B0cy52aWV3VHJhbnNpdGlvbk9wdHMsXG4gICAgICB1bnN0YWJsZV9mbHVzaFN5bmM6IG9wdHMuZmx1c2hTeW5jID09PSB0cnVlXG4gICAgfSkpO1xuICAgIC8vIFJlbW92ZSBpZGxlIGZldGNoZXJzIGZyb20gc3RhdGUgc2luY2Ugd2Ugb25seSBjYXJlIGFib3V0IGluLWZsaWdodCBmZXRjaGVycy5cbiAgICBpZiAoZnV0dXJlLnY3X2ZldGNoZXJQZXJzaXN0KSB7XG4gICAgICBjb21wbGV0ZWRGZXRjaGVycy5mb3JFYWNoKGtleSA9PiBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KSk7XG4gICAgICBkZWxldGVkRmV0Y2hlcnNLZXlzLmZvckVhY2goa2V5ID0+IGRlbGV0ZUZldGNoZXIoa2V5KSk7XG4gICAgfVxuICB9XG4gIC8vIENvbXBsZXRlIGEgbmF2aWdhdGlvbiByZXR1cm5pbmcgdGhlIHN0YXRlLm5hdmlnYXRpb24gYmFjayB0byB0aGUgSURMRV9OQVZJR0FUSU9OXG4gIC8vIGFuZCBzZXR0aW5nIHN0YXRlLltoaXN0b3J5QWN0aW9uL2xvY2F0aW9uL21hdGNoZXNdIHRvIHRoZSBuZXcgcm91dGUuXG4gIC8vIC0gTG9jYXRpb24gaXMgYSByZXF1aXJlZCBwYXJhbVxuICAvLyAtIE5hdmlnYXRpb24gd2lsbCBhbHdheXMgYmUgc2V0IHRvIElETEVfTkFWSUdBVElPTlxuICAvLyAtIENhbiBwYXNzIGFueSBvdGhlciBzdGF0ZSBpbiBuZXdTdGF0ZVxuICBmdW5jdGlvbiBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIG5ld1N0YXRlLCBfdGVtcCkge1xuICAgIHZhciBfbG9jYXRpb24kc3RhdGUsIF9sb2NhdGlvbiRzdGF0ZTI7XG4gICAgbGV0IHtcbiAgICAgIGZsdXNoU3luY1xuICAgIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgICAvLyBEZWR1Y2UgaWYgd2UncmUgaW4gYSBsb2FkaW5nL2FjdGlvblJlbG9hZCBzdGF0ZTpcbiAgICAvLyAtIFdlIGhhdmUgY29tbWl0dGVkIGFjdGlvbkRhdGEgaW4gdGhlIHN0b3JlXG4gICAgLy8gLSBUaGUgY3VycmVudCBuYXZpZ2F0aW9uIHdhcyBhIG11dGF0aW9uIHN1Ym1pc3Npb25cbiAgICAvLyAtIFdlJ3JlIHBhc3QgdGhlIHN1Ym1pdHRpbmcgc3RhdGUgYW5kIGludG8gdGhlIGxvYWRpbmcgc3RhdGVcbiAgICAvLyAtIFRoZSBsb2NhdGlvbiBiZWluZyBsb2FkZWQgaXMgbm90IHRoZSByZXN1bHQgb2YgYSByZWRpcmVjdFxuICAgIGxldCBpc0FjdGlvblJlbG9hZCA9IHN0YXRlLmFjdGlvbkRhdGEgIT0gbnVsbCAmJiBzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QgIT0gbnVsbCAmJiBpc011dGF0aW9uTWV0aG9kKHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCkgJiYgc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIgJiYgKChfbG9jYXRpb24kc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9sb2NhdGlvbiRzdGF0ZS5faXNSZWRpcmVjdCkgIT09IHRydWU7XG4gICAgbGV0IGFjdGlvbkRhdGE7XG4gICAgaWYgKG5ld1N0YXRlLmFjdGlvbkRhdGEpIHtcbiAgICAgIGlmIChPYmplY3Qua2V5cyhuZXdTdGF0ZS5hY3Rpb25EYXRhKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGFjdGlvbkRhdGEgPSBuZXdTdGF0ZS5hY3Rpb25EYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRW1wdHkgYWN0aW9uRGF0YSAtPiBjbGVhciBwcmlvciBhY3Rpb25EYXRhIGR1ZSB0byBhbiBhY3Rpb24gZXJyb3JcbiAgICAgICAgYWN0aW9uRGF0YSA9IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0FjdGlvblJlbG9hZCkge1xuICAgICAgLy8gS2VlcCB0aGUgY3VycmVudCBkYXRhIGlmIHdlJ3JlIHdyYXBwaW5nIHVwIHRoZSBhY3Rpb24gcmVsb2FkXG4gICAgICBhY3Rpb25EYXRhID0gc3RhdGUuYWN0aW9uRGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2xlYXIgYWN0aW9uRGF0YSBvbiBhbnkgb3RoZXIgY29tcGxldGVkIG5hdmlnYXRpb25zXG4gICAgICBhY3Rpb25EYXRhID0gbnVsbDtcbiAgICB9XG4gICAgLy8gQWx3YXlzIHByZXNlcnZlIGFueSBleGlzdGluZyBsb2FkZXJEYXRhIGZyb20gcmUtdXNlZCByb3V0ZXNcbiAgICBsZXQgbG9hZGVyRGF0YSA9IG5ld1N0YXRlLmxvYWRlckRhdGEgPyBtZXJnZUxvYWRlckRhdGEoc3RhdGUubG9hZGVyRGF0YSwgbmV3U3RhdGUubG9hZGVyRGF0YSwgbmV3U3RhdGUubWF0Y2hlcyB8fCBbXSwgbmV3U3RhdGUuZXJyb3JzKSA6IHN0YXRlLmxvYWRlckRhdGE7XG4gICAgLy8gT24gYSBzdWNjZXNzZnVsIG5hdmlnYXRpb24gd2UgY2FuIGFzc3VtZSB3ZSBnb3QgdGhyb3VnaCBhbGwgYmxvY2tlcnNcbiAgICAvLyBzbyB3ZSBjYW4gc3RhcnQgZnJlc2hcbiAgICBsZXQgYmxvY2tlcnMgPSBzdGF0ZS5ibG9ja2VycztcbiAgICBpZiAoYmxvY2tlcnMuc2l6ZSA+IDApIHtcbiAgICAgIGJsb2NrZXJzID0gbmV3IE1hcChibG9ja2Vycyk7XG4gICAgICBibG9ja2Vycy5mb3JFYWNoKChfLCBrKSA9PiBibG9ja2Vycy5zZXQoaywgSURMRV9CTE9DS0VSKSk7XG4gICAgfVxuICAgIC8vIEFsd2F5cyByZXNwZWN0IHRoZSB1c2VyIGZsYWcuICBPdGhlcndpc2UgZG9uJ3QgcmVzZXQgb24gbXV0YXRpb25cbiAgICAvLyBzdWJtaXNzaW9uIG5hdmlnYXRpb25zIHVubGVzcyB0aGV5IHJlZGlyZWN0XG4gICAgbGV0IHByZXZlbnRTY3JvbGxSZXNldCA9IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUgfHwgc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kICE9IG51bGwgJiYgaXNNdXRhdGlvbk1ldGhvZChzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QpICYmICgoX2xvY2F0aW9uJHN0YXRlMiA9IGxvY2F0aW9uLnN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2xvY2F0aW9uJHN0YXRlMi5faXNSZWRpcmVjdCkgIT09IHRydWU7XG4gICAgaWYgKGluRmxpZ2h0RGF0YVJvdXRlcykge1xuICAgICAgZGF0YVJvdXRlcyA9IGluRmxpZ2h0RGF0YVJvdXRlcztcbiAgICAgIGluRmxpZ2h0RGF0YVJvdXRlcyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbikgOyBlbHNlIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUG9wKSA7IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5QdXNoKSB7XG4gICAgICBpbml0Lmhpc3RvcnkucHVzaChsb2NhdGlvbiwgbG9jYXRpb24uc3RhdGUpO1xuICAgIH0gZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlJlcGxhY2UpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5yZXBsYWNlKGxvY2F0aW9uLCBsb2NhdGlvbi5zdGF0ZSk7XG4gICAgfVxuICAgIGxldCB2aWV3VHJhbnNpdGlvbk9wdHM7XG4gICAgLy8gT24gUE9QLCBlbmFibGUgdHJhbnNpdGlvbnMgaWYgdGhleSB3ZXJlIGVuYWJsZWQgb24gdGhlIG9yaWdpbmFsIG5hdmlnYXRpb25cbiAgICBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlBvcCkge1xuICAgICAgLy8gRm9yd2FyZCB0YWtlcyBwcmVjZWRlbmNlIHNvIHRoZXkgYmVoYXZlIGxpa2UgdGhlIG9yaWdpbmFsIG5hdmlnYXRpb25cbiAgICAgIGxldCBwcmlvclBhdGhzID0gYXBwbGllZFZpZXdUcmFuc2l0aW9ucy5nZXQoc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpO1xuICAgICAgaWYgKHByaW9yUGF0aHMgJiYgcHJpb3JQYXRocy5oYXMobG9jYXRpb24ucGF0aG5hbWUpKSB7XG4gICAgICAgIHZpZXdUcmFuc2l0aW9uT3B0cyA9IHtcbiAgICAgICAgICBjdXJyZW50TG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgICAgICAgIG5leHRMb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAoYXBwbGllZFZpZXdUcmFuc2l0aW9ucy5oYXMobG9jYXRpb24ucGF0aG5hbWUpKSB7XG4gICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYSBwcmV2aW91cyBmb3J3YXJkIG5hdiwgYXNzdW1lIHdlJ3JlIHBvcHBpbmcgYmFjayB0b1xuICAgICAgICAvLyB0aGUgbmV3IGxvY2F0aW9uIGFuZCBlbmFibGUgaWYgdGhhdCBsb2NhdGlvbiBwcmV2aW91c2x5IGVuYWJsZWRcbiAgICAgICAgdmlld1RyYW5zaXRpb25PcHRzID0ge1xuICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgbmV4dExvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvblxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGVuZGluZ1ZpZXdUcmFuc2l0aW9uRW5hYmxlZCkge1xuICAgICAgLy8gU3RvcmUgdGhlIGFwcGxpZWQgdHJhbnNpdGlvbiBvbiBQVVNIL1JFUExBQ0VcbiAgICAgIGxldCB0b1BhdGhzID0gYXBwbGllZFZpZXdUcmFuc2l0aW9ucy5nZXQoc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpO1xuICAgICAgaWYgKHRvUGF0aHMpIHtcbiAgICAgICAgdG9QYXRocy5hZGQobG9jYXRpb24ucGF0aG5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9QYXRocyA9IG5ldyBTZXQoW2xvY2F0aW9uLnBhdGhuYW1lXSk7XG4gICAgICAgIGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMuc2V0KHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lLCB0b1BhdGhzKTtcbiAgICAgIH1cbiAgICAgIHZpZXdUcmFuc2l0aW9uT3B0cyA9IHtcbiAgICAgICAgY3VycmVudExvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfTtcbiAgICB9XG4gICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoe30sIG5ld1N0YXRlLCB7XG4gICAgICBhY3Rpb25EYXRhLFxuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGhpc3RvcnlBY3Rpb246IHBlbmRpbmdBY3Rpb24sXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGluaXRpYWxpemVkOiB0cnVlLFxuICAgICAgbmF2aWdhdGlvbjogSURMRV9OQVZJR0FUSU9OLFxuICAgICAgcmV2YWxpZGF0aW9uOiBcImlkbGVcIixcbiAgICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbmV3U3RhdGUubWF0Y2hlcyB8fCBzdGF0ZS5tYXRjaGVzKSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIGJsb2NrZXJzXG4gICAgfSksIHtcbiAgICAgIHZpZXdUcmFuc2l0aW9uT3B0cyxcbiAgICAgIGZsdXNoU3luYzogZmx1c2hTeW5jID09PSB0cnVlXG4gICAgfSk7XG4gICAgLy8gUmVzZXQgc3RhdGVmdWwgbmF2aWdhdGlvbiB2YXJzXG4gICAgcGVuZGluZ0FjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IGZhbHNlO1xuICAgIHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSBmYWxzZTtcbiAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gZmFsc2U7XG4gICAgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMgPSBbXTtcbiAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMgPSBbXTtcbiAgfVxuICAvLyBUcmlnZ2VyIGEgbmF2aWdhdGlvbiBldmVudCwgd2hpY2ggY2FuIGVpdGhlciBiZSBhIG51bWVyaWNhbCBQT1Agb3IgYSBQVVNIXG4gIC8vIHJlcGxhY2Ugd2l0aCBhbiBvcHRpb25hbCBzdWJtaXNzaW9uXG4gIGFzeW5jIGZ1bmN0aW9uIG5hdmlnYXRlKHRvLCBvcHRzKSB7XG4gICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgaW5pdC5oaXN0b3J5LmdvKHRvKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplVG8oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcHJlcGVuZEJhc2VuYW1lLCB0bywgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoLCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmZyb21Sb3V0ZUlkLCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnJlbGF0aXZlKTtcbiAgICBsZXQge1xuICAgICAgcGF0aCxcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICBlcnJvclxuICAgIH0gPSBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMoZnV0dXJlLnY3X25vcm1hbGl6ZUZvcm1NZXRob2QsIGZhbHNlLCBub3JtYWxpemVkUGF0aCwgb3B0cyk7XG4gICAgbGV0IGN1cnJlbnRMb2NhdGlvbiA9IHN0YXRlLmxvY2F0aW9uO1xuICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihzdGF0ZS5sb2NhdGlvbiwgcGF0aCwgb3B0cyAmJiBvcHRzLnN0YXRlKTtcbiAgICAvLyBXaGVuIHVzaW5nIG5hdmlnYXRlIGFzIGEgUFVTSC9SRVBMQUNFIHdlIGFyZW4ndCByZWFkaW5nIGFuIGFscmVhZHktZW5jb2RlZFxuICAgIC8vIFVSTCBmcm9tIHdpbmRvdy5sb2NhdGlvbiwgc28gd2UgbmVlZCB0byBlbmNvZGUgaXQgaGVyZSBzbyB0aGUgYmVoYXZpb3JcbiAgICAvLyByZW1haW5zIHRoZSBzYW1lIGFzIFBPUCBhbmQgbm9uLWRhdGEtcm91dGVyIHVzYWdlcy4gIG5ldyBVUkwoKSBkb2VzIGFsbFxuICAgIC8vIHRoZSBzYW1lIGVuY29kaW5nIHdlJ2QgZ2V0IGZyb20gYSBoaXN0b3J5LnB1c2hTdGF0ZS93aW5kb3cubG9jYXRpb24gcmVhZFxuICAgIC8vIHdpdGhvdXQgaGF2aW5nIHRvIHRvdWNoIGhpc3RvcnlcbiAgICBuZXh0TG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgbmV4dExvY2F0aW9uLCBpbml0Lmhpc3RvcnkuZW5jb2RlTG9jYXRpb24obmV4dExvY2F0aW9uKSk7XG4gICAgbGV0IHVzZXJSZXBsYWNlID0gb3B0cyAmJiBvcHRzLnJlcGxhY2UgIT0gbnVsbCA/IG9wdHMucmVwbGFjZSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgaGlzdG9yeUFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgIGlmICh1c2VyUmVwbGFjZSA9PT0gdHJ1ZSkge1xuICAgICAgaGlzdG9yeUFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIH0gZWxzZSBpZiAodXNlclJlcGxhY2UgPT09IGZhbHNlKSA7IGVsc2UgaWYgKHN1Ym1pc3Npb24gIT0gbnVsbCAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkgJiYgc3VibWlzc2lvbi5mb3JtQWN0aW9uID09PSBzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSArIHN0YXRlLmxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgLy8gQnkgZGVmYXVsdCBvbiBzdWJtaXNzaW9ucyB0byB0aGUgY3VycmVudCBsb2NhdGlvbiB3ZSBSRVBMQUNFIHNvIHRoYXRcbiAgICAgIC8vIHVzZXJzIGRvbid0IGhhdmUgdG8gZG91YmxlLWNsaWNrIHRoZSBiYWNrIGJ1dHRvbiB0byBnZXQgdG8gdGhlIHByaW9yXG4gICAgICAvLyBsb2NhdGlvbi4gIElmIHRoZSB1c2VyIHJlZGlyZWN0cyB0byBhIGRpZmZlcmVudCBsb2NhdGlvbiBmcm9tIHRoZVxuICAgICAgLy8gYWN0aW9uL2xvYWRlciB0aGlzIHdpbGwgYmUgaWdub3JlZCBhbmQgdGhlIHJlZGlyZWN0IHdpbGwgYmUgYSBQVVNIXG4gICAgICBoaXN0b3J5QWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgfVxuICAgIGxldCBwcmV2ZW50U2Nyb2xsUmVzZXQgPSBvcHRzICYmIFwicHJldmVudFNjcm9sbFJlc2V0XCIgaW4gb3B0cyA/IG9wdHMucHJldmVudFNjcm9sbFJlc2V0ID09PSB0cnVlIDogdW5kZWZpbmVkO1xuICAgIGxldCBmbHVzaFN5bmMgPSAob3B0cyAmJiBvcHRzLnVuc3RhYmxlX2ZsdXNoU3luYykgPT09IHRydWU7XG4gICAgbGV0IGJsb2NrZXJLZXkgPSBzaG91bGRCbG9ja05hdmlnYXRpb24oe1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0pO1xuICAgIGlmIChibG9ja2VyS2V5KSB7XG4gICAgICAvLyBQdXQgdGhlIGJsb2NrZXIgaW50byBhIGJsb2NrZWQgc3RhdGVcbiAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICBzdGF0ZTogXCJibG9ja2VkXCIsXG4gICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sXG4gICAgICAgIHByb2NlZWQoKSB7XG4gICAgICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgICAgICBzdGF0ZTogXCJwcm9jZWVkaW5nXCIsXG4gICAgICAgICAgICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICByZXNldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICAgIC8vIFNlbmQgdGhlIHNhbWUgbmF2aWdhdGlvbiB0aHJvdWdoXG4gICAgICAgICAgbmF2aWdhdGUodG8sIG9wdHMpO1xuICAgICAgICB9LFxuICAgICAgICByZXNldCgpIHtcbiAgICAgICAgICBsZXQgYmxvY2tlcnMgPSBuZXcgTWFwKHN0YXRlLmJsb2NrZXJzKTtcbiAgICAgICAgICBibG9ja2Vycy5zZXQoYmxvY2tlcktleSwgSURMRV9CTE9DS0VSKTtcbiAgICAgICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgICAgICBibG9ja2Vyc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHN0YXJ0TmF2aWdhdGlvbihoaXN0b3J5QWN0aW9uLCBuZXh0TG9jYXRpb24sIHtcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICAvLyBTZW5kIHRocm91Z2ggdGhlIGZvcm1EYXRhIHNlcmlhbGl6YXRpb24gZXJyb3IgaWYgd2UgaGF2ZSBvbmUgc28gd2UgY2FuXG4gICAgICAvLyByZW5kZXIgYXQgdGhlIHJpZ2h0IGVycm9yIGJvdW5kYXJ5IGFmdGVyIHdlIG1hdGNoIHJvdXRlc1xuICAgICAgcGVuZGluZ0Vycm9yOiBlcnJvcixcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIHJlcGxhY2U6IG9wdHMgJiYgb3B0cy5yZXBsYWNlLFxuICAgICAgZW5hYmxlVmlld1RyYW5zaXRpb246IG9wdHMgJiYgb3B0cy51bnN0YWJsZV92aWV3VHJhbnNpdGlvbixcbiAgICAgIGZsdXNoU3luY1xuICAgIH0pO1xuICB9XG4gIC8vIFJldmFsaWRhdGUgYWxsIGN1cnJlbnQgbG9hZGVycy4gIElmIGEgbmF2aWdhdGlvbiBpcyBpbiBwcm9ncmVzcyBvciBpZiB0aGlzXG4gIC8vIGlzIGludGVycnVwdGVkIGJ5IGEgbmF2aWdhdGlvbiwgYWxsb3cgdGhpcyB0byBcInN1Y2NlZWRcIiBieSBjYWxsaW5nIGFsbFxuICAvLyBsb2FkZXJzIGR1cmluZyB0aGUgbmV4dCBsb2FkZXIgcm91bmRcbiAgZnVuY3Rpb24gcmV2YWxpZGF0ZSgpIHtcbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIHJldmFsaWRhdGlvbjogXCJsb2FkaW5nXCJcbiAgICB9KTtcbiAgICAvLyBJZiB3ZSdyZSBjdXJyZW50bHkgc3VibWl0dGluZyBhbiBhY3Rpb24sIHdlIGRvbid0IG5lZWQgdG8gc3RhcnQgYSBuZXdcbiAgICAvLyBuYXZpZ2F0aW9uLCB3ZSdsbCBqdXN0IGxldCB0aGUgZm9sbG93IHVwIGxvYWRlciBleGVjdXRpb24gY2FsbCBhbGwgbG9hZGVyc1xuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcInN1Ym1pdHRpbmdcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBJZiB3ZSdyZSBjdXJyZW50bHkgaW4gYW4gaWRsZSBzdGF0ZSwgc3RhcnQgYSBuZXcgbmF2aWdhdGlvbiBmb3IgdGhlIGN1cnJlbnRcbiAgICAvLyBhY3Rpb24vbG9jYXRpb24gYW5kIG1hcmsgaXQgYXMgdW5pbnRlcnJ1cHRlZCwgd2hpY2ggd2lsbCBza2lwIHRoZSBoaXN0b3J5XG4gICAgLy8gdXBkYXRlIGluIGNvbXBsZXRlTmF2aWdhdGlvblxuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImlkbGVcIikge1xuICAgICAgc3RhcnROYXZpZ2F0aW9uKHN0YXRlLmhpc3RvcnlBY3Rpb24sIHN0YXRlLmxvY2F0aW9uLCB7XG4gICAgICAgIHN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbjogdHJ1ZVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIE90aGVyd2lzZSwgaWYgd2UncmUgY3VycmVudGx5IGluIGEgbG9hZGluZyBzdGF0ZSwganVzdCBzdGFydCBhIG5ld1xuICAgIC8vIG5hdmlnYXRpb24gdG8gdGhlIG5hdmlnYXRpb24ubG9jYXRpb24gYnV0IGRvIG5vdCB0cmlnZ2VyIGFuIHVuaW50ZXJydXB0ZWRcbiAgICAvLyByZXZhbGlkYXRpb24gc28gdGhhdCBoaXN0b3J5IGNvcnJlY3RseSB1cGRhdGVzIG9uY2UgdGhlIG5hdmlnYXRpb24gY29tcGxldGVzXG4gICAgc3RhcnROYXZpZ2F0aW9uKHBlbmRpbmdBY3Rpb24gfHwgc3RhdGUuaGlzdG9yeUFjdGlvbiwgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwge1xuICAgICAgb3ZlcnJpZGVOYXZpZ2F0aW9uOiBzdGF0ZS5uYXZpZ2F0aW9uXG4gICAgfSk7XG4gIH1cbiAgLy8gU3RhcnQgYSBuYXZpZ2F0aW9uIHRvIHRoZSBnaXZlbiBhY3Rpb24vbG9jYXRpb24uICBDYW4gb3B0aW9uYWxseSBwcm92aWRlIGFcbiAgLy8gb3ZlcnJpZGVOYXZpZ2F0aW9uIHdoaWNoIHdpbGwgb3ZlcnJpZGUgdGhlIG5vcm1hbExvYWQgaW4gdGhlIGNhc2Ugb2YgYSByZWRpcmVjdFxuICAvLyBuYXZpZ2F0aW9uXG4gIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0TmF2aWdhdGlvbihoaXN0b3J5QWN0aW9uLCBsb2NhdGlvbiwgb3B0cykge1xuICAgIC8vIEFib3J0IGFueSBpbi1wcm9ncmVzcyBuYXZpZ2F0aW9ucyBhbmQgc3RhcnQgYSBuZXcgb25lLiBVbnNldCBhbnkgb25nb2luZ1xuICAgIC8vIHVuaW50ZXJydXB0ZWQgcmV2YWxpZGF0aW9ucyB1bmxlc3MgdG9sZCBvdGhlcndpc2UsIHNpbmNlIHdlIHdhbnQgdGhpc1xuICAgIC8vIG5ldyBuYXZpZ2F0aW9uIHRvIHVwZGF0ZSBoaXN0b3J5IG5vcm1hbGx5XG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyICYmIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5hYm9ydCgpO1xuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgcGVuZGluZ0FjdGlvbiA9IGhpc3RvcnlBY3Rpb247XG4gICAgaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uID0gKG9wdHMgJiYgb3B0cy5zdGFydFVuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24pID09PSB0cnVlO1xuICAgIC8vIFNhdmUgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIGV2ZXJ5IHRpbWUgd2Ugc3RhcnQgYSBuZXcgbmF2aWdhdGlvbixcbiAgICAvLyBhbmQgdHJhY2sgd2hldGhlciB3ZSBzaG91bGQgcmVzZXQgc2Nyb2xsIG9uIGNvbXBsZXRpb25cbiAgICBzYXZlU2Nyb2xsUG9zaXRpb24oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMpO1xuICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSAob3B0cyAmJiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCkgPT09IHRydWU7XG4gICAgcGVuZGluZ1ZpZXdUcmFuc2l0aW9uRW5hYmxlZCA9IChvcHRzICYmIG9wdHMuZW5hYmxlVmlld1RyYW5zaXRpb24pID09PSB0cnVlO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBsb2FkaW5nTmF2aWdhdGlvbiA9IG9wdHMgJiYgb3B0cy5vdmVycmlkZU5hdmlnYXRpb247XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgbG9jYXRpb24sIGJhc2VuYW1lKTtcbiAgICBsZXQgZmx1c2hTeW5jID0gKG9wdHMgJiYgb3B0cy5mbHVzaFN5bmMpID09PSB0cnVlO1xuICAgIC8vIFNob3J0IGNpcmN1aXQgd2l0aCBhIDQwNCBvbiB0aGUgcm9vdCBlcnJvciBib3VuZGFyeSBpZiB3ZSBtYXRjaCBub3RoaW5nXG4gICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgICAgbGV0IHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICByb3V0ZVxuICAgICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMocm91dGVzVG9Vc2UpO1xuICAgICAgLy8gQ2FuY2VsIGFsbCBwZW5kaW5nIGRlZmVycmVkIG9uIDQwNHMgc2luY2Ugd2UgZG9uJ3Qga2VlcCBhbnkgcm91dGVzXG4gICAgICBjYW5jZWxBY3RpdmVEZWZlcnJlZHMoKTtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgaXQncyBvbmx5IGEgaGFzaCBjaGFuZ2UgYW5kIG5vdCBhIHJldmFsaWRhdGlvbiBvclxuICAgIC8vIG11dGF0aW9uIHN1Ym1pc3Npb24uXG4gICAgLy9cbiAgICAvLyBJZ25vcmUgb24gaW5pdGlhbCBwYWdlIGxvYWRzIGJlY2F1c2Ugc2luY2UgdGhlIGluaXRpYWwgbG9hZCB3aWxsIGFsd2F5c1xuICAgIC8vIGJlIFwic2FtZSBoYXNoXCIuICBGb3IgZXhhbXBsZSwgb24gL3BhZ2UjaGFzaCBhbmQgc3VibWl0IGEgPEZvcm0gbWV0aG9kPVwicG9zdFwiPlxuICAgIC8vIHdoaWNoIHdpbGwgZGVmYXVsdCB0byBhIG5hdmlnYXRpb24gdG8gL3BhZ2VcbiAgICBpZiAoc3RhdGUuaW5pdGlhbGl6ZWQgJiYgIWlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgJiYgaXNIYXNoQ2hhbmdlT25seShzdGF0ZS5sb2NhdGlvbiwgbG9jYXRpb24pICYmICEob3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChvcHRzLnN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpKSB7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlc1xuICAgICAgfSwge1xuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgYSBjb250cm9sbGVyL1JlcXVlc3QgZm9yIHRoaXMgbmF2aWdhdGlvblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgcmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgbG9jYXRpb24sIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5zaWduYWwsIG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uKTtcbiAgICBsZXQgcGVuZGluZ0FjdGlvbkRhdGE7XG4gICAgbGV0IHBlbmRpbmdFcnJvcjtcbiAgICBpZiAob3B0cyAmJiBvcHRzLnBlbmRpbmdFcnJvcikge1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBlbmRpbmdFcnJvciwgaXQgbWVhbnMgdGhlIHVzZXIgYXR0ZW1wdGVkIGEgR0VUIHN1Ym1pc3Npb25cbiAgICAgIC8vIHdpdGggYmluYXJ5IEZvcm1EYXRhIHNvIGFzc2lnbiBoZXJlIGFuZCBza2lwIHRvIGhhbmRsZUxvYWRlcnMuICBUaGF0XG4gICAgICAvLyB3YXkgd2UgaGFuZGxlIGNhbGxpbmcgbG9hZGVycyBhYm92ZSB0aGUgYm91bmRhcnkgZXRjLiAgSXQncyBub3QgcmVhbGx5XG4gICAgICAvLyBkaWZmZXJlbnQgZnJvbSBhbiBhY3Rpb25FcnJvciBpbiB0aGF0IHNlbnNlLlxuICAgICAgcGVuZGluZ0Vycm9yID0ge1xuICAgICAgICBbZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzKS5yb3V0ZS5pZF06IG9wdHMucGVuZGluZ0Vycm9yXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAob3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChvcHRzLnN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICAgIC8vIENhbGwgYWN0aW9uIGlmIHdlIHJlY2VpdmVkIGFuIGFjdGlvbiBzdWJtaXNzaW9uXG4gICAgICBsZXQgYWN0aW9uT3V0cHV0ID0gYXdhaXQgaGFuZGxlQWN0aW9uKHJlcXVlc3QsIGxvY2F0aW9uLCBvcHRzLnN1Ym1pc3Npb24sIG1hdGNoZXMsIHtcbiAgICAgICAgcmVwbGFjZTogb3B0cy5yZXBsYWNlLFxuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgaWYgKGFjdGlvbk91dHB1dC5zaG9ydENpcmN1aXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBwZW5kaW5nQWN0aW9uRGF0YSA9IGFjdGlvbk91dHB1dC5wZW5kaW5nQWN0aW9uRGF0YTtcbiAgICAgIHBlbmRpbmdFcnJvciA9IGFjdGlvbk91dHB1dC5wZW5kaW5nQWN0aW9uRXJyb3I7XG4gICAgICBsb2FkaW5nTmF2aWdhdGlvbiA9IGdldExvYWRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBvcHRzLnN1Ym1pc3Npb24pO1xuICAgICAgZmx1c2hTeW5jID0gZmFsc2U7XG4gICAgICAvLyBDcmVhdGUgYSBHRVQgcmVxdWVzdCBmb3IgdGhlIGxvYWRlcnNcbiAgICAgIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChyZXF1ZXN0LnVybCwge1xuICAgICAgICBzaWduYWw6IHJlcXVlc3Quc2lnbmFsXG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gQ2FsbCBsb2FkZXJzXG4gICAgbGV0IHtcbiAgICAgIHNob3J0Q2lyY3VpdGVkLFxuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0gPSBhd2FpdCBoYW5kbGVMb2FkZXJzKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCBsb2FkaW5nTmF2aWdhdGlvbiwgb3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24sIG9wdHMgJiYgb3B0cy5mZXRjaGVyU3VibWlzc2lvbiwgb3B0cyAmJiBvcHRzLnJlcGxhY2UsIG9wdHMgJiYgb3B0cy5pbml0aWFsSHlkcmF0aW9uID09PSB0cnVlLCBmbHVzaFN5bmMsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IpO1xuICAgIGlmIChzaG9ydENpcmN1aXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBDbGVhbiB1cCBub3cgdGhhdCB0aGUgYWN0aW9uL2xvYWRlcnMgaGF2ZSBjb21wbGV0ZWQuICBEb24ndCBjbGVhbiB1cCBpZlxuICAgIC8vIHdlIHNob3J0IGNpcmN1aXRlZCBiZWNhdXNlIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciB3aWxsIGhhdmUgYWxyZWFkeVxuICAgIC8vIGJlZW4gYXNzaWduZWQgdG8gYSBuZXcgY29udHJvbGxlciBmb3IgdGhlIG5leHQgbmF2aWdhdGlvblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCBfZXh0ZW5kcyh7XG4gICAgICBtYXRjaGVzXG4gICAgfSwgcGVuZGluZ0FjdGlvbkRhdGEgPyB7XG4gICAgICBhY3Rpb25EYXRhOiBwZW5kaW5nQWN0aW9uRGF0YVxuICAgIH0gOiB7fSwge1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0pKTtcbiAgfVxuICAvLyBDYWxsIHRoZSBhY3Rpb24gbWF0Y2hlZCBieSB0aGUgbGVhZiByb3V0ZSBmb3IgdGhpcyBuYXZpZ2F0aW9uIGFuZCBoYW5kbGVcbiAgLy8gcmVkaXJlY3RzL2Vycm9yc1xuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVBY3Rpb24ocmVxdWVzdCwgbG9jYXRpb24sIHN1Ym1pc3Npb24sIG1hdGNoZXMsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgLy8gUHV0IHVzIGluIGEgc3VibWl0dGluZyBzdGF0ZVxuICAgIGxldCBuYXZpZ2F0aW9uID0gZ2V0U3VibWl0dGluZ05hdmlnYXRpb24obG9jYXRpb24sIHN1Ym1pc3Npb24pO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIG5hdmlnYXRpb25cbiAgICB9LCB7XG4gICAgICBmbHVzaFN5bmM6IG9wdHMuZmx1c2hTeW5jID09PSB0cnVlXG4gICAgfSk7XG4gICAgLy8gQ2FsbCBvdXIgYWN0aW9uIGFuZCBnZXQgdGhlIHJlc3VsdFxuICAgIGxldCByZXN1bHQ7XG4gICAgbGV0IGFjdGlvbk1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuICAgIGlmICghYWN0aW9uTWF0Y2gucm91dGUuYWN0aW9uICYmICFhY3Rpb25NYXRjaC5yb3V0ZS5sYXp5KSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICAgIHJvdXRlSWQ6IGFjdGlvbk1hdGNoLnJvdXRlLmlkXG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJhY3Rpb25cIiwgcmVxdWVzdCwgYWN0aW9uTWF0Y2gsIG1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgpO1xuICAgICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgcmVwbGFjZTtcbiAgICAgIGlmIChvcHRzICYmIG9wdHMucmVwbGFjZSAhPSBudWxsKSB7XG4gICAgICAgIHJlcGxhY2UgPSBvcHRzLnJlcGxhY2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiB0aGUgdXNlciBkaWRuJ3QgZXhwbGljaXR5IGluZGljYXRlIHJlcGxhY2UgYmVoYXZpb3IsIHJlcGxhY2UgaWZcbiAgICAgICAgLy8gd2UgcmVkaXJlY3RlZCB0byB0aGUgZXhhY3Qgc2FtZSBsb2NhdGlvbiB3ZSdyZSBjdXJyZW50bHkgYXQgdG8gYXZvaWRcbiAgICAgICAgLy8gZG91YmxlIGJhY2stYnV0dG9uc1xuICAgICAgICByZXBsYWNlID0gcmVzdWx0LmxvY2F0aW9uID09PSBzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSArIHN0YXRlLmxvY2F0aW9uLnNlYXJjaDtcbiAgICAgIH1cbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZXN1bHQsIHtcbiAgICAgICAgc3VibWlzc2lvbixcbiAgICAgICAgcmVwbGFjZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU3RvcmUgb2ZmIHRoZSBwZW5kaW5nIGVycm9yIC0gd2UgdXNlIGl0IHRvIGRldGVybWluZSB3aGljaCBsb2FkZXJzXG4gICAgICAvLyB0byBjYWxsIGFuZCB3aWxsIGNvbW1pdCBpdCB3aGVuIHdlIGNvbXBsZXRlIHRoZSBuYXZpZ2F0aW9uXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgYWN0aW9uTWF0Y2gucm91dGUuaWQpO1xuICAgICAgLy8gQnkgZGVmYXVsdCwgYWxsIHN1Ym1pc3Npb25zIGFyZSBSRVBMQUNFIG5hdmlnYXRpb25zLCBidXQgaWYgdGhlXG4gICAgICAvLyBhY3Rpb24gdGhyZXcgYW4gZXJyb3IgdGhhdCdsbCBiZSByZW5kZXJlZCBpbiBhbiBlcnJvckVsZW1lbnQsIHdlIGZhbGxcbiAgICAgIC8vIGJhY2sgdG8gUFVTSCBzbyB0aGF0IHRoZSB1c2VyIGNhbiB1c2UgdGhlIGJhY2sgYnV0dG9uIHRvIGdldCBiYWNrIHRvXG4gICAgICAvLyB0aGUgcHJlLXN1Ym1pc3Npb24gZm9ybSBsb2NhdGlvbiB0byB0cnkgYWdhaW5cbiAgICAgIGlmICgob3B0cyAmJiBvcHRzLnJlcGxhY2UpICE9PSB0cnVlKSB7XG4gICAgICAgIHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vIFNlbmQgYmFjayBhbiBlbXB0eSBvYmplY3Qgd2UgY2FuIHVzZSB0byBjbGVhciBvdXQgYW55IHByaW9yIGFjdGlvbkRhdGFcbiAgICAgICAgcGVuZGluZ0FjdGlvbkRhdGE6IHt9LFxuICAgICAgICBwZW5kaW5nQWN0aW9uRXJyb3I6IHtcbiAgICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvclxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICB0eXBlOiBcImRlZmVyLWFjdGlvblwiXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHBlbmRpbmdBY3Rpb25EYXRhOiB7XG4gICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvLyBDYWxsIGFsbCBhcHBsaWNhYmxlIGxvYWRlcnMgZm9yIHRoZSBnaXZlbiBtYXRjaGVzLCBoYW5kbGluZyByZWRpcmVjdHMsXG4gIC8vIGVycm9ycywgZXRjLlxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVMb2FkZXJzKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCBvdmVycmlkZU5hdmlnYXRpb24sIHN1Ym1pc3Npb24sIGZldGNoZXJTdWJtaXNzaW9uLCByZXBsYWNlLCBpbml0aWFsSHlkcmF0aW9uLCBmbHVzaFN5bmMsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IpIHtcbiAgICAvLyBGaWd1cmUgb3V0IHRoZSByaWdodCBuYXZpZ2F0aW9uIHdlIHdhbnQgdG8gdXNlIGZvciBkYXRhIGxvYWRpbmdcbiAgICBsZXQgbG9hZGluZ05hdmlnYXRpb24gPSBvdmVycmlkZU5hdmlnYXRpb24gfHwgZ2V0TG9hZGluZ05hdmlnYXRpb24obG9jYXRpb24sIHN1Ym1pc3Npb24pO1xuICAgIC8vIElmIHRoaXMgd2FzIGEgcmVkaXJlY3QgZnJvbSBhbiBhY3Rpb24gd2UgZG9uJ3QgaGF2ZSBhIFwic3VibWlzc2lvblwiIGJ1dFxuICAgIC8vIHdlIGhhdmUgaXQgb24gdGhlIGxvYWRpbmcgbmF2aWdhdGlvbiBzbyB1c2UgdGhhdCBpZiBhdmFpbGFibGVcbiAgICBsZXQgYWN0aXZlU3VibWlzc2lvbiA9IHN1Ym1pc3Npb24gfHwgZmV0Y2hlclN1Ym1pc3Npb24gfHwgZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uKGxvYWRpbmdOYXZpZ2F0aW9uKTtcbiAgICBsZXQgcm91dGVzVG9Vc2UgPSBpbkZsaWdodERhdGFSb3V0ZXMgfHwgZGF0YVJvdXRlcztcbiAgICBsZXQgW21hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzXSA9IGdldE1hdGNoZXNUb0xvYWQoaW5pdC5oaXN0b3J5LCBzdGF0ZSwgbWF0Y2hlcywgYWN0aXZlU3VibWlzc2lvbiwgbG9jYXRpb24sIGZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uICYmIGluaXRpYWxIeWRyYXRpb24gPT09IHRydWUsIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIGRlbGV0ZWRGZXRjaGVycywgZmV0Y2hMb2FkTWF0Y2hlcywgZmV0Y2hSZWRpcmVjdElkcywgcm91dGVzVG9Vc2UsIGJhc2VuYW1lLCBwZW5kaW5nQWN0aW9uRGF0YSwgcGVuZGluZ0Vycm9yKTtcbiAgICAvLyBDYW5jZWwgcGVuZGluZyBkZWZlcnJlZHMgZm9yIG5vLWxvbmdlci1tYXRjaGVkIHJvdXRlcyBvciByb3V0ZXMgd2UncmVcbiAgICAvLyBhYm91dCB0byByZWxvYWQuICBOb3RlIHRoYXQgaWYgdGhpcyBpcyBhbiBhY3Rpb24gcmVsb2FkIHdlIHdvdWxkIGhhdmVcbiAgICAvLyBhbHJlYWR5IGNhbmNlbGxlZCBhbGwgcGVuZGluZyBkZWZlcnJlZHMgc28gdGhpcyB3b3VsZCBiZSBhIG5vLW9wXG4gICAgY2FuY2VsQWN0aXZlRGVmZXJyZWRzKHJvdXRlSWQgPT4gIShtYXRjaGVzICYmIG1hdGNoZXMuc29tZShtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpKSB8fCBtYXRjaGVzVG9Mb2FkICYmIG1hdGNoZXNUb0xvYWQuc29tZShtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpKTtcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA9ICsraW5jcmVtZW50aW5nTG9hZElkO1xuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1blxuICAgIGlmIChtYXRjaGVzVG9Mb2FkLmxlbmd0aCA9PT0gMCAmJiByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGxldCB1cGRhdGVkRmV0Y2hlcnMgPSBtYXJrRmV0Y2hSZWRpcmVjdHNEb25lKCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIF9leHRlbmRzKHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIC8vIENvbW1pdCBwZW5kaW5nIGVycm9yIGlmIHdlJ3JlIHNob3J0IGNpcmN1aXRpbmdcbiAgICAgICAgZXJyb3JzOiBwZW5kaW5nRXJyb3IgfHwgbnVsbFxuICAgICAgfSwgcGVuZGluZ0FjdGlvbkRhdGEgPyB7XG4gICAgICAgIGFjdGlvbkRhdGE6IHBlbmRpbmdBY3Rpb25EYXRhXG4gICAgICB9IDoge30sIHVwZGF0ZWRGZXRjaGVycyA/IHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9IDoge30pLCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gSWYgdGhpcyBpcyBhbiB1bmludGVycnVwdGVkIHJldmFsaWRhdGlvbiwgd2UgcmVtYWluIGluIG91ciBjdXJyZW50IGlkbGVcbiAgICAvLyBzdGF0ZS4gIElmIG5vdCwgd2UgbmVlZCB0byBzd2l0Y2ggdG8gb3VyIGxvYWRpbmcgc3RhdGUgYW5kIGxvYWQgZGF0YSxcbiAgICAvLyBwcmVzZXJ2aW5nIGFueSBuZXcgYWN0aW9uIGRhdGEgb3IgZXhpc3RpbmcgYWN0aW9uIGRhdGEgKGluIHRoZSBjYXNlIG9mXG4gICAgLy8gYSByZXZhbGlkYXRpb24gaW50ZXJydXB0aW5nIGFuIGFjdGlvblJlbG9hZClcbiAgICAvLyBJZiB3ZSBoYXZlIHBhcnRpYWxIeWRyYXRpb24gZW5hYmxlZCwgdGhlbiBkb24ndCB1cGRhdGUgdGhlIHN0YXRlIGZvciB0aGVcbiAgICAvLyBpbml0aWFsIGRhdGEgbG9hZCBzaW5jZSBpb3QncyBub3QgYSBcIm5hdmlnYXRpb25cIlxuICAgIGlmICghaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uICYmICghZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24gfHwgIWluaXRpYWxIeWRyYXRpb24pKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IHtcbiAgICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQocmYua2V5KTtcbiAgICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXIgPSBnZXRMb2FkaW5nRmV0Y2hlcih1bmRlZmluZWQsIGZldGNoZXIgPyBmZXRjaGVyLmRhdGEgOiB1bmRlZmluZWQpO1xuICAgICAgICBzdGF0ZS5mZXRjaGVycy5zZXQocmYua2V5LCByZXZhbGlkYXRpbmdGZXRjaGVyKTtcbiAgICAgIH0pO1xuICAgICAgbGV0IGFjdGlvbkRhdGEgPSBwZW5kaW5nQWN0aW9uRGF0YSB8fCBzdGF0ZS5hY3Rpb25EYXRhO1xuICAgICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoe1xuICAgICAgICBuYXZpZ2F0aW9uOiBsb2FkaW5nTmF2aWdhdGlvblxuICAgICAgfSwgYWN0aW9uRGF0YSA/IE9iamVjdC5rZXlzKGFjdGlvbkRhdGEpLmxlbmd0aCA9PT0gMCA/IHtcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbFxuICAgICAgfSA6IHtcbiAgICAgICAgYWN0aW9uRGF0YVxuICAgICAgfSA6IHt9LCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPiAwID8ge1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0gOiB7fSksIHtcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiB7XG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMocmYua2V5KSkge1xuICAgICAgICBhYm9ydEZldGNoZXIocmYua2V5KTtcbiAgICAgIH1cbiAgICAgIGlmIChyZi5jb250cm9sbGVyKSB7XG4gICAgICAgIC8vIEZldGNoZXJzIHVzZSBhbiBpbmRlcGVuZGVudCBBYm9ydENvbnRyb2xsZXIgc28gdGhhdCBhYm9ydGluZyBhIGZldGNoZXJcbiAgICAgICAgLy8gKHZpYSBkZWxldGVGZXRjaGVyKSBkb2VzIG5vdCBhYm9ydCB0aGUgdHJpZ2dlcmluZyBuYXZpZ2F0aW9uIHRoYXRcbiAgICAgICAgLy8gdHJpZ2dlcmVkIHRoZSByZXZhbGlkYXRpb25cbiAgICAgICAgZmV0Y2hDb250cm9sbGVycy5zZXQocmYua2V5LCByZi5jb250cm9sbGVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBQcm94eSBuYXZpZ2F0aW9uIGFib3J0IHRocm91Z2ggdG8gcmV2YWxpZGF0aW9uIGZldGNoZXJzXG4gICAgbGV0IGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyA9ICgpID0+IHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2goZiA9PiBhYm9ydEZldGNoZXIoZi5rZXkpKTtcbiAgICBpZiAocGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyKSB7XG4gICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMpO1xuICAgIH1cbiAgICBsZXQge1xuICAgICAgcmVzdWx0cyxcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0c1xuICAgIH0gPSBhd2FpdCBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoc3RhdGUubWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIHJlcXVlc3QpO1xuICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gQ2xlYW4gdXAgX2FmdGVyXyBsb2FkZXJzIGhhdmUgY29tcGxldGVkLiAgRG9uJ3QgY2xlYW4gdXAgaWYgd2Ugc2hvcnRcbiAgICAvLyBjaXJjdWl0ZWQgYmVjYXVzZSBmZXRjaENvbnRyb2xsZXJzIHdvdWxkIGhhdmUgYmVlbiBhYm9ydGVkIGFuZFxuICAgIC8vIHJlYXNzaWduZWQgdG8gbmV3IGNvbnRyb2xsZXJzIGZvciB0aGUgbmV4dCBuYXZpZ2F0aW9uXG4gICAgaWYgKHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcikge1xuICAgICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zKTtcbiAgICB9XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShyZi5rZXkpKTtcbiAgICAvLyBJZiBhbnkgbG9hZGVycyByZXR1cm5lZCBhIHJlZGlyZWN0IFJlc3BvbnNlLCBzdGFydCBhIG5ldyBSRVBMQUNFIG5hdmlnYXRpb25cbiAgICBsZXQgcmVkaXJlY3QgPSBmaW5kUmVkaXJlY3QocmVzdWx0cyk7XG4gICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICBpZiAocmVkaXJlY3QuaWR4ID49IG1hdGNoZXNUb0xvYWQubGVuZ3RoKSB7XG4gICAgICAgIC8vIElmIHRoaXMgcmVkaXJlY3QgY2FtZSBmcm9tIGEgZmV0Y2hlciBtYWtlIHN1cmUgd2UgbWFyayBpdCBpblxuICAgICAgICAvLyBmZXRjaFJlZGlyZWN0SWRzIHNvIGl0IGRvZXNuJ3QgZ2V0IHJldmFsaWRhdGVkIG9uIHRoZSBuZXh0IHNldCBvZlxuICAgICAgICAvLyBsb2FkZXIgZXhlY3V0aW9uc1xuICAgICAgICBsZXQgZmV0Y2hlcktleSA9IHJldmFsaWRhdGluZ0ZldGNoZXJzW3JlZGlyZWN0LmlkeCAtIG1hdGNoZXNUb0xvYWQubGVuZ3RoXS5rZXk7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGZldGNoZXJLZXkpO1xuICAgICAgfVxuICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlZGlyZWN0LnJlc3VsdCwge1xuICAgICAgICByZXBsYWNlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuICAgIGxldCB7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSA9IHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCBwZW5kaW5nRXJyb3IsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKTtcbiAgICAvLyBXaXJlIHVwIHN1YnNjcmliZXJzIHRvIHVwZGF0ZSBsb2FkZXJEYXRhIGFzIHByb21pc2VzIHNldHRsZVxuICAgIGFjdGl2ZURlZmVycmVkcy5mb3JFYWNoKChkZWZlcnJlZERhdGEsIHJvdXRlSWQpID0+IHtcbiAgICAgIGRlZmVycmVkRGF0YS5zdWJzY3JpYmUoYWJvcnRlZCA9PiB7XG4gICAgICAgIC8vIE5vdGU6IE5vIG5lZWQgdG8gdXBkYXRlU3RhdGUgaGVyZSBzaW5jZSB0aGUgVHJhY2tlZFByb21pc2Ugb25cbiAgICAgICAgLy8gbG9hZGVyRGF0YSBpcyBzdGFibGUgYWNyb3NzIHJlc29sdmUvcmVqZWN0XG4gICAgICAgIC8vIFJlbW92ZSB0aGlzIGluc3RhbmNlIGlmIHdlIHdlcmUgYWJvcnRlZCBvciBpZiBwcm9taXNlcyBoYXZlIHNldHRsZWRcbiAgICAgICAgaWYgKGFib3J0ZWQgfHwgZGVmZXJyZWREYXRhLmRvbmUpIHtcbiAgICAgICAgICBhY3RpdmVEZWZlcnJlZHMuZGVsZXRlKHJvdXRlSWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBsZXQgdXBkYXRlZEZldGNoZXJzID0gbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpO1xuICAgIGxldCBkaWRBYm9ydEZldGNoTG9hZHMgPSBhYm9ydFN0YWxlRmV0Y2hMb2FkcyhwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCk7XG4gICAgbGV0IHNob3VsZFVwZGF0ZUZldGNoZXJzID0gdXBkYXRlZEZldGNoZXJzIHx8IGRpZEFib3J0RmV0Y2hMb2FkcyB8fCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPiAwO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSwgc2hvdWxkVXBkYXRlRmV0Y2hlcnMgPyB7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9IDoge30pO1xuICB9XG4gIC8vIFRyaWdnZXIgYSBmZXRjaGVyIGxvYWQvc3VibWl0IGZvciB0aGUgZ2l2ZW4gZmV0Y2hlciBrZXlcbiAgZnVuY3Rpb24gZmV0Y2goa2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKSB7XG4gICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyb3V0ZXIuZmV0Y2goKSB3YXMgY2FsbGVkIGR1cmluZyB0aGUgc2VydmVyIHJlbmRlciwgYnV0IGl0IHNob3VsZG4ndCBiZS4gXCIgKyBcIllvdSBhcmUgbGlrZWx5IGNhbGxpbmcgYSB1c2VGZXRjaGVyKCkgbWV0aG9kIGluIHRoZSBib2R5IG9mIHlvdXIgY29tcG9uZW50LiBcIiArIFwiVHJ5IG1vdmluZyBpdCB0byBhIHVzZUVmZmVjdCBvciBhIGNhbGxiYWNrLlwiKTtcbiAgICB9XG4gICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKGtleSkpIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgIGxldCBmbHVzaFN5bmMgPSAob3B0cyAmJiBvcHRzLnVuc3RhYmxlX2ZsdXNoU3luYykgPT09IHRydWU7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplVG8oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcHJlcGVuZEJhc2VuYW1lLCBocmVmLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgsIHJvdXRlSWQsIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucmVsYXRpdmUpO1xuICAgIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzVG9Vc2UsIG5vcm1hbGl6ZWRQYXRoLCBiYXNlbmFtZSk7XG4gICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbm9ybWFsaXplZFBhdGhcbiAgICAgIH0pLCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB7XG4gICAgICBwYXRoLFxuICAgICAgc3VibWlzc2lvbixcbiAgICAgIGVycm9yXG4gICAgfSA9IG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyhmdXR1cmUudjdfbm9ybWFsaXplRm9ybU1ldGhvZCwgdHJ1ZSwgbm9ybWFsaXplZFBhdGgsIG9wdHMpO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgZXJyb3IsIHtcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgcGF0aCk7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IChvcHRzICYmIG9wdHMucHJldmVudFNjcm9sbFJlc2V0KSA9PT0gdHJ1ZTtcbiAgICBpZiAoc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICAgIGhhbmRsZUZldGNoZXJBY3Rpb24oa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgZmx1c2hTeW5jLCBzdWJtaXNzaW9uKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gU3RvcmUgb2ZmIHRoZSBtYXRjaCBzbyB3ZSBjYW4gY2FsbCBpdCdzIHNob3VsZFJldmFsaWRhdGUgb24gc3Vic2VxdWVudFxuICAgIC8vIHJldmFsaWRhdGlvbnNcbiAgICBmZXRjaExvYWRNYXRjaGVzLnNldChrZXksIHtcbiAgICAgIHJvdXRlSWQsXG4gICAgICBwYXRoXG4gICAgfSk7XG4gICAgaGFuZGxlRmV0Y2hlckxvYWRlcihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCBtYXRjaGVzLCBmbHVzaFN5bmMsIHN1Ym1pc3Npb24pO1xuICB9XG4gIC8vIENhbGwgdGhlIGFjdGlvbiBmb3IgdGhlIG1hdGNoZWQgZmV0Y2hlci5zdWJtaXQoKSwgYW5kIHRoZW4gaGFuZGxlIHJlZGlyZWN0cyxcbiAgLy8gZXJyb3JzLCBhbmQgcmV2YWxpZGF0aW9uXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUZldGNoZXJBY3Rpb24oa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgcmVxdWVzdE1hdGNoZXMsIGZsdXNoU3luYywgc3VibWlzc2lvbikge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5kZWxldGUoa2V5KTtcbiAgICBpZiAoIW1hdGNoLnJvdXRlLmFjdGlvbiAmJiAhbWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBwYXRoLFxuICAgICAgICByb3V0ZUlkOiByb3V0ZUlkXG4gICAgICB9KTtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yLCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFB1dCB0aGlzIGZldGNoZXIgaW50byBpdCdzIHN1Ym1pdHRpbmcgc3RhdGVcbiAgICBsZXQgZXhpc3RpbmdGZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0U3VibWl0dGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgZXhpc3RpbmdGZXRjaGVyKSwge1xuICAgICAgZmx1c2hTeW5jXG4gICAgfSk7XG4gICAgLy8gQ2FsbCB0aGUgYWN0aW9uIGZvciB0aGUgZmV0Y2hlclxuICAgIGxldCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IGZldGNoUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgcGF0aCwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCwgc3VibWlzc2lvbik7XG4gICAgZmV0Y2hDb250cm9sbGVycy5zZXQoa2V5LCBhYm9ydENvbnRyb2xsZXIpO1xuICAgIGxldCBvcmlnaW5hdGluZ0xvYWRJZCA9IGluY3JlbWVudGluZ0xvYWRJZDtcbiAgICBsZXQgYWN0aW9uUmVzdWx0ID0gYXdhaXQgY2FsbExvYWRlck9yQWN0aW9uKFwiYWN0aW9uXCIsIGZldGNoUmVxdWVzdCwgbWF0Y2gsIHJlcXVlc3RNYXRjaGVzLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBiYXNlbmFtZSwgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoKTtcbiAgICBpZiAoZmV0Y2hSZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAvLyBXZSBjYW4gZGVsZXRlIHRoaXMgc28gbG9uZyBhcyB3ZSB3ZXJlbid0IGFib3J0ZWQgYnkgb3VyIG93biBmZXRjaGVyXG4gICAgICAvLyByZS1zdWJtaXQgd2hpY2ggd291bGQgaGF2ZSBwdXQgX25ld18gY29udHJvbGxlciBpcyBpbiBmZXRjaENvbnRyb2xsZXJzXG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFdoZW4gdXNpbmcgdjdfZmV0Y2hlclBlcnNpc3QsIHdlIGRvbid0IHdhbnQgZXJyb3JzIGJ1YmJsaW5nIHVwIHRvIHRoZSBVSVxuICAgIC8vIG9yIHJlZGlyZWN0cyBwcm9jZXNzZWQgZm9yIHVubW91bnRlZCBmZXRjaGVycyBzbyB3ZSBqdXN0IHJldmVydCB0aGVtIHRvXG4gICAgLy8gaWRsZVxuICAgIGlmIChmdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QgJiYgZGVsZXRlZEZldGNoZXJzLmhhcyhrZXkpKSB7XG4gICAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChhY3Rpb25SZXN1bHQpIHx8IGlzRXJyb3JSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXREb25lRmV0Y2hlcih1bmRlZmluZWQpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gTGV0IFN1Y2Nlc3NSZXN1bHQncyBmYWxsIHRocm91Z2ggZm9yIHJldmFsaWRhdGlvblxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgICAgIGlmIChwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA+IG9yaWdpbmF0aW5nTG9hZElkKSB7XG4gICAgICAgICAgLy8gQSBuZXcgbmF2aWdhdGlvbiB3YXMga2lja2VkIG9mZiBhZnRlciBvdXIgYWN0aW9uIHN0YXJ0ZWQsIHNvIHRoYXRcbiAgICAgICAgICAvLyBzaG91bGQgdGFrZSBwcmVjZWRlbmNlIG92ZXIgdGhpcyByZWRpcmVjdCBuYXZpZ2F0aW9uLiAgV2UgYWxyZWFkeVxuICAgICAgICAgIC8vIHNldCBpc1JldmFsaWRhdGlvblJlcXVpcmVkIHNvIGFsbCBsb2FkZXJzIGZvciB0aGUgbmV3IHJvdXRlIHNob3VsZFxuICAgICAgICAgIC8vIGZpcmUgdW5sZXNzIG9wdGVkIG91dCB2aWEgc2hvdWxkUmV2YWxpZGF0ZVxuICAgICAgICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldERvbmVGZXRjaGVyKHVuZGVmaW5lZCkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmZXRjaFJlZGlyZWN0SWRzLmFkZChrZXkpO1xuICAgICAgICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldExvYWRpbmdGZXRjaGVyKHN1Ym1pc3Npb24pKTtcbiAgICAgICAgICByZXR1cm4gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIGFjdGlvblJlc3VsdCwge1xuICAgICAgICAgICAgZmV0Y2hlclN1Ym1pc3Npb246IHN1Ym1pc3Npb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gUHJvY2VzcyBhbnkgbm9uLXJlZGlyZWN0IGVycm9ycyB0aHJvd25cbiAgICAgIGlmIChpc0Vycm9yUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgYWN0aW9uUmVzdWx0LmVycm9yKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICB0eXBlOiBcImRlZmVyLWFjdGlvblwiXG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gU3RhcnQgdGhlIGRhdGEgbG9hZCBmb3IgY3VycmVudCBtYXRjaGVzLCBvciB0aGUgbmV4dCBsb2NhdGlvbiBpZiB3ZSdyZVxuICAgIC8vIGluIHRoZSBtaWRkbGUgb2YgYSBuYXZpZ2F0aW9uXG4gICAgbGV0IG5leHRMb2NhdGlvbiA9IHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24gfHwgc3RhdGUubG9jYXRpb247XG4gICAgbGV0IHJldmFsaWRhdGlvblJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIG5leHRMb2NhdGlvbiwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCk7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IG1hdGNoZXMgPSBzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlICE9PSBcImlkbGVcIiA/IG1hdGNoUm91dGVzKHJvdXRlc1RvVXNlLCBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLCBiYXNlbmFtZSkgOiBzdGF0ZS5tYXRjaGVzO1xuICAgIGludmFyaWFudChtYXRjaGVzLCBcIkRpZG4ndCBmaW5kIGFueSBtYXRjaGVzIGFmdGVyIGZldGNoZXIgYWN0aW9uXCIpO1xuICAgIGxldCBsb2FkSWQgPSArK2luY3JlbWVudGluZ0xvYWRJZDtcbiAgICBmZXRjaFJlbG9hZElkcy5zZXQoa2V5LCBsb2FkSWQpO1xuICAgIGxldCBsb2FkRmV0Y2hlciA9IGdldExvYWRpbmdGZXRjaGVyKHN1Ym1pc3Npb24sIGFjdGlvblJlc3VsdC5kYXRhKTtcbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBsb2FkRmV0Y2hlcik7XG4gICAgbGV0IFttYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVyc10gPSBnZXRNYXRjaGVzVG9Mb2FkKGluaXQuaGlzdG9yeSwgc3RhdGUsIG1hdGNoZXMsIHN1Ym1pc3Npb24sIG5leHRMb2NhdGlvbiwgZmFsc2UsIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIGRlbGV0ZWRGZXRjaGVycywgZmV0Y2hMb2FkTWF0Y2hlcywgZmV0Y2hSZWRpcmVjdElkcywgcm91dGVzVG9Vc2UsIGJhc2VuYW1lLCB7XG4gICAgICBbbWF0Y2gucm91dGUuaWRdOiBhY3Rpb25SZXN1bHQuZGF0YVxuICAgIH0sIHVuZGVmaW5lZCAvLyBObyBuZWVkIHRvIHNlbmQgdGhyb3VnaCBlcnJvcnMgc2luY2Ugd2Ugc2hvcnQgY2lyY3VpdCBhYm92ZVxuICAgICk7XG4gICAgLy8gUHV0IGFsbCByZXZhbGlkYXRpbmcgZmV0Y2hlcnMgaW50byB0aGUgbG9hZGluZyBzdGF0ZSwgZXhjZXB0IGZvciB0aGVcbiAgICAvLyBjdXJyZW50IGZldGNoZXIgd2hpY2ggd2Ugd2FudCB0byBrZWVwIGluIGl0J3MgY3VycmVudCBsb2FkaW5nIHN0YXRlIHdoaWNoXG4gICAgLy8gY29udGFpbnMgaXQncyBhY3Rpb24gc3VibWlzc2lvbiBpbmZvICsgYWN0aW9uIGRhdGFcbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5maWx0ZXIocmYgPT4gcmYua2V5ICE9PSBrZXkpLmZvckVhY2gocmYgPT4ge1xuICAgICAgbGV0IHN0YWxlS2V5ID0gcmYua2V5O1xuICAgICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChzdGFsZUtleSk7XG4gICAgICBsZXQgcmV2YWxpZGF0aW5nRmV0Y2hlciA9IGdldExvYWRpbmdGZXRjaGVyKHVuZGVmaW5lZCwgZXhpc3RpbmdGZXRjaGVyID8gZXhpc3RpbmdGZXRjaGVyLmRhdGEgOiB1bmRlZmluZWQpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KHN0YWxlS2V5LCByZXZhbGlkYXRpbmdGZXRjaGVyKTtcbiAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhzdGFsZUtleSkpIHtcbiAgICAgICAgYWJvcnRGZXRjaGVyKHN0YWxlS2V5KTtcbiAgICAgIH1cbiAgICAgIGlmIChyZi5jb250cm9sbGVyKSB7XG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KHN0YWxlS2V5LCByZi5jb250cm9sbGVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgICBsZXQgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zID0gKCkgPT4gcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiBhYm9ydEZldGNoZXIocmYua2V5KSk7XG4gICAgYWJvcnRDb250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zKTtcbiAgICBsZXQge1xuICAgICAgcmVzdWx0cyxcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0c1xuICAgIH0gPSBhd2FpdCBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoc3RhdGUubWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIHJldmFsaWRhdGlvblJlcXVlc3QpO1xuICAgIGlmIChhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYWJvcnRDb250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zKTtcbiAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2gociA9PiBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShyLmtleSkpO1xuICAgIGxldCByZWRpcmVjdCA9IGZpbmRSZWRpcmVjdChyZXN1bHRzKTtcbiAgICBpZiAocmVkaXJlY3QpIHtcbiAgICAgIGlmIChyZWRpcmVjdC5pZHggPj0gbWF0Y2hlc1RvTG9hZC5sZW5ndGgpIHtcbiAgICAgICAgLy8gSWYgdGhpcyByZWRpcmVjdCBjYW1lIGZyb20gYSBmZXRjaGVyIG1ha2Ugc3VyZSB3ZSBtYXJrIGl0IGluXG4gICAgICAgIC8vIGZldGNoUmVkaXJlY3RJZHMgc28gaXQgZG9lc24ndCBnZXQgcmV2YWxpZGF0ZWQgb24gdGhlIG5leHQgc2V0IG9mXG4gICAgICAgIC8vIGxvYWRlciBleGVjdXRpb25zXG4gICAgICAgIGxldCBmZXRjaGVyS2V5ID0gcmV2YWxpZGF0aW5nRmV0Y2hlcnNbcmVkaXJlY3QuaWR4IC0gbWF0Y2hlc1RvTG9hZC5sZW5ndGhdLmtleTtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoZmV0Y2hlcktleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlZGlyZWN0LnJlc3VsdCk7XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzXG4gICAgbGV0IHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gcHJvY2Vzc0xvYWRlckRhdGEoc3RhdGUsIHN0YXRlLm1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIGxvYWRlclJlc3VsdHMsIHVuZGVmaW5lZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIGZldGNoZXJSZXN1bHRzLCBhY3RpdmVEZWZlcnJlZHMpO1xuICAgIC8vIFNpbmNlIHdlIGxldCByZXZhbGlkYXRpb25zIGNvbXBsZXRlIGV2ZW4gaWYgdGhlIHN1Ym1pdHRpbmcgZmV0Y2hlciB3YXNcbiAgICAvLyBkZWxldGVkLCBvbmx5IHB1dCBpdCBiYWNrIHRvIGlkbGUgaWYgaXQgaGFzbid0IGJlZW4gZGVsZXRlZFxuICAgIGlmIChzdGF0ZS5mZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0gZ2V0RG9uZUZldGNoZXIoYWN0aW9uUmVzdWx0LmRhdGEpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cbiAgICBhYm9ydFN0YWxlRmV0Y2hMb2Fkcyhsb2FkSWQpO1xuICAgIC8vIElmIHdlIGFyZSBjdXJyZW50bHkgaW4gYSBuYXZpZ2F0aW9uIGxvYWRpbmcgc3RhdGUgYW5kIHRoaXMgZmV0Y2hlciBpc1xuICAgIC8vIG1vcmUgcmVjZW50IHRoYW4gdGhlIG5hdmlnYXRpb24sIHdlIHdhbnQgdGhlIG5ld2VyIGRhdGEgc28gYWJvcnQgdGhlXG4gICAgLy8gbmF2aWdhdGlvbiBhbmQgY29tcGxldGUgaXQgd2l0aCB0aGUgZmV0Y2hlciBkYXRhXG4gICAgaWYgKHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwibG9hZGluZ1wiICYmIGxvYWRJZCA+IHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkKSB7XG4gICAgICBpbnZhcmlhbnQocGVuZGluZ0FjdGlvbiwgXCJFeHBlY3RlZCBwZW5kaW5nIGFjdGlvblwiKTtcbiAgICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLCB7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGEsXG4gICAgICAgIGVycm9ycyxcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gb3RoZXJ3aXNlIGp1c3QgdXBkYXRlIHdpdGggdGhlIGZldGNoZXIgZGF0YSwgcHJlc2VydmluZyBhbnkgZXhpc3RpbmdcbiAgICAgIC8vIGxvYWRlckRhdGEgZm9yIGxvYWRlcnMgdGhhdCBkaWQgbm90IG5lZWQgdG8gcmVsb2FkLiAgV2UgaGF2ZSB0b1xuICAgICAgLy8gbWFudWFsbHkgbWVyZ2UgaGVyZSBzaW5jZSB3ZSBhcmVuJ3QgZ29pbmcgdGhyb3VnaCBjb21wbGV0ZU5hdmlnYXRpb25cbiAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgZXJyb3JzLFxuICAgICAgICBsb2FkZXJEYXRhOiBtZXJnZUxvYWRlckRhdGEoc3RhdGUubG9hZGVyRGF0YSwgbG9hZGVyRGF0YSwgbWF0Y2hlcywgZXJyb3JzKSxcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9KTtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQ2FsbCB0aGUgbWF0Y2hlZCBsb2FkZXIgZm9yIGZldGNoZXIubG9hZCgpLCBoYW5kbGluZyByZWRpcmVjdHMsIGVycm9ycywgZXRjLlxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVGZXRjaGVyTG9hZGVyKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMsIGZsdXNoU3luYywgc3VibWlzc2lvbikge1xuICAgIGxldCBleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBleGlzdGluZ0ZldGNoZXIgPyBleGlzdGluZ0ZldGNoZXIuZGF0YSA6IHVuZGVmaW5lZCksIHtcbiAgICAgIGZsdXNoU3luY1xuICAgIH0pO1xuICAgIC8vIENhbGwgdGhlIGxvYWRlciBmb3IgdGhpcyBmZXRjaGVyIHJvdXRlIG1hdGNoXG4gICAgbGV0IGFib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgZmV0Y2hSZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBwYXRoLCBhYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcbiAgICBmZXRjaENvbnRyb2xsZXJzLnNldChrZXksIGFib3J0Q29udHJvbGxlcik7XG4gICAgbGV0IG9yaWdpbmF0aW5nTG9hZElkID0gaW5jcmVtZW50aW5nTG9hZElkO1xuICAgIGxldCByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgZmV0Y2hSZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgYmFzZW5hbWUsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCk7XG4gICAgLy8gRGVmZXJyZWQgaXNuJ3Qgc3VwcG9ydGVkIGZvciBmZXRjaGVyIGxvYWRzLCBhd2FpdCBldmVyeXRoaW5nIGFuZCB0cmVhdCBpdFxuICAgIC8vIGFzIGEgbm9ybWFsIGxvYWQuICByZXNvbHZlRGVmZXJyZWREYXRhIHdpbGwgcmV0dXJuIHVuZGVmaW5lZCBpZiB0aGlzXG4gICAgLy8gZmV0Y2hlciBnZXRzIGFib3J0ZWQsIHNvIHdlIGp1c3QgbGVhdmUgcmVzdWx0IHVudG91Y2hlZCBhbmQgc2hvcnQgY2lyY3VpdFxuICAgIC8vIGJlbG93IGlmIHRoYXQgaGFwcGVuc1xuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHJlc3VsdCA9IChhd2FpdCByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgZmV0Y2hSZXF1ZXN0LnNpZ25hbCwgdHJ1ZSkpIHx8IHJlc3VsdDtcbiAgICB9XG4gICAgLy8gV2UgY2FuIGRlbGV0ZSB0aGlzIHNvIGxvbmcgYXMgd2Ugd2VyZW4ndCBhYm9ydGVkIGJ5IG91ciBvdXIgb3duIGZldGNoZXJcbiAgICAvLyByZS1sb2FkIHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVyc1xuICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpID09PSBhYm9ydENvbnRyb2xsZXIpIHtcbiAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgfVxuICAgIGlmIChmZXRjaFJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gV2UgZG9uJ3Qgd2FudCBlcnJvcnMgYnViYmxpbmcgdXAgb3IgcmVkaXJlY3RzIGZvbGxvd2VkIGZvciB1bm1vdW50ZWRcbiAgICAvLyBmZXRjaGVycywgc28gc2hvcnQgY2lyY3VpdCBoZXJlIGlmIGl0IHdhcyByZW1vdmVkIGZyb20gdGhlIFVJXG4gICAgaWYgKGRlbGV0ZWRGZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0RG9uZUZldGNoZXIodW5kZWZpbmVkKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIElmIHRoZSBsb2FkZXIgdGhyZXcgYSByZWRpcmVjdCBSZXNwb25zZSwgc3RhcnQgYSBuZXcgUkVQTEFDRSBuYXZpZ2F0aW9uXG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgaWYgKHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID4gb3JpZ2luYXRpbmdMb2FkSWQpIHtcbiAgICAgICAgLy8gQSBuZXcgbmF2aWdhdGlvbiB3YXMga2lja2VkIG9mZiBhZnRlciBvdXIgbG9hZGVyIHN0YXJ0ZWQsIHNvIHRoYXRcbiAgICAgICAgLy8gc2hvdWxkIHRha2UgcHJlY2VkZW5jZSBvdmVyIHRoaXMgcmVkaXJlY3QgbmF2aWdhdGlvblxuICAgICAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXREb25lRmV0Y2hlcih1bmRlZmluZWQpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoa2V5KTtcbiAgICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUHJvY2VzcyBhbnkgbm9uLXJlZGlyZWN0IGVycm9ycyB0aHJvd25cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCByZXN1bHQuZXJyb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoIWlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSwgXCJVbmhhbmRsZWQgZmV0Y2hlciBkZWZlcnJlZCBkYXRhXCIpO1xuICAgIC8vIFB1dCB0aGUgZmV0Y2hlciBiYWNrIGludG8gYW4gaWRsZSBzdGF0ZVxuICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldERvbmVGZXRjaGVyKHJlc3VsdC5kYXRhKSk7XG4gIH1cbiAgLyoqXG4gICAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gaGFuZGxlIHJlZGlyZWN0cyByZXR1cm5lZCBmcm9tIGFuIGFjdGlvbiBvciBsb2FkZXIuXG4gICAqIE5vcm1hbGx5LCBhIHJlZGlyZWN0IFwicmVwbGFjZXNcIiB0aGUgbmF2aWdhdGlvbiB0aGF0IHRyaWdnZXJlZCBpdC4gIFNvLCBmb3JcbiAgICogZXhhbXBsZTpcbiAgICpcbiAgICogIC0gdXNlciBpcyBvbiAvYVxuICAgKiAgLSB1c2VyIGNsaWNrcyBhIGxpbmsgdG8gL2JcbiAgICogIC0gbG9hZGVyIGZvciAvYiByZWRpcmVjdHMgdG8gL2NcbiAgICpcbiAgICogSW4gYSBub24tSlMgYXBwIHRoZSBicm93c2VyIHdvdWxkIHRyYWNrIHRoZSBpbi1mbGlnaHQgbmF2aWdhdGlvbiB0byAvYiBhbmRcbiAgICogdGhlbiByZXBsYWNlIGl0IHdpdGggL2Mgd2hlbiBpdCBlbmNvdW50ZXJlZCB0aGUgcmVkaXJlY3QgcmVzcG9uc2UuICBJblxuICAgKiB0aGUgZW5kIGl0IHdvdWxkIG9ubHkgZXZlciB1cGRhdGUgdGhlIFVSTCBiYXIgd2l0aCAvYy5cbiAgICpcbiAgICogSW4gY2xpZW50LXNpZGUgcm91dGluZyB1c2luZyBwdXNoU3RhdGUvcmVwbGFjZVN0YXRlLCB3ZSBhaW0gdG8gZW11bGF0ZVxuICAgKiB0aGlzIGJlaGF2aW9yIGFuZCB3ZSBhbHNvIGRvIG5vdCB1cGRhdGUgaGlzdG9yeSB1bnRpbCB0aGUgZW5kIG9mIHRoZVxuICAgKiBuYXZpZ2F0aW9uIChpbmNsdWRpbmcgcHJvY2Vzc2VkIHJlZGlyZWN0cykuICBUaGlzIG1lYW5zIHRoYXQgd2UgbmV2ZXJcbiAgICogYWN0dWFsbHkgdG91Y2ggaGlzdG9yeSB1bnRpbCB3ZSd2ZSBwcm9jZXNzZWQgcmVkaXJlY3RzLCBzbyB3ZSBqdXN0IHVzZVxuICAgKiB0aGUgaGlzdG9yeSBhY3Rpb24gZnJvbSB0aGUgb3JpZ2luYWwgbmF2aWdhdGlvbiAoUFVTSCBvciBSRVBMQUNFKS5cbiAgICovXG4gIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZWRpcmVjdCwgX3RlbXAyKSB7XG4gICAgbGV0IHtcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICBmZXRjaGVyU3VibWlzc2lvbixcbiAgICAgIHJlcGxhY2VcbiAgICB9ID0gX3RlbXAyID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMjtcbiAgICBpZiAocmVkaXJlY3QucmV2YWxpZGF0ZSkge1xuICAgICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuICAgIGxldCByZWRpcmVjdExvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oc3RhdGUubG9jYXRpb24sIHJlZGlyZWN0LmxvY2F0aW9uLCB7XG4gICAgICBfaXNSZWRpcmVjdDogdHJ1ZVxuICAgIH0pO1xuICAgIGludmFyaWFudChyZWRpcmVjdExvY2F0aW9uLCBcIkV4cGVjdGVkIGEgbG9jYXRpb24gb24gdGhlIHJlZGlyZWN0IG5hdmlnYXRpb25cIik7XG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgbGV0IGlzRG9jdW1lbnRSZWxvYWQgPSBmYWxzZTtcbiAgICAgIGlmIChyZWRpcmVjdC5yZWxvYWREb2N1bWVudCkge1xuICAgICAgICAvLyBIYXJkIHJlbG9hZCBpZiB0aGUgcmVzcG9uc2UgY29udGFpbmVkIFgtUmVtaXgtUmVsb2FkLURvY3VtZW50XG4gICAgICAgIGlzRG9jdW1lbnRSZWxvYWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChBQlNPTFVURV9VUkxfUkVHRVgudGVzdChyZWRpcmVjdC5sb2NhdGlvbikpIHtcbiAgICAgICAgY29uc3QgdXJsID0gaW5pdC5oaXN0b3J5LmNyZWF0ZVVSTChyZWRpcmVjdC5sb2NhdGlvbik7XG4gICAgICAgIGlzRG9jdW1lbnRSZWxvYWQgPVxuICAgICAgICAvLyBIYXJkIHJlbG9hZCBpZiBpdCdzIGFuIGFic29sdXRlIFVSTCB0byBhIG5ldyBvcmlnaW5cbiAgICAgICAgdXJsLm9yaWdpbiAhPT0gcm91dGVyV2luZG93LmxvY2F0aW9uLm9yaWdpbiB8fFxuICAgICAgICAvLyBIYXJkIHJlbG9hZCBpZiBpdCdzIGFuIGFic29sdXRlIFVSTCB0aGF0IGRvZXMgbm90IG1hdGNoIG91ciBiYXNlbmFtZVxuICAgICAgICBzdHJpcEJhc2VuYW1lKHVybC5wYXRobmFtZSwgYmFzZW5hbWUpID09IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoaXNEb2N1bWVudFJlbG9hZCkge1xuICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgIHJvdXRlcldpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHJlZGlyZWN0LmxvY2F0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb3V0ZXJXaW5kb3cubG9jYXRpb24uYXNzaWduKHJlZGlyZWN0LmxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFRoZXJlJ3Mgbm8gbmVlZCB0byBhYm9ydCBvbiByZWRpcmVjdHMsIHNpbmNlIHdlIGRvbid0IGRldGVjdCB0aGVcbiAgICAvLyByZWRpcmVjdCB1bnRpbCB0aGUgYWN0aW9uL2xvYWRlcnMgaGF2ZSBzZXR0bGVkXG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcbiAgICBsZXQgcmVkaXJlY3RIaXN0b3J5QWN0aW9uID0gcmVwbGFjZSA9PT0gdHJ1ZSA/IEFjdGlvbi5SZXBsYWNlIDogQWN0aW9uLlB1c2g7XG4gICAgLy8gVXNlIHRoZSBpbmNvbWluZyBzdWJtaXNzaW9uIGlmIHByb3ZpZGVkLCBmYWxsYmFjayBvbiB0aGUgYWN0aXZlIG9uZSBpblxuICAgIC8vIHN0YXRlLm5hdmlnYXRpb25cbiAgICBsZXQge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZVxuICAgIH0gPSBzdGF0ZS5uYXZpZ2F0aW9uO1xuICAgIGlmICghc3VibWlzc2lvbiAmJiAhZmV0Y2hlclN1Ym1pc3Npb24gJiYgZm9ybU1ldGhvZCAmJiBmb3JtQWN0aW9uICYmIGZvcm1FbmNUeXBlKSB7XG4gICAgICBzdWJtaXNzaW9uID0gZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uKHN0YXRlLm5hdmlnYXRpb24pO1xuICAgIH1cbiAgICAvLyBJZiB0aGlzIHdhcyBhIDMwNy8zMDggc3VibWlzc2lvbiB3ZSB3YW50IHRvIHByZXNlcnZlIHRoZSBIVFRQIG1ldGhvZCBhbmRcbiAgICAvLyByZS1zdWJtaXQgdGhlIEdFVC9QT1NUL1BVVC9QQVRDSC9ERUxFVEUgYXMgYSBzdWJtaXNzaW9uIG5hdmlnYXRpb24gdG8gdGhlXG4gICAgLy8gcmVkaXJlY3RlZCBsb2NhdGlvblxuICAgIGxldCBhY3RpdmVTdWJtaXNzaW9uID0gc3VibWlzc2lvbiB8fCBmZXRjaGVyU3VibWlzc2lvbjtcbiAgICBpZiAocmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzLmhhcyhyZWRpcmVjdC5zdGF0dXMpICYmIGFjdGl2ZVN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChhY3RpdmVTdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICBhd2FpdCBzdGFydE5hdmlnYXRpb24ocmVkaXJlY3RIaXN0b3J5QWN0aW9uLCByZWRpcmVjdExvY2F0aW9uLCB7XG4gICAgICAgIHN1Ym1pc3Npb246IF9leHRlbmRzKHt9LCBhY3RpdmVTdWJtaXNzaW9uLCB7XG4gICAgICAgICAgZm9ybUFjdGlvbjogcmVkaXJlY3QubG9jYXRpb25cbiAgICAgICAgfSksXG4gICAgICAgIC8vIFByZXNlcnZlIHRoaXMgZmxhZyBhY3Jvc3MgcmVkaXJlY3RzXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHdlIGhhdmUgYSBuYXZpZ2F0aW9uIHN1Ym1pc3Npb24sIHdlIHdpbGwgcHJlc2VydmUgaXQgdGhyb3VnaCB0aGVcbiAgICAgIC8vIHJlZGlyZWN0IG5hdmlnYXRpb25cbiAgICAgIGxldCBvdmVycmlkZU5hdmlnYXRpb24gPSBnZXRMb2FkaW5nTmF2aWdhdGlvbihyZWRpcmVjdExvY2F0aW9uLCBzdWJtaXNzaW9uKTtcbiAgICAgIGF3YWl0IHN0YXJ0TmF2aWdhdGlvbihyZWRpcmVjdEhpc3RvcnlBY3Rpb24sIHJlZGlyZWN0TG9jYXRpb24sIHtcbiAgICAgICAgb3ZlcnJpZGVOYXZpZ2F0aW9uLFxuICAgICAgICAvLyBTZW5kIGZldGNoZXIgc3VibWlzc2lvbnMgdGhyb3VnaCBmb3Igc2hvdWxkUmV2YWxpZGF0ZVxuICAgICAgICBmZXRjaGVyU3VibWlzc2lvbixcbiAgICAgICAgLy8gUHJlc2VydmUgdGhpcyBmbGFnIGFjcm9zcyByZWRpcmVjdHNcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBmZXRjaGVyc1RvTG9hZCwgcmVxdWVzdCkge1xuICAgIC8vIENhbGwgYWxsIG5hdmlnYXRpb24gbG9hZGVycyBhbmQgcmV2YWxpZGF0aW5nIGZldGNoZXIgbG9hZGVycyBpbiBwYXJhbGxlbCxcbiAgICAvLyB0aGVuIHNsaWNlIG9mZiB0aGUgcmVzdWx0cyBpbnRvIHNlcGFyYXRlIGFycmF5cyBzbyB3ZSBjYW4gaGFuZGxlIHRoZW1cbiAgICAvLyBhY2NvcmRpbmdseVxuICAgIGxldCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoWy4uLm1hdGNoZXNUb0xvYWQubWFwKG1hdGNoID0+IGNhbGxMb2FkZXJPckFjdGlvbihcImxvYWRlclwiLCByZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgYmFzZW5hbWUsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCkpLCAuLi5mZXRjaGVyc1RvTG9hZC5tYXAoZiA9PiB7XG4gICAgICBpZiAoZi5tYXRjaGVzICYmIGYubWF0Y2ggJiYgZi5jb250cm9sbGVyKSB7XG4gICAgICAgIHJldHVybiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBmLnBhdGgsIGYuY29udHJvbGxlci5zaWduYWwpLCBmLm1hdGNoLCBmLm1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGVycm9yID0ge1xuICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgICAgICBwYXRobmFtZTogZi5wYXRoXG4gICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfVxuICAgIH0pXSk7XG4gICAgbGV0IGxvYWRlclJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKDAsIG1hdGNoZXNUb0xvYWQubGVuZ3RoKTtcbiAgICBsZXQgZmV0Y2hlclJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKG1hdGNoZXNUb0xvYWQubGVuZ3RoKTtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChbcmVzb2x2ZURlZmVycmVkUmVzdWx0cyhjdXJyZW50TWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgbG9hZGVyUmVzdWx0cywgbG9hZGVyUmVzdWx0cy5tYXAoKCkgPT4gcmVxdWVzdC5zaWduYWwpLCBmYWxzZSwgc3RhdGUubG9hZGVyRGF0YSksIHJlc29sdmVEZWZlcnJlZFJlc3VsdHMoY3VycmVudE1hdGNoZXMsIGZldGNoZXJzVG9Mb2FkLm1hcChmID0+IGYubWF0Y2gpLCBmZXRjaGVyUmVzdWx0cywgZmV0Y2hlcnNUb0xvYWQubWFwKGYgPT4gZi5jb250cm9sbGVyID8gZi5jb250cm9sbGVyLnNpZ25hbCA6IG51bGwpLCB0cnVlKV0pO1xuICAgIHJldHVybiB7XG4gICAgICByZXN1bHRzLFxuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIGZldGNoZXJSZXN1bHRzXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpIHtcbiAgICAvLyBFdmVyeSBpbnRlcnJ1cHRpb24gdHJpZ2dlcnMgYSByZXZhbGlkYXRpb25cbiAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gdHJ1ZTtcbiAgICAvLyBDYW5jZWwgcGVuZGluZyByb3V0ZS1sZXZlbCBkZWZlcnJlZHMgYW5kIG1hcmsgY2FuY2VsbGVkIHJvdXRlcyBmb3JcbiAgICAvLyByZXZhbGlkYXRpb25cbiAgICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5wdXNoKC4uLmNhbmNlbEFjdGl2ZURlZmVycmVkcygpKTtcbiAgICAvLyBBYm9ydCBpbi1mbGlnaHQgZmV0Y2hlciBsb2Fkc1xuICAgIGZldGNoTG9hZE1hdGNoZXMuZm9yRWFjaCgoXywga2V5KSA9PiB7XG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSkge1xuICAgICAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMucHVzaChrZXkpO1xuICAgICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBmZXRjaGVyLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBmZXRjaGVyKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9LCB7XG4gICAgICBmbHVzaFN5bmM6IChvcHRzICYmIG9wdHMuZmx1c2hTeW5jKSA9PT0gdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cbiAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgcm91dGVJZCk7XG4gICAgZGVsZXRlRmV0Y2hlcihrZXkpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGVycm9yczoge1xuICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IGVycm9yXG4gICAgICB9LFxuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSwge1xuICAgICAgZmx1c2hTeW5jOiAob3B0cyAmJiBvcHRzLmZsdXNoU3luYykgPT09IHRydWVcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBnZXRGZXRjaGVyKGtleSkge1xuICAgIGlmIChmdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QpIHtcbiAgICAgIGFjdGl2ZUZldGNoZXJzLnNldChrZXksIChhY3RpdmVGZXRjaGVycy5nZXQoa2V5KSB8fCAwKSArIDEpO1xuICAgICAgLy8gSWYgdGhpcyBmZXRjaGVyIHdhcyBwcmV2aW91c2x5IG1hcmtlZCBmb3IgZGVsZXRpb24sIHVubWFyayBpdCBzaW5jZSB3ZVxuICAgICAgLy8gaGF2ZSBhIG5ldyBpbnN0YW5jZVxuICAgICAgaWYgKGRlbGV0ZWRGZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgICBkZWxldGVkRmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KSB8fCBJRExFX0ZFVENIRVI7XG4gIH1cbiAgZnVuY3Rpb24gZGVsZXRlRmV0Y2hlcihrZXkpIHtcbiAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIC8vIERvbid0IGFib3J0IHRoZSBjb250cm9sbGVyIGlmIHRoaXMgaXMgYSBkZWxldGlvbiBvZiBhIGZldGNoZXIuc3VibWl0KClcbiAgICAvLyBpbiBpdCdzIGxvYWRpbmcgcGhhc2Ugc2luY2UgLSB3ZSBkb24ndCB3YW50IHRvIGFib3J0IHRoZSBjb3JyZXNwb25kaW5nXG4gICAgLy8gcmV2YWxpZGF0aW9uIGFuZCB3YW50IHRoZW0gdG8gY29tcGxldGUgYW5kIGxhbmRcbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSAmJiAhKGZldGNoZXIgJiYgZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIgJiYgZmV0Y2hSZWxvYWRJZHMuaGFzKGtleSkpKSB7XG4gICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICB9XG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaFJlZGlyZWN0SWRzLmRlbGV0ZShrZXkpO1xuICAgIGRlbGV0ZWRGZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgfVxuICBmdW5jdGlvbiBkZWxldGVGZXRjaGVyQW5kVXBkYXRlU3RhdGUoa2V5KSB7XG4gICAgaWYgKGZ1dHVyZS52N19mZXRjaGVyUGVyc2lzdCkge1xuICAgICAgbGV0IGNvdW50ID0gKGFjdGl2ZUZldGNoZXJzLmdldChrZXkpIHx8IDApIC0gMTtcbiAgICAgIGlmIChjb3VudCA8PSAwKSB7XG4gICAgICAgIGFjdGl2ZUZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgICBkZWxldGVkRmV0Y2hlcnMuYWRkKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmVGZXRjaGVycy5zZXQoa2V5LCBjb3VudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZUZldGNoZXIoa2V5KTtcbiAgICB9XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gYWJvcnRGZXRjaGVyKGtleSkge1xuICAgIGxldCBjb250cm9sbGVyID0gZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KTtcbiAgICBpbnZhcmlhbnQoY29udHJvbGxlciwgXCJFeHBlY3RlZCBmZXRjaCBjb250cm9sbGVyOiBcIiArIGtleSk7XG4gICAgY29udHJvbGxlci5hYm9ydCgpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gIH1cbiAgZnVuY3Rpb24gbWFya0ZldGNoZXJzRG9uZShrZXlzKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIGtleXMpIHtcbiAgICAgIGxldCBmZXRjaGVyID0gZ2V0RmV0Y2hlcihrZXkpO1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0gZ2V0RG9uZUZldGNoZXIoZmV0Y2hlci5kYXRhKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpIHtcbiAgICBsZXQgZG9uZUtleXMgPSBbXTtcbiAgICBsZXQgdXBkYXRlZEZldGNoZXJzID0gZmFsc2U7XG4gICAgZm9yIChsZXQga2V5IG9mIGZldGNoUmVkaXJlY3RJZHMpIHtcbiAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgICBpbnZhcmlhbnQoZmV0Y2hlciwgXCJFeHBlY3RlZCBmZXRjaGVyOiBcIiArIGtleSk7XG4gICAgICBpZiAoZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5kZWxldGUoa2V5KTtcbiAgICAgICAgZG9uZUtleXMucHVzaChrZXkpO1xuICAgICAgICB1cGRhdGVkRmV0Y2hlcnMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBtYXJrRmV0Y2hlcnNEb25lKGRvbmVLZXlzKTtcbiAgICByZXR1cm4gdXBkYXRlZEZldGNoZXJzO1xuICB9XG4gIGZ1bmN0aW9uIGFib3J0U3RhbGVGZXRjaExvYWRzKGxhbmRlZElkKSB7XG4gICAgbGV0IHllZXRlZEtleXMgPSBbXTtcbiAgICBmb3IgKGxldCBba2V5LCBpZF0gb2YgZmV0Y2hSZWxvYWRJZHMpIHtcbiAgICAgIGlmIChpZCA8IGxhbmRlZElkKSB7XG4gICAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgICAgIGludmFyaWFudChmZXRjaGVyLCBcIkV4cGVjdGVkIGZldGNoZXI6IFwiICsga2V5KTtcbiAgICAgICAgaWYgKGZldGNoZXIuc3RhdGUgPT09IFwibG9hZGluZ1wiKSB7XG4gICAgICAgICAgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgICAgICAgZmV0Y2hSZWxvYWRJZHMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgeWVldGVkS2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgbWFya0ZldGNoZXJzRG9uZSh5ZWV0ZWRLZXlzKTtcbiAgICByZXR1cm4geWVldGVkS2V5cy5sZW5ndGggPiAwO1xuICB9XG4gIGZ1bmN0aW9uIGdldEJsb2NrZXIoa2V5LCBmbikge1xuICAgIGxldCBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGtleSkgfHwgSURMRV9CTE9DS0VSO1xuICAgIGlmIChibG9ja2VyRnVuY3Rpb25zLmdldChrZXkpICE9PSBmbikge1xuICAgICAgYmxvY2tlckZ1bmN0aW9ucy5zZXQoa2V5LCBmbik7XG4gICAgfVxuICAgIHJldHVybiBibG9ja2VyO1xuICB9XG4gIGZ1bmN0aW9uIGRlbGV0ZUJsb2NrZXIoa2V5KSB7XG4gICAgc3RhdGUuYmxvY2tlcnMuZGVsZXRlKGtleSk7XG4gICAgYmxvY2tlckZ1bmN0aW9ucy5kZWxldGUoa2V5KTtcbiAgfVxuICAvLyBVdGlsaXR5IGZ1bmN0aW9uIHRvIHVwZGF0ZSBibG9ja2VycywgZW5zdXJpbmcgdmFsaWQgc3RhdGUgdHJhbnNpdGlvbnNcbiAgZnVuY3Rpb24gdXBkYXRlQmxvY2tlcihrZXksIG5ld0Jsb2NrZXIpIHtcbiAgICBsZXQgYmxvY2tlciA9IHN0YXRlLmJsb2NrZXJzLmdldChrZXkpIHx8IElETEVfQkxPQ0tFUjtcbiAgICAvLyBQb29yIG1hbnMgc3RhdGUgbWFjaGluZSA6KVxuICAgIC8vIGh0dHBzOi8vbWVybWFpZC5saXZlL2VkaXQjcGFrbzplTnFWa2M5T3d6QU14bDhsOG5uakFZckV0RElPSEVCSWd3dktKVFJlR3kzX2xEcElxTzI3azZhd01HMFhjckxsbno4N253ZG9uRVNvZ0tYWEJ1RTc5cnE3NVhaTzMteUhkczBSSlZ1djcwWXJQbFVyQ0VlMkhmck9SUzNydWJxWmZ1aHRwZzVDOXdrNXRaNFZLY1JVcTg4cTlaOFJTMC00OGNFMWlISmtMMHVnYkh1Rkx1czlMNnNwWnk4blg5TVAyQ05kb21WYXBvc3F1M2ZHYXlUOFQ4LWpKUXdoZXBvX1V0cGdCUWFERVVvbTA0ZFpoQU4xYUpCRGxVS0pCeEUxY2VCMlNtajBNbG4tSUJXNUFGVTJkd1Vpa3R0XzJRYXEyZEJmYUtkRXVwODVVVjdZZC1kS2psbmthYmwyUHZyMERUa1RyZU1cbiAgICBpbnZhcmlhbnQoYmxvY2tlci5zdGF0ZSA9PT0gXCJ1bmJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInVuYmxvY2tlZFwiIHx8IGJsb2NrZXIuc3RhdGUgPT09IFwicHJvY2VlZGluZ1wiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwidW5ibG9ja2VkXCIsIFwiSW52YWxpZCBibG9ja2VyIHN0YXRlIHRyYW5zaXRpb246IFwiICsgYmxvY2tlci5zdGF0ZSArIFwiIC0+IFwiICsgbmV3QmxvY2tlci5zdGF0ZSk7XG4gICAgbGV0IGJsb2NrZXJzID0gbmV3IE1hcChzdGF0ZS5ibG9ja2Vycyk7XG4gICAgYmxvY2tlcnMuc2V0KGtleSwgbmV3QmxvY2tlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgYmxvY2tlcnNcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBzaG91bGRCbG9ja05hdmlnYXRpb24oX3JlZjIpIHtcbiAgICBsZXQge1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0gPSBfcmVmMjtcbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFdlIG9ueSBzdXBwb3J0IGEgc2luZ2xlIGFjdGl2ZSBibG9ja2VyIGF0IHRoZSBtb21lbnQgc2luY2Ugd2UgZG9uJ3QgaGF2ZVxuICAgIC8vIGFueSBjb21wZWxsaW5nIHVzZSBjYXNlcyBmb3IgbXVsdGktYmxvY2tlciB5ZXRcbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5zaXplID4gMSkge1xuICAgICAgd2FybmluZyhmYWxzZSwgXCJBIHJvdXRlciBvbmx5IHN1cHBvcnRzIG9uZSBibG9ja2VyIGF0IGEgdGltZVwiKTtcbiAgICB9XG4gICAgbGV0IGVudHJpZXMgPSBBcnJheS5mcm9tKGJsb2NrZXJGdW5jdGlvbnMuZW50cmllcygpKTtcbiAgICBsZXQgW2Jsb2NrZXJLZXksIGJsb2NrZXJGdW5jdGlvbl0gPSBlbnRyaWVzW2VudHJpZXMubGVuZ3RoIC0gMV07XG4gICAgbGV0IGJsb2NrZXIgPSBzdGF0ZS5ibG9ja2Vycy5nZXQoYmxvY2tlcktleSk7XG4gICAgaWYgKGJsb2NrZXIgJiYgYmxvY2tlci5zdGF0ZSA9PT0gXCJwcm9jZWVkaW5nXCIpIHtcbiAgICAgIC8vIElmIHRoZSBibG9ja2VyIGlzIGN1cnJlbnRseSBwcm9jZWVkaW5nLCB3ZSBkb24ndCBuZWVkIHRvIHJlLWNoZWNrXG4gICAgICAvLyBpdCBhbmQgY2FuIGxldCB0aGlzIG5hdmlnYXRpb24gY29udGludWVcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQXQgdGhpcyBwb2ludCwgd2Uga25vdyB3ZSdyZSB1bmJsb2NrZWQvYmxvY2tlZCBzbyB3ZSBuZWVkIHRvIGNoZWNrIHRoZVxuICAgIC8vIHVzZXItcHJvdmlkZWQgYmxvY2tlciBmdW5jdGlvblxuICAgIGlmIChibG9ja2VyRnVuY3Rpb24oe1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0pKSB7XG4gICAgICByZXR1cm4gYmxvY2tlcktleTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2FuY2VsQWN0aXZlRGVmZXJyZWRzKHByZWRpY2F0ZSkge1xuICAgIGxldCBjYW5jZWxsZWRSb3V0ZUlkcyA9IFtdO1xuICAgIGFjdGl2ZURlZmVycmVkcy5mb3JFYWNoKChkZmQsIHJvdXRlSWQpID0+IHtcbiAgICAgIGlmICghcHJlZGljYXRlIHx8IHByZWRpY2F0ZShyb3V0ZUlkKSkge1xuICAgICAgICAvLyBDYW5jZWwgdGhlIGRlZmVycmVkIC0gYnV0IGRvIG5vdCByZW1vdmUgZnJvbSBhY3RpdmVEZWZlcnJlZHMgaGVyZSAtXG4gICAgICAgIC8vIHdlIHJlbHkgb24gdGhlIHN1YnNjcmliZXJzIHRvIGRvIHRoYXQgc28gb3VyIHRlc3RzIGNhbiBhc3NlcnQgcHJvcGVyXG4gICAgICAgIC8vIGNsZWFudXAgdmlhIF9pbnRlcm5hbEFjdGl2ZURlZmVycmVkc1xuICAgICAgICBkZmQuY2FuY2VsKCk7XG4gICAgICAgIGNhbmNlbGxlZFJvdXRlSWRzLnB1c2gocm91dGVJZCk7XG4gICAgICAgIGFjdGl2ZURlZmVycmVkcy5kZWxldGUocm91dGVJZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNhbmNlbGxlZFJvdXRlSWRzO1xuICB9XG4gIC8vIE9wdCBpbiB0byBjYXB0dXJpbmcgYW5kIHJlcG9ydGluZyBzY3JvbGwgcG9zaXRpb25zIGR1cmluZyBuYXZpZ2F0aW9ucyxcbiAgLy8gdXNlZCBieSB0aGUgPFNjcm9sbFJlc3RvcmF0aW9uPiBjb21wb25lbnRcbiAgZnVuY3Rpb24gZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24ocG9zaXRpb25zLCBnZXRQb3NpdGlvbiwgZ2V0S2V5KSB7XG4gICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBwb3NpdGlvbnM7XG4gICAgZ2V0U2Nyb2xsUG9zaXRpb24gPSBnZXRQb3NpdGlvbjtcbiAgICBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IGdldEtleSB8fCBudWxsO1xuICAgIC8vIFBlcmZvcm0gaW5pdGlhbCBoeWRyYXRpb24gc2Nyb2xsIHJlc3RvcmF0aW9uLCBzaW5jZSB3ZSBtaXNzIHRoZSBib2F0IG9uXG4gICAgLy8gdGhlIGluaXRpYWwgdXBkYXRlU3RhdGUoKSBiZWNhdXNlIHdlJ3ZlIG5vdCB5ZXQgcmVuZGVyZWQgPFNjcm9sbFJlc3RvcmF0aW9uLz5cbiAgICAvLyBhbmQgdGhlcmVmb3JlIGhhdmUgbm8gc2F2ZWRTY3JvbGxQb3NpdGlvbnMgYXZhaWxhYmxlXG4gICAgaWYgKCFpbml0aWFsU2Nyb2xsUmVzdG9yZWQgJiYgc3RhdGUubmF2aWdhdGlvbiA9PT0gSURMRV9OQVZJR0FUSU9OKSB7XG4gICAgICBpbml0aWFsU2Nyb2xsUmVzdG9yZWQgPSB0cnVlO1xuICAgICAgbGV0IHkgPSBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcbiAgICAgIGlmICh5ICE9IG51bGwpIHtcbiAgICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogeVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gbnVsbDtcbiAgICAgIGdldFNjcm9sbFBvc2l0aW9uID0gbnVsbDtcbiAgICAgIGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGdldFNjcm9sbEtleShsb2NhdGlvbiwgbWF0Y2hlcykge1xuICAgIGlmIChnZXRTY3JvbGxSZXN0b3JhdGlvbktleSkge1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5KGxvY2F0aW9uLCBtYXRjaGVzLm1hcChtID0+IGNvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoKG0sIHN0YXRlLmxvYWRlckRhdGEpKSk7XG4gICAgICByZXR1cm4ga2V5IHx8IGxvY2F0aW9uLmtleTtcbiAgICB9XG4gICAgcmV0dXJuIGxvY2F0aW9uLmtleTtcbiAgfVxuICBmdW5jdGlvbiBzYXZlU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG1hdGNoZXMpIHtcbiAgICBpZiAoc2F2ZWRTY3JvbGxQb3NpdGlvbnMgJiYgZ2V0U2Nyb2xsUG9zaXRpb24pIHtcbiAgICAgIGxldCBrZXkgPSBnZXRTY3JvbGxLZXkobG9jYXRpb24sIG1hdGNoZXMpO1xuICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XSA9IGdldFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGdldFNhdmVkU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG1hdGNoZXMpIHtcbiAgICBpZiAoc2F2ZWRTY3JvbGxQb3NpdGlvbnMpIHtcbiAgICAgIGxldCBrZXkgPSBnZXRTY3JvbGxLZXkobG9jYXRpb24sIG1hdGNoZXMpO1xuICAgICAgbGV0IHkgPSBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiB5ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiB5O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiBfaW50ZXJuYWxTZXRSb3V0ZXMobmV3Um91dGVzKSB7XG4gICAgbWFuaWZlc3QgPSB7fTtcbiAgICBpbkZsaWdodERhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKG5ld1JvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCB1bmRlZmluZWQsIG1hbmlmZXN0KTtcbiAgfVxuICByb3V0ZXIgPSB7XG4gICAgZ2V0IGJhc2VuYW1lKCkge1xuICAgICAgcmV0dXJuIGJhc2VuYW1lO1xuICAgIH0sXG4gICAgZ2V0IGZ1dHVyZSgpIHtcbiAgICAgIHJldHVybiBmdXR1cmU7XG4gICAgfSxcbiAgICBnZXQgc3RhdGUoKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfSxcbiAgICBnZXQgcm91dGVzKCkge1xuICAgICAgcmV0dXJuIGRhdGFSb3V0ZXM7XG4gICAgfSxcbiAgICBnZXQgd2luZG93KCkge1xuICAgICAgcmV0dXJuIHJvdXRlcldpbmRvdztcbiAgICB9LFxuICAgIGluaXRpYWxpemUsXG4gICAgc3Vic2NyaWJlLFxuICAgIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uLFxuICAgIG5hdmlnYXRlLFxuICAgIGZldGNoLFxuICAgIHJldmFsaWRhdGUsXG4gICAgLy8gUGFzc3Rocm91Z2ggdG8gaGlzdG9yeS1hd2FyZSBjcmVhdGVIcmVmIHVzZWQgYnkgdXNlSHJlZiBzbyB3ZSBnZXQgcHJvcGVyXG4gICAgLy8gaGFzaC1hd2FyZSBVUkxzIGluIERPTSBwYXRoc1xuICAgIGNyZWF0ZUhyZWY6IHRvID0+IGluaXQuaGlzdG9yeS5jcmVhdGVIcmVmKHRvKSxcbiAgICBlbmNvZGVMb2NhdGlvbjogdG8gPT4gaW5pdC5oaXN0b3J5LmVuY29kZUxvY2F0aW9uKHRvKSxcbiAgICBnZXRGZXRjaGVyLFxuICAgIGRlbGV0ZUZldGNoZXI6IGRlbGV0ZUZldGNoZXJBbmRVcGRhdGVTdGF0ZSxcbiAgICBkaXNwb3NlLFxuICAgIGdldEJsb2NrZXIsXG4gICAgZGVsZXRlQmxvY2tlcixcbiAgICBfaW50ZXJuYWxGZXRjaENvbnRyb2xsZXJzOiBmZXRjaENvbnRyb2xsZXJzLFxuICAgIF9pbnRlcm5hbEFjdGl2ZURlZmVycmVkczogYWN0aXZlRGVmZXJyZWRzLFxuICAgIC8vIFRPRE86IFJlbW92ZSBzZXRSb3V0ZXMsIGl0J3MgdGVtcG9yYXJ5IHRvIGF2b2lkIGRlYWxpbmcgd2l0aFxuICAgIC8vIHVwZGF0aW5nIHRoZSB0cmVlIHdoaWxlIHZhbGlkYXRpbmcgdGhlIHVwZGF0ZSBhbGdvcml0aG0uXG4gICAgX2ludGVybmFsU2V0Um91dGVzXG4gIH07XG4gIHJldHVybiByb3V0ZXI7XG59XG4vLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gY3JlYXRlU3RhdGljSGFuZGxlclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmNvbnN0IFVOU0FGRV9ERUZFUlJFRF9TWU1CT0wgPSBTeW1ib2woXCJkZWZlcnJlZFwiKTtcbmZ1bmN0aW9uIGNyZWF0ZVN0YXRpY0hhbmRsZXIocm91dGVzLCBvcHRzKSB7XG4gIGludmFyaWFudChyb3V0ZXMubGVuZ3RoID4gMCwgXCJZb3UgbXVzdCBwcm92aWRlIGEgbm9uLWVtcHR5IHJvdXRlcyBhcnJheSB0byBjcmVhdGVTdGF0aWNIYW5kbGVyXCIpO1xuICBsZXQgbWFuaWZlc3QgPSB7fTtcbiAgbGV0IGJhc2VuYW1lID0gKG9wdHMgPyBvcHRzLmJhc2VuYW1lIDogbnVsbCkgfHwgXCIvXCI7XG4gIGxldCBtYXBSb3V0ZVByb3BlcnRpZXM7XG4gIGlmIChvcHRzICE9IG51bGwgJiYgb3B0cy5tYXBSb3V0ZVByb3BlcnRpZXMpIHtcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMgPSBvcHRzLm1hcFJvdXRlUHJvcGVydGllcztcbiAgfSBlbHNlIGlmIChvcHRzICE9IG51bGwgJiYgb3B0cy5kZXRlY3RFcnJvckJvdW5kYXJ5KSB7XG4gICAgLy8gSWYgdGhleSBhcmUgc3RpbGwgdXNpbmcgdGhlIGRlcHJlY2F0ZWQgdmVyc2lvbiwgd3JhcCBpdCB3aXRoIHRoZSBuZXcgQVBJXG4gICAgbGV0IGRldGVjdEVycm9yQm91bmRhcnkgPSBvcHRzLmRldGVjdEVycm9yQm91bmRhcnk7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gcm91dGUgPT4gKHtcbiAgICAgIGhhc0Vycm9yQm91bmRhcnk6IGRldGVjdEVycm9yQm91bmRhcnkocm91dGUpXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gZGVmYXVsdE1hcFJvdXRlUHJvcGVydGllcztcbiAgfVxuICAvLyBDb25maWcgZHJpdmVuIGJlaGF2aW9yIGZsYWdzXG4gIGxldCBmdXR1cmUgPSBfZXh0ZW5kcyh7XG4gICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IGZhbHNlXG4gIH0sIG9wdHMgPyBvcHRzLmZ1dHVyZSA6IG51bGwpO1xuICBsZXQgZGF0YVJvdXRlcyA9IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGVzLCBtYXBSb3V0ZVByb3BlcnRpZXMsIHVuZGVmaW5lZCwgbWFuaWZlc3QpO1xuICAvKipcbiAgICogVGhlIHF1ZXJ5KCkgbWV0aG9kIGlzIGludGVuZGVkIGZvciBkb2N1bWVudCByZXF1ZXN0cywgaW4gd2hpY2ggd2Ugd2FudCB0b1xuICAgKiBjYWxsIGFuIG9wdGlvbmFsIGFjdGlvbiBhbmQgcG90ZW50aWFsbHkgbXVsdGlwbGUgbG9hZGVycyBmb3IgYWxsIG5lc3RlZFxuICAgKiByb3V0ZXMuICBJdCByZXR1cm5zIGEgU3RhdGljSGFuZGxlckNvbnRleHQgb2JqZWN0LCB3aGljaCBpcyB2ZXJ5IHNpbWlsYXJcbiAgICogdG8gdGhlIHJvdXRlciBzdGF0ZSAobG9jYXRpb24sIGxvYWRlckRhdGEsIGFjdGlvbkRhdGEsIGVycm9ycywgZXRjLikgYW5kXG4gICAqIGFsc28gYWRkcyBTU1Itc3BlY2lmaWMgaW5mb3JtYXRpb24gc3VjaCBhcyB0aGUgc3RhdHVzQ29kZSBhbmQgaGVhZGVyc1xuICAgKiBmcm9tIGFjdGlvbi9sb2FkZXJzIFJlc3BvbnNlcy5cbiAgICpcbiAgICogSXQgX3Nob3VsZF8gbmV2ZXIgdGhyb3cgYW5kIHNob3VsZCByZXBvcnQgYWxsIGVycm9ycyB0aHJvdWdoIHRoZVxuICAgKiByZXR1cm5lZCBjb250ZXh0LmVycm9ycyBvYmplY3QsIHByb3Blcmx5IGFzc29jaWF0aW5nIGVycm9ycyB0byB0aGVpciBlcnJvclxuICAgKiBib3VuZGFyeS4gIEFkZGl0aW9uYWxseSwgaXQgdHJhY2tzIF9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkIHdoaWNoIGNhbiBiZVxuICAgKiB1c2VkIHRvIGVtdWxhdGUgUmVhY3QgZXJyb3IgYm91bmRhcmllcyBkdXJpbmcgU1NyIGJ5IHBlcmZvcm1pbmcgYSBzZWNvbmRcbiAgICogcGFzcyBvbmx5IGRvd24gdG8gdGhlIGJvdW5kYXJ5SWQuXG4gICAqXG4gICAqIFRoZSBvbmUgZXhjZXB0aW9uIHdoZXJlIHdlIGRvIG5vdCByZXR1cm4gYSBTdGF0aWNIYW5kbGVyQ29udGV4dCBpcyB3aGVuIGFcbiAgICogcmVkaXJlY3QgcmVzcG9uc2UgaXMgcmV0dXJuZWQgb3IgdGhyb3duIGZyb20gYW55IGFjdGlvbi9sb2FkZXIuICBXZVxuICAgKiBwcm9wYWdhdGUgdGhhdCBvdXQgYW5kIHJldHVybiB0aGUgcmF3IFJlc3BvbnNlIHNvIHRoZSBIVFRQIHNlcnZlciBjYW5cbiAgICogcmV0dXJuIGl0IGRpcmVjdGx5LlxuICAgKi9cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnkocmVxdWVzdCwgX3RlbXAzKSB7XG4gICAgbGV0IHtcbiAgICAgIHJlcXVlc3RDb250ZXh0XG4gICAgfSA9IF90ZW1wMyA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDM7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGxldCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcIlwiLCBjcmVhdGVQYXRoKHVybCksIG51bGwsIFwiZGVmYXVsdFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uLCBiYXNlbmFtZSk7XG4gICAgLy8gU1NSIHN1cHBvcnRzIEhFQUQgcmVxdWVzdHMgd2hpbGUgU1BBIGRvZXNuJ3RcbiAgICBpZiAoIWlzVmFsaWRNZXRob2QobWV0aG9kKSAmJiBtZXRob2QgIT09IFwiSEVBRFwiKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2RcbiAgICAgIH0pO1xuICAgICAgbGV0IHtcbiAgICAgICAgbWF0Y2hlczogbWV0aG9kTm90QWxsb3dlZE1hdGNoZXMsXG4gICAgICAgIHJvdXRlXG4gICAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VuYW1lLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2hlczogbWV0aG9kTm90QWxsb3dlZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXMsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSk7XG4gICAgICBsZXQge1xuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIHJvdXRlXG4gICAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VuYW1lLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfSxcbiAgICAgICAgc3RhdHVzQ29kZTogZXJyb3Iuc3RhdHVzLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHF1ZXJ5SW1wbChyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQpO1xuICAgIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8vIFdoZW4gcmV0dXJuaW5nIFN0YXRpY0hhbmRsZXJDb250ZXh0LCB3ZSBwYXRjaCBiYWNrIGluIHRoZSBsb2NhdGlvbiBoZXJlXG4gICAgLy8gc2luY2Ugd2UgbmVlZCBpdCBmb3IgUmVhY3QgQ29udGV4dC4gIEJ1dCB0aGlzIGhlbHBzIGtlZXAgb3VyIHN1Ym1pdCBhbmRcbiAgICAvLyBsb2FkUm91dGVEYXRhIG9wZXJhdGluZyBvbiBhIFJlcXVlc3QgaW5zdGVhZCBvZiBhIExvY2F0aW9uXG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgYmFzZW5hbWVcbiAgICB9LCByZXN1bHQpO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgcXVlcnlSb3V0ZSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgdGFyZ2V0ZWQgcm91dGUgcmVxdWVzdHMsIGVpdGhlclxuICAgKiBmb3IgZmV0Y2ggP19kYXRhIHJlcXVlc3RzIG9yIHJlc291cmNlIHJvdXRlIHJlcXVlc3RzLiAgSW4gdGhpcyBjYXNlLCB3ZVxuICAgKiBhcmUgb25seSBldmVyIGNhbGxpbmcgYSBzaW5nbGUgYWN0aW9uIG9yIGxvYWRlciwgYW5kIHdlIGFyZSByZXR1cm5pbmcgdGhlXG4gICAqIHJldHVybmVkIHZhbHVlIGRpcmVjdGx5LiAgSW4gbW9zdCBjYXNlcywgdGhpcyB3aWxsIGJlIGEgUmVzcG9uc2UgcmV0dXJuZWRcbiAgICogZnJvbSB0aGUgYWN0aW9uL2xvYWRlciwgYnV0IGl0IG1heSBiZSBhIHByaW1pdGl2ZSBvciBvdGhlciB2YWx1ZSBhcyB3ZWxsIC1cbiAgICogYW5kIGluIHN1Y2ggY2FzZXMgdGhlIGNhbGxpbmcgY29udGV4dCBzaG91bGQgaGFuZGxlIHRoYXQgYWNjb3JkaW5nbHkuXG4gICAqXG4gICAqIFdlIGRvIHJlc3BlY3QgdGhlIHRocm93L3JldHVybiBkaWZmZXJlbnRpYXRpb24sIHNvIGlmIGFuIGFjdGlvbi9sb2FkZXJcbiAgICogdGhyb3dzLCB0aGVuIHRoaXMgbWV0aG9kIHdpbGwgdGhyb3cgdGhlIHZhbHVlLiAgVGhpcyBpcyBpbXBvcnRhbnQgc28gd2VcbiAgICogY2FuIGRvIHByb3BlciBib3VuZGFyeSBpZGVudGlmaWNhdGlvbiBpbiBSZW1peCB3aGVyZSBhIHRocm93biBSZXNwb25zZVxuICAgKiBtdXN0IGdvIHRvIHRoZSBDYXRjaCBCb3VuZGFyeSBidXQgYSByZXR1cm5lZCBSZXNwb25zZSBpcyBoYXBweS1wYXRoLlxuICAgKlxuICAgKiBPbmUgdGhpbmcgdG8gbm90ZSBpcyB0aGF0IGFueSBSb3V0ZXItaW5pdGlhdGVkIEVycm9ycyB0aGF0IG1ha2Ugc2Vuc2VcbiAgICogdG8gYXNzb2NpYXRlIHdpdGggYSBzdGF0dXMgY29kZSB3aWxsIGJlIHRocm93biBhcyBhbiBFcnJvclJlc3BvbnNlXG4gICAqIGluc3RhbmNlIHdoaWNoIGluY2x1ZGUgdGhlIHJhdyBFcnJvciwgc3VjaCB0aGF0IHRoZSBjYWxsaW5nIGNvbnRleHQgY2FuXG4gICAqIHNlcmlhbGl6ZSB0aGUgZXJyb3IgYXMgdGhleSBzZWUgZml0IHdoaWxlIGluY2x1ZGluZyB0aGUgcHJvcGVyIHJlc3BvbnNlXG4gICAqIGNvZGUuICBFeGFtcGxlcyBoZXJlIGFyZSA0MDQgYW5kIDQwNSBlcnJvcnMgdGhhdCBvY2N1ciBwcmlvciB0byByZWFjaGluZ1xuICAgKiBhbnkgdXNlci1kZWZpbmVkIGxvYWRlcnMuXG4gICAqL1xuICBhc3luYyBmdW5jdGlvbiBxdWVyeVJvdXRlKHJlcXVlc3QsIF90ZW1wNCkge1xuICAgIGxldCB7XG4gICAgICByb3V0ZUlkLFxuICAgICAgcmVxdWVzdENvbnRleHRcbiAgICB9ID0gX3RlbXA0ID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wNDtcbiAgICBsZXQgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgbGV0IG1ldGhvZCA9IHJlcXVlc3QubWV0aG9kO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKFwiXCIsIGNyZWF0ZVBhdGgodXJsKSwgbnVsbCwgXCJkZWZhdWx0XCIpO1xuICAgIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMoZGF0YVJvdXRlcywgbG9jYXRpb24sIGJhc2VuYW1lKTtcbiAgICAvLyBTU1Igc3VwcG9ydHMgSEVBRCByZXF1ZXN0cyB3aGlsZSBTUEEgZG9lc24ndFxuICAgIGlmICghaXNWYWxpZE1ldGhvZChtZXRob2QpICYmIG1ldGhvZCAhPT0gXCJIRUFEXCIgJiYgbWV0aG9kICE9PSBcIk9QVElPTlNcIikge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaGVzKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgbWF0Y2ggPSByb3V0ZUlkID8gbWF0Y2hlcy5maW5kKG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkgOiBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbik7XG4gICAgaWYgKHJvdXRlSWQgJiYgIW1hdGNoKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMywge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoKSB7XG4gICAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoaXQgSSBkb24ndCB0aGluaz9cbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCByZXN1bHQgPSBhd2FpdCBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCBtYXRjaCk7XG4gICAgaWYgKGlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9ycyA/IE9iamVjdC52YWx1ZXMocmVzdWx0LmVycm9ycylbMF0gOiB1bmRlZmluZWQ7XG4gICAgaWYgKGVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIElmIHdlIGdvdCBiYWNrIHJlc3VsdC5lcnJvcnMsIHRoYXQgbWVhbnMgdGhlIGxvYWRlci9hY3Rpb24gdGhyZXdcbiAgICAgIC8vIF9zb21ldGhpbmdfIHRoYXQgd2Fzbid0IGEgUmVzcG9uc2UsIGJ1dCBpdCdzIG5vdCBndWFyYW50ZWVkL3JlcXVpcmVkXG4gICAgICAvLyB0byBiZSBhbiBgaW5zdGFuY2VvZiBFcnJvcmAgZWl0aGVyLCBzbyB3ZSBoYXZlIHRvIHVzZSB0aHJvdyBoZXJlIHRvXG4gICAgICAvLyBwcmVzZXJ2ZSB0aGUgXCJlcnJvclwiIHN0YXRlIG91dHNpZGUgb2YgcXVlcnlJbXBsLlxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIC8vIFBpY2sgb2ZmIHRoZSByaWdodCBzdGF0ZSB2YWx1ZSB0byByZXR1cm5cbiAgICBpZiAocmVzdWx0LmFjdGlvbkRhdGEpIHtcbiAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHJlc3VsdC5hY3Rpb25EYXRhKVswXTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdC5sb2FkZXJEYXRhKSB7XG4gICAgICB2YXIgX3Jlc3VsdCRhY3RpdmVEZWZlcnJlO1xuICAgICAgbGV0IGRhdGEgPSBPYmplY3QudmFsdWVzKHJlc3VsdC5sb2FkZXJEYXRhKVswXTtcbiAgICAgIGlmICgoX3Jlc3VsdCRhY3RpdmVEZWZlcnJlID0gcmVzdWx0LmFjdGl2ZURlZmVycmVkcykgIT0gbnVsbCAmJiBfcmVzdWx0JGFjdGl2ZURlZmVycmVbbWF0Y2gucm91dGUuaWRdKSB7XG4gICAgICAgIGRhdGFbVU5TQUZFX0RFRkVSUkVEX1NZTUJPTF0gPSByZXN1bHQuYWN0aXZlRGVmZXJyZWRzW21hdGNoLnJvdXRlLmlkXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5SW1wbChyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIHJvdXRlTWF0Y2gpIHtcbiAgICBpbnZhcmlhbnQocmVxdWVzdC5zaWduYWwsIFwicXVlcnkoKS9xdWVyeVJvdXRlKCkgcmVxdWVzdHMgbXVzdCBjb250YWluIGFuIEFib3J0Q29udHJvbGxlciBzaWduYWxcIik7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc011dGF0aW9uTWV0aG9kKHJlcXVlc3QubWV0aG9kLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBzdWJtaXQocmVxdWVzdCwgbWF0Y2hlcywgcm91dGVNYXRjaCB8fCBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbiksIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoICE9IG51bGwpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IGxvYWRSb3V0ZURhdGEocmVxdWVzdCwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIHJvdXRlTWF0Y2gpO1xuICAgICAgcmV0dXJuIGlzUmVzcG9uc2UocmVzdWx0KSA/IHJlc3VsdCA6IF9leHRlbmRzKHt9LCByZXN1bHQsIHtcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge31cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIHRocmV3L3JldHVybmVkIGEgUmVzcG9uc2UgaW4gY2FsbExvYWRlck9yQWN0aW9uLCB3ZSB0aHJvd1xuICAgICAgLy8gaXQgdG8gYmFpbCBvdXQgYW5kIHRoZW4gcmV0dXJuIG9yIHRocm93IGhlcmUgYmFzZWQgb24gd2hldGhlciB0aGUgdXNlclxuICAgICAgLy8gcmV0dXJuZWQgb3IgdGhyZXdcbiAgICAgIGlmIChpc1F1ZXJ5Um91dGVSZXNwb25zZShlKSkge1xuICAgICAgICBpZiAoZS50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgZS5yZXNwb25zZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZS5yZXNwb25zZTtcbiAgICAgIH1cbiAgICAgIC8vIFJlZGlyZWN0cyBhcmUgYWx3YXlzIHJldHVybmVkIHNpbmNlIHRoZXkgZG9uJ3QgcHJvcGFnYXRlIHRvIGNhdGNoXG4gICAgICAvLyBib3VuZGFyaWVzXG4gICAgICBpZiAoaXNSZWRpcmVjdFJlc3BvbnNlKGUpKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgICAgfVxuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gc3VibWl0KHJlcXVlc3QsIG1hdGNoZXMsIGFjdGlvbk1hdGNoLCByZXF1ZXN0Q29udGV4dCwgaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGlmICghYWN0aW9uTWF0Y2gucm91dGUuYWN0aW9uICYmICFhY3Rpb25NYXRjaC5yb3V0ZS5sYXp5KSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICBwYXRobmFtZTogbmV3IFVSTChyZXF1ZXN0LnVybCkucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWQ6IGFjdGlvbk1hdGNoLnJvdXRlLmlkXG4gICAgICB9KTtcbiAgICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3JcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IGNhbGxMb2FkZXJPckFjdGlvbihcImFjdGlvblwiLCByZXF1ZXN0LCBhY3Rpb25NYXRjaCwgbWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgYmFzZW5hbWUsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCwge1xuICAgICAgICBpc1N0YXRpY1JlcXVlc3Q6IHRydWUsXG4gICAgICAgIGlzUm91dGVSZXF1ZXN0LFxuICAgICAgICByZXF1ZXN0Q29udGV4dFxuICAgICAgfSk7XG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICBsZXQgbWV0aG9kID0gaXNSb3V0ZVJlcXVlc3QgPyBcInF1ZXJ5Um91dGVcIiA6IFwicXVlcnlcIjtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArIFwiKCkgY2FsbCBhYm9ydGVkOiBcIiArIHJlcXVlc3QubWV0aG9kICsgXCIgXCIgKyByZXF1ZXN0LnVybCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFVoaGhoIC0gdGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLCB3ZSBzaG91bGQgYWx3YXlzIHRocm93IHRoZXNlIGZyb21cbiAgICAgIC8vIGNhbGxMb2FkZXJPckFjdGlvbiwgYnV0IHRoZSB0eXBlIG5hcnJvd2luZyBoZXJlIGtlZXBzIFRTIGhhcHB5IGFuZCB3ZVxuICAgICAgLy8gY2FuIGdldCBiYWNrIG9uIHRoZSBcInRocm93IGFsbCByZWRpcmVjdCByZXNwb25zZXNcIiB0cmFpbiBoZXJlIHNob3VsZFxuICAgICAgLy8gdGhpcyBldmVyIGhhcHBlbiA6L1xuICAgICAgdGhyb3cgbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiByZXN1bHQuc3RhdHVzLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246IHJlc3VsdC5sb2NhdGlvblxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgICAgdHlwZTogXCJkZWZlci1hY3Rpb25cIlxuICAgICAgfSk7XG4gICAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgIC8vIE5vdGU6IFRoaXMgc2hvdWxkIG9ubHkgYmUgbm9uLVJlc3BvbnNlIHZhbHVlcyBpZiB3ZSBnZXQgaGVyZSwgc2luY2VcbiAgICAgIC8vIGlzUm91dGVSZXF1ZXN0IHNob3VsZCB0aHJvdyBhbnkgUmVzcG9uc2UgcmVjZWl2ZWQgaW4gY2FsbExvYWRlck9yQWN0aW9uXG4gICAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAgIHRocm93IHJlc3VsdC5lcnJvcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hdGNoZXM6IFthY3Rpb25NYXRjaF0sXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiB7XG4gICAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmRhdGFcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3JzOiBudWxsLFxuICAgICAgICAvLyBOb3RlOiBzdGF0dXNDb2RlICsgaGVhZGVycyBhcmUgdW51c2VkIGhlcmUgc2luY2UgcXVlcnlSb3V0ZSB3aWxsXG4gICAgICAgIC8vIHJldHVybiB0aGUgcmF3IFJlc3BvbnNlIG9yIHZhbHVlXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGxcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFN0b3JlIG9mZiB0aGUgcGVuZGluZyBlcnJvciAtIHdlIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hpY2ggbG9hZGVyc1xuICAgICAgLy8gdG8gY2FsbCBhbmQgd2lsbCBjb21taXQgaXQgd2hlbiB3ZSBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvblxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGFjdGlvbk1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgdW5kZWZpbmVkLCB7XG4gICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICB9KTtcbiAgICAgIC8vIGFjdGlvbiBzdGF0dXMgY29kZXMgdGFrZSBwcmVjZWRlbmNlIG92ZXIgbG9hZGVyIHN0YXR1cyBjb2Rlc1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCB7XG4gICAgICAgIHN0YXR1c0NvZGU6IGlzUm91dGVFcnJvclJlc3BvbnNlKHJlc3VsdC5lcnJvcikgPyByZXN1bHQuZXJyb3Iuc3RhdHVzIDogNTAwLFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiBfZXh0ZW5kcyh7fSwgcmVzdWx0LmhlYWRlcnMgPyB7XG4gICAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmhlYWRlcnNcbiAgICAgICAgfSA6IHt9KVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIENyZWF0ZSBhIEdFVCByZXF1ZXN0IGZvciB0aGUgbG9hZGVyc1xuICAgIGxldCBsb2FkZXJSZXF1ZXN0ID0gbmV3IFJlcXVlc3QocmVxdWVzdC51cmwsIHtcbiAgICAgIGhlYWRlcnM6IHJlcXVlc3QuaGVhZGVycyxcbiAgICAgIHJlZGlyZWN0OiByZXF1ZXN0LnJlZGlyZWN0LFxuICAgICAgc2lnbmFsOiByZXF1ZXN0LnNpZ25hbFxuICAgIH0pO1xuICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShsb2FkZXJSZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCByZXN1bHQuc3RhdHVzQ29kZSA/IHtcbiAgICAgIHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXNDb2RlXG4gICAgfSA6IHt9LCB7XG4gICAgICBhY3Rpb25EYXRhOiB7XG4gICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICB9LFxuICAgICAgYWN0aW9uSGVhZGVyczogX2V4dGVuZHMoe30sIHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuaGVhZGVyc1xuICAgICAgfSA6IHt9KVxuICAgIH0pO1xuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIGxvYWRSb3V0ZURhdGEocmVxdWVzdCwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIHJvdXRlTWF0Y2gsIHBlbmRpbmdBY3Rpb25FcnJvcikge1xuICAgIGxldCBpc1JvdXRlUmVxdWVzdCA9IHJvdXRlTWF0Y2ggIT0gbnVsbDtcbiAgICAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4gKHF1ZXJ5Um91dGUoKSlcbiAgICBpZiAoaXNSb3V0ZVJlcXVlc3QgJiYgIShyb3V0ZU1hdGNoICE9IG51bGwgJiYgcm91dGVNYXRjaC5yb3V0ZS5sb2FkZXIpICYmICEocm91dGVNYXRjaCAhPSBudWxsICYmIHJvdXRlTWF0Y2gucm91dGUubGF6eSkpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBuZXcgVVJMKHJlcXVlc3QudXJsKS5wYXRobmFtZSxcbiAgICAgICAgcm91dGVJZDogcm91dGVNYXRjaCA9PSBudWxsID8gdm9pZCAwIDogcm91dGVNYXRjaC5yb3V0ZS5pZFxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCByZXF1ZXN0TWF0Y2hlcyA9IHJvdXRlTWF0Y2ggPyBbcm91dGVNYXRjaF0gOiBnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeShtYXRjaGVzLCBPYmplY3Qua2V5cyhwZW5kaW5nQWN0aW9uRXJyb3IgfHwge30pWzBdKTtcbiAgICBsZXQgbWF0Y2hlc1RvTG9hZCA9IHJlcXVlc3RNYXRjaGVzLmZpbHRlcihtID0+IG0ucm91dGUubG9hZGVyIHx8IG0ucm91dGUubGF6eSk7XG4gICAgLy8gU2hvcnQgY2lyY3VpdCBpZiB3ZSBoYXZlIG5vIGxvYWRlcnMgdG8gcnVuIChxdWVyeSgpKVxuICAgIGlmIChtYXRjaGVzVG9Mb2FkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgLy8gQWRkIGEgbnVsbCBmb3IgYWxsIG1hdGNoZWQgcm91dGVzIGZvciBwcm9wZXIgcmV2YWxpZGF0aW9uIG9uIHRoZSBjbGllbnRcbiAgICAgICAgbG9hZGVyRGF0YTogbWF0Y2hlcy5yZWR1Y2UoKGFjYywgbSkgPT4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgICBbbS5yb3V0ZS5pZF06IG51bGxcbiAgICAgICAgfSksIHt9KSxcbiAgICAgICAgZXJyb3JzOiBwZW5kaW5nQWN0aW9uRXJyb3IgfHwgbnVsbCxcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH1cbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFsuLi5tYXRjaGVzVG9Mb2FkLm1hcChtYXRjaCA9PiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgcmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgsIHtcbiAgICAgIGlzU3RhdGljUmVxdWVzdDogdHJ1ZSxcbiAgICAgIGlzUm91dGVSZXF1ZXN0LFxuICAgICAgcmVxdWVzdENvbnRleHRcbiAgICB9KSldKTtcbiAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgbGV0IG1ldGhvZCA9IGlzUm91dGVSZXF1ZXN0ID8gXCJxdWVyeVJvdXRlXCIgOiBcInF1ZXJ5XCI7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWV0aG9kICsgXCIoKSBjYWxsIGFib3J0ZWQ6IFwiICsgcmVxdWVzdC5tZXRob2QgKyBcIiBcIiArIHJlcXVlc3QudXJsKTtcbiAgICB9XG4gICAgLy8gUHJvY2VzcyBhbmQgY29tbWl0IG91dHB1dCBmcm9tIGxvYWRlcnNcbiAgICBsZXQgYWN0aXZlRGVmZXJyZWRzID0gbmV3IE1hcCgpO1xuICAgIGxldCBjb250ZXh0ID0gcHJvY2Vzc1JvdXRlTG9hZGVyRGF0YShtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBwZW5kaW5nQWN0aW9uRXJyb3IsIGFjdGl2ZURlZmVycmVkcyk7XG4gICAgLy8gQWRkIGEgbnVsbCBmb3IgYW55IG5vbi1sb2FkZXIgbWF0Y2hlcyBmb3IgcHJvcGVyIHJldmFsaWRhdGlvbiBvbiB0aGUgY2xpZW50XG4gICAgbGV0IGV4ZWN1dGVkTG9hZGVycyA9IG5ldyBTZXQobWF0Y2hlc1RvTG9hZC5tYXAobWF0Y2ggPT4gbWF0Y2gucm91dGUuaWQpKTtcbiAgICBtYXRjaGVzLmZvckVhY2gobWF0Y2ggPT4ge1xuICAgICAgaWYgKCFleGVjdXRlZExvYWRlcnMuaGFzKG1hdGNoLnJvdXRlLmlkKSkge1xuICAgICAgICBjb250ZXh0LmxvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdID0gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICAgIG1hdGNoZXMsXG4gICAgICBhY3RpdmVEZWZlcnJlZHM6IGFjdGl2ZURlZmVycmVkcy5zaXplID4gMCA/IE9iamVjdC5mcm9tRW50cmllcyhhY3RpdmVEZWZlcnJlZHMuZW50cmllcygpKSA6IG51bGxcbiAgICB9KTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGRhdGFSb3V0ZXMsXG4gICAgcXVlcnksXG4gICAgcXVlcnlSb3V0ZVxuICB9O1xufVxuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIEhlbHBlcnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIEdpdmVuIGFuIGV4aXN0aW5nIFN0YXRpY0hhbmRsZXJDb250ZXh0IGFuZCBhbiBlcnJvciB0aHJvd24gYXQgcmVuZGVyIHRpbWUsXG4gKiBwcm92aWRlIGFuIHVwZGF0ZWQgU3RhdGljSGFuZGxlckNvbnRleHQgc3VpdGFibGUgZm9yIGEgc2Vjb25kIFNTUiByZW5kZXJcbiAqL1xuZnVuY3Rpb24gZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvcihyb3V0ZXMsIGNvbnRleHQsIGVycm9yKSB7XG4gIGxldCBuZXdDb250ZXh0ID0gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgZXJyb3JzOiB7XG4gICAgICBbY29udGV4dC5fZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB8fCByb3V0ZXNbMF0uaWRdOiBlcnJvclxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBuZXdDb250ZXh0O1xufVxuZnVuY3Rpb24gaXNTdWJtaXNzaW9uTmF2aWdhdGlvbihvcHRzKSB7XG4gIHJldHVybiBvcHRzICE9IG51bGwgJiYgKFwiZm9ybURhdGFcIiBpbiBvcHRzICYmIG9wdHMuZm9ybURhdGEgIT0gbnVsbCB8fCBcImJvZHlcIiBpbiBvcHRzICYmIG9wdHMuYm9keSAhPT0gdW5kZWZpbmVkKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVRvKGxvY2F0aW9uLCBtYXRjaGVzLCBiYXNlbmFtZSwgcHJlcGVuZEJhc2VuYW1lLCB0bywgdjdfcmVsYXRpdmVTcGxhdFBhdGgsIGZyb21Sb3V0ZUlkLCByZWxhdGl2ZSkge1xuICBsZXQgY29udGV4dHVhbE1hdGNoZXM7XG4gIGxldCBhY3RpdmVSb3V0ZU1hdGNoO1xuICBpZiAoZnJvbVJvdXRlSWQpIHtcbiAgICAvLyBHcmFiIG1hdGNoZXMgdXAgdG8gdGhlIGNhbGxpbmcgcm91dGUgc28gb3VyIHJvdXRlLXJlbGF0aXZlIGxvZ2ljIGlzXG4gICAgLy8gcmVsYXRpdmUgdG8gdGhlIGNvcnJlY3Qgc291cmNlIHJvdXRlXG4gICAgY29udGV4dHVhbE1hdGNoZXMgPSBbXTtcbiAgICBmb3IgKGxldCBtYXRjaCBvZiBtYXRjaGVzKSB7XG4gICAgICBjb250ZXh0dWFsTWF0Y2hlcy5wdXNoKG1hdGNoKTtcbiAgICAgIGlmIChtYXRjaC5yb3V0ZS5pZCA9PT0gZnJvbVJvdXRlSWQpIHtcbiAgICAgICAgYWN0aXZlUm91dGVNYXRjaCA9IG1hdGNoO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29udGV4dHVhbE1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGFjdGl2ZVJvdXRlTWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIH1cbiAgLy8gUmVzb2x2ZSB0aGUgcmVsYXRpdmUgcGF0aFxuICBsZXQgcGF0aCA9IHJlc29sdmVUbyh0byA/IHRvIDogXCIuXCIsIGdldFJlc29sdmVUb01hdGNoZXMoY29udGV4dHVhbE1hdGNoZXMsIHY3X3JlbGF0aXZlU3BsYXRQYXRoKSwgc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IGxvY2F0aW9uLnBhdGhuYW1lLCByZWxhdGl2ZSA9PT0gXCJwYXRoXCIpO1xuICAvLyBXaGVuIGB0b2AgaXMgbm90IHNwZWNpZmllZCB3ZSBpbmhlcml0IHNlYXJjaC9oYXNoIGZyb20gdGhlIGN1cnJlbnRcbiAgLy8gbG9jYXRpb24sIHVubGlrZSB3aGVuIHRvPVwiLlwiIGFuZCB3ZSBqdXN0IGluaGVyaXQgdGhlIHBhdGguXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlbWl4L2lzc3Vlcy85MjdcbiAgaWYgKHRvID09IG51bGwpIHtcbiAgICBwYXRoLnNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaDtcbiAgICBwYXRoLmhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICB9XG4gIC8vIEFkZCBhbiA/aW5kZXggcGFyYW0gZm9yIG1hdGNoZWQgaW5kZXggcm91dGVzIGlmIHdlIGRvbid0IGFscmVhZHkgaGF2ZSBvbmVcbiAgaWYgKCh0byA9PSBudWxsIHx8IHRvID09PSBcIlwiIHx8IHRvID09PSBcIi5cIikgJiYgYWN0aXZlUm91dGVNYXRjaCAmJiBhY3RpdmVSb3V0ZU1hdGNoLnJvdXRlLmluZGV4ICYmICFoYXNOYWtlZEluZGV4UXVlcnkocGF0aC5zZWFyY2gpKSB7XG4gICAgcGF0aC5zZWFyY2ggPSBwYXRoLnNlYXJjaCA/IHBhdGguc2VhcmNoLnJlcGxhY2UoL15cXD8vLCBcIj9pbmRleCZcIikgOiBcIj9pbmRleFwiO1xuICB9XG4gIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUuICBJZlxuICAvLyB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIGp1c3QgdXNlIHRoZSByYXcgYmFzZW5hbWUgd2hpY2ggYWxsb3dzXG4gIC8vIHRoZSBiYXNlbmFtZSB0byBoYXZlIGZ1bGwgY29udHJvbCBvdmVyIHRoZSBwcmVzZW5jZSBvZiBhIHRyYWlsaW5nIHNsYXNoXG4gIC8vIG9uIHJvb3QgYWN0aW9uc1xuICBpZiAocHJlcGVuZEJhc2VuYW1lICYmIGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICB9XG4gIHJldHVybiBjcmVhdGVQYXRoKHBhdGgpO1xufVxuLy8gTm9ybWFsaXplIG5hdmlnYXRpb24gb3B0aW9ucyBieSBjb252ZXJ0aW5nIGZvcm1NZXRob2Q9R0VUIGZvcm1EYXRhIG9iamVjdHMgdG9cbi8vIFVSTFNlYXJjaFBhcmFtcyBzbyB0aGV5IGJlaGF2ZSBpZGVudGljYWxseSB0byBsaW5rcyB3aXRoIHF1ZXJ5IHBhcmFtc1xuZnVuY3Rpb24gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKG5vcm1hbGl6ZUZvcm1NZXRob2QsIGlzRmV0Y2hlciwgcGF0aCwgb3B0cykge1xuICAvLyBSZXR1cm4gbG9jYXRpb24gdmVyYmF0aW0gb24gbm9uLXN1Ym1pc3Npb24gbmF2aWdhdGlvbnNcbiAgaWYgKCFvcHRzIHx8ICFpc1N1Ym1pc3Npb25OYXZpZ2F0aW9uKG9wdHMpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGhcbiAgICB9O1xuICB9XG4gIGlmIChvcHRzLmZvcm1NZXRob2QgJiYgIWlzVmFsaWRNZXRob2Qob3B0cy5mb3JtTWV0aG9kKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoLFxuICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZDogb3B0cy5mb3JtTWV0aG9kXG4gICAgICB9KVxuICAgIH07XG4gIH1cbiAgbGV0IGdldEludmFsaWRCb2R5RXJyb3IgPSAoKSA9PiAoe1xuICAgIHBhdGgsXG4gICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICB0eXBlOiBcImludmFsaWQtYm9keVwiXG4gICAgfSlcbiAgfSk7XG4gIC8vIENyZWF0ZSBhIFN1Ym1pc3Npb24gb24gbm9uLUdFVCBuYXZpZ2F0aW9uc1xuICBsZXQgcmF3Rm9ybU1ldGhvZCA9IG9wdHMuZm9ybU1ldGhvZCB8fCBcImdldFwiO1xuICBsZXQgZm9ybU1ldGhvZCA9IG5vcm1hbGl6ZUZvcm1NZXRob2QgPyByYXdGb3JtTWV0aG9kLnRvVXBwZXJDYXNlKCkgOiByYXdGb3JtTWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIGxldCBmb3JtQWN0aW9uID0gc3RyaXBIYXNoRnJvbVBhdGgocGF0aCk7XG4gIGlmIChvcHRzLmJvZHkgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChvcHRzLmZvcm1FbmNUeXBlID09PSBcInRleHQvcGxhaW5cIikge1xuICAgICAgLy8gdGV4dCBvbmx5IHN1cHBvcnQgUE9TVC9QVVQvUEFUQ0gvREVMRVRFIHN1Ym1pc3Npb25zXG4gICAgICBpZiAoIWlzTXV0YXRpb25NZXRob2QoZm9ybU1ldGhvZCkpIHtcbiAgICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIGxldCB0ZXh0ID0gdHlwZW9mIG9wdHMuYm9keSA9PT0gXCJzdHJpbmdcIiA/IG9wdHMuYm9keSA6IG9wdHMuYm9keSBpbnN0YW5jZW9mIEZvcm1EYXRhIHx8IG9wdHMuYm9keSBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcyA/XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNwbGFpbi10ZXh0LWZvcm0tZGF0YVxuICAgICAgQXJyYXkuZnJvbShvcHRzLmJvZHkuZW50cmllcygpKS5yZWR1Y2UoKGFjYywgX3JlZjMpID0+IHtcbiAgICAgICAgbGV0IFtuYW1lLCB2YWx1ZV0gPSBfcmVmMztcbiAgICAgICAgcmV0dXJuIFwiXCIgKyBhY2MgKyBuYW1lICsgXCI9XCIgKyB2YWx1ZSArIFwiXFxuXCI7XG4gICAgICB9LCBcIlwiKSA6IFN0cmluZyhvcHRzLmJvZHkpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aCxcbiAgICAgICAgc3VibWlzc2lvbjoge1xuICAgICAgICAgIGZvcm1NZXRob2QsXG4gICAgICAgICAgZm9ybUFjdGlvbixcbiAgICAgICAgICBmb3JtRW5jVHlwZTogb3B0cy5mb3JtRW5jVHlwZSxcbiAgICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgICAgICB0ZXh0XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChvcHRzLmZvcm1FbmNUeXBlID09PSBcImFwcGxpY2F0aW9uL2pzb25cIikge1xuICAgICAgLy8ganNvbiBvbmx5IHN1cHBvcnRzIFBPU1QvUFVUL1BBVENIL0RFTEVURSBzdWJtaXNzaW9uc1xuICAgICAgaWYgKCFpc011dGF0aW9uTWV0aG9kKGZvcm1NZXRob2QpKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnZhbGlkQm9keUVycm9yKCk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBsZXQganNvbiA9IHR5cGVvZiBvcHRzLmJvZHkgPT09IFwic3RyaW5nXCIgPyBKU09OLnBhcnNlKG9wdHMuYm9keSkgOiBvcHRzLmJvZHk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGF0aCxcbiAgICAgICAgICBzdWJtaXNzaW9uOiB7XG4gICAgICAgICAgICBmb3JtTWV0aG9kLFxuICAgICAgICAgICAgZm9ybUFjdGlvbixcbiAgICAgICAgICAgIGZvcm1FbmNUeXBlOiBvcHRzLmZvcm1FbmNUeXBlLFxuICAgICAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGpzb24sXG4gICAgICAgICAgICB0ZXh0OiB1bmRlZmluZWRcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnZhbGlkQm9keUVycm9yKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGludmFyaWFudCh0eXBlb2YgRm9ybURhdGEgPT09IFwiZnVuY3Rpb25cIiwgXCJGb3JtRGF0YSBpcyBub3QgYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnRcIik7XG4gIGxldCBzZWFyY2hQYXJhbXM7XG4gIGxldCBmb3JtRGF0YTtcbiAgaWYgKG9wdHMuZm9ybURhdGEpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhvcHRzLmZvcm1EYXRhKTtcbiAgICBmb3JtRGF0YSA9IG9wdHMuZm9ybURhdGE7XG4gIH0gZWxzZSBpZiAob3B0cy5ib2R5IGluc3RhbmNlb2YgRm9ybURhdGEpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhvcHRzLmJvZHkpO1xuICAgIGZvcm1EYXRhID0gb3B0cy5ib2R5O1xuICB9IGVsc2UgaWYgKG9wdHMuYm9keSBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcykge1xuICAgIHNlYXJjaFBhcmFtcyA9IG9wdHMuYm9keTtcbiAgICBmb3JtRGF0YSA9IGNvbnZlcnRTZWFyY2hQYXJhbXNUb0Zvcm1EYXRhKHNlYXJjaFBhcmFtcyk7XG4gIH0gZWxzZSBpZiAob3B0cy5ib2R5ID09IG51bGwpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhvcHRzLmJvZHkpO1xuICAgICAgZm9ybURhdGEgPSBjb252ZXJ0U2VhcmNoUGFyYW1zVG9Gb3JtRGF0YShzZWFyY2hQYXJhbXMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBnZXRJbnZhbGlkQm9keUVycm9yKCk7XG4gICAgfVxuICB9XG4gIGxldCBzdWJtaXNzaW9uID0ge1xuICAgIGZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbixcbiAgICBmb3JtRW5jVHlwZTogb3B0cyAmJiBvcHRzLmZvcm1FbmNUeXBlIHx8IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgZm9ybURhdGEsXG4gICAganNvbjogdW5kZWZpbmVkLFxuICAgIHRleHQ6IHVuZGVmaW5lZFxuICB9O1xuICBpZiAoaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uXG4gICAgfTtcbiAgfVxuICAvLyBGbGF0dGVuIHN1Ym1pc3Npb24gb250byBVUkxTZWFyY2hQYXJhbXMgZm9yIEdFVCBzdWJtaXNzaW9uc1xuICBsZXQgcGFyc2VkUGF0aCA9IHBhcnNlUGF0aChwYXRoKTtcbiAgLy8gT24gR0VUIG5hdmlnYXRpb24gc3VibWlzc2lvbnMgd2UgY2FuIGRyb3AgdGhlID9pbmRleCBwYXJhbSBmcm9tIHRoZVxuICAvLyByZXN1bHRpbmcgbG9jYXRpb24gc2luY2UgYWxsIGxvYWRlcnMgd2lsbCBydW4uICBCdXQgZmV0Y2hlciBHRVQgc3VibWlzc2lvbnNcbiAgLy8gb25seSBydW4gYSBzaW5nbGUgbG9hZGVyIHNvIHdlIG5lZWQgdG8gcHJlc2VydmUgYW55IGluY29taW5nID9pbmRleCBwYXJhbXNcbiAgaWYgKGlzRmV0Y2hlciAmJiBwYXJzZWRQYXRoLnNlYXJjaCAmJiBoYXNOYWtlZEluZGV4UXVlcnkocGFyc2VkUGF0aC5zZWFyY2gpKSB7XG4gICAgc2VhcmNoUGFyYW1zLmFwcGVuZChcImluZGV4XCIsIFwiXCIpO1xuICB9XG4gIHBhcnNlZFBhdGguc2VhcmNoID0gXCI/XCIgKyBzZWFyY2hQYXJhbXM7XG4gIHJldHVybiB7XG4gICAgcGF0aDogY3JlYXRlUGF0aChwYXJzZWRQYXRoKSxcbiAgICBzdWJtaXNzaW9uXG4gIH07XG59XG4vLyBGaWx0ZXIgb3V0IGFsbCByb3V0ZXMgYmVsb3cgYW55IGNhdWdodCBlcnJvciBhcyB0aGV5IGFyZW4ndCBnb2luZyB0b1xuLy8gcmVuZGVyIHNvIHdlIGRvbid0IG5lZWQgdG8gbG9hZCB0aGVtXG5mdW5jdGlvbiBnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeShtYXRjaGVzLCBib3VuZGFyeUlkKSB7XG4gIGxldCBib3VuZGFyeU1hdGNoZXMgPSBtYXRjaGVzO1xuICBpZiAoYm91bmRhcnlJZCkge1xuICAgIGxldCBpbmRleCA9IG1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCA9PT0gYm91bmRhcnlJZCk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIGJvdW5kYXJ5TWF0Y2hlcyA9IG1hdGNoZXMuc2xpY2UoMCwgaW5kZXgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYm91bmRhcnlNYXRjaGVzO1xufVxuZnVuY3Rpb24gZ2V0TWF0Y2hlc1RvTG9hZChoaXN0b3J5LCBzdGF0ZSwgbWF0Y2hlcywgc3VibWlzc2lvbiwgbG9jYXRpb24sIGlzSW5pdGlhbExvYWQsIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIGRlbGV0ZWRGZXRjaGVycywgZmV0Y2hMb2FkTWF0Y2hlcywgZmV0Y2hSZWRpcmVjdElkcywgcm91dGVzVG9Vc2UsIGJhc2VuYW1lLCBwZW5kaW5nQWN0aW9uRGF0YSwgcGVuZGluZ0Vycm9yKSB7XG4gIGxldCBhY3Rpb25SZXN1bHQgPSBwZW5kaW5nRXJyb3IgPyBPYmplY3QudmFsdWVzKHBlbmRpbmdFcnJvcilbMF0gOiBwZW5kaW5nQWN0aW9uRGF0YSA/IE9iamVjdC52YWx1ZXMocGVuZGluZ0FjdGlvbkRhdGEpWzBdIDogdW5kZWZpbmVkO1xuICBsZXQgY3VycmVudFVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKHN0YXRlLmxvY2F0aW9uKTtcbiAgbGV0IG5leHRVcmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChsb2NhdGlvbik7XG4gIC8vIFBpY2sgbmF2aWdhdGlvbiBtYXRjaGVzIHRoYXQgYXJlIG5ldC1uZXcgb3IgcXVhbGlmeSBmb3IgcmV2YWxpZGF0aW9uXG4gIGxldCBib3VuZGFyeUlkID0gcGVuZGluZ0Vycm9yID8gT2JqZWN0LmtleXMocGVuZGluZ0Vycm9yKVswXSA6IHVuZGVmaW5lZDtcbiAgbGV0IGJvdW5kYXJ5TWF0Y2hlcyA9IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIGJvdW5kYXJ5SWQpO1xuICBsZXQgbmF2aWdhdGlvbk1hdGNoZXMgPSBib3VuZGFyeU1hdGNoZXMuZmlsdGVyKChtYXRjaCwgaW5kZXgpID0+IHtcbiAgICBsZXQge1xuICAgICAgcm91dGVcbiAgICB9ID0gbWF0Y2g7XG4gICAgaWYgKHJvdXRlLmxhenkpIHtcbiAgICAgIC8vIFdlIGhhdmVuJ3QgbG9hZGVkIHRoaXMgcm91dGUgeWV0IHNvIHdlIGRvbid0IGtub3cgaWYgaXQncyBnb3QgYSBsb2FkZXIhXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHJvdXRlLmxvYWRlciA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpc0luaXRpYWxMb2FkKSB7XG4gICAgICBpZiAocm91dGUubG9hZGVyLmh5ZHJhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhdGUubG9hZGVyRGF0YVtyb3V0ZS5pZF0gPT09IHVuZGVmaW5lZCAmJiAoXG4gICAgICAvLyBEb24ndCByZS1ydW4gaWYgdGhlIGxvYWRlciByYW4gYW5kIHRocmV3IGFuIGVycm9yXG4gICAgICAhc3RhdGUuZXJyb3JzIHx8IHN0YXRlLmVycm9yc1tyb3V0ZS5pZF0gPT09IHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIC8vIEFsd2F5cyBjYWxsIHRoZSBsb2FkZXIgb24gbmV3IHJvdXRlIGluc3RhbmNlcyBhbmQgcGVuZGluZyBkZWZlciBjYW5jZWxsYXRpb25zXG4gICAgaWYgKGlzTmV3TG9hZGVyKHN0YXRlLmxvYWRlckRhdGEsIHN0YXRlLm1hdGNoZXNbaW5kZXhdLCBtYXRjaCkgfHwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMuc29tZShpZCA9PiBpZCA9PT0gbWF0Y2gucm91dGUuaWQpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gVGhpcyBpcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBmb3Igd2hlbiB3ZSByZXZhbGlkYXRlLiAgSWYgdGhlIHJvdXRlXG4gICAgLy8gcHJvdmlkZXMgaXQncyBvd24gaW1wbGVtZW50YXRpb24sIHRoZW4gd2UgZ2l2ZSB0aGVtIGZ1bGwgY29udHJvbCBidXRcbiAgICAvLyBwcm92aWRlIHRoaXMgdmFsdWUgc28gdGhleSBjYW4gbGV2ZXJhZ2UgaXQgaWYgbmVlZGVkIGFmdGVyIHRoZXkgY2hlY2tcbiAgICAvLyB0aGVpciBvd24gc3BlY2lmaWMgdXNlIGNhc2VzXG4gICAgbGV0IGN1cnJlbnRSb3V0ZU1hdGNoID0gc3RhdGUubWF0Y2hlc1tpbmRleF07XG4gICAgbGV0IG5leHRSb3V0ZU1hdGNoID0gbWF0Y2g7XG4gICAgcmV0dXJuIHNob3VsZFJldmFsaWRhdGVMb2FkZXIobWF0Y2gsIF9leHRlbmRzKHtcbiAgICAgIGN1cnJlbnRVcmwsXG4gICAgICBjdXJyZW50UGFyYW1zOiBjdXJyZW50Um91dGVNYXRjaC5wYXJhbXMsXG4gICAgICBuZXh0VXJsLFxuICAgICAgbmV4dFBhcmFtczogbmV4dFJvdXRlTWF0Y2gucGFyYW1zXG4gICAgfSwgc3VibWlzc2lvbiwge1xuICAgICAgYWN0aW9uUmVzdWx0LFxuICAgICAgZGVmYXVsdFNob3VsZFJldmFsaWRhdGU6XG4gICAgICAvLyBGb3JjZWQgcmV2YWxpZGF0aW9uIGR1ZSB0byBzdWJtaXNzaW9uLCB1c2VSZXZhbGlkYXRvciwgb3IgWC1SZW1peC1SZXZhbGlkYXRlXG4gICAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkIHx8XG4gICAgICAvLyBDbGlja2VkIHRoZSBzYW1lIGxpbmssIHJlc3VibWl0dGVkIGEgR0VUIGZvcm1cbiAgICAgIGN1cnJlbnRVcmwucGF0aG5hbWUgKyBjdXJyZW50VXJsLnNlYXJjaCA9PT0gbmV4dFVybC5wYXRobmFtZSArIG5leHRVcmwuc2VhcmNoIHx8XG4gICAgICAvLyBTZWFyY2ggcGFyYW1zIGFmZmVjdCBhbGwgbG9hZGVyc1xuICAgICAgY3VycmVudFVybC5zZWFyY2ggIT09IG5leHRVcmwuc2VhcmNoIHx8IGlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50Um91dGVNYXRjaCwgbmV4dFJvdXRlTWF0Y2gpXG4gICAgfSkpO1xuICB9KTtcbiAgLy8gUGljayBmZXRjaGVyLmxvYWRzIHRoYXQgbmVlZCB0byBiZSByZXZhbGlkYXRlZFxuICBsZXQgcmV2YWxpZGF0aW5nRmV0Y2hlcnMgPSBbXTtcbiAgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChmLCBrZXkpID0+IHtcbiAgICAvLyBEb24ndCByZXZhbGlkYXRlOlxuICAgIC8vICAtIG9uIGluaXRpYWwgbG9hZCAoc2hvdWxkbid0IGJlIGFueSBmZXRjaGVycyB0aGVuIGFueXdheSlcbiAgICAvLyAgLSBpZiBmZXRjaGVyIHdvbid0IGJlIHByZXNlbnQgaW4gdGhlIHN1YnNlcXVlbnQgcmVuZGVyXG4gICAgLy8gICAgLSBubyBsb25nZXIgbWF0Y2hlcyB0aGUgVVJMICh2N19mZXRjaGVyUGVyc2lzdD1mYWxzZSlcbiAgICAvLyAgICAtIHdhcyB1bm1vdW50ZWQgYnV0IHBlcnNpc3RlZCBkdWUgdG8gdjdfZmV0Y2hlclBlcnNpc3Q9dHJ1ZVxuICAgIGlmIChpc0luaXRpYWxMb2FkIHx8ICFtYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSBmLnJvdXRlSWQpIHx8IGRlbGV0ZWRGZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgZmV0Y2hlck1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgZi5wYXRoLCBiYXNlbmFtZSk7XG4gICAgLy8gSWYgdGhlIGZldGNoZXIgcGF0aCBubyBsb25nZXIgbWF0Y2hlcywgcHVzaCBpdCBpbiB3aXRoIG51bGwgbWF0Y2hlcyBzb1xuICAgIC8vIHdlIGNhbiB0cmlnZ2VyIGEgNDA0IGluIGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YS4gIE5vdGUgdGhpcyBpc1xuICAgIC8vIGN1cnJlbnRseSBvbmx5IGEgdXNlLWNhc2UgZm9yIFJlbWl4IEhNUiB3aGVyZSB0aGUgcm91dGUgdHJlZSBjYW4gY2hhbmdlXG4gICAgLy8gYXQgcnVudGltZSBhbmQgcmVtb3ZlIGEgcm91dGUgcHJldmlvdXNseSBsb2FkZWQgdmlhIGEgZmV0Y2hlclxuICAgIGlmICghZmV0Y2hlck1hdGNoZXMpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goe1xuICAgICAgICBrZXksXG4gICAgICAgIHJvdXRlSWQ6IGYucm91dGVJZCxcbiAgICAgICAgcGF0aDogZi5wYXRoLFxuICAgICAgICBtYXRjaGVzOiBudWxsLFxuICAgICAgICBtYXRjaDogbnVsbCxcbiAgICAgICAgY29udHJvbGxlcjogbnVsbFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFJldmFsaWRhdGluZyBmZXRjaGVycyBhcmUgZGVjb3VwbGVkIGZyb20gdGhlIHJvdXRlIG1hdGNoZXMgc2luY2UgdGhleVxuICAgIC8vIGxvYWQgZnJvbSBhIHN0YXRpYyBocmVmLiAgVGhleSByZXZhbGlkYXRlIGJhc2VkIG9uIGV4cGxpY2l0IHJldmFsaWRhdGlvblxuICAgIC8vIChzdWJtaXNzaW9uLCB1c2VSZXZhbGlkYXRvciwgb3IgWC1SZW1peC1SZXZhbGlkYXRlKVxuICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgbGV0IGZldGNoZXJNYXRjaCA9IGdldFRhcmdldE1hdGNoKGZldGNoZXJNYXRjaGVzLCBmLnBhdGgpO1xuICAgIGxldCBzaG91bGRSZXZhbGlkYXRlID0gZmFsc2U7XG4gICAgaWYgKGZldGNoUmVkaXJlY3RJZHMuaGFzKGtleSkpIHtcbiAgICAgIC8vIE5ldmVyIHRyaWdnZXIgYSByZXZhbGlkYXRpb24gb2YgYW4gYWN0aXZlbHkgcmVkaXJlY3RpbmcgZmV0Y2hlclxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoY2FuY2VsbGVkRmV0Y2hlckxvYWRzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgIC8vIEFsd2F5cyByZXZhbGlkYXRlIGlmIHRoZSBmZXRjaGVyIHdhcyBjYW5jZWxsZWRcbiAgICAgIHNob3VsZFJldmFsaWRhdGUgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoZmV0Y2hlciAmJiBmZXRjaGVyLnN0YXRlICE9PSBcImlkbGVcIiAmJiBmZXRjaGVyLmRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gSWYgdGhlIGZldGNoZXIgaGFzbid0IGV2ZXIgY29tcGxldGVkIGxvYWRpbmcgeWV0LCB0aGVuIHRoaXMgaXNuJ3QgYVxuICAgICAgLy8gcmV2YWxpZGF0aW9uLCBpdCB3b3VsZCBqdXN0IGJlIGEgYnJhbmQgbmV3IGxvYWQgaWYgYW4gZXhwbGljaXRcbiAgICAgIC8vIHJldmFsaWRhdGlvbiBpcyByZXF1aXJlZFxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZSA9IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSBmYWxsIGJhY2sgb24gYW55IHVzZXItZGVmaW5lZCBzaG91bGRSZXZhbGlkYXRlLCBkZWZhdWx0aW5nXG4gICAgICAvLyB0byBleHBsaWNpdCByZXZhbGlkYXRpb25zIG9ubHlcbiAgICAgIHNob3VsZFJldmFsaWRhdGUgPSBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGZldGNoZXJNYXRjaCwgX2V4dGVuZHMoe1xuICAgICAgICBjdXJyZW50VXJsLFxuICAgICAgICBjdXJyZW50UGFyYW1zOiBzdGF0ZS5tYXRjaGVzW3N0YXRlLm1hdGNoZXMubGVuZ3RoIC0gMV0ucGFyYW1zLFxuICAgICAgICBuZXh0VXJsLFxuICAgICAgICBuZXh0UGFyYW1zOiBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucGFyYW1zXG4gICAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICAgIGFjdGlvblJlc3VsdCxcbiAgICAgICAgZGVmYXVsdFNob3VsZFJldmFsaWRhdGU6IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWRcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgaWYgKHNob3VsZFJldmFsaWRhdGUpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goe1xuICAgICAgICBrZXksXG4gICAgICAgIHJvdXRlSWQ6IGYucm91dGVJZCxcbiAgICAgICAgcGF0aDogZi5wYXRoLFxuICAgICAgICBtYXRjaGVzOiBmZXRjaGVyTWF0Y2hlcyxcbiAgICAgICAgbWF0Y2g6IGZldGNoZXJNYXRjaCxcbiAgICAgICAgY29udHJvbGxlcjogbmV3IEFib3J0Q29udHJvbGxlcigpXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gW25hdmlnYXRpb25NYXRjaGVzLCByZXZhbGlkYXRpbmdGZXRjaGVyc107XG59XG5mdW5jdGlvbiBpc05ld0xvYWRlcihjdXJyZW50TG9hZGVyRGF0YSwgY3VycmVudE1hdGNoLCBtYXRjaCkge1xuICBsZXQgaXNOZXcgPVxuICAvLyBbYV0gLT4gW2EsIGJdXG4gICFjdXJyZW50TWF0Y2ggfHxcbiAgLy8gW2EsIGJdIC0+IFthLCBjXVxuICBtYXRjaC5yb3V0ZS5pZCAhPT0gY3VycmVudE1hdGNoLnJvdXRlLmlkO1xuICAvLyBIYW5kbGUgdGhlIGNhc2UgdGhhdCB3ZSBkb24ndCBoYXZlIGRhdGEgZm9yIGEgcmUtdXNlZCByb3V0ZSwgcG90ZW50aWFsbHlcbiAgLy8gZnJvbSBhIHByaW9yIGVycm9yIG9yIGZyb20gYSBjYW5jZWxsZWQgcGVuZGluZyBkZWZlcnJlZFxuICBsZXQgaXNNaXNzaW5nRGF0YSA9IGN1cnJlbnRMb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9PT0gdW5kZWZpbmVkO1xuICAvLyBBbHdheXMgbG9hZCBpZiB0aGlzIGlzIGEgbmV0LW5ldyByb3V0ZSBvciB3ZSBkb24ndCB5ZXQgaGF2ZSBkYXRhXG4gIHJldHVybiBpc05ldyB8fCBpc01pc3NpbmdEYXRhO1xufVxuZnVuY3Rpb24gaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRNYXRjaCwgbWF0Y2gpIHtcbiAgbGV0IGN1cnJlbnRQYXRoID0gY3VycmVudE1hdGNoLnJvdXRlLnBhdGg7XG4gIHJldHVybiAoXG4gICAgLy8gcGFyYW0gY2hhbmdlIGZvciB0aGlzIG1hdGNoLCAvdXNlcnMvMTIzIC0+IC91c2Vycy80NTZcbiAgICBjdXJyZW50TWF0Y2gucGF0aG5hbWUgIT09IG1hdGNoLnBhdGhuYW1lIHx8XG4gICAgLy8gc3BsYXQgcGFyYW0gY2hhbmdlZCwgd2hpY2ggaXMgbm90IHByZXNlbnQgaW4gbWF0Y2gucGF0aFxuICAgIC8vIGUuZy4gL2ZpbGVzL2ltYWdlcy9hdmF0YXIuanBnIC0+IGZpbGVzL2ZpbmFuY2VzLnhsc1xuICAgIGN1cnJlbnRQYXRoICE9IG51bGwgJiYgY3VycmVudFBhdGguZW5kc1dpdGgoXCIqXCIpICYmIGN1cnJlbnRNYXRjaC5wYXJhbXNbXCIqXCJdICE9PSBtYXRjaC5wYXJhbXNbXCIqXCJdXG4gICk7XG59XG5mdW5jdGlvbiBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGxvYWRlck1hdGNoLCBhcmcpIHtcbiAgaWYgKGxvYWRlck1hdGNoLnJvdXRlLnNob3VsZFJldmFsaWRhdGUpIHtcbiAgICBsZXQgcm91dGVDaG9pY2UgPSBsb2FkZXJNYXRjaC5yb3V0ZS5zaG91bGRSZXZhbGlkYXRlKGFyZyk7XG4gICAgaWYgKHR5cGVvZiByb3V0ZUNob2ljZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHJldHVybiByb3V0ZUNob2ljZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFyZy5kZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTtcbn1cbi8qKlxuICogRXhlY3V0ZSByb3V0ZS5sYXp5KCkgbWV0aG9kcyB0byBsYXppbHkgbG9hZCByb3V0ZSBtb2R1bGVzIChsb2FkZXIsIGFjdGlvbixcbiAqIHNob3VsZFJldmFsaWRhdGUpIGFuZCB1cGRhdGUgdGhlIHJvdXRlTWFuaWZlc3QgaW4gcGxhY2Ugd2hpY2ggc2hhcmVzIG9iamVjdHNcbiAqIHdpdGggZGF0YVJvdXRlcyBzbyB0aG9zZSBnZXQgdXBkYXRlZCBhcyB3ZWxsLlxuICovXG5hc3luYyBmdW5jdGlvbiBsb2FkTGF6eVJvdXRlTW9kdWxlKHJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMsIG1hbmlmZXN0KSB7XG4gIGlmICghcm91dGUubGF6eSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgbGF6eVJvdXRlID0gYXdhaXQgcm91dGUubGF6eSgpO1xuICAvLyBJZiB0aGUgbGF6eSByb3V0ZSBmdW5jdGlvbiB3YXMgZXhlY3V0ZWQgYW5kIHJlbW92ZWQgYnkgYW5vdGhlciBwYXJhbGxlbFxuICAvLyBjYWxsIHRoZW4gd2UgY2FuIHJldHVybiAtIGZpcnN0IGxhenkoKSB0byBmaW5pc2ggd2lucyBiZWNhdXNlIHRoZSByZXR1cm5cbiAgLy8gdmFsdWUgb2YgbGF6eSBpcyBleHBlY3RlZCB0byBiZSBzdGF0aWNcbiAgaWYgKCFyb3V0ZS5sYXp5KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCByb3V0ZVRvVXBkYXRlID0gbWFuaWZlc3Rbcm91dGUuaWRdO1xuICBpbnZhcmlhbnQocm91dGVUb1VwZGF0ZSwgXCJObyByb3V0ZSBmb3VuZCBpbiBtYW5pZmVzdFwiKTtcbiAgLy8gVXBkYXRlIHRoZSByb3V0ZSBpbiBwbGFjZS4gIFRoaXMgc2hvdWxkIGJlIHNhZmUgYmVjYXVzZSB0aGVyZSdzIG5vIHdheVxuICAvLyB3ZSBjb3VsZCB5ZXQgYmUgc2l0dGluZyBvbiB0aGlzIHJvdXRlIGFzIHdlIGNhbid0IGdldCB0aGVyZSB3aXRob3V0XG4gIC8vIHJlc29sdmluZyBsYXp5KCkgZmlyc3QuXG4gIC8vXG4gIC8vIFRoaXMgaXMgZGlmZmVyZW50IHRoYW4gdGhlIEhNUiBcInVwZGF0ZVwiIHVzZS1jYXNlIHdoZXJlIHdlIG1heSBhY3RpdmVseSBiZVxuICAvLyBvbiB0aGUgcm91dGUgYmVpbmcgdXBkYXRlZC4gIFRoZSBtYWluIGNvbmNlcm4gYm9pbHMgZG93biB0byBcImRvZXMgdGhpc1xuICAvLyBtdXRhdGlvbiBhZmZlY3QgYW55IG9uZ29pbmcgbmF2aWdhdGlvbnMgb3IgYW55IGN1cnJlbnQgc3RhdGUubWF0Y2hlc1xuICAvLyB2YWx1ZXM/XCIuICBJZiBub3QsIGl0IHNob3VsZCBiZSBzYWZlIHRvIHVwZGF0ZSBpbiBwbGFjZS5cbiAgbGV0IHJvdXRlVXBkYXRlcyA9IHt9O1xuICBmb3IgKGxldCBsYXp5Um91dGVQcm9wZXJ0eSBpbiBsYXp5Um91dGUpIHtcbiAgICBsZXQgc3RhdGljUm91dGVWYWx1ZSA9IHJvdXRlVG9VcGRhdGVbbGF6eVJvdXRlUHJvcGVydHldO1xuICAgIGxldCBpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQgPSBzdGF0aWNSb3V0ZVZhbHVlICE9PSB1bmRlZmluZWQgJiZcbiAgICAvLyBUaGlzIHByb3BlcnR5IGlzbid0IHN0YXRpYyBzaW5jZSBpdCBzaG91bGQgYWx3YXlzIGJlIHVwZGF0ZWQgYmFzZWRcbiAgICAvLyBvbiB0aGUgcm91dGUgdXBkYXRlc1xuICAgIGxhenlSb3V0ZVByb3BlcnR5ICE9PSBcImhhc0Vycm9yQm91bmRhcnlcIjtcbiAgICB3YXJuaW5nKCFpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQsIFwiUm91dGUgXFxcIlwiICsgcm91dGVUb1VwZGF0ZS5pZCArIFwiXFxcIiBoYXMgYSBzdGF0aWMgcHJvcGVydHkgXFxcIlwiICsgbGF6eVJvdXRlUHJvcGVydHkgKyBcIlxcXCIgXCIgKyBcImRlZmluZWQgYnV0IGl0cyBsYXp5IGZ1bmN0aW9uIGlzIGFsc28gcmV0dXJuaW5nIGEgdmFsdWUgZm9yIHRoaXMgcHJvcGVydHkuIFwiICsgKFwiVGhlIGxhenkgcm91dGUgcHJvcGVydHkgXFxcIlwiICsgbGF6eVJvdXRlUHJvcGVydHkgKyBcIlxcXCIgd2lsbCBiZSBpZ25vcmVkLlwiKSk7XG4gICAgaWYgKCFpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQgJiYgIWltbXV0YWJsZVJvdXRlS2V5cy5oYXMobGF6eVJvdXRlUHJvcGVydHkpKSB7XG4gICAgICByb3V0ZVVwZGF0ZXNbbGF6eVJvdXRlUHJvcGVydHldID0gbGF6eVJvdXRlW2xhenlSb3V0ZVByb3BlcnR5XTtcbiAgICB9XG4gIH1cbiAgLy8gTXV0YXRlIHRoZSByb3V0ZSB3aXRoIHRoZSBwcm92aWRlZCB1cGRhdGVzLiAgRG8gdGhpcyBmaXJzdCBzbyB3ZSBwYXNzXG4gIC8vIHRoZSB1cGRhdGVkIHZlcnNpb24gdG8gbWFwUm91dGVQcm9wZXJ0aWVzXG4gIE9iamVjdC5hc3NpZ24ocm91dGVUb1VwZGF0ZSwgcm91dGVVcGRhdGVzKTtcbiAgLy8gTXV0YXRlIHRoZSBgaGFzRXJyb3JCb3VuZGFyeWAgcHJvcGVydHkgb24gdGhlIHJvdXRlIGJhc2VkIG9uIHRoZSByb3V0ZVxuICAvLyB1cGRhdGVzIGFuZCByZW1vdmUgdGhlIGBsYXp5YCBmdW5jdGlvbiBzbyB3ZSBkb24ndCByZXNvbHZlIHRoZSBsYXp5XG4gIC8vIHJvdXRlIGFnYWluLlxuICBPYmplY3QuYXNzaWduKHJvdXRlVG9VcGRhdGUsIF9leHRlbmRzKHt9LCBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGVUb1VwZGF0ZSksIHtcbiAgICBsYXp5OiB1bmRlZmluZWRcbiAgfSkpO1xufVxuYXN5bmMgZnVuY3Rpb24gY2FsbExvYWRlck9yQWN0aW9uKHR5cGUsIHJlcXVlc3QsIG1hdGNoLCBtYXRjaGVzLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBiYXNlbmFtZSwgdjdfcmVsYXRpdmVTcGxhdFBhdGgsIG9wdHMpIHtcbiAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuICBsZXQgcmVzdWx0VHlwZTtcbiAgbGV0IHJlc3VsdDtcbiAgbGV0IG9uUmVqZWN0O1xuICBsZXQgcnVuSGFuZGxlciA9IGhhbmRsZXIgPT4ge1xuICAgIC8vIFNldHVwIGEgcHJvbWlzZSB3ZSBjYW4gcmFjZSBhZ2FpbnN0IHNvIHRoYXQgYWJvcnQgc2lnbmFscyBzaG9ydCBjaXJjdWl0XG4gICAgbGV0IHJlamVjdDtcbiAgICBsZXQgYWJvcnRQcm9taXNlID0gbmV3IFByb21pc2UoKF8sIHIpID0+IHJlamVjdCA9IHIpO1xuICAgIG9uUmVqZWN0ID0gKCkgPT4gcmVqZWN0KCk7XG4gICAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uUmVqZWN0KTtcbiAgICByZXR1cm4gUHJvbWlzZS5yYWNlKFtoYW5kbGVyKHtcbiAgICAgIHJlcXVlc3QsXG4gICAgICBwYXJhbXM6IG1hdGNoLnBhcmFtcyxcbiAgICAgIGNvbnRleHQ6IG9wdHMucmVxdWVzdENvbnRleHRcbiAgICB9KSwgYWJvcnRQcm9taXNlXSk7XG4gIH07XG4gIHRyeSB7XG4gICAgbGV0IGhhbmRsZXIgPSBtYXRjaC5yb3V0ZVt0eXBlXTtcbiAgICBpZiAobWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgLy8gUnVuIHN0YXRpY2FsbHkgZGVmaW5lZCBoYW5kbGVyIGluIHBhcmFsbGVsIHdpdGggbGF6eSgpXG4gICAgICAgIGxldCBoYW5kbGVyRXJyb3I7XG4gICAgICAgIGxldCB2YWx1ZXMgPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIC8vIElmIHRoZSBoYW5kbGVyIHRocm93cywgZG9uJ3QgbGV0IGl0IGltbWVkaWF0ZWx5IGJ1YmJsZSBvdXQsXG4gICAgICAgIC8vIHNpbmNlIHdlIG5lZWQgdG8gbGV0IHRoZSBsYXp5KCkgZXhlY3V0aW9uIGZpbmlzaCBzbyB3ZSBrbm93IGlmIHRoaXNcbiAgICAgICAgLy8gcm91dGUgaGFzIGEgYm91bmRhcnkgdGhhdCBjYW4gaGFuZGxlIHRoZSBlcnJvclxuICAgICAgICBydW5IYW5kbGVyKGhhbmRsZXIpLmNhdGNoKGUgPT4ge1xuICAgICAgICAgIGhhbmRsZXJFcnJvciA9IGU7XG4gICAgICAgIH0pLCBsb2FkTGF6eVJvdXRlTW9kdWxlKG1hdGNoLnJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMsIG1hbmlmZXN0KV0pO1xuICAgICAgICBpZiAoaGFuZGxlckVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgaGFuZGxlckVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IHZhbHVlc1swXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIExvYWQgbGF6eSByb3V0ZSBtb2R1bGUsIHRoZW4gcnVuIGFueSByZXR1cm5lZCBoYW5kbGVyXG4gICAgICAgIGF3YWl0IGxvYWRMYXp5Um91dGVNb2R1bGUobWF0Y2gucm91dGUsIG1hcFJvdXRlUHJvcGVydGllcywgbWFuaWZlc3QpO1xuICAgICAgICBoYW5kbGVyID0gbWF0Y2gucm91dGVbdHlwZV07XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgLy8gSGFuZGxlciBzdGlsbCBydW4gZXZlbiBpZiB3ZSBnb3QgaW50ZXJydXB0ZWQgdG8gbWFpbnRhaW4gY29uc2lzdGVuY3lcbiAgICAgICAgICAvLyB3aXRoIHVuLWFib3J0YWJsZSBiZWhhdmlvciBvZiBoYW5kbGVyIGV4ZWN1dGlvbiBvbiBub24tbGF6eSBvclxuICAgICAgICAgIC8vIHByZXZpb3VzbHktbGF6eS1sb2FkZWQgcm91dGVzXG4gICAgICAgICAgcmVzdWx0ID0gYXdhaXQgcnVuSGFuZGxlcihoYW5kbGVyKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBcImFjdGlvblwiKSB7XG4gICAgICAgICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgICAgICAgIGxldCBwYXRobmFtZSA9IHVybC5wYXRobmFtZSArIHVybC5zZWFyY2g7XG4gICAgICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgIHJvdXRlSWQ6IG1hdGNoLnJvdXRlLmlkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbGF6eSgpIHJvdXRlIGhhcyBubyBsb2FkZXIgdG8gcnVuLiAgU2hvcnQgY2lyY3VpdCBoZXJlIHNvIHdlIGRvbid0XG4gICAgICAgICAgLy8gaGl0IHRoZSBpbnZhcmlhbnQgYmVsb3cgdGhhdCBlcnJvcnMgb24gcmV0dXJuaW5nIHVuZGVmaW5lZC5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgICAgICAgZGF0YTogdW5kZWZpbmVkXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWhhbmRsZXIpIHtcbiAgICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICAgIGxldCBwYXRobmFtZSA9IHVybC5wYXRobmFtZSArIHVybC5zZWFyY2g7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IHJ1bkhhbmRsZXIoaGFuZGxlcik7XG4gICAgfVxuICAgIGludmFyaWFudChyZXN1bHQgIT09IHVuZGVmaW5lZCwgXCJZb3UgZGVmaW5lZCBcIiArICh0eXBlID09PSBcImFjdGlvblwiID8gXCJhbiBhY3Rpb25cIiA6IFwiYSBsb2FkZXJcIikgKyBcIiBmb3Igcm91dGUgXCIgKyAoXCJcXFwiXCIgKyBtYXRjaC5yb3V0ZS5pZCArIFwiXFxcIiBidXQgZGlkbid0IHJldHVybiBhbnl0aGluZyBmcm9tIHlvdXIgYFwiICsgdHlwZSArIFwiYCBcIikgKyBcImZ1bmN0aW9uLiBQbGVhc2UgcmV0dXJuIGEgdmFsdWUgb3IgYG51bGxgLlwiKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJlc3VsdFR5cGUgPSBSZXN1bHRUeXBlLmVycm9yO1xuICAgIHJlc3VsdCA9IGU7XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKG9uUmVqZWN0KSB7XG4gICAgICByZXF1ZXN0LnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25SZWplY3QpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgbGV0IHN0YXR1cyA9IHJlc3VsdC5zdGF0dXM7XG4gICAgLy8gUHJvY2VzcyByZWRpcmVjdHNcbiAgICBpZiAocmVkaXJlY3RTdGF0dXNDb2Rlcy5oYXMoc3RhdHVzKSkge1xuICAgICAgbGV0IGxvY2F0aW9uID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIik7XG4gICAgICBpbnZhcmlhbnQobG9jYXRpb24sIFwiUmVkaXJlY3RzIHJldHVybmVkL3Rocm93biBmcm9tIGxvYWRlcnMvYWN0aW9ucyBtdXN0IGhhdmUgYSBMb2NhdGlvbiBoZWFkZXJcIik7XG4gICAgICAvLyBTdXBwb3J0IHJlbGF0aXZlIHJvdXRpbmcgaW4gaW50ZXJuYWwgcmVkaXJlY3RzXG4gICAgICBpZiAoIUFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KGxvY2F0aW9uKSkge1xuICAgICAgICBsb2NhdGlvbiA9IG5vcm1hbGl6ZVRvKG5ldyBVUkwocmVxdWVzdC51cmwpLCBtYXRjaGVzLnNsaWNlKDAsIG1hdGNoZXMuaW5kZXhPZihtYXRjaCkgKyAxKSwgYmFzZW5hbWUsIHRydWUsIGxvY2F0aW9uLCB2N19yZWxhdGl2ZVNwbGF0UGF0aCk7XG4gICAgICB9IGVsc2UgaWYgKCFvcHRzLmlzU3RhdGljUmVxdWVzdCkge1xuICAgICAgICAvLyBTdHJpcCBvZmYgdGhlIHByb3RvY29sK29yaWdpbiBmb3Igc2FtZS1vcmlnaW4gKyBzYW1lLWJhc2VuYW1lIGFic29sdXRlXG4gICAgICAgIC8vIHJlZGlyZWN0cy4gSWYgdGhpcyBpcyBhIHN0YXRpYyByZXF1ZXN0LCB3ZSBjYW4gbGV0IGl0IGdvIGJhY2sgdG8gdGhlXG4gICAgICAgIC8vIGJyb3dzZXIgYXMtaXNcbiAgICAgICAgbGV0IGN1cnJlbnRVcmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICAgICAgbGV0IHVybCA9IGxvY2F0aW9uLnN0YXJ0c1dpdGgoXCIvL1wiKSA/IG5ldyBVUkwoY3VycmVudFVybC5wcm90b2NvbCArIGxvY2F0aW9uKSA6IG5ldyBVUkwobG9jYXRpb24pO1xuICAgICAgICBsZXQgaXNTYW1lQmFzZW5hbWUgPSBzdHJpcEJhc2VuYW1lKHVybC5wYXRobmFtZSwgYmFzZW5hbWUpICE9IG51bGw7XG4gICAgICAgIGlmICh1cmwub3JpZ2luID09PSBjdXJyZW50VXJsLm9yaWdpbiAmJiBpc1NhbWVCYXNlbmFtZSkge1xuICAgICAgICAgIGxvY2F0aW9uID0gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaCArIHVybC5oYXNoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBEb24ndCBwcm9jZXNzIHJlZGlyZWN0cyBpbiB0aGUgcm91dGVyIGR1cmluZyBzdGF0aWMgcmVxdWVzdHMgcmVxdWVzdHMuXG4gICAgICAvLyBJbnN0ZWFkLCB0aHJvdyB0aGUgUmVzcG9uc2UgYW5kIGxldCB0aGUgc2VydmVyIGhhbmRsZSBpdCB3aXRoIGFuIEhUVFBcbiAgICAgIC8vIHJlZGlyZWN0LiAgV2UgYWxzbyB1cGRhdGUgdGhlIExvY2F0aW9uIGhlYWRlciBpbiBwbGFjZSBpbiB0aGlzIGZsb3cgc29cbiAgICAgIC8vIGJhc2VuYW1lIGFuZCByZWxhdGl2ZSByb3V0aW5nIGlzIHRha2VuIGludG8gYWNjb3VudFxuICAgICAgaWYgKG9wdHMuaXNTdGF0aWNSZXF1ZXN0KSB7XG4gICAgICAgIHJlc3VsdC5oZWFkZXJzLnNldChcIkxvY2F0aW9uXCIsIGxvY2F0aW9uKTtcbiAgICAgICAgdGhyb3cgcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5yZWRpcmVjdCxcbiAgICAgICAgc3RhdHVzLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgcmV2YWxpZGF0ZTogcmVzdWx0LmhlYWRlcnMuZ2V0KFwiWC1SZW1peC1SZXZhbGlkYXRlXCIpICE9PSBudWxsLFxuICAgICAgICByZWxvYWREb2N1bWVudDogcmVzdWx0LmhlYWRlcnMuZ2V0KFwiWC1SZW1peC1SZWxvYWQtRG9jdW1lbnRcIikgIT09IG51bGxcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIEZvciBTU1Igc2luZ2xlLXJvdXRlIHJlcXVlc3RzLCB3ZSB3YW50IHRvIGhhbmQgUmVzcG9uc2VzIGJhY2sgZGlyZWN0bHlcbiAgICAvLyB3aXRob3V0IHVud3JhcHBpbmcuICBXZSBkbyB0aGlzIHdpdGggdGhlIFF1ZXJ5Um91dGVSZXNwb25zZSB3cmFwcGVyXG4gICAgLy8gaW50ZXJmYWNlIHNvIHdlIGNhbiBrbm93IHdoZXRoZXIgaXQgd2FzIHJldHVybmVkIG9yIHRocm93blxuICAgIGlmIChvcHRzLmlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICBsZXQgcXVlcnlSb3V0ZVJlc3BvbnNlID0ge1xuICAgICAgICB0eXBlOiByZXN1bHRUeXBlID09PSBSZXN1bHRUeXBlLmVycm9yID8gUmVzdWx0VHlwZS5lcnJvciA6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgICAgcmVzcG9uc2U6IHJlc3VsdFxuICAgICAgfTtcbiAgICAgIHRocm93IHF1ZXJ5Um91dGVSZXNwb25zZTtcbiAgICB9XG4gICAgbGV0IGRhdGE7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBjb250ZW50VHlwZSA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkNvbnRlbnQtVHlwZVwiKTtcbiAgICAgIC8vIENoZWNrIGJldHdlZW4gd29yZCBib3VuZGFyaWVzIGluc3RlYWQgb2Ygc3RhcnRzV2l0aCgpIGR1ZSB0byB0aGUgbGFzdFxuICAgICAgLy8gcGFyYWdyYXBoIG9mIGh0dHBzOi8vaHR0cHdnLm9yZy9zcGVjcy9yZmM5MTEwLmh0bWwjZmllbGQuY29udGVudC10eXBlXG4gICAgICBpZiAoY29udGVudFR5cGUgJiYgL1xcYmFwcGxpY2F0aW9uXFwvanNvblxcYi8udGVzdChjb250ZW50VHlwZSkpIHtcbiAgICAgICAgZGF0YSA9IGF3YWl0IHJlc3VsdC5qc29uKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhID0gYXdhaXQgcmVzdWx0LnRleHQoKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvcjogZVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdFR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHJlc3VsdFR5cGUsXG4gICAgICAgIGVycm9yOiBuZXcgRXJyb3JSZXNwb25zZUltcGwoc3RhdHVzLCByZXN1bHQuc3RhdHVzVGV4dCwgZGF0YSksXG4gICAgICAgIGhlYWRlcnM6IHJlc3VsdC5oZWFkZXJzXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgZGF0YSxcbiAgICAgIHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXMsXG4gICAgICBoZWFkZXJzOiByZXN1bHQuaGVhZGVyc1xuICAgIH07XG4gIH1cbiAgaWYgKHJlc3VsdFR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogcmVzdWx0VHlwZSxcbiAgICAgIGVycm9yOiByZXN1bHRcbiAgICB9O1xuICB9XG4gIGlmIChpc0RlZmVycmVkRGF0YShyZXN1bHQpKSB7XG4gICAgdmFyIF9yZXN1bHQkaW5pdCwgX3Jlc3VsdCRpbml0MjtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogUmVzdWx0VHlwZS5kZWZlcnJlZCxcbiAgICAgIGRlZmVycmVkRGF0YTogcmVzdWx0LFxuICAgICAgc3RhdHVzQ29kZTogKF9yZXN1bHQkaW5pdCA9IHJlc3VsdC5pbml0KSA9PSBudWxsID8gdm9pZCAwIDogX3Jlc3VsdCRpbml0LnN0YXR1cyxcbiAgICAgIGhlYWRlcnM6ICgoX3Jlc3VsdCRpbml0MiA9IHJlc3VsdC5pbml0KSA9PSBudWxsID8gdm9pZCAwIDogX3Jlc3VsdCRpbml0Mi5oZWFkZXJzKSAmJiBuZXcgSGVhZGVycyhyZXN1bHQuaW5pdC5oZWFkZXJzKVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgZGF0YTogcmVzdWx0XG4gIH07XG59XG4vLyBVdGlsaXR5IG1ldGhvZCBmb3IgY3JlYXRpbmcgdGhlIFJlcXVlc3QgaW5zdGFuY2VzIGZvciBsb2FkZXJzL2FjdGlvbnMgZHVyaW5nXG4vLyBjbGllbnQtc2lkZSBuYXZpZ2F0aW9ucyBhbmQgZmV0Y2hlcy4gIER1cmluZyBTU1Igd2Ugd2lsbCBhbHdheXMgaGF2ZSBhXG4vLyBSZXF1ZXN0IGluc3RhbmNlIGZyb20gdGhlIHN0YXRpYyBoYW5kbGVyIChxdWVyeS9xdWVyeVJvdXRlKVxuZnVuY3Rpb24gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaGlzdG9yeSwgbG9jYXRpb24sIHNpZ25hbCwgc3VibWlzc2lvbikge1xuICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVVUkwoc3RyaXBIYXNoRnJvbVBhdGgobG9jYXRpb24pKS50b1N0cmluZygpO1xuICBsZXQgaW5pdCA9IHtcbiAgICBzaWduYWxcbiAgfTtcbiAgaWYgKHN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgbGV0IHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtRW5jVHlwZVxuICAgIH0gPSBzdWJtaXNzaW9uO1xuICAgIC8vIERpZG4ndCB0aGluayB3ZSBuZWVkZWQgdGhpcyBidXQgaXQgdHVybnMgb3V0IHVubGlrZSBvdGhlciBtZXRob2RzLCBwYXRjaFxuICAgIC8vIHdvbid0IGJlIHByb3Blcmx5IG5vcm1hbGl6ZWQgdG8gdXBwZXJjYXNlIGFuZCByZXN1bHRzIGluIGEgNDA1IGVycm9yLlxuICAgIC8vIFNlZTogaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtbWV0aG9kXG4gICAgaW5pdC5tZXRob2QgPSBmb3JtTWV0aG9kLnRvVXBwZXJDYXNlKCk7XG4gICAgaWYgKGZvcm1FbmNUeXBlID09PSBcImFwcGxpY2F0aW9uL2pzb25cIikge1xuICAgICAgaW5pdC5oZWFkZXJzID0gbmV3IEhlYWRlcnMoe1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBmb3JtRW5jVHlwZVxuICAgICAgfSk7XG4gICAgICBpbml0LmJvZHkgPSBKU09OLnN0cmluZ2lmeShzdWJtaXNzaW9uLmpzb24pO1xuICAgIH0gZWxzZSBpZiAoZm9ybUVuY1R5cGUgPT09IFwidGV4dC9wbGFpblwiKSB7XG4gICAgICAvLyBDb250ZW50LVR5cGUgaXMgaW5mZXJyZWQgKGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20tcmVxdWVzdClcbiAgICAgIGluaXQuYm9keSA9IHN1Ym1pc3Npb24udGV4dDtcbiAgICB9IGVsc2UgaWYgKGZvcm1FbmNUeXBlID09PSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICYmIHN1Ym1pc3Npb24uZm9ybURhdGEpIHtcbiAgICAgIC8vIENvbnRlbnQtVHlwZSBpcyBpbmZlcnJlZCAoaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yZXF1ZXN0KVxuICAgICAgaW5pdC5ib2R5ID0gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMoc3VibWlzc2lvbi5mb3JtRGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENvbnRlbnQtVHlwZSBpcyBpbmZlcnJlZCAoaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yZXF1ZXN0KVxuICAgICAgaW5pdC5ib2R5ID0gc3VibWlzc2lvbi5mb3JtRGF0YTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KHVybCwgaW5pdCk7XG59XG5mdW5jdGlvbiBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhmb3JtRGF0YSkge1xuICBsZXQgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgZm9ybURhdGEuZW50cmllcygpKSB7XG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjY29udmVydGluZy1hbi1lbnRyeS1saXN0LXRvLWEtbGlzdC1vZi1uYW1lLXZhbHVlLXBhaXJzXG4gICAgc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlIDogdmFsdWUubmFtZSk7XG4gIH1cbiAgcmV0dXJuIHNlYXJjaFBhcmFtcztcbn1cbmZ1bmN0aW9uIGNvbnZlcnRTZWFyY2hQYXJhbXNUb0Zvcm1EYXRhKHNlYXJjaFBhcmFtcykge1xuICBsZXQgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIHNlYXJjaFBhcmFtcy5lbnRyaWVzKCkpIHtcbiAgICBmb3JtRGF0YS5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuZnVuY3Rpb24gcHJvY2Vzc1JvdXRlTG9hZGVyRGF0YShtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBwZW5kaW5nRXJyb3IsIGFjdGl2ZURlZmVycmVkcykge1xuICAvLyBGaWxsIGluIGxvYWRlckRhdGEvZXJyb3JzIGZyb20gb3VyIGxvYWRlcnNcbiAgbGV0IGxvYWRlckRhdGEgPSB7fTtcbiAgbGV0IGVycm9ycyA9IG51bGw7XG4gIGxldCBzdGF0dXNDb2RlO1xuICBsZXQgZm91bmRFcnJvciA9IGZhbHNlO1xuICBsZXQgbG9hZGVySGVhZGVycyA9IHt9O1xuICAvLyBQcm9jZXNzIGxvYWRlciByZXN1bHRzIGludG8gc3RhdGUubG9hZGVyRGF0YS9zdGF0ZS5lcnJvcnNcbiAgcmVzdWx0cy5mb3JFYWNoKChyZXN1bHQsIGluZGV4KSA9PiB7XG4gICAgbGV0IGlkID0gbWF0Y2hlc1RvTG9hZFtpbmRleF0ucm91dGUuaWQ7XG4gICAgaW52YXJpYW50KCFpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCksIFwiQ2Fubm90IGhhbmRsZSByZWRpcmVjdCByZXN1bHRzIGluIHByb2Nlc3NMb2FkZXJEYXRhXCIpO1xuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIExvb2sgdXB3YXJkcyBmcm9tIHRoZSBtYXRjaGVkIHJvdXRlIGZvciB0aGUgY2xvc2VzdCBhbmNlc3RvclxuICAgICAgLy8gZXJyb3IgYm91bmRhcnksIGRlZmF1bHRpbmcgdG8gdGhlIHJvb3QgbWF0Y2hcbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCBpZCk7XG4gICAgICBsZXQgZXJyb3IgPSByZXN1bHQuZXJyb3I7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZyBhY3Rpb24gZXJyb3IsIHdlIHJlcG9ydCBpdCBhdCB0aGUgaGlnaGVzdC1yb3V0ZVxuICAgICAgLy8gdGhhdCB0aHJvd3MgYSBsb2FkZXIgZXJyb3IsIGFuZCB0aGVuIGNsZWFyIGl0IG91dCB0byBpbmRpY2F0ZSB0aGF0XG4gICAgICAvLyBpdCB3YXMgY29uc3VtZWRcbiAgICAgIGlmIChwZW5kaW5nRXJyb3IpIHtcbiAgICAgICAgZXJyb3IgPSBPYmplY3QudmFsdWVzKHBlbmRpbmdFcnJvcilbMF07XG4gICAgICAgIHBlbmRpbmdFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGVycm9ycyA9IGVycm9ycyB8fCB7fTtcbiAgICAgIC8vIFByZWZlciBoaWdoZXIgZXJyb3IgdmFsdWVzIGlmIGxvd2VyIGVycm9ycyBidWJibGUgdG8gdGhlIHNhbWUgYm91bmRhcnlcbiAgICAgIGlmIChlcnJvcnNbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF0gPT0gbnVsbCkge1xuICAgICAgICBlcnJvcnNbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF0gPSBlcnJvcjtcbiAgICAgIH1cbiAgICAgIC8vIENsZWFyIG91ciBhbnkgcHJpb3IgbG9hZGVyRGF0YSBmb3IgdGhlIHRocm93aW5nIHJvdXRlXG4gICAgICBsb2FkZXJEYXRhW2lkXSA9IHVuZGVmaW5lZDtcbiAgICAgIC8vIE9uY2Ugd2UgZmluZCBvdXIgZmlyc3QgKGhpZ2hlc3QpIGVycm9yLCB3ZSBzZXQgdGhlIHN0YXR1cyBjb2RlIGFuZFxuICAgICAgLy8gcHJldmVudCBkZWVwZXIgc3RhdHVzIGNvZGVzIGZyb20gb3ZlcnJpZGluZ1xuICAgICAgaWYgKCFmb3VuZEVycm9yKSB7XG4gICAgICAgIGZvdW5kRXJyb3IgPSB0cnVlO1xuICAgICAgICBzdGF0dXNDb2RlID0gaXNSb3V0ZUVycm9yUmVzcG9uc2UocmVzdWx0LmVycm9yKSA/IHJlc3VsdC5lcnJvci5zdGF0dXMgOiA1MDA7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0LmhlYWRlcnMpIHtcbiAgICAgICAgbG9hZGVySGVhZGVyc1tpZF0gPSByZXN1bHQuaGVhZGVycztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICBhY3RpdmVEZWZlcnJlZHMuc2V0KGlkLCByZXN1bHQuZGVmZXJyZWREYXRhKTtcbiAgICAgICAgbG9hZGVyRGF0YVtpZF0gPSByZXN1bHQuZGVmZXJyZWREYXRhLmRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2FkZXJEYXRhW2lkXSA9IHJlc3VsdC5kYXRhO1xuICAgICAgfVxuICAgICAgLy8gRXJyb3Igc3RhdHVzIGNvZGVzIGFsd2F5cyBvdmVycmlkZSBzdWNjZXNzIHN0YXR1cyBjb2RlcywgYnV0IGlmIGFsbFxuICAgICAgLy8gbG9hZGVycyBhcmUgc3VjY2Vzc2Z1bCB3ZSB0YWtlIHRoZSBkZWVwZXN0IHN0YXR1cyBjb2RlLlxuICAgICAgaWYgKHJlc3VsdC5zdGF0dXNDb2RlICE9IG51bGwgJiYgcmVzdWx0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiAhZm91bmRFcnJvcikge1xuICAgICAgICBzdGF0dXNDb2RlID0gcmVzdWx0LnN0YXR1c0NvZGU7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0LmhlYWRlcnMpIHtcbiAgICAgICAgbG9hZGVySGVhZGVyc1tpZF0gPSByZXN1bHQuaGVhZGVycztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICAvLyBJZiB3ZSBkaWRuJ3QgY29uc3VtZSB0aGUgcGVuZGluZyBhY3Rpb24gZXJyb3IgKGkuZS4sIGFsbCBsb2FkZXJzXG4gIC8vIHJlc29sdmVkKSwgdGhlbiBjb25zdW1lIGl0IGhlcmUuICBBbHNvIGNsZWFyIG91dCBhbnkgbG9hZGVyRGF0YSBmb3IgdGhlXG4gIC8vIHRocm93aW5nIHJvdXRlXG4gIGlmIChwZW5kaW5nRXJyb3IpIHtcbiAgICBlcnJvcnMgPSBwZW5kaW5nRXJyb3I7XG4gICAgbG9hZGVyRGF0YVtPYmplY3Qua2V5cyhwZW5kaW5nRXJyb3IpWzBdXSA9IHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4ge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzLFxuICAgIHN0YXR1c0NvZGU6IHN0YXR1c0NvZGUgfHwgMjAwLFxuICAgIGxvYWRlckhlYWRlcnNcbiAgfTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBwZW5kaW5nRXJyb3IsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKSB7XG4gIGxldCB7XG4gICAgbG9hZGVyRGF0YSxcbiAgICBlcnJvcnNcbiAgfSA9IHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEobWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0Vycm9yLCBhY3RpdmVEZWZlcnJlZHMpO1xuICAvLyBQcm9jZXNzIHJlc3VsdHMgZnJvbSBvdXIgcmV2YWxpZGF0aW5nIGZldGNoZXJzXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBsZXQge1xuICAgICAga2V5LFxuICAgICAgbWF0Y2gsXG4gICAgICBjb250cm9sbGVyXG4gICAgfSA9IHJldmFsaWRhdGluZ0ZldGNoZXJzW2luZGV4XTtcbiAgICBpbnZhcmlhbnQoZmV0Y2hlclJlc3VsdHMgIT09IHVuZGVmaW5lZCAmJiBmZXRjaGVyUmVzdWx0c1tpbmRleF0gIT09IHVuZGVmaW5lZCwgXCJEaWQgbm90IGZpbmQgY29ycmVzcG9uZGluZyBmZXRjaGVyIHJlc3VsdFwiKTtcbiAgICBsZXQgcmVzdWx0ID0gZmV0Y2hlclJlc3VsdHNbaW5kZXhdO1xuICAgIC8vIFByb2Nlc3MgZmV0Y2hlciBub24tcmVkaXJlY3QgZXJyb3JzXG4gICAgaWYgKGNvbnRyb2xsZXIgJiYgY29udHJvbGxlci5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgLy8gTm90aGluZyB0byBkbyBmb3IgYWJvcnRlZCBmZXRjaGVyc1xuICAgICAgY29udGludWU7XG4gICAgfSBlbHNlIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShzdGF0ZS5tYXRjaGVzLCBtYXRjaCA9PSBudWxsID8gdm9pZCAwIDogbWF0Y2gucm91dGUuaWQpO1xuICAgICAgaWYgKCEoZXJyb3JzICYmIGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSkpIHtcbiAgICAgICAgZXJyb3JzID0gX2V4dGVuZHMoe30sIGVycm9ycywge1xuICAgICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gICAgfSBlbHNlIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFNob3VsZCBuZXZlciBnZXQgaGVyZSwgcmVkaXJlY3RzIHNob3VsZCBnZXQgcHJvY2Vzc2VkIGFib3ZlLCBidXQgd2VcbiAgICAgIC8vIGtlZXAgdGhpcyB0byB0eXBlIG5hcnJvdyB0byBhIHN1Y2Nlc3MgcmVzdWx0IGluIHRoZSBlbHNlXG4gICAgICBpbnZhcmlhbnQoZmFsc2UsIFwiVW5oYW5kbGVkIGZldGNoZXIgcmV2YWxpZGF0aW9uIHJlZGlyZWN0XCIpO1xuICAgIH0gZWxzZSBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTaG91bGQgbmV2ZXIgZ2V0IGhlcmUsIGRlZmVycmVkIGRhdGEgc2hvdWxkIGJlIGF3YWl0ZWQgZm9yIGZldGNoZXJzXG4gICAgICAvLyBpbiByZXNvbHZlRGVmZXJyZWRSZXN1bHRzXG4gICAgICBpbnZhcmlhbnQoZmFsc2UsIFwiVW5oYW5kbGVkIGZldGNoZXIgZGVmZXJyZWQgZGF0YVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0gZ2V0RG9uZUZldGNoZXIocmVzdWx0LmRhdGEpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzXG4gIH07XG59XG5mdW5jdGlvbiBtZXJnZUxvYWRlckRhdGEobG9hZGVyRGF0YSwgbmV3TG9hZGVyRGF0YSwgbWF0Y2hlcywgZXJyb3JzKSB7XG4gIGxldCBtZXJnZWRMb2FkZXJEYXRhID0gX2V4dGVuZHMoe30sIG5ld0xvYWRlckRhdGEpO1xuICBmb3IgKGxldCBtYXRjaCBvZiBtYXRjaGVzKSB7XG4gICAgbGV0IGlkID0gbWF0Y2gucm91dGUuaWQ7XG4gICAgaWYgKG5ld0xvYWRlckRhdGEuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICBpZiAobmV3TG9hZGVyRGF0YVtpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtZXJnZWRMb2FkZXJEYXRhW2lkXSA9IG5ld0xvYWRlckRhdGFbaWRdO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobG9hZGVyRGF0YVtpZF0gIT09IHVuZGVmaW5lZCAmJiBtYXRjaC5yb3V0ZS5sb2FkZXIpIHtcbiAgICAgIC8vIFByZXNlcnZlIGV4aXN0aW5nIGtleXMgbm90IGluY2x1ZGVkIGluIG5ld0xvYWRlckRhdGEgYW5kIHdoZXJlIGEgbG9hZGVyXG4gICAgICAvLyB3YXNuJ3QgcmVtb3ZlZCBieSBITVJcbiAgICAgIG1lcmdlZExvYWRlckRhdGFbaWRdID0gbG9hZGVyRGF0YVtpZF07XG4gICAgfVxuICAgIGlmIChlcnJvcnMgJiYgZXJyb3JzLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgLy8gRG9uJ3Qga2VlcCBhbnkgbG9hZGVyIGRhdGEgYmVsb3cgdGhlIGJvdW5kYXJ5XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1lcmdlZExvYWRlckRhdGE7XG59XG4vLyBGaW5kIHRoZSBuZWFyZXN0IGVycm9yIGJvdW5kYXJ5LCBsb29raW5nIHVwd2FyZHMgZnJvbSB0aGUgbGVhZiByb3V0ZSAob3IgdGhlXG4vLyByb3V0ZSBzcGVjaWZpZWQgYnkgcm91dGVJZCkgZm9yIHRoZSBjbG9zZXN0IGFuY2VzdG9yIGVycm9yIGJvdW5kYXJ5LFxuLy8gZGVmYXVsdGluZyB0byB0aGUgcm9vdCBtYXRjaFxuZnVuY3Rpb24gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCByb3V0ZUlkKSB7XG4gIGxldCBlbGlnaWJsZU1hdGNoZXMgPSByb3V0ZUlkID8gbWF0Y2hlcy5zbGljZSgwLCBtYXRjaGVzLmZpbmRJbmRleChtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpICsgMSkgOiBbLi4ubWF0Y2hlc107XG4gIHJldHVybiBlbGlnaWJsZU1hdGNoZXMucmV2ZXJzZSgpLmZpbmQobSA9PiBtLnJvdXRlLmhhc0Vycm9yQm91bmRhcnkgPT09IHRydWUpIHx8IG1hdGNoZXNbMF07XG59XG5mdW5jdGlvbiBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlcykge1xuICAvLyBQcmVmZXIgYSByb290IGxheW91dCByb3V0ZSBpZiBwcmVzZW50LCBvdGhlcndpc2Ugc2hpbSBpbiBhIHJvdXRlIG9iamVjdFxuICBsZXQgcm91dGUgPSByb3V0ZXMubGVuZ3RoID09PSAxID8gcm91dGVzWzBdIDogcm91dGVzLmZpbmQociA9PiByLmluZGV4IHx8ICFyLnBhdGggfHwgci5wYXRoID09PSBcIi9cIikgfHwge1xuICAgIGlkOiBcIl9fc2hpbS1lcnJvci1yb3V0ZV9fXCJcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBtYXRjaGVzOiBbe1xuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIHBhdGhuYW1lOiBcIlwiLFxuICAgICAgcGF0aG5hbWVCYXNlOiBcIlwiLFxuICAgICAgcm91dGVcbiAgICB9XSxcbiAgICByb3V0ZVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcihzdGF0dXMsIF90ZW1wNSkge1xuICBsZXQge1xuICAgIHBhdGhuYW1lLFxuICAgIHJvdXRlSWQsXG4gICAgbWV0aG9kLFxuICAgIHR5cGVcbiAgfSA9IF90ZW1wNSA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDU7XG4gIGxldCBzdGF0dXNUZXh0ID0gXCJVbmtub3duIFNlcnZlciBFcnJvclwiO1xuICBsZXQgZXJyb3JNZXNzYWdlID0gXCJVbmtub3duIEByZW1peC1ydW4vcm91dGVyIGVycm9yXCI7XG4gIGlmIChzdGF0dXMgPT09IDQwMCkge1xuICAgIHN0YXR1c1RleHQgPSBcIkJhZCBSZXF1ZXN0XCI7XG4gICAgaWYgKG1ldGhvZCAmJiBwYXRobmFtZSAmJiByb3V0ZUlkKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIllvdSBtYWRlIGEgXCIgKyBtZXRob2QgKyBcIiByZXF1ZXN0IHRvIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiIGJ1dCBcIiArIChcImRpZCBub3QgcHJvdmlkZSBhIGBsb2FkZXJgIGZvciByb3V0ZSBcXFwiXCIgKyByb3V0ZUlkICsgXCJcXFwiLCBcIikgKyBcInNvIHRoZXJlIGlzIG5vIHdheSB0byBoYW5kbGUgdGhlIHJlcXVlc3QuXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBcImRlZmVyLWFjdGlvblwiKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcImRlZmVyKCkgaXMgbm90IHN1cHBvcnRlZCBpbiBhY3Rpb25zXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBcImludmFsaWQtYm9keVwiKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIlVuYWJsZSB0byBlbmNvZGUgc3VibWlzc2lvbiBib2R5XCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDAzKSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiRm9yYmlkZGVuXCI7XG4gICAgZXJyb3JNZXNzYWdlID0gXCJSb3V0ZSBcXFwiXCIgKyByb3V0ZUlkICsgXCJcXFwiIGRvZXMgbm90IG1hdGNoIFVSTCBcXFwiXCIgKyBwYXRobmFtZSArIFwiXFxcIlwiO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDA0KSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiTm90IEZvdW5kXCI7XG4gICAgZXJyb3JNZXNzYWdlID0gXCJObyByb3V0ZSBtYXRjaGVzIFVSTCBcXFwiXCIgKyBwYXRobmFtZSArIFwiXFxcIlwiO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDA1KSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiTWV0aG9kIE5vdCBBbGxvd2VkXCI7XG4gICAgaWYgKG1ldGhvZCAmJiBwYXRobmFtZSAmJiByb3V0ZUlkKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIllvdSBtYWRlIGEgXCIgKyBtZXRob2QudG9VcHBlckNhc2UoKSArIFwiIHJlcXVlc3QgdG8gXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCIgYnV0IFwiICsgKFwiZGlkIG5vdCBwcm92aWRlIGFuIGBhY3Rpb25gIGZvciByb3V0ZSBcXFwiXCIgKyByb3V0ZUlkICsgXCJcXFwiLCBcIikgKyBcInNvIHRoZXJlIGlzIG5vIHdheSB0byBoYW5kbGUgdGhlIHJlcXVlc3QuXCI7XG4gICAgfSBlbHNlIGlmIChtZXRob2QpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCByZXF1ZXN0IG1ldGhvZCBcXFwiXCIgKyBtZXRob2QudG9VcHBlckNhc2UoKSArIFwiXFxcIlwiO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IEVycm9yUmVzcG9uc2VJbXBsKHN0YXR1cyB8fCA1MDAsIHN0YXR1c1RleHQsIG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpLCB0cnVlKTtcbn1cbi8vIEZpbmQgYW55IHJldHVybmVkIHJlZGlyZWN0IGVycm9ycywgc3RhcnRpbmcgZnJvbSB0aGUgbG93ZXN0IG1hdGNoXG5mdW5jdGlvbiBmaW5kUmVkaXJlY3QocmVzdWx0cykge1xuICBmb3IgKGxldCBpID0gcmVzdWx0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGxldCByZXN1bHQgPSByZXN1bHRzW2ldO1xuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3VsdCxcbiAgICAgICAgaWR4OiBpXG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc3RyaXBIYXNoRnJvbVBhdGgocGF0aCkge1xuICBsZXQgcGFyc2VkUGF0aCA9IHR5cGVvZiBwYXRoID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHBhdGgpIDogcGF0aDtcbiAgcmV0dXJuIGNyZWF0ZVBhdGgoX2V4dGVuZHMoe30sIHBhcnNlZFBhdGgsIHtcbiAgICBoYXNoOiBcIlwiXG4gIH0pKTtcbn1cbmZ1bmN0aW9uIGlzSGFzaENoYW5nZU9ubHkoYSwgYikge1xuICBpZiAoYS5wYXRobmFtZSAhPT0gYi5wYXRobmFtZSB8fCBhLnNlYXJjaCAhPT0gYi5zZWFyY2gpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGEuaGFzaCA9PT0gXCJcIikge1xuICAgIC8vIC9wYWdlIC0+IC9wYWdlI2hhc2hcbiAgICByZXR1cm4gYi5oYXNoICE9PSBcIlwiO1xuICB9IGVsc2UgaWYgKGEuaGFzaCA9PT0gYi5oYXNoKSB7XG4gICAgLy8gL3BhZ2UjaGFzaCAtPiAvcGFnZSNoYXNoXG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoYi5oYXNoICE9PSBcIlwiKSB7XG4gICAgLy8gL3BhZ2UjaGFzaCAtPiAvcGFnZSNvdGhlclxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8vIElmIHRoZSBoYXNoIGlzIHJlbW92ZWQgdGhlIGJyb3dzZXIgd2lsbCByZS1wZXJmb3JtIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyXG4gIC8vIC9wYWdlI2hhc2ggLT4gL3BhZ2VcbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIHJlc3VsdC50eXBlID09PSBSZXN1bHRUeXBlLmRlZmVycmVkO1xufVxuZnVuY3Rpb24gaXNFcnJvclJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIHJlc3VsdC50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yO1xufVxuZnVuY3Rpb24gaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIChyZXN1bHQgJiYgcmVzdWx0LnR5cGUpID09PSBSZXN1bHRUeXBlLnJlZGlyZWN0O1xufVxuZnVuY3Rpb24gaXNEZWZlcnJlZERhdGEodmFsdWUpIHtcbiAgbGV0IGRlZmVycmVkID0gdmFsdWU7XG4gIHJldHVybiBkZWZlcnJlZCAmJiB0eXBlb2YgZGVmZXJyZWQgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGRlZmVycmVkLmRhdGEgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGRlZmVycmVkLnN1YnNjcmliZSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBkZWZlcnJlZC5jYW5jZWwgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgZGVmZXJyZWQucmVzb2x2ZURhdGEgPT09IFwiZnVuY3Rpb25cIjtcbn1cbmZ1bmN0aW9uIGlzUmVzcG9uc2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnN0YXR1cyA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgdmFsdWUuc3RhdHVzVGV4dCA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgdmFsdWUuaGVhZGVycyA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUuYm9keSAhPT0gXCJ1bmRlZmluZWRcIjtcbn1cbmZ1bmN0aW9uIGlzUmVkaXJlY3RSZXNwb25zZShyZXN1bHQpIHtcbiAgaWYgKCFpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbGV0IHN0YXR1cyA9IHJlc3VsdC5zdGF0dXM7XG4gIGxldCBsb2NhdGlvbiA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpO1xuICByZXR1cm4gc3RhdHVzID49IDMwMCAmJiBzdGF0dXMgPD0gMzk5ICYmIGxvY2F0aW9uICE9IG51bGw7XG59XG5mdW5jdGlvbiBpc1F1ZXJ5Um91dGVSZXNwb25zZShvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBpc1Jlc3BvbnNlKG9iai5yZXNwb25zZSkgJiYgKG9iai50eXBlID09PSBSZXN1bHRUeXBlLmRhdGEgfHwgb2JqLnR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpO1xufVxuZnVuY3Rpb24gaXNWYWxpZE1ldGhvZChtZXRob2QpIHtcbiAgcmV0dXJuIHZhbGlkUmVxdWVzdE1ldGhvZHMuaGFzKG1ldGhvZC50b0xvd2VyQ2FzZSgpKTtcbn1cbmZ1bmN0aW9uIGlzTXV0YXRpb25NZXRob2QobWV0aG9kKSB7XG4gIHJldHVybiB2YWxpZE11dGF0aW9uTWV0aG9kcy5oYXMobWV0aG9kLnRvTG93ZXJDYXNlKCkpO1xufVxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZURlZmVycmVkUmVzdWx0cyhjdXJyZW50TWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgc2lnbmFscywgaXNGZXRjaGVyLCBjdXJyZW50TG9hZGVyRGF0YSkge1xuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcmVzdWx0cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBsZXQgcmVzdWx0ID0gcmVzdWx0c1tpbmRleF07XG4gICAgbGV0IG1hdGNoID0gbWF0Y2hlc1RvTG9hZFtpbmRleF07XG4gICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhIG1hdGNoLCB0aGVuIHdlIGNhbiBoYXZlIGEgZGVmZXJyZWQgcmVzdWx0IHRvIGRvXG4gICAgLy8gYW55dGhpbmcgd2l0aC4gIFRoaXMgaXMgZm9yIHJldmFsaWRhdGluZyBmZXRjaGVycyB3aGVyZSB0aGUgcm91dGUgd2FzXG4gICAgLy8gcmVtb3ZlZCBkdXJpbmcgSE1SXG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGxldCBjdXJyZW50TWF0Y2ggPSBjdXJyZW50TWF0Y2hlcy5maW5kKG0gPT4gbS5yb3V0ZS5pZCA9PT0gbWF0Y2gucm91dGUuaWQpO1xuICAgIGxldCBpc1JldmFsaWRhdGluZ0xvYWRlciA9IGN1cnJlbnRNYXRjaCAhPSBudWxsICYmICFpc05ld1JvdXRlSW5zdGFuY2UoY3VycmVudE1hdGNoLCBtYXRjaCkgJiYgKGN1cnJlbnRMb2FkZXJEYXRhICYmIGN1cnJlbnRMb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSkgIT09IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpICYmIChpc0ZldGNoZXIgfHwgaXNSZXZhbGlkYXRpbmdMb2FkZXIpKSB7XG4gICAgICAvLyBOb3RlOiB3ZSBkbyBub3QgaGF2ZSB0byB0b3VjaCBhY3RpdmVEZWZlcnJlZHMgaGVyZSBzaW5jZSB3ZSByYWNlIHRoZW1cbiAgICAgIC8vIGFnYWluc3QgdGhlIHNpZ25hbCBpbiByZXNvbHZlRGVmZXJyZWREYXRhIGFuZCB0aGV5J2xsIGdldCBhYm9ydGVkXG4gICAgICAvLyB0aGVyZSBpZiBuZWVkZWRcbiAgICAgIGxldCBzaWduYWwgPSBzaWduYWxzW2luZGV4XTtcbiAgICAgIGludmFyaWFudChzaWduYWwsIFwiRXhwZWN0ZWQgYW4gQWJvcnRTaWduYWwgZm9yIHJldmFsaWRhdGluZyBmZXRjaGVyIGRlZmVycmVkIHJlc3VsdFwiKTtcbiAgICAgIGF3YWl0IHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBzaWduYWwsIGlzRmV0Y2hlcikudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgcmVzdWx0c1tpbmRleF0gPSByZXN1bHQgfHwgcmVzdWx0c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIHNpZ25hbCwgdW53cmFwKSB7XG4gIGlmICh1bndyYXAgPT09IHZvaWQgMCkge1xuICAgIHVud3JhcCA9IGZhbHNlO1xuICB9XG4gIGxldCBhYm9ydGVkID0gYXdhaXQgcmVzdWx0LmRlZmVycmVkRGF0YS5yZXNvbHZlRGF0YShzaWduYWwpO1xuICBpZiAoYWJvcnRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodW53cmFwKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgICAgZGF0YTogcmVzdWx0LmRlZmVycmVkRGF0YS51bndyYXBwZWREYXRhXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIEhhbmRsZSBhbnkgVHJhY2tlZFByb21pc2UuX2Vycm9yIHZhbHVlcyBlbmNvdW50ZXJlZCB3aGlsZSB1bndyYXBwaW5nXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvcjogZVxuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgZGF0YTogcmVzdWx0LmRlZmVycmVkRGF0YS5kYXRhXG4gIH07XG59XG5mdW5jdGlvbiBoYXNOYWtlZEluZGV4UXVlcnkoc2VhcmNoKSB7XG4gIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKHNlYXJjaCkuZ2V0QWxsKFwiaW5kZXhcIikuc29tZSh2ID0+IHYgPT09IFwiXCIpO1xufVxuZnVuY3Rpb24gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pIHtcbiAgbGV0IHNlYXJjaCA9IHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbikuc2VhcmNoIDogbG9jYXRpb24uc2VhcmNoO1xuICBpZiAobWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmluZGV4ICYmIGhhc05ha2VkSW5kZXhRdWVyeShzZWFyY2ggfHwgXCJcIikpIHtcbiAgICAvLyBSZXR1cm4gdGhlIGxlYWYgaW5kZXggcm91dGUgd2hlbiBpbmRleCBpcyBwcmVzZW50XG4gICAgcmV0dXJuIG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgfVxuICAvLyBPdGhlcndpc2UgZ3JhYiB0aGUgZGVlcGVzdCBcInBhdGggY29udHJpYnV0aW5nXCIgbWF0Y2ggKGlnbm9yaW5nIGluZGV4IGFuZFxuICAvLyBwYXRobGVzcyBsYXlvdXQgcm91dGVzKVxuICBsZXQgcGF0aE1hdGNoZXMgPSBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKTtcbiAgcmV0dXJuIHBhdGhNYXRjaGVzW3BhdGhNYXRjaGVzLmxlbmd0aCAtIDFdO1xufVxuZnVuY3Rpb24gZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uKG5hdmlnYXRpb24pIHtcbiAgbGV0IHtcbiAgICBmb3JtTWV0aG9kLFxuICAgIGZvcm1BY3Rpb24sXG4gICAgZm9ybUVuY1R5cGUsXG4gICAgdGV4dCxcbiAgICBmb3JtRGF0YSxcbiAgICBqc29uXG4gIH0gPSBuYXZpZ2F0aW9uO1xuICBpZiAoIWZvcm1NZXRob2QgfHwgIWZvcm1BY3Rpb24gfHwgIWZvcm1FbmNUeXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0ZXh0ICE9IG51bGwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0XG4gICAgfTtcbiAgfSBlbHNlIGlmIChmb3JtRGF0YSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgIH07XG4gIH0gZWxzZSBpZiAoanNvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAganNvbixcbiAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgIH07XG4gIH1cbn1cbmZ1bmN0aW9uIGdldExvYWRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBzdWJtaXNzaW9uKSB7XG4gIGlmIChzdWJtaXNzaW9uKSB7XG4gICAgbGV0IG5hdmlnYXRpb24gPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZvcm1NZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb246IHN1Ym1pc3Npb24uZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGE6IHN1Ym1pc3Npb24uZm9ybURhdGEsXG4gICAgICBqc29uOiBzdWJtaXNzaW9uLmpzb24sXG4gICAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHRcbiAgICB9O1xuICAgIHJldHVybiBuYXZpZ2F0aW9uO1xuICB9IGVsc2Uge1xuICAgIGxldCBuYXZpZ2F0aW9uID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgIH07XG4gICAgcmV0dXJuIG5hdmlnYXRpb247XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFN1Ym1pdHRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBzdWJtaXNzaW9uKSB7XG4gIGxldCBuYXZpZ2F0aW9uID0ge1xuICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIixcbiAgICBsb2NhdGlvbixcbiAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHRcbiAgfTtcbiAgcmV0dXJuIG5hdmlnYXRpb247XG59XG5mdW5jdGlvbiBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBkYXRhKSB7XG4gIGlmIChzdWJtaXNzaW9uKSB7XG4gICAgbGV0IGZldGNoZXIgPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uOiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZTogc3VibWlzc2lvbi5mb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgICAganNvbjogc3VibWlzc2lvbi5qc29uLFxuICAgICAgdGV4dDogc3VibWlzc2lvbi50ZXh0LFxuICAgICAgZGF0YVxuICAgIH07XG4gICAgcmV0dXJuIGZldGNoZXI7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGZldGNoZXIgPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgIHRleHQ6IHVuZGVmaW5lZCxcbiAgICAgIGRhdGFcbiAgICB9O1xuICAgIHJldHVybiBmZXRjaGVyO1xuICB9XG59XG5mdW5jdGlvbiBnZXRTdWJtaXR0aW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBleGlzdGluZ0ZldGNoZXIpIHtcbiAgbGV0IGZldGNoZXIgPSB7XG4gICAgc3RhdGU6IFwic3VibWl0dGluZ1wiLFxuICAgIGZvcm1NZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICBmb3JtQWN0aW9uOiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24sXG4gICAgZm9ybUVuY1R5cGU6IHN1Ym1pc3Npb24uZm9ybUVuY1R5cGUsXG4gICAgZm9ybURhdGE6IHN1Ym1pc3Npb24uZm9ybURhdGEsXG4gICAganNvbjogc3VibWlzc2lvbi5qc29uLFxuICAgIHRleHQ6IHN1Ym1pc3Npb24udGV4dCxcbiAgICBkYXRhOiBleGlzdGluZ0ZldGNoZXIgPyBleGlzdGluZ0ZldGNoZXIuZGF0YSA6IHVuZGVmaW5lZFxuICB9O1xuICByZXR1cm4gZmV0Y2hlcjtcbn1cbmZ1bmN0aW9uIGdldERvbmVGZXRjaGVyKGRhdGEpIHtcbiAgbGV0IGZldGNoZXIgPSB7XG4gICAgc3RhdGU6IFwiaWRsZVwiLFxuICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICB0ZXh0OiB1bmRlZmluZWQsXG4gICAgZGF0YVxuICB9O1xuICByZXR1cm4gZmV0Y2hlcjtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVBcHBsaWVkVHJhbnNpdGlvbnMoX3dpbmRvdywgdHJhbnNpdGlvbnMpIHtcbiAgdHJ5IHtcbiAgICBsZXQgc2Vzc2lvblBvc2l0aW9ucyA9IF93aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShUUkFOU0lUSU9OU19TVE9SQUdFX0tFWSk7XG4gICAgaWYgKHNlc3Npb25Qb3NpdGlvbnMpIHtcbiAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShzZXNzaW9uUG9zaXRpb25zKTtcbiAgICAgIGZvciAobGV0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhqc29uIHx8IHt9KSkge1xuICAgICAgICBpZiAodiAmJiBBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgICAgICAgdHJhbnNpdGlvbnMuc2V0KGssIG5ldyBTZXQodiB8fCBbXSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gbm8tb3AsIHVzZSBkZWZhdWx0IGVtcHR5IG9iamVjdFxuICB9XG59XG5mdW5jdGlvbiBwZXJzaXN0QXBwbGllZFRyYW5zaXRpb25zKF93aW5kb3csIHRyYW5zaXRpb25zKSB7XG4gIGlmICh0cmFuc2l0aW9ucy5zaXplID4gMCkge1xuICAgIGxldCBqc29uID0ge307XG4gICAgZm9yIChsZXQgW2ssIHZdIG9mIHRyYW5zaXRpb25zKSB7XG4gICAgICBqc29uW2tdID0gWy4uLnZdO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgX3dpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFRSQU5TSVRJT05TX1NUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShqc29uKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiRmFpbGVkIHRvIHNhdmUgYXBwbGllZCB2aWV3IHRyYW5zaXRpb25zIGluIHNlc3Npb25TdG9yYWdlIChcIiArIGVycm9yICsgXCIpLlwiKTtcbiAgICB9XG4gIH1cbn1cbi8vI2VuZHJlZ2lvblxuXG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQWN0aW9uLCBJRExFX0JMT0NLRVIsIElETEVfRkVUQ0hFUiwgSURMRV9OQVZJR0FUSU9OLCBVTlNBRkVfREVGRVJSRURfU1lNQk9MLCBEZWZlcnJlZERhdGEgYXMgVU5TQUZFX0RlZmVycmVkRGF0YSwgRXJyb3JSZXNwb25zZUltcGwgYXMgVU5TQUZFX0Vycm9yUmVzcG9uc2VJbXBsLCBjb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaCBhcyBVTlNBRkVfY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2gsIGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMgYXMgVU5TQUZFX2NvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMsIGdldFJlc29sdmVUb01hdGNoZXMgYXMgVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMsIGludmFyaWFudCBhcyBVTlNBRkVfaW52YXJpYW50LCB3YXJuaW5nIGFzIFVOU0FGRV93YXJuaW5nLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZVBhdGgsIGNyZWF0ZVJvdXRlciwgY3JlYXRlU3RhdGljSGFuZGxlciwgZGVmZXIsIGdlbmVyYXRlUGF0aCwgZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvciwgZ2V0VG9QYXRobmFtZSwgaXNEZWZlcnJlZERhdGEsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBqb2luUGF0aHMsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIG5vcm1hbGl6ZVBhdGhuYW1lLCBwYXJzZVBhdGgsIHJlZGlyZWN0LCByZWRpcmVjdERvY3VtZW50LCByZXNvbHZlUGF0aCwgcmVzb2x2ZVRvLCBzdHJpcEJhc2VuYW1lIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZXIuanMubWFwXG4iLCIvKipcbiAqIFJlYWN0IFJvdXRlciB2Ni4yMS4xXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFVOU0FGRV9pbnZhcmlhbnQsIGpvaW5QYXRocywgbWF0Y2hQYXRoLCBVTlNBRkVfZ2V0UmVzb2x2ZVRvTWF0Y2hlcywgVU5TQUZFX3dhcm5pbmcsIHJlc29sdmVUbywgcGFyc2VQYXRoLCBtYXRjaFJvdXRlcywgQWN0aW9uLCBVTlNBRkVfY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2gsIHN0cmlwQmFzZW5hbWUsIElETEVfQkxPQ0tFUiwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGNyZWF0ZU1lbW9yeUhpc3RvcnksIEFib3J0ZWREZWZlcnJlZEVycm9yLCBjcmVhdGVSb3V0ZXIgfSBmcm9tICdAcmVtaXgtcnVuL3JvdXRlcic7XG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQWN0aW9uIGFzIE5hdmlnYXRpb25UeXBlLCBjcmVhdGVQYXRoLCBkZWZlciwgZ2VuZXJhdGVQYXRoLCBpc1JvdXRlRXJyb3JSZXNwb25zZSwganNvbiwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgcGFyc2VQYXRoLCByZWRpcmVjdCwgcmVkaXJlY3REb2N1bWVudCwgcmVzb2x2ZVBhdGggfSBmcm9tICdAcmVtaXgtcnVuL3JvdXRlcic7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG4vLyBDcmVhdGUgcmVhY3Qtc3BlY2lmaWMgdHlwZXMgZnJvbSB0aGUgYWdub3N0aWMgdHlwZXMgaW4gQHJlbWl4LXJ1bi9yb3V0ZXIgdG9cbi8vIGV4cG9ydCBmcm9tIHJlYWN0LXJvdXRlclxuY29uc3QgRGF0YVJvdXRlckNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgRGF0YVJvdXRlckNvbnRleHQuZGlzcGxheU5hbWUgPSBcIkRhdGFSb3V0ZXJcIjtcbn1cbmNvbnN0IERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgRGF0YVJvdXRlclN0YXRlQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiRGF0YVJvdXRlclN0YXRlXCI7XG59XG5jb25zdCBBd2FpdENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQXdhaXRDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJBd2FpdFwiO1xufVxuXG4vKipcbiAqIEEgTmF2aWdhdG9yIGlzIGEgXCJsb2NhdGlvbiBjaGFuZ2VyXCI7IGl0J3MgaG93IHlvdSBnZXQgdG8gZGlmZmVyZW50IGxvY2F0aW9ucy5cbiAqXG4gKiBFdmVyeSBoaXN0b3J5IGluc3RhbmNlIGNvbmZvcm1zIHRvIHRoZSBOYXZpZ2F0b3IgaW50ZXJmYWNlLCBidXQgdGhlXG4gKiBkaXN0aW5jdGlvbiBpcyB1c2VmdWwgcHJpbWFyaWx5IHdoZW4gaXQgY29tZXMgdG8gdGhlIGxvdy1sZXZlbCBgPFJvdXRlcj5gIEFQSVxuICogd2hlcmUgYm90aCB0aGUgbG9jYXRpb24gYW5kIGEgbmF2aWdhdG9yIG11c3QgYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBpbiBvcmRlclxuICogdG8gYXZvaWQgXCJ0ZWFyaW5nXCIgdGhhdCBtYXkgb2NjdXIgaW4gYSBzdXNwZW5zZS1lbmFibGVkIGFwcCBpZiB0aGUgYWN0aW9uXG4gKiBhbmQvb3IgbG9jYXRpb24gd2VyZSB0byBiZSByZWFkIGRpcmVjdGx5IGZyb20gdGhlIGhpc3RvcnkgaW5zdGFuY2UuXG4gKi9cblxuY29uc3QgTmF2aWdhdGlvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTmF2aWdhdGlvbkNvbnRleHQuZGlzcGxheU5hbWUgPSBcIk5hdmlnYXRpb25cIjtcbn1cbmNvbnN0IExvY2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMb2NhdGlvbkNvbnRleHQuZGlzcGxheU5hbWUgPSBcIkxvY2F0aW9uXCI7XG59XG5jb25zdCBSb3V0ZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh7XG4gIG91dGxldDogbnVsbCxcbiAgbWF0Y2hlczogW10sXG4gIGlzRGF0YVJvdXRlOiBmYWxzZVxufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiUm91dGVcIjtcbn1cbmNvbnN0IFJvdXRlRXJyb3JDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlRXJyb3JDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJSb3V0ZUVycm9yXCI7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZnVsbCBocmVmIGZvciB0aGUgZ2l2ZW4gXCJ0b1wiIHZhbHVlLiBUaGlzIGlzIHVzZWZ1bCBmb3IgYnVpbGRpbmdcbiAqIGN1c3RvbSBsaW5rcyB0aGF0IGFyZSBhbHNvIGFjY2Vzc2libGUgYW5kIHByZXNlcnZlIHJpZ2h0LWNsaWNrIGJlaGF2aW9yLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLWhyZWZcbiAqL1xuZnVuY3Rpb24gdXNlSHJlZih0bywgX3RlbXApIHtcbiAgbGV0IHtcbiAgICByZWxhdGl2ZVxuICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlSHJlZigpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHtcbiAgICBoYXNoLFxuICAgIHBhdGhuYW1lLFxuICAgIHNlYXJjaFxuICB9ID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIGxldCBqb2luZWRQYXRobmFtZSA9IHBhdGhuYW1lO1xuXG4gIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUgcHJpb3JcbiAgLy8gdG8gY3JlYXRpbmcgdGhlIGhyZWYuICBJZiB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIGp1c3QgdXNlIHRoZSByYXdcbiAgLy8gYmFzZW5hbWUgd2hpY2ggYWxsb3dzIHRoZSBiYXNlbmFtZSB0byBoYXZlIGZ1bGwgY29udHJvbCBvdmVyIHRoZSBwcmVzZW5jZVxuICAvLyBvZiBhIHRyYWlsaW5nIHNsYXNoIG9uIHJvb3QgbGlua3NcbiAgaWYgKGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIGpvaW5lZFBhdGhuYW1lID0gcGF0aG5hbWUgPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRobmFtZV0pO1xuICB9XG4gIHJldHVybiBuYXZpZ2F0b3IuY3JlYXRlSHJlZih7XG4gICAgcGF0aG5hbWU6IGpvaW5lZFBhdGhuYW1lLFxuICAgIHNlYXJjaCxcbiAgICBoYXNoXG4gIH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGNvbXBvbmVudCBpcyBhIGRlc2NlbmRhbnQgb2YgYSBgPFJvdXRlcj5gLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLWluLXJvdXRlci1jb250ZXh0XG4gKi9cbmZ1bmN0aW9uIHVzZUluUm91dGVyQ29udGV4dCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KSAhPSBudWxsO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbG9jYXRpb24gb2JqZWN0LCB3aGljaCByZXByZXNlbnRzIHRoZSBjdXJyZW50IFVSTCBpbiB3ZWJcbiAqIGJyb3dzZXJzLlxuICpcbiAqIE5vdGU6IElmIHlvdSdyZSB1c2luZyB0aGlzIGl0IG1heSBtZWFuIHlvdSdyZSBkb2luZyBzb21lIG9mIHlvdXIgb3duXG4gKiBcInJvdXRpbmdcIiBpbiB5b3VyIGFwcCwgYW5kIHdlJ2QgbGlrZSB0byBrbm93IHdoYXQgeW91ciB1c2UgY2FzZSBpcy4gV2UgbWF5XG4gKiBiZSBhYmxlIHRvIHByb3ZpZGUgc29tZXRoaW5nIGhpZ2hlci1sZXZlbCB0byBiZXR0ZXIgc3VpdCB5b3VyIG5lZWRzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLWxvY2F0aW9uXG4gKi9cbmZ1bmN0aW9uIHVzZUxvY2F0aW9uKCkge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUxvY2F0aW9uKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KS5sb2NhdGlvbjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IG5hdmlnYXRpb24gYWN0aW9uIHdoaWNoIGRlc2NyaWJlcyBob3cgdGhlIHJvdXRlciBjYW1lIHRvXG4gKiB0aGUgY3VycmVudCBsb2NhdGlvbiwgZWl0aGVyIGJ5IGEgcG9wLCBwdXNoLCBvciByZXBsYWNlIG9uIHRoZSBoaXN0b3J5IHN0YWNrLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW5hdmlnYXRpb24tdHlwZVxuICovXG5mdW5jdGlvbiB1c2VOYXZpZ2F0aW9uVHlwZSgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KS5uYXZpZ2F0aW9uVHlwZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgUGF0aE1hdGNoIG9iamVjdCBpZiB0aGUgZ2l2ZW4gcGF0dGVybiBtYXRjaGVzIHRoZSBjdXJyZW50IFVSTC5cbiAqIFRoaXMgaXMgdXNlZnVsIGZvciBjb21wb25lbnRzIHRoYXQgbmVlZCB0byBrbm93IFwiYWN0aXZlXCIgc3RhdGUsIGUuZy5cbiAqIGA8TmF2TGluaz5gLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW1hdGNoXG4gKi9cbmZ1bmN0aW9uIHVzZU1hdGNoKHBhdHRlcm4pIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VNYXRjaCgpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgcGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSksIFtwYXRobmFtZSwgcGF0dGVybl0pO1xufVxuXG4vKipcbiAqIFRoZSBpbnRlcmZhY2UgZm9yIHRoZSBuYXZpZ2F0ZSgpIGZ1bmN0aW9uIHJldHVybmVkIGZyb20gdXNlTmF2aWdhdGUoKS5cbiAqL1xuXG5jb25zdCBuYXZpZ2F0ZUVmZmVjdFdhcm5pbmcgPSBcIllvdSBzaG91bGQgY2FsbCBuYXZpZ2F0ZSgpIGluIGEgUmVhY3QudXNlRWZmZWN0KCksIG5vdCB3aGVuIFwiICsgXCJ5b3VyIGNvbXBvbmVudCBpcyBmaXJzdCByZW5kZXJlZC5cIjtcblxuLy8gTXV0ZSB3YXJuaW5ncyBmb3IgY2FsbHMgdG8gdXNlTmF2aWdhdGUgaW4gU1NSIGVudmlyb25tZW50c1xuZnVuY3Rpb24gdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChjYikge1xuICBsZXQgaXNTdGF0aWMgPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KS5zdGF0aWM7XG4gIGlmICghaXNTdGF0aWMpIHtcbiAgICAvLyBXZSBzaG91bGQgYmUgYWJsZSB0byBnZXQgcmlkIG9mIHRoaXMgb25jZSByZWFjdCAxOC4zIGlzIHJlbGVhc2VkXG4gICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8yNjM5NVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdChjYik7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGltcGVyYXRpdmUgbWV0aG9kIGZvciBjaGFuZ2luZyB0aGUgbG9jYXRpb24uIFVzZWQgYnkgYDxMaW5rPmBzLCBidXRcbiAqIG1heSBhbHNvIGJlIHVzZWQgYnkgb3RoZXIgZWxlbWVudHMgdG8gY2hhbmdlIHRoZSBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1uYXZpZ2F0ZVxuICovXG5mdW5jdGlvbiB1c2VOYXZpZ2F0ZSgpIHtcbiAgbGV0IHtcbiAgICBpc0RhdGFSb3V0ZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICAvLyBDb25kaXRpb25hbCB1c2FnZSBpcyBPSyBoZXJlIGJlY2F1c2UgdGhlIHVzYWdlIG9mIGEgZGF0YSByb3V0ZXIgaXMgc3RhdGljXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICByZXR1cm4gaXNEYXRhUm91dGUgPyB1c2VOYXZpZ2F0ZVN0YWJsZSgpIDogdXNlTmF2aWdhdGVVbnN0YWJsZSgpO1xufVxuZnVuY3Rpb24gdXNlTmF2aWdhdGVVbnN0YWJsZSgpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VOYXZpZ2F0ZSgpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpO1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGZ1dHVyZSxcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KFVOU0FGRV9nZXRSZXNvbHZlVG9NYXRjaGVzKG1hdGNoZXMsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCkpO1xuICBsZXQgYWN0aXZlUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgYWN0aXZlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICB9KTtcbiAgbGV0IG5hdmlnYXRlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRvLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhhY3RpdmVSZWYuY3VycmVudCwgbmF2aWdhdGVFZmZlY3RXYXJuaW5nKSA6IHZvaWQgMDtcblxuICAgIC8vIFNob3J0IGNpcmN1aXQgaGVyZSBzaW5jZSBpZiB0aGlzIGhhcHBlbnMgb24gZmlyc3QgcmVuZGVyIHRoZSBuYXZpZ2F0ZVxuICAgIC8vIGlzIHVzZWxlc3MgYmVjYXVzZSB3ZSBoYXZlbid0IHdpcmVkIHVwIG91ciBoaXN0b3J5IGxpc3RlbmVyIHlldFxuICAgIGlmICghYWN0aXZlUmVmLmN1cnJlbnQpIHJldHVybjtcbiAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICBuYXZpZ2F0b3IuZ28odG8pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgcGF0aCA9IHJlc29sdmVUbyh0bywgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLCBsb2NhdGlvblBhdGhuYW1lLCBvcHRpb25zLnJlbGF0aXZlID09PSBcInBhdGhcIik7XG5cbiAgICAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gICAgLy8gdG8gaGFuZGluZyBvZmYgdG8gaGlzdG9yeSAoYnV0IG9ubHkgaWYgd2UncmUgbm90IGluIGEgZGF0YSByb3V0ZXIsXG4gICAgLy8gb3RoZXJ3aXNlIGl0J2xsIHByZXBlbmQgdGhlIGJhc2VuYW1lIGluc2lkZSBvZiB0aGUgcm91dGVyKS5cbiAgICAvLyBJZiB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIHdlIG5hdmlnYXRlIHRvIHRoZSByYXcgYmFzZW5hbWVcbiAgICAvLyB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlIG9mIGFcbiAgICAvLyB0cmFpbGluZyBzbGFzaCBvbiByb290IGxpbmtzXG4gICAgaWYgKGRhdGFSb3V0ZXJDb250ZXh0ID09IG51bGwgJiYgYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgICBwYXRoLnBhdGhuYW1lID0gcGF0aC5wYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgICB9XG4gICAgKCEhb3B0aW9ucy5yZXBsYWNlID8gbmF2aWdhdG9yLnJlcGxhY2UgOiBuYXZpZ2F0b3IucHVzaCkocGF0aCwgb3B0aW9ucy5zdGF0ZSwgb3B0aW9ucyk7XG4gIH0sIFtiYXNlbmFtZSwgbmF2aWdhdG9yLCByb3V0ZVBhdGhuYW1lc0pzb24sIGxvY2F0aW9uUGF0aG5hbWUsIGRhdGFSb3V0ZXJDb250ZXh0XSk7XG4gIHJldHVybiBuYXZpZ2F0ZTtcbn1cbmNvbnN0IE91dGxldENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjb250ZXh0IChpZiBwcm92aWRlZCkgZm9yIHRoZSBjaGlsZCByb3V0ZSBhdCB0aGlzIGxldmVsIG9mIHRoZSByb3V0ZVxuICogaGllcmFyY2h5LlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2Utb3V0bGV0LWNvbnRleHRcbiAqL1xuZnVuY3Rpb24gdXNlT3V0bGV0Q29udGV4dCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoT3V0bGV0Q29udGV4dCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZWxlbWVudCBmb3IgdGhlIGNoaWxkIHJvdXRlIGF0IHRoaXMgbGV2ZWwgb2YgdGhlIHJvdXRlXG4gKiBoaWVyYXJjaHkuIFVzZWQgaW50ZXJuYWxseSBieSBgPE91dGxldD5gIHRvIHJlbmRlciBjaGlsZCByb3V0ZXMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2Utb3V0bGV0XG4gKi9cbmZ1bmN0aW9uIHVzZU91dGxldChjb250ZXh0KSB7XG4gIGxldCBvdXRsZXQgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCkub3V0bGV0O1xuICBpZiAob3V0bGV0KSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE91dGxldENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjb250ZXh0XG4gICAgfSwgb3V0bGV0KTtcbiAgfVxuICByZXR1cm4gb3V0bGV0O1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IG9mIGtleS92YWx1ZSBwYWlycyBvZiB0aGUgZHluYW1pYyBwYXJhbXMgZnJvbSB0aGUgY3VycmVudFxuICogVVJMIHRoYXQgd2VyZSBtYXRjaGVkIGJ5IHRoZSByb3V0ZSBwYXRoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXBhcmFtc1xuICovXG5mdW5jdGlvbiB1c2VQYXJhbXMoKSB7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xufVxuXG4vKipcbiAqIFJlc29sdmVzIHRoZSBwYXRobmFtZSBvZiB0aGUgZ2l2ZW4gYHRvYCB2YWx1ZSBhZ2FpbnN0IHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXJlc29sdmVkLXBhdGhcbiAqL1xuZnVuY3Rpb24gdXNlUmVzb2x2ZWRQYXRoKHRvLCBfdGVtcDIpIHtcbiAgbGV0IHtcbiAgICByZWxhdGl2ZVxuICB9ID0gX3RlbXAyID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMjtcbiAgbGV0IHtcbiAgICBmdXR1cmVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KFVOU0FGRV9nZXRSZXNvbHZlVG9NYXRjaGVzKG1hdGNoZXMsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCkpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiByZXNvbHZlVG8odG8sIEpTT04ucGFyc2Uocm91dGVQYXRobmFtZXNKc29uKSwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmUgPT09IFwicGF0aFwiKSwgW3RvLCByb3V0ZVBhdGhuYW1lc0pzb24sIGxvY2F0aW9uUGF0aG5hbWUsIHJlbGF0aXZlXSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZWxlbWVudCBvZiB0aGUgcm91dGUgdGhhdCBtYXRjaGVkIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBwcmVwYXJlZFxuICogd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0IHRvIHJlbmRlciB0aGUgcmVtYWluZGVyIG9mIHRoZSByb3V0ZSB0cmVlLiBSb3V0ZVxuICogZWxlbWVudHMgaW4gdGhlIHRyZWUgbXVzdCByZW5kZXIgYW4gYDxPdXRsZXQ+YCB0byByZW5kZXIgdGhlaXIgY2hpbGQgcm91dGUnc1xuICogZWxlbWVudC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1yb3V0ZXNcbiAqL1xuZnVuY3Rpb24gdXNlUm91dGVzKHJvdXRlcywgbG9jYXRpb25BcmcpIHtcbiAgcmV0dXJuIHVzZVJvdXRlc0ltcGwocm91dGVzLCBsb2NhdGlvbkFyZyk7XG59XG5cbi8vIEludGVybmFsIGltcGxlbWVudGF0aW9uIHdpdGggYWNjZXB0IG9wdGlvbmFsIHBhcmFtIGZvciBSb3V0ZXJQcm92aWRlciB1c2FnZVxuZnVuY3Rpb24gdXNlUm91dGVzSW1wbChyb3V0ZXMsIGxvY2F0aW9uQXJnLCBkYXRhUm91dGVyU3RhdGUsIGZ1dHVyZSkge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZVJvdXRlcygpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgbmF2aWdhdG9yXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHtcbiAgICBtYXRjaGVzOiBwYXJlbnRNYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZU1hdGNoID0gcGFyZW50TWF0Y2hlc1twYXJlbnRNYXRjaGVzLmxlbmd0aCAtIDFdO1xuICBsZXQgcGFyZW50UGFyYW1zID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGFyYW1zIDoge307XG4gIGxldCBwYXJlbnRQYXRobmFtZSA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhdGhuYW1lIDogXCIvXCI7XG4gIGxldCBwYXJlbnRQYXRobmFtZUJhc2UgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZUJhc2UgOiBcIi9cIjtcbiAgbGV0IHBhcmVudFJvdXRlID0gcm91dGVNYXRjaCAmJiByb3V0ZU1hdGNoLnJvdXRlO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgLy8gWW91IHdvbid0IGdldCBhIHdhcm5pbmcgYWJvdXQgMiBkaWZmZXJlbnQgPFJvdXRlcz4gdW5kZXIgYSA8Um91dGU+XG4gICAgLy8gd2l0aG91dCBhIHRyYWlsaW5nICosIGJ1dCB0aGlzIGlzIGEgYmVzdC1lZmZvcnQgd2FybmluZyBhbnl3YXkgc2luY2Ugd2VcbiAgICAvLyBjYW5ub3QgZXZlbiBnaXZlIHRoZSB3YXJuaW5nIHVubGVzcyB0aGV5IGxhbmQgYXQgdGhlIHBhcmVudCByb3V0ZS5cbiAgICAvL1xuICAgIC8vIEV4YW1wbGU6XG4gICAgLy9cbiAgICAvLyA8Um91dGVzPlxuICAgIC8vICAgey8qIFRoaXMgcm91dGUgcGF0aCBNVVNUIGVuZCB3aXRoIC8qIGJlY2F1c2Ugb3RoZXJ3aXNlXG4gICAgLy8gICAgICAgaXQgd2lsbCBuZXZlciBtYXRjaCAvYmxvZy9wb3N0LzEyMyAqL31cbiAgICAvLyAgIDxSb3V0ZSBwYXRoPVwiYmxvZ1wiIGVsZW1lbnQ9ezxCbG9nIC8+fSAvPlxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nL2ZlZWRcIiBlbGVtZW50PXs8QmxvZ0ZlZWQgLz59IC8+XG4gICAgLy8gPC9Sb3V0ZXM+XG4gICAgLy9cbiAgICAvLyBmdW5jdGlvbiBCbG9nKCkge1xuICAgIC8vICAgcmV0dXJuIChcbiAgICAvLyAgICAgPFJvdXRlcz5cbiAgICAvLyAgICAgICA8Um91dGUgcGF0aD1cInBvc3QvOmlkXCIgZWxlbWVudD17PFBvc3QgLz59IC8+XG4gICAgLy8gICAgIDwvUm91dGVzPlxuICAgIC8vICAgKTtcbiAgICAvLyB9XG4gICAgbGV0IHBhcmVudFBhdGggPSBwYXJlbnRSb3V0ZSAmJiBwYXJlbnRSb3V0ZS5wYXRoIHx8IFwiXCI7XG4gICAgd2FybmluZ09uY2UocGFyZW50UGF0aG5hbWUsICFwYXJlbnRSb3V0ZSB8fCBwYXJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSwgXCJZb3UgcmVuZGVyZWQgZGVzY2VuZGFudCA8Um91dGVzPiAob3IgY2FsbGVkIGB1c2VSb3V0ZXMoKWApIGF0IFwiICsgKFwiXFxcIlwiICsgcGFyZW50UGF0aG5hbWUgKyBcIlxcXCIgKHVuZGVyIDxSb3V0ZSBwYXRoPVxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCI+KSBidXQgdGhlIFwiKSArIFwicGFyZW50IHJvdXRlIHBhdGggaGFzIG5vIHRyYWlsaW5nIFxcXCIqXFxcIi4gVGhpcyBtZWFucyBpZiB5b3UgbmF2aWdhdGUgXCIgKyBcImRlZXBlciwgdGhlIHBhcmVudCB3b24ndCBtYXRjaCBhbnltb3JlIGFuZCB0aGVyZWZvcmUgdGhlIGNoaWxkIFwiICsgXCJyb3V0ZXMgd2lsbCBuZXZlciByZW5kZXIuXFxuXFxuXCIgKyAoXCJQbGVhc2UgY2hhbmdlIHRoZSBwYXJlbnQgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4gdG8gPFJvdXRlIFwiKSArIChcInBhdGg9XFxcIlwiICsgKHBhcmVudFBhdGggPT09IFwiL1wiID8gXCIqXCIgOiBwYXJlbnRQYXRoICsgXCIvKlwiKSArIFwiXFxcIj4uXCIpKTtcbiAgfVxuICBsZXQgbG9jYXRpb25Gcm9tQ29udGV4dCA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBsb2NhdGlvbjtcbiAgaWYgKGxvY2F0aW9uQXJnKSB7XG4gICAgdmFyIF9wYXJzZWRMb2NhdGlvbkFyZyRwYTtcbiAgICBsZXQgcGFyc2VkTG9jYXRpb25BcmcgPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gICAgIShwYXJlbnRQYXRobmFtZUJhc2UgPT09IFwiL1wiIHx8ICgoX3BhcnNlZExvY2F0aW9uQXJnJHBhID0gcGFyc2VkTG9jYXRpb25BcmcucGF0aG5hbWUpID09IG51bGwgPyB2b2lkIDAgOiBfcGFyc2VkTG9jYXRpb25BcmckcGEuc3RhcnRzV2l0aChwYXJlbnRQYXRobmFtZUJhc2UpKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIldoZW4gb3ZlcnJpZGluZyB0aGUgbG9jYXRpb24gdXNpbmcgYDxSb3V0ZXMgbG9jYXRpb24+YCBvciBgdXNlUm91dGVzKHJvdXRlcywgbG9jYXRpb24pYCwgXCIgKyBcInRoZSBsb2NhdGlvbiBwYXRobmFtZSBtdXN0IGJlZ2luIHdpdGggdGhlIHBvcnRpb24gb2YgdGhlIFVSTCBwYXRobmFtZSB0aGF0IHdhcyBcIiArIChcIm1hdGNoZWQgYnkgYWxsIHBhcmVudCByb3V0ZXMuIFRoZSBjdXJyZW50IHBhdGhuYW1lIGJhc2UgaXMgXFxcIlwiICsgcGFyZW50UGF0aG5hbWVCYXNlICsgXCJcXFwiIFwiKSArIChcImJ1dCBwYXRobmFtZSBcXFwiXCIgKyBwYXJzZWRMb2NhdGlvbkFyZy5wYXRobmFtZSArIFwiXFxcIiB3YXMgZ2l2ZW4gaW4gdGhlIGBsb2NhdGlvbmAgcHJvcC5cIikpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbG9jYXRpb24gPSBwYXJzZWRMb2NhdGlvbkFyZztcbiAgfSBlbHNlIHtcbiAgICBsb2NhdGlvbiA9IGxvY2F0aW9uRnJvbUNvbnRleHQ7XG4gIH1cbiAgbGV0IHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCI7XG4gIGxldCByZW1haW5pbmdQYXRobmFtZSA9IHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXRobmFtZSA6IHBhdGhuYW1lLnNsaWNlKHBhcmVudFBhdGhuYW1lQmFzZS5sZW5ndGgpIHx8IFwiL1wiO1xuICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlcywge1xuICAgIHBhdGhuYW1lOiByZW1haW5pbmdQYXRobmFtZVxuICB9KTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKHBhcmVudFJvdXRlIHx8IG1hdGNoZXMgIT0gbnVsbCwgXCJObyByb3V0ZXMgbWF0Y2hlZCBsb2NhdGlvbiBcXFwiXCIgKyBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2ggKyBcIlxcXCIgXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKG1hdGNoZXMgPT0gbnVsbCB8fCBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuZWxlbWVudCAhPT0gdW5kZWZpbmVkIHx8IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5Db21wb25lbnQgIT09IHVuZGVmaW5lZCB8fCBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUubGF6eSAhPT0gdW5kZWZpbmVkLCBcIk1hdGNoZWQgbGVhZiByb3V0ZSBhdCBsb2NhdGlvbiBcXFwiXCIgKyBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2ggKyBcIlxcXCIgXCIgKyBcImRvZXMgbm90IGhhdmUgYW4gZWxlbWVudCBvciBDb21wb25lbnQuIFRoaXMgbWVhbnMgaXQgd2lsbCByZW5kZXIgYW4gPE91dGxldCAvPiB3aXRoIGEgXCIgKyBcIm51bGwgdmFsdWUgYnkgZGVmYXVsdCByZXN1bHRpbmcgaW4gYW4gXFxcImVtcHR5XFxcIiBwYWdlLlwiKSA6IHZvaWQgMDtcbiAgfVxuICBsZXQgcmVuZGVyZWRNYXRjaGVzID0gX3JlbmRlck1hdGNoZXMobWF0Y2hlcyAmJiBtYXRjaGVzLm1hcChtYXRjaCA9PiBPYmplY3QuYXNzaWduKHt9LCBtYXRjaCwge1xuICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7fSwgcGFyZW50UGFyYW1zLCBtYXRjaC5wYXJhbXMpLFxuICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSxcbiAgICAvLyBSZS1lbmNvZGUgcGF0aG5hbWVzIHRoYXQgd2VyZSBkZWNvZGVkIGluc2lkZSBtYXRjaFJvdXRlc1xuICAgIG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbiA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihtYXRjaC5wYXRobmFtZSkucGF0aG5hbWUgOiBtYXRjaC5wYXRobmFtZV0pLFxuICAgIHBhdGhuYW1lQmFzZTogbWF0Y2gucGF0aG5hbWVCYXNlID09PSBcIi9cIiA/IHBhcmVudFBhdGhuYW1lQmFzZSA6IGpvaW5QYXRocyhbcGFyZW50UGF0aG5hbWVCYXNlLFxuICAgIC8vIFJlLWVuY29kZSBwYXRobmFtZXMgdGhhdCB3ZXJlIGRlY29kZWQgaW5zaWRlIG1hdGNoUm91dGVzXG4gICAgbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKG1hdGNoLnBhdGhuYW1lQmFzZSkucGF0aG5hbWUgOiBtYXRjaC5wYXRobmFtZUJhc2VdKVxuICB9KSksIHBhcmVudE1hdGNoZXMsIGRhdGFSb3V0ZXJTdGF0ZSwgZnV0dXJlKTtcblxuICAvLyBXaGVuIGEgdXNlciBwYXNzZXMgaW4gYSBgbG9jYXRpb25BcmdgLCB0aGUgYXNzb2NpYXRlZCByb3V0ZXMgbmVlZCB0b1xuICAvLyBiZSB3cmFwcGVkIGluIGEgbmV3IGBMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXJgIGluIG9yZGVyIGZvciBgdXNlTG9jYXRpb25gXG4gIC8vIHRvIHVzZSB0aGUgc2NvcGVkIGxvY2F0aW9uIGluc3RlYWQgb2YgdGhlIGdsb2JhbCBsb2NhdGlvbi5cbiAgaWYgKGxvY2F0aW9uQXJnICYmIHJlbmRlcmVkTWF0Y2hlcykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGxvY2F0aW9uOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgcGF0aG5hbWU6IFwiL1wiLFxuICAgICAgICAgIHNlYXJjaDogXCJcIixcbiAgICAgICAgICBoYXNoOiBcIlwiLFxuICAgICAgICAgIHN0YXRlOiBudWxsLFxuICAgICAgICAgIGtleTogXCJkZWZhdWx0XCJcbiAgICAgICAgfSwgbG9jYXRpb24pLFxuICAgICAgICBuYXZpZ2F0aW9uVHlwZTogQWN0aW9uLlBvcFxuICAgICAgfVxuICAgIH0sIHJlbmRlcmVkTWF0Y2hlcyk7XG4gIH1cbiAgcmV0dXJuIHJlbmRlcmVkTWF0Y2hlcztcbn1cbmZ1bmN0aW9uIERlZmF1bHRFcnJvckNvbXBvbmVudCgpIHtcbiAgbGV0IGVycm9yID0gdXNlUm91dGVFcnJvcigpO1xuICBsZXQgbWVzc2FnZSA9IGlzUm91dGVFcnJvclJlc3BvbnNlKGVycm9yKSA/IGVycm9yLnN0YXR1cyArIFwiIFwiICsgZXJyb3Iuc3RhdHVzVGV4dCA6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogSlNPTi5zdHJpbmdpZnkoZXJyb3IpO1xuICBsZXQgc3RhY2sgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3Iuc3RhY2sgOiBudWxsO1xuICBsZXQgbGlnaHRncmV5ID0gXCJyZ2JhKDIwMCwyMDAsMjAwLCAwLjUpXCI7XG4gIGxldCBwcmVTdHlsZXMgPSB7XG4gICAgcGFkZGluZzogXCIwLjVyZW1cIixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGxpZ2h0Z3JleVxuICB9O1xuICBsZXQgY29kZVN0eWxlcyA9IHtcbiAgICBwYWRkaW5nOiBcIjJweCA0cHhcIixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGxpZ2h0Z3JleVxuICB9O1xuICBsZXQgZGV2SW5mbyA9IG51bGw7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaGFuZGxlZCBieSBSZWFjdCBSb3V0ZXIgZGVmYXVsdCBFcnJvckJvdW5kYXJ5OlwiLCBlcnJvcik7XG4gICAgZGV2SW5mbyA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBcIiwgbnVsbCwgXCJcXHVEODNEXFx1RENCRiBIZXkgZGV2ZWxvcGVyIFxcdUQ4M0RcXHVEQzRCXCIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBcIiwgbnVsbCwgXCJZb3UgY2FuIHByb3ZpZGUgYSB3YXkgYmV0dGVyIFVYIHRoYW4gdGhpcyB3aGVuIHlvdXIgYXBwIHRocm93cyBlcnJvcnMgYnkgcHJvdmlkaW5nIHlvdXIgb3duIFwiLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImNvZGVcIiwge1xuICAgICAgc3R5bGU6IGNvZGVTdHlsZXNcbiAgICB9LCBcIkVycm9yQm91bmRhcnlcIiksIFwiIG9yXCIsIFwiIFwiLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImNvZGVcIiwge1xuICAgICAgc3R5bGU6IGNvZGVTdHlsZXNcbiAgICB9LCBcImVycm9yRWxlbWVudFwiKSwgXCIgcHJvcCBvbiB5b3VyIHJvdXRlLlwiKSk7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImgyXCIsIG51bGwsIFwiVW5leHBlY3RlZCBBcHBsaWNhdGlvbiBFcnJvciFcIiksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiaDNcIiwge1xuICAgIHN0eWxlOiB7XG4gICAgICBmb250U3R5bGU6IFwiaXRhbGljXCJcbiAgICB9XG4gIH0sIG1lc3NhZ2UpLCBzdGFjayA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicHJlXCIsIHtcbiAgICBzdHlsZTogcHJlU3R5bGVzXG4gIH0sIHN0YWNrKSA6IG51bGwsIGRldkluZm8pO1xufVxuY29uc3QgZGVmYXVsdEVycm9yRWxlbWVudCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERlZmF1bHRFcnJvckNvbXBvbmVudCwgbnVsbCk7XG5jbGFzcyBSZW5kZXJFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBwcm9wcy5sb2NhdGlvbixcbiAgICAgIHJldmFsaWRhdGlvbjogcHJvcHMucmV2YWxpZGF0aW9uLFxuICAgICAgZXJyb3I6IHByb3BzLmVycm9yXG4gICAgfTtcbiAgfVxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yOiBlcnJvclxuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhwcm9wcywgc3RhdGUpIHtcbiAgICAvLyBXaGVuIHdlIGdldCBpbnRvIGFuIGVycm9yIHN0YXRlLCB0aGUgdXNlciB3aWxsIGxpa2VseSBjbGljayBcImJhY2tcIiB0byB0aGVcbiAgICAvLyBwcmV2aW91cyBwYWdlIHRoYXQgZGlkbid0IGhhdmUgYW4gZXJyb3IuIEJlY2F1c2UgdGhpcyB3cmFwcyB0aGUgZW50aXJlXG4gICAgLy8gYXBwbGljYXRpb24sIHRoYXQgd2lsbCBoYXZlIG5vIGVmZmVjdC0tdGhlIGVycm9yIHBhZ2UgY29udGludWVzIHRvIGRpc3BsYXkuXG4gICAgLy8gVGhpcyBnaXZlcyB1cyBhIG1lY2hhbmlzbSB0byByZWNvdmVyIGZyb20gdGhlIGVycm9yIHdoZW4gdGhlIGxvY2F0aW9uIGNoYW5nZXMuXG4gICAgLy9cbiAgICAvLyBXaGV0aGVyIHdlJ3JlIGluIGFuIGVycm9yIHN0YXRlIG9yIG5vdCwgd2UgdXBkYXRlIHRoZSBsb2NhdGlvbiBpbiBzdGF0ZVxuICAgIC8vIHNvIHRoYXQgd2hlbiB3ZSBhcmUgaW4gYW4gZXJyb3Igc3RhdGUsIGl0IGdldHMgcmVzZXQgd2hlbiBhIG5ldyBsb2NhdGlvblxuICAgIC8vIGNvbWVzIGluIGFuZCB0aGUgdXNlciByZWNvdmVycyBmcm9tIHRoZSBlcnJvci5cbiAgICBpZiAoc3RhdGUubG9jYXRpb24gIT09IHByb3BzLmxvY2F0aW9uIHx8IHN0YXRlLnJldmFsaWRhdGlvbiAhPT0gXCJpZGxlXCIgJiYgcHJvcHMucmV2YWxpZGF0aW9uID09PSBcImlkbGVcIikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXJyb3I6IHByb3BzLmVycm9yLFxuICAgICAgICBsb2NhdGlvbjogcHJvcHMubG9jYXRpb24sXG4gICAgICAgIHJldmFsaWRhdGlvbjogcHJvcHMucmV2YWxpZGF0aW9uXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHdlJ3JlIG5vdCBjaGFuZ2luZyBsb2NhdGlvbnMsIHByZXNlcnZlIHRoZSBsb2NhdGlvbiBidXQgc3RpbGwgc3VyZmFjZVxuICAgIC8vIGFueSBuZXcgZXJyb3JzIHRoYXQgbWF5IGNvbWUgdGhyb3VnaC4gV2UgcmV0YWluIHRoZSBleGlzdGluZyBlcnJvciwgd2UgZG9cbiAgICAvLyB0aGlzIGJlY2F1c2UgdGhlIGVycm9yIHByb3ZpZGVkIGZyb20gdGhlIGFwcCBzdGF0ZSBtYXkgYmUgY2xlYXJlZCB3aXRob3V0XG4gICAgLy8gdGhlIGxvY2F0aW9uIGNoYW5naW5nLlxuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogcHJvcHMuZXJyb3IgIT09IHVuZGVmaW5lZCA/IHByb3BzLmVycm9yIDogc3RhdGUuZXJyb3IsXG4gICAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgICByZXZhbGlkYXRpb246IHByb3BzLnJldmFsaWRhdGlvbiB8fCBzdGF0ZS5yZXZhbGlkYXRpb25cbiAgICB9O1xuICB9XG4gIGNvbXBvbmVudERpZENhdGNoKGVycm9yLCBlcnJvckluZm8pIHtcbiAgICBjb25zb2xlLmVycm9yKFwiUmVhY3QgUm91dGVyIGNhdWdodCB0aGUgZm9sbG93aW5nIGVycm9yIGR1cmluZyByZW5kZXJcIiwgZXJyb3IsIGVycm9ySW5mbyk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlLmVycm9yICE9PSB1bmRlZmluZWQgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnJvdXRlQ29udGV4dFxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlRXJyb3JDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5lcnJvcixcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNvbXBvbmVudFxuICAgIH0pKSA6IHRoaXMucHJvcHMuY2hpbGRyZW47XG4gIH1cbn1cbmZ1bmN0aW9uIFJlbmRlcmVkUm91dGUoX3JlZikge1xuICBsZXQge1xuICAgIHJvdXRlQ29udGV4dCxcbiAgICBtYXRjaCxcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7XG5cbiAgLy8gVHJhY2sgaG93IGRlZXAgd2UgZ290IGluIG91ciByZW5kZXIgcGFzcyB0byBlbXVsYXRlIFNTUiBjb21wb25lbnREaWRDYXRjaFxuICAvLyBpbiBhIERhdGFTdGF0aWNSb3V0ZXJcbiAgaWYgKGRhdGFSb3V0ZXJDb250ZXh0ICYmIGRhdGFSb3V0ZXJDb250ZXh0LnN0YXRpYyAmJiBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWNDb250ZXh0ICYmIChtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQgfHwgbWF0Y2gucm91dGUuRXJyb3JCb3VuZGFyeSkpIHtcbiAgICBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWNDb250ZXh0Ll9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkID0gbWF0Y2gucm91dGUuaWQ7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiByb3V0ZUNvbnRleHRcbiAgfSwgY2hpbGRyZW4pO1xufVxuZnVuY3Rpb24gX3JlbmRlck1hdGNoZXMobWF0Y2hlcywgcGFyZW50TWF0Y2hlcywgZGF0YVJvdXRlclN0YXRlLCBmdXR1cmUpIHtcbiAgdmFyIF9kYXRhUm91dGVyU3RhdGUyO1xuICBpZiAocGFyZW50TWF0Y2hlcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50TWF0Y2hlcyA9IFtdO1xuICB9XG4gIGlmIChkYXRhUm91dGVyU3RhdGUgPT09IHZvaWQgMCkge1xuICAgIGRhdGFSb3V0ZXJTdGF0ZSA9IG51bGw7XG4gIH1cbiAgaWYgKGZ1dHVyZSA9PT0gdm9pZCAwKSB7XG4gICAgZnV0dXJlID0gbnVsbDtcbiAgfVxuICBpZiAobWF0Y2hlcyA9PSBudWxsKSB7XG4gICAgdmFyIF9kYXRhUm91dGVyU3RhdGU7XG4gICAgaWYgKChfZGF0YVJvdXRlclN0YXRlID0gZGF0YVJvdXRlclN0YXRlKSAhPSBudWxsICYmIF9kYXRhUm91dGVyU3RhdGUuZXJyb3JzKSB7XG4gICAgICAvLyBEb24ndCBiYWlsIGlmIHdlIGhhdmUgZGF0YSByb3V0ZXIgZXJyb3JzIHNvIHdlIGNhbiByZW5kZXIgdGhlbSBpbiB0aGVcbiAgICAgIC8vIGJvdW5kYXJ5LiAgVXNlIHRoZSBwcmUtbWF0Y2hlZCAob3Igc2hpbW1lZCkgbWF0Y2hlc1xuICAgICAgbWF0Y2hlcyA9IGRhdGFSb3V0ZXJTdGF0ZS5tYXRjaGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgbGV0IHJlbmRlcmVkTWF0Y2hlcyA9IG1hdGNoZXM7XG5cbiAgLy8gSWYgd2UgaGF2ZSBkYXRhIGVycm9ycywgdHJpbSBtYXRjaGVzIHRvIHRoZSBoaWdoZXN0IGVycm9yIGJvdW5kYXJ5XG4gIGxldCBlcnJvcnMgPSAoX2RhdGFSb3V0ZXJTdGF0ZTIgPSBkYXRhUm91dGVyU3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfZGF0YVJvdXRlclN0YXRlMi5lcnJvcnM7XG4gIGlmIChlcnJvcnMgIT0gbnVsbCkge1xuICAgIGxldCBlcnJvckluZGV4ID0gcmVuZGVyZWRNYXRjaGVzLmZpbmRJbmRleChtID0+IG0ucm91dGUuaWQgJiYgKGVycm9ycyA9PSBudWxsID8gdm9pZCAwIDogZXJyb3JzW20ucm91dGUuaWRdKSk7XG4gICAgIShlcnJvckluZGV4ID49IDApID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJDb3VsZCBub3QgZmluZCBhIG1hdGNoaW5nIHJvdXRlIGZvciBlcnJvcnMgb24gcm91dGUgSURzOiBcIiArIE9iamVjdC5rZXlzKGVycm9ycykuam9pbihcIixcIikpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmVuZGVyZWRNYXRjaGVzID0gcmVuZGVyZWRNYXRjaGVzLnNsaWNlKDAsIE1hdGgubWluKHJlbmRlcmVkTWF0Y2hlcy5sZW5ndGgsIGVycm9ySW5kZXggKyAxKSk7XG4gIH1cblxuICAvLyBJZiB3ZSdyZSBpbiBhIHBhcnRpYWwgaHlkcmF0aW9uIG1vZGUsIGRldGVjdCBpZiB3ZSBuZWVkIHRvIHJlbmRlciBkb3duIHRvXG4gIC8vIGEgZ2l2ZW4gSHlkcmF0ZUZhbGxiYWNrIHdoaWxlIHdlIGxvYWQgdGhlIHJlc3Qgb2YgdGhlIGh5ZHJhdGlvbiBkYXRhXG4gIGxldCByZW5kZXJGYWxsYmFjayA9IGZhbHNlO1xuICBsZXQgZmFsbGJhY2tJbmRleCA9IC0xO1xuICBpZiAoZGF0YVJvdXRlclN0YXRlICYmIGZ1dHVyZSAmJiBmdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVuZGVyZWRNYXRjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgbWF0Y2ggPSByZW5kZXJlZE1hdGNoZXNbaV07XG4gICAgICAvLyBUcmFjayB0aGUgZGVlcGVzdCBmYWxsYmFjayB1cCB1bnRpbCB0aGUgZmlyc3Qgcm91dGUgd2l0aG91dCBkYXRhXG4gICAgICBpZiAobWF0Y2gucm91dGUuSHlkcmF0ZUZhbGxiYWNrIHx8IG1hdGNoLnJvdXRlLmh5ZHJhdGVGYWxsYmFja0VsZW1lbnQpIHtcbiAgICAgICAgZmFsbGJhY2tJbmRleCA9IGk7XG4gICAgICB9XG4gICAgICBpZiAobWF0Y2gucm91dGUuaWQpIHtcbiAgICAgICAgbGV0IHtcbiAgICAgICAgICBsb2FkZXJEYXRhLFxuICAgICAgICAgIGVycm9yc1xuICAgICAgICB9ID0gZGF0YVJvdXRlclN0YXRlO1xuICAgICAgICBsZXQgbmVlZHNUb1J1bkxvYWRlciA9IG1hdGNoLnJvdXRlLmxvYWRlciAmJiBsb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9PT0gdW5kZWZpbmVkICYmICghZXJyb3JzIHx8IGVycm9yc1ttYXRjaC5yb3V0ZS5pZF0gPT09IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmIChtYXRjaC5yb3V0ZS5sYXp5IHx8IG5lZWRzVG9SdW5Mb2FkZXIpIHtcbiAgICAgICAgICAvLyBXZSBmb3VuZCB0aGUgZmlyc3Qgcm91dGUgdGhhdCdzIG5vdCByZWFkeSB0byByZW5kZXIgKHdhaXRpbmcgb25cbiAgICAgICAgICAvLyBsYXp5LCBvciBoYXMgYSBsb2FkZXIgdGhhdCBoYXNuJ3QgcnVuIHlldCkuICBGbGFnIHRoYXQgd2UgbmVlZCB0b1xuICAgICAgICAgIC8vIHJlbmRlciBhIGZhbGxiYWNrIGFuZCByZW5kZXIgdXAgdW50aWwgdGhlIGFwcHJvcHJpYXRlIGZhbGxiYWNrXG4gICAgICAgICAgcmVuZGVyRmFsbGJhY2sgPSB0cnVlO1xuICAgICAgICAgIGlmIChmYWxsYmFja0luZGV4ID49IDApIHtcbiAgICAgICAgICAgIHJlbmRlcmVkTWF0Y2hlcyA9IHJlbmRlcmVkTWF0Y2hlcy5zbGljZSgwLCBmYWxsYmFja0luZGV4ICsgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlbmRlcmVkTWF0Y2hlcyA9IFtyZW5kZXJlZE1hdGNoZXNbMF1dO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVuZGVyZWRNYXRjaGVzLnJlZHVjZVJpZ2h0KChvdXRsZXQsIG1hdGNoLCBpbmRleCkgPT4ge1xuICAgIC8vIE9ubHkgZGF0YSByb3V0ZXJzIGhhbmRsZSBlcnJvcnMvZmFsbGJhY2tzXG4gICAgbGV0IGVycm9yO1xuICAgIGxldCBzaG91bGRSZW5kZXJIeWRyYXRlRmFsbGJhY2sgPSBmYWxzZTtcbiAgICBsZXQgZXJyb3JFbGVtZW50ID0gbnVsbDtcbiAgICBsZXQgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCA9IG51bGw7XG4gICAgaWYgKGRhdGFSb3V0ZXJTdGF0ZSkge1xuICAgICAgZXJyb3IgPSBlcnJvcnMgJiYgbWF0Y2gucm91dGUuaWQgPyBlcnJvcnNbbWF0Y2gucm91dGUuaWRdIDogdW5kZWZpbmVkO1xuICAgICAgZXJyb3JFbGVtZW50ID0gbWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IGRlZmF1bHRFcnJvckVsZW1lbnQ7XG4gICAgICBpZiAocmVuZGVyRmFsbGJhY2spIHtcbiAgICAgICAgaWYgKGZhbGxiYWNrSW5kZXggPCAwICYmIGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgd2FybmluZ09uY2UoXCJyb3V0ZS1mYWxsYmFja1wiLCBmYWxzZSwgXCJObyBgSHlkcmF0ZUZhbGxiYWNrYCBlbGVtZW50IHByb3ZpZGVkIHRvIHJlbmRlciBkdXJpbmcgaW5pdGlhbCBoeWRyYXRpb25cIik7XG4gICAgICAgICAgc2hvdWxkUmVuZGVySHlkcmF0ZUZhbGxiYWNrID0gdHJ1ZTtcbiAgICAgICAgICBoeWRyYXRlRmFsbGJhY2tFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChmYWxsYmFja0luZGV4ID09PSBpbmRleCkge1xuICAgICAgICAgIHNob3VsZFJlbmRlckh5ZHJhdGVGYWxsYmFjayA9IHRydWU7XG4gICAgICAgICAgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCA9IG1hdGNoLnJvdXRlLmh5ZHJhdGVGYWxsYmFja0VsZW1lbnQgfHwgbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBsZXQgbWF0Y2hlcyA9IHBhcmVudE1hdGNoZXMuY29uY2F0KHJlbmRlcmVkTWF0Y2hlcy5zbGljZSgwLCBpbmRleCArIDEpKTtcbiAgICBsZXQgZ2V0Q2hpbGRyZW4gPSAoKSA9PiB7XG4gICAgICBsZXQgY2hpbGRyZW47XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBlcnJvckVsZW1lbnQ7XG4gICAgICB9IGVsc2UgaWYgKHNob3VsZFJlbmRlckh5ZHJhdGVGYWxsYmFjaykge1xuICAgICAgICBjaGlsZHJlbiA9IGh5ZHJhdGVGYWxsYmFja0VsZW1lbnQ7XG4gICAgICB9IGVsc2UgaWYgKG1hdGNoLnJvdXRlLkNvbXBvbmVudCkge1xuICAgICAgICAvLyBOb3RlOiBUaGlzIGlzIGEgZGUtb3B0aW1pemVkIHBhdGggc2luY2UgUmVhY3Qgd29uJ3QgcmUtdXNlIHRoZVxuICAgICAgICAvLyBSZWFjdEVsZW1lbnQgc2luY2UgaXQncyBpZGVudGl0eSBjaGFuZ2VzIHdpdGggZWFjaCBuZXdcbiAgICAgICAgLy8gUmVhY3QuY3JlYXRlRWxlbWVudCBjYWxsLiAgV2Uga2VlcCB0aGlzIHNvIGZvbGtzIGNhbiB1c2VcbiAgICAgICAgLy8gYDxSb3V0ZSBDb21wb25lbnQ9ey4uLn0+YCBpbiBgPFJvdXRlcz5gIGJ1dCBnZW5lcmFsbHkgYENvbXBvbmVudGBcbiAgICAgICAgLy8gdXNhZ2UgaXMgb25seSBhZHZpc2VkIGluIGBSb3V0ZXJQcm92aWRlcmAgd2hlbiB3ZSBjYW4gY29udmVydCBpdCB0b1xuICAgICAgICAvLyBgZWxlbWVudGAgYWhlYWQgb2YgdGltZS5cbiAgICAgICAgY2hpbGRyZW4gPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChtYXRjaC5yb3V0ZS5Db21wb25lbnQsIG51bGwpO1xuICAgICAgfSBlbHNlIGlmIChtYXRjaC5yb3V0ZS5lbGVtZW50KSB7XG4gICAgICAgIGNoaWxkcmVuID0gbWF0Y2gucm91dGUuZWxlbWVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoaWxkcmVuID0gb3V0bGV0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlbmRlcmVkUm91dGUsIHtcbiAgICAgICAgbWF0Y2g6IG1hdGNoLFxuICAgICAgICByb3V0ZUNvbnRleHQ6IHtcbiAgICAgICAgICBvdXRsZXQsXG4gICAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgICBpc0RhdGFSb3V0ZTogZGF0YVJvdXRlclN0YXRlICE9IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9KTtcbiAgICB9O1xuICAgIC8vIE9ubHkgd3JhcCBpbiBhbiBlcnJvciBib3VuZGFyeSB3aXRoaW4gZGF0YSByb3V0ZXIgdXNhZ2VzIHdoZW4gd2UgaGF2ZSBhblxuICAgIC8vIEVycm9yQm91bmRhcnkvZXJyb3JFbGVtZW50IG9uIHRoaXMgcm91dGUuICBPdGhlcndpc2UgbGV0IGl0IGJ1YmJsZSB1cCB0b1xuICAgIC8vIGFuIGFuY2VzdG9yIEVycm9yQm91bmRhcnkvZXJyb3JFbGVtZW50XG4gICAgcmV0dXJuIGRhdGFSb3V0ZXJTdGF0ZSAmJiAobWF0Y2gucm91dGUuRXJyb3JCb3VuZGFyeSB8fCBtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQgfHwgaW5kZXggPT09IDApID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVuZGVyRXJyb3JCb3VuZGFyeSwge1xuICAgICAgbG9jYXRpb246IGRhdGFSb3V0ZXJTdGF0ZS5sb2NhdGlvbixcbiAgICAgIHJldmFsaWRhdGlvbjogZGF0YVJvdXRlclN0YXRlLnJldmFsaWRhdGlvbixcbiAgICAgIGNvbXBvbmVudDogZXJyb3JFbGVtZW50LFxuICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgY2hpbGRyZW46IGdldENoaWxkcmVuKCksXG4gICAgICByb3V0ZUNvbnRleHQ6IHtcbiAgICAgICAgb3V0bGV0OiBudWxsLFxuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBpc0RhdGFSb3V0ZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pIDogZ2V0Q2hpbGRyZW4oKTtcbiAgfSwgbnVsbCk7XG59XG52YXIgRGF0YVJvdXRlckhvb2sgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKERhdGFSb3V0ZXJIb29rKSB7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlQmxvY2tlclwiXSA9IFwidXNlQmxvY2tlclwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZVJldmFsaWRhdG9yXCJdID0gXCJ1c2VSZXZhbGlkYXRvclwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZU5hdmlnYXRlU3RhYmxlXCJdID0gXCJ1c2VOYXZpZ2F0ZVwiO1xuICByZXR1cm4gRGF0YVJvdXRlckhvb2s7XG59KERhdGFSb3V0ZXJIb29rIHx8IHt9KTtcbnZhciBEYXRhUm91dGVyU3RhdGVIb29rID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChEYXRhUm91dGVyU3RhdGVIb29rKSB7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VCbG9ja2VyXCJdID0gXCJ1c2VCbG9ja2VyXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VMb2FkZXJEYXRhXCJdID0gXCJ1c2VMb2FkZXJEYXRhXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VBY3Rpb25EYXRhXCJdID0gXCJ1c2VBY3Rpb25EYXRhXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSb3V0ZUVycm9yXCJdID0gXCJ1c2VSb3V0ZUVycm9yXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VOYXZpZ2F0aW9uXCJdID0gXCJ1c2VOYXZpZ2F0aW9uXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSb3V0ZUxvYWRlckRhdGFcIl0gPSBcInVzZVJvdXRlTG9hZGVyRGF0YVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTWF0Y2hlc1wiXSA9IFwidXNlTWF0Y2hlc1wiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUmV2YWxpZGF0b3JcIl0gPSBcInVzZVJldmFsaWRhdG9yXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VOYXZpZ2F0ZVN0YWJsZVwiXSA9IFwidXNlTmF2aWdhdGVcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJvdXRlSWRcIl0gPSBcInVzZVJvdXRlSWRcIjtcbiAgcmV0dXJuIERhdGFSb3V0ZXJTdGF0ZUhvb2s7XG59KERhdGFSb3V0ZXJTdGF0ZUhvb2sgfHwge30pO1xuZnVuY3Rpb24gZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkge1xuICByZXR1cm4gaG9va05hbWUgKyBcIiBtdXN0IGJlIHVzZWQgd2l0aGluIGEgZGF0YSByb3V0ZXIuICBTZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVycy9waWNraW5nLWEtcm91dGVyLlwiO1xufVxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlckNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpO1xuICAhY3R4ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBjdHg7XG59XG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyU3RhdGUoaG9va05hbWUpIHtcbiAgbGV0IHN0YXRlID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgIXN0YXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBzdGF0ZTtcbn1cbmZ1bmN0aW9uIHVzZVJvdXRlQ29udGV4dChob29rTmFtZSkge1xuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gICFyb3V0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gcm91dGU7XG59XG5cbi8vIEludGVybmFsIHZlcnNpb24gd2l0aCBob29rTmFtZS1hd2FyZSBkZWJ1Z2dpbmdcbmZ1bmN0aW9uIHVzZUN1cnJlbnRSb3V0ZUlkKGhvb2tOYW1lKSB7XG4gIGxldCByb3V0ZSA9IHVzZVJvdXRlQ29udGV4dChob29rTmFtZSk7XG4gIGxldCB0aGlzUm91dGUgPSByb3V0ZS5tYXRjaGVzW3JvdXRlLm1hdGNoZXMubGVuZ3RoIC0gMV07XG4gICF0aGlzUm91dGUucm91dGUuaWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBob29rTmFtZSArIFwiIGNhbiBvbmx5IGJlIHVzZWQgb24gcm91dGVzIHRoYXQgY29udGFpbiBhIHVuaXF1ZSBcXFwiaWRcXFwiXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiB0aGlzUm91dGUucm91dGUuaWQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgSUQgZm9yIHRoZSBuZWFyZXN0IGNvbnRleHR1YWwgcm91dGVcbiAqL1xuZnVuY3Rpb24gdXNlUm91dGVJZCgpIHtcbiAgcmV0dXJuIHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVJZCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBuYXZpZ2F0aW9uLCBkZWZhdWx0aW5nIHRvIGFuIFwiaWRsZVwiIG5hdmlnYXRpb24gd2hlblxuICogbm8gbmF2aWdhdGlvbiBpcyBpbiBwcm9ncmVzc1xuICovXG5mdW5jdGlvbiB1c2VOYXZpZ2F0aW9uKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VOYXZpZ2F0aW9uKTtcbiAgcmV0dXJuIHN0YXRlLm5hdmlnYXRpb247XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHJldmFsaWRhdGUgZnVuY3Rpb24gZm9yIG1hbnVhbGx5IHRyaWdnZXJpbmcgcmV2YWxpZGF0aW9uLCBhcyB3ZWxsXG4gKiBhcyB0aGUgY3VycmVudCBzdGF0ZSBvZiBhbnkgbWFudWFsIHJldmFsaWRhdGlvbnNcbiAqL1xuZnVuY3Rpb24gdXNlUmV2YWxpZGF0b3IoKSB7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVJldmFsaWRhdG9yKTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUmV2YWxpZGF0b3IpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIHJldmFsaWRhdGU6IGRhdGFSb3V0ZXJDb250ZXh0LnJvdXRlci5yZXZhbGlkYXRlLFxuICAgIHN0YXRlOiBzdGF0ZS5yZXZhbGlkYXRpb25cbiAgfSksIFtkYXRhUm91dGVyQ29udGV4dC5yb3V0ZXIucmV2YWxpZGF0ZSwgc3RhdGUucmV2YWxpZGF0aW9uXSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aXZlIHJvdXRlIG1hdGNoZXMsIHVzZWZ1bCBmb3IgYWNjZXNzaW5nIGxvYWRlckRhdGEgZm9yXG4gKiBwYXJlbnQvY2hpbGQgcm91dGVzIG9yIHRoZSByb3V0ZSBcImhhbmRsZVwiIHByb3BlcnR5XG4gKi9cbmZ1bmN0aW9uIHVzZU1hdGNoZXMoKSB7XG4gIGxldCB7XG4gICAgbWF0Y2hlcyxcbiAgICBsb2FkZXJEYXRhXG4gIH0gPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VNYXRjaGVzKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gbWF0Y2hlcy5tYXAobSA9PiBVTlNBRkVfY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2gobSwgbG9hZGVyRGF0YSkpLCBbbWF0Y2hlcywgbG9hZGVyRGF0YV0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGxvYWRlciBkYXRhIGZvciB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBsb2FkZXJcbiAqL1xuZnVuY3Rpb24gdXNlTG9hZGVyRGF0YSgpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTG9hZGVyRGF0YSk7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcbiAgaWYgKHN0YXRlLmVycm9ycyAmJiBzdGF0ZS5lcnJvcnNbcm91dGVJZF0gIT0gbnVsbCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJZb3UgY2Fubm90IGB1c2VMb2FkZXJEYXRhYCBpbiBhbiBlcnJvckVsZW1lbnQgKHJvdXRlSWQ6IFwiICsgcm91dGVJZCArIFwiKVwiKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiBzdGF0ZS5sb2FkZXJEYXRhW3JvdXRlSWRdO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGxvYWRlckRhdGEgZm9yIHRoZSBnaXZlbiByb3V0ZUlkXG4gKi9cbmZ1bmN0aW9uIHVzZVJvdXRlTG9hZGVyRGF0YShyb3V0ZUlkKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlTG9hZGVyRGF0YSk7XG4gIHJldHVybiBzdGF0ZS5sb2FkZXJEYXRhW3JvdXRlSWRdO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGFjdGlvbiBkYXRhIGZvciB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBhY3Rpb25cbiAqL1xuZnVuY3Rpb24gdXNlQWN0aW9uRGF0YSgpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlQWN0aW9uRGF0YSk7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcbiAgcmV0dXJuIHN0YXRlLmFjdGlvbkRhdGEgPyBzdGF0ZS5hY3Rpb25EYXRhW3JvdXRlSWRdIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG5lYXJlc3QgYW5jZXN0b3IgUm91dGUgZXJyb3IsIHdoaWNoIGNvdWxkIGJlIGEgbG9hZGVyL2FjdGlvblxuICogZXJyb3Igb3IgYSByZW5kZXIgZXJyb3IuICBUaGlzIGlzIGludGVuZGVkIHRvIGJlIGNhbGxlZCBmcm9tIHlvdXJcbiAqIEVycm9yQm91bmRhcnkvZXJyb3JFbGVtZW50IHRvIGRpc3BsYXkgYSBwcm9wZXIgZXJyb3IgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gdXNlUm91dGVFcnJvcigpIHtcbiAgdmFyIF9zdGF0ZSRlcnJvcnM7XG4gIGxldCBlcnJvciA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVFcnJvckNvbnRleHQpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUVycm9yKTtcbiAgbGV0IHJvdXRlSWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlRXJyb3IpO1xuXG4gIC8vIElmIHRoaXMgd2FzIGEgcmVuZGVyIGVycm9yLCB3ZSBwdXQgaXQgaW4gYSBSb3V0ZUVycm9yIGNvbnRleHQgaW5zaWRlXG4gIC8vIG9mIFJlbmRlckVycm9yQm91bmRhcnlcbiAgaWYgKGVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cblxuICAvLyBPdGhlcndpc2UgbG9vayBmb3IgZXJyb3JzIGZyb20gb3VyIGRhdGEgcm91dGVyIHN0YXRlXG4gIHJldHVybiAoX3N0YXRlJGVycm9ycyA9IHN0YXRlLmVycm9ycykgPT0gbnVsbCA/IHZvaWQgMCA6IF9zdGF0ZSRlcnJvcnNbcm91dGVJZF07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaGFwcHktcGF0aCBkYXRhIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgYDxBd2FpdCAvPmAgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdXNlQXN5bmNWYWx1ZSgpIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLl9kYXRhO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVycm9yIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgYDxBd2FpdCAvPmAgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdXNlQXN5bmNFcnJvcigpIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLl9lcnJvcjtcbn1cbmxldCBibG9ja2VySWQgPSAwO1xuXG4vKipcbiAqIEFsbG93IHRoZSBhcHBsaWNhdGlvbiB0byBibG9jayBuYXZpZ2F0aW9ucyB3aXRoaW4gdGhlIFNQQSBhbmQgcHJlc2VudCB0aGVcbiAqIHVzZXIgYSBjb25maXJtYXRpb24gZGlhbG9nIHRvIGNvbmZpcm0gdGhlIG5hdmlnYXRpb24uICBNb3N0bHkgdXNlZCB0byBhdm9pZFxuICogdXNpbmcgaGFsZi1maWxsZWQgZm9ybSBkYXRhLiAgVGhpcyBkb2VzIG5vdCBoYW5kbGUgaGFyZC1yZWxvYWRzIG9yXG4gKiBjcm9zcy1vcmlnaW4gbmF2aWdhdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIHVzZUJsb2NrZXIoc2hvdWxkQmxvY2spIHtcbiAgbGV0IHtcbiAgICByb3V0ZXIsXG4gICAgYmFzZW5hbWVcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZUJsb2NrZXIpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VCbG9ja2VyKTtcbiAgbGV0IFtibG9ja2VyS2V5LCBzZXRCbG9ja2VyS2V5XSA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xuICBsZXQgYmxvY2tlckZ1bmN0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soYXJnID0+IHtcbiAgICBpZiAodHlwZW9mIHNob3VsZEJsb2NrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiAhIXNob3VsZEJsb2NrO1xuICAgIH1cbiAgICBpZiAoYmFzZW5hbWUgPT09IFwiL1wiKSB7XG4gICAgICByZXR1cm4gc2hvdWxkQmxvY2soYXJnKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGV5IHByb3ZpZGVkIHVzIGEgZnVuY3Rpb24gYW5kIHdlJ3ZlIGdvdCBhbiBhY3RpdmUgYmFzZW5hbWUsIHN0cmlwXG4gICAgLy8gaXQgZnJvbSB0aGUgbG9jYXRpb25zIHdlIGV4cG9zZSB0byB0aGUgdXNlciB0byBtYXRjaCB0aGUgYmVoYXZpb3Igb2ZcbiAgICAvLyB1c2VMb2NhdGlvblxuICAgIGxldCB7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSA9IGFyZztcbiAgICByZXR1cm4gc2hvdWxkQmxvY2soe1xuICAgICAgY3VycmVudExvY2F0aW9uOiBfZXh0ZW5kcyh7fSwgY3VycmVudExvY2F0aW9uLCB7XG4gICAgICAgIHBhdGhuYW1lOiBzdHJpcEJhc2VuYW1lKGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSksXG4gICAgICBuZXh0TG9jYXRpb246IF9leHRlbmRzKHt9LCBuZXh0TG9jYXRpb24sIHtcbiAgICAgICAgcGF0aG5hbWU6IHN0cmlwQmFzZW5hbWUobmV4dExvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgbmV4dExvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KSxcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9KTtcbiAgfSwgW2Jhc2VuYW1lLCBzaG91bGRCbG9ja10pO1xuXG4gIC8vIFRoaXMgZWZmZWN0IGlzIGluIGNoYXJnZSBvZiBibG9ja2VyIGtleSBhc3NpZ25tZW50IGFuZCBkZWxldGlvbiAod2hpY2ggaXNcbiAgLy8gdGlnaHRseSBjb3VwbGVkIHRvIHRoZSBrZXkpXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IGtleSA9IFN0cmluZygrK2Jsb2NrZXJJZCk7XG4gICAgc2V0QmxvY2tlcktleShrZXkpO1xuICAgIHJldHVybiAoKSA9PiByb3V0ZXIuZGVsZXRlQmxvY2tlcihrZXkpO1xuICB9LCBbcm91dGVyXSk7XG5cbiAgLy8gVGhpcyBlZmZlY3QgaGFuZGxlcyBhc3NpZ25pbmcgdGhlIGJsb2NrZXJGdW5jdGlvbi4gIFRoaXMgaXMgdG8gaGFuZGxlXG4gIC8vIHVuc3RhYmxlIGJsb2NrZXIgZnVuY3Rpb24gaWRlbnRpdGllcywgYW5kIGhhcHBlbnMgb25seSBhZnRlciB0aGUgcHJpb3JcbiAgLy8gZWZmZWN0IHNvIHdlIGRvbid0IGdldCBhbiBvcnBoYW5lZCBibG9ja2VyRnVuY3Rpb24gaW4gdGhlIHJvdXRlciB3aXRoIGFcbiAgLy8ga2V5IG9mIFwiXCIuICBVbnRpbCB0aGVuIHdlIGp1c3QgaGF2ZSB0aGUgSURMRV9CTE9DS0VSLlxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChibG9ja2VyS2V5ICE9PSBcIlwiKSB7XG4gICAgICByb3V0ZXIuZ2V0QmxvY2tlcihibG9ja2VyS2V5LCBibG9ja2VyRnVuY3Rpb24pO1xuICAgIH1cbiAgfSwgW3JvdXRlciwgYmxvY2tlcktleSwgYmxvY2tlckZ1bmN0aW9uXSk7XG5cbiAgLy8gUHJlZmVyIHRoZSBibG9ja2VyIGZyb20gYHN0YXRlYCBub3QgYHJvdXRlci5zdGF0ZWAgc2luY2UgRGF0YVJvdXRlckNvbnRleHRcbiAgLy8gaXMgbWVtb2l6ZWQgc28gdGhpcyBlbnN1cmVzIHdlIHVwZGF0ZSBvbiBibG9ja2VyIHN0YXRlIHVwZGF0ZXNcbiAgcmV0dXJuIGJsb2NrZXJLZXkgJiYgc3RhdGUuYmxvY2tlcnMuaGFzKGJsb2NrZXJLZXkpID8gc3RhdGUuYmxvY2tlcnMuZ2V0KGJsb2NrZXJLZXkpIDogSURMRV9CTE9DS0VSO1xufVxuXG4vKipcbiAqIFN0YWJsZSB2ZXJzaW9uIG9mIHVzZU5hdmlnYXRlIHRoYXQgaXMgdXNlZCB3aGVuIHdlIGFyZSBpbiB0aGUgY29udGV4dCBvZlxuICogYSBSb3V0ZXJQcm92aWRlci5cbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGVTdGFibGUoKSB7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VOYXZpZ2F0ZVN0YWJsZSk7XG4gIGxldCBpZCA9IHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTmF2aWdhdGVTdGFibGUpO1xuICBsZXQgYWN0aXZlUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgYWN0aXZlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICB9KTtcbiAgbGV0IG5hdmlnYXRlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRvLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhhY3RpdmVSZWYuY3VycmVudCwgbmF2aWdhdGVFZmZlY3RXYXJuaW5nKSA6IHZvaWQgMDtcblxuICAgIC8vIFNob3J0IGNpcmN1aXQgaGVyZSBzaW5jZSBpZiB0aGlzIGhhcHBlbnMgb24gZmlyc3QgcmVuZGVyIHRoZSBuYXZpZ2F0ZVxuICAgIC8vIGlzIHVzZWxlc3MgYmVjYXVzZSB3ZSBoYXZlbid0IHdpcmVkIHVwIG91ciByb3V0ZXIgc3Vic2NyaWJlciB5ZXRcbiAgICBpZiAoIWFjdGl2ZVJlZi5jdXJyZW50KSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcm91dGVyLm5hdmlnYXRlKHRvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm91dGVyLm5hdmlnYXRlKHRvLCBfZXh0ZW5kcyh7XG4gICAgICAgIGZyb21Sb3V0ZUlkOiBpZFxuICAgICAgfSwgb3B0aW9ucykpO1xuICAgIH1cbiAgfSwgW3JvdXRlciwgaWRdKTtcbiAgcmV0dXJuIG5hdmlnYXRlO1xufVxuY29uc3QgYWxyZWFkeVdhcm5lZCA9IHt9O1xuZnVuY3Rpb24gd2FybmluZ09uY2Uoa2V5LCBjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCAmJiAhYWxyZWFkeVdhcm5lZFtrZXldKSB7XG4gICAgYWxyZWFkeVdhcm5lZFtrZXldID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgbWVzc2FnZSkgOiB2b2lkIDA7XG4gIH1cbn1cblxuLyoqXG4gIFdlYnBhY2sgKyBSZWFjdCAxNyBmYWlscyB0byBjb21waWxlIG9uIGFueSBvZiB0aGUgZm9sbG93aW5nIGJlY2F1c2Ugd2VicGFja1xuICBjb21wbGFpbnMgdGhhdCBgc3RhcnRUcmFuc2l0aW9uYCBkb2Vzbid0IGV4aXN0IGluIGBSZWFjdGA6XG4gICogaW1wb3J0IHsgc3RhcnRUcmFuc2l0aW9uIH0gZnJvbSBcInJlYWN0XCJcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QgPyBSZWFjdC5zdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3RbXCJzdGFydFRyYW5zaXRpb25cIl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgTW92aW5nIGl0IHRvIGEgY29uc3RhbnQgc3VjaCBhcyB0aGUgZm9sbG93aW5nIHNvbHZlcyB0aGUgV2VicGFjay9SZWFjdCAxNyBpc3N1ZTpcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIGNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuICAgIFNUQVJUX1RSQU5TSVRJT04gaW4gUmVhY3QgPyBSZWFjdFtTVEFSVF9UUkFOU0lUSU9OXSgoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcblxuICBIb3dldmVyLCB0aGF0IGludHJvZHVjZXMgd2VicGFjay90ZXJzZXIgbWluaWZpY2F0aW9uIGlzc3VlcyBpbiBwcm9kdWN0aW9uIGJ1aWxkc1xuICBpbiBSZWFjdCAxOCB3aGVyZSBtaW5pZmljYXRpb24vb2JmdXNjYXRpb24gZW5kcyB1cCByZW1vdmluZyB0aGUgY2FsbCBvZlxuICBSZWFjdC5zdGFydFRyYW5zaXRpb24gZW50aXJlbHkgZnJvbSB0aGUgZmlyc3QgaGFsZiBvZiB0aGUgdGVybmFyeS4gIEdyYWJiaW5nXG4gIHRoaXMgZXhwb3J0ZWQgcmVmZXJlbmNlIG9uY2UgdXAgZnJvbnQgcmVzb2x2ZXMgdGhhdCBpc3N1ZS5cblxuICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZWFjdC1yb3V0ZXIvaXNzdWVzLzEwNTc5XG4qL1xuY29uc3QgU1RBUlRfVFJBTlNJVElPTiA9IFwic3RhcnRUcmFuc2l0aW9uXCI7XG5jb25zdCBzdGFydFRyYW5zaXRpb25JbXBsID0gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl07XG5cbi8qKlxuICogR2l2ZW4gYSBSZW1peCBSb3V0ZXIgaW5zdGFuY2UsIHJlbmRlciB0aGUgYXBwcm9wcmlhdGUgVUlcbiAqL1xuZnVuY3Rpb24gUm91dGVyUHJvdmlkZXIoX3JlZikge1xuICBsZXQge1xuICAgIGZhbGxiYWNrRWxlbWVudCxcbiAgICByb3V0ZXIsXG4gICAgZnV0dXJlXG4gIH0gPSBfcmVmO1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUocm91dGVyLnN0YXRlKTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIGlmICh2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCkge1xuICAgICAgc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgICB9XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuXG4gIC8vIE5lZWQgdG8gdXNlIGEgbGF5b3V0IGVmZmVjdCBoZXJlIHNvIHdlIGFyZSBzdWJzY3JpYmVkIGVhcmx5IGVub3VnaCB0b1xuICAvLyBwaWNrIHVwIG9uIGFueSByZW5kZXItZHJpdmVuIHJlZGlyZWN0cy9uYXZpZ2F0aW9ucyAodXNlRWZmZWN0LzxOYXZpZ2F0ZT4pXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiByb3V0ZXIuc3Vic2NyaWJlKHNldFN0YXRlKSwgW3JvdXRlciwgc2V0U3RhdGVdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxsYmFja0VsZW1lbnQgPT0gbnVsbCB8fCAhcm91dGVyLmZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uLCBcImA8Um91dGVyUHJvdmlkZXIgZmFsbGJhY2tFbGVtZW50PmAgaXMgZGVwcmVjYXRlZCB3aGVuIHVzaW5nIFwiICsgXCJgdjdfcGFydGlhbEh5ZHJhdGlvbmAsIHVzZSBhIGBIeWRyYXRlRmFsbGJhY2tgIGNvbXBvbmVudCBpbnN0ZWFkXCIpIDogdm9pZCAwO1xuICAgIC8vIE9ubHkgbG9nIHRoaXMgb25jZSBvbiBpbml0aWFsIG1vdW50XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbXSk7XG4gIGxldCBuYXZpZ2F0b3IgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgY3JlYXRlSHJlZjogcm91dGVyLmNyZWF0ZUhyZWYsXG4gICAgICBlbmNvZGVMb2NhdGlvbjogcm91dGVyLmVuY29kZUxvY2F0aW9uLFxuICAgICAgZ286IG4gPT4gcm91dGVyLm5hdmlnYXRlKG4pLFxuICAgICAgcHVzaDogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KSxcbiAgICAgIHJlcGxhY2U6ICh0bywgc3RhdGUsIG9wdHMpID0+IHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSlcbiAgICB9O1xuICB9LCBbcm91dGVyXSk7XG4gIGxldCBiYXNlbmFtZSA9IHJvdXRlci5iYXNlbmFtZSB8fCBcIi9cIjtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIHJvdXRlcixcbiAgICBuYXZpZ2F0b3IsXG4gICAgc3RhdGljOiBmYWxzZSxcbiAgICBiYXNlbmFtZVxuICB9KSwgW3JvdXRlciwgbmF2aWdhdG9yLCBiYXNlbmFtZV0pO1xuXG4gIC8vIFRoZSBmcmFnbWVudCBhbmQge251bGx9IGhlcmUgYXJlIGltcG9ydGFudCEgIFdlIG5lZWQgdGhlbSB0byBrZWVwIFJlYWN0IDE4J3NcbiAgLy8gdXNlSWQgaGFwcHkgd2hlbiB3ZSBhcmUgc2VydmVyLXJlbmRlcmluZyBzaW5jZSB3ZSBtYXkgaGF2ZSBhIDxzY3JpcHQ+IGhlcmVcbiAgLy8gY29udGFpbmluZyB0aGUgaHlkcmF0ZWQgc2VydmVyLXNpZGUgc3RhdGljQ29udGV4dCAoZnJvbSBTdGF0aWNSb3V0ZXJQcm92aWRlcikuXG4gIC8vIHVzZUlkIHJlbGllcyBvbiB0aGUgY29tcG9uZW50IHRyZWUgc3RydWN0dXJlIHRvIGdlbmVyYXRlIGRldGVybWluaXN0aWMgaWQnc1xuICAvLyBzbyB3ZSBuZWVkIHRvIGVuc3VyZSBpdCByZW1haW5zIHRoZSBzYW1lIG9uIHRoZSBjbGllbnQgZXZlbiB0aG91Z2hcbiAgLy8gd2UgZG9uJ3QgbmVlZCB0aGUgPHNjcmlwdD4gdGFnXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YVJvdXRlckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogZGF0YVJvdXRlckNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YVJvdXRlclN0YXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBzdGF0ZVxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5oaXN0b3J5QWN0aW9uLFxuICAgIG5hdmlnYXRvcjogbmF2aWdhdG9yLFxuICAgIGZ1dHVyZToge1xuICAgICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IHJvdXRlci5mdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGhcbiAgICB9XG4gIH0sIHN0YXRlLmluaXRpYWxpemVkIHx8IHJvdXRlci5mdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXMsIHtcbiAgICByb3V0ZXM6IHJvdXRlci5yb3V0ZXMsXG4gICAgZnV0dXJlOiByb3V0ZXIuZnV0dXJlLFxuICAgIHN0YXRlOiBzdGF0ZVxuICB9KSA6IGZhbGxiYWNrRWxlbWVudCkpKSwgbnVsbCk7XG59XG5mdW5jdGlvbiBEYXRhUm91dGVzKF9yZWYyKSB7XG4gIGxldCB7XG4gICAgcm91dGVzLFxuICAgIGZ1dHVyZSxcbiAgICBzdGF0ZVxuICB9ID0gX3JlZjI7XG4gIHJldHVybiB1c2VSb3V0ZXNJbXBsKHJvdXRlcywgdW5kZWZpbmVkLCBzdGF0ZSwgZnV0dXJlKTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIHRoYXQgc3RvcmVzIGFsbCBlbnRyaWVzIGluIG1lbW9yeS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlci1jb21wb25lbnRzL21lbW9yeS1yb3V0ZXJcbiAqL1xuZnVuY3Rpb24gTWVtb3J5Um91dGVyKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgaW5pdGlhbEVudHJpZXMsXG4gICAgaW5pdGlhbEluZGV4LFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjM7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXgsXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnksIHNldFN0YXRlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeSxcbiAgICBmdXR1cmU6IGZ1dHVyZVxuICB9KTtcbn1cbi8qKlxuICogQ2hhbmdlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBOb3RlOiBUaGlzIEFQSSBpcyBtb3N0bHkgdXNlZnVsIGluIFJlYWN0LkNvbXBvbmVudCBzdWJjbGFzc2VzIHRoYXQgYXJlIG5vdFxuICogYWJsZSB0byB1c2UgaG9va3MuIEluIGZ1bmN0aW9uYWwgY29tcG9uZW50cywgd2UgcmVjb21tZW5kIHlvdSB1c2UgdGhlXG4gKiBgdXNlTmF2aWdhdGVgIGhvb2sgaW5zdGVhZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gTmF2aWdhdGUoX3JlZjQpIHtcbiAgbGV0IHtcbiAgICB0byxcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHJlbGF0aXZlXG4gIH0gPSBfcmVmNDtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2ZcbiAgLy8gdGhlIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCI8TmF2aWdhdGU+IG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgZnV0dXJlLFxuICAgIHN0YXRpYzogaXNTdGF0aWNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyghaXNTdGF0aWMsIFwiPE5hdmlnYXRlPiBtdXN0IG5vdCBiZSB1c2VkIG9uIHRoZSBpbml0aWFsIHJlbmRlciBpbiBhIDxTdGF0aWNSb3V0ZXI+LiBcIiArIFwiVGhpcyBpcyBhIG5vLW9wLCBidXQgeW91IHNob3VsZCBtb2RpZnkgeW91ciBjb2RlIHNvIHRoZSA8TmF2aWdhdGU+IGlzIFwiICsgXCJvbmx5IGV2ZXIgcmVuZGVyZWQgaW4gcmVzcG9uc2UgdG8gc29tZSB1c2VyIGludGVyYWN0aW9uIG9yIHN0YXRlIGNoYW5nZS5cIikgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuXG4gIC8vIFJlc29sdmUgdGhlIHBhdGggb3V0c2lkZSBvZiB0aGUgZWZmZWN0IHNvIHRoYXQgd2hlbiBlZmZlY3RzIHJ1biB0d2ljZSBpblxuICAvLyBTdHJpY3RNb2RlIHRoZXkgbmF2aWdhdGUgdG8gdGhlIHNhbWUgcGxhY2VcbiAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8sIFVOU0FGRV9nZXRSZXNvbHZlVG9NYXRjaGVzKG1hdGNoZXMsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCksIGxvY2F0aW9uUGF0aG5hbWUsIHJlbGF0aXZlID09PSBcInBhdGhcIik7XG4gIGxldCBqc29uUGF0aCA9IEpTT04uc3RyaW5naWZ5KHBhdGgpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4gbmF2aWdhdGUoSlNPTi5wYXJzZShqc29uUGF0aCksIHtcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHJlbGF0aXZlXG4gIH0pLCBbbmF2aWdhdGUsIGpzb25QYXRoLCByZWxhdGl2ZSwgcmVwbGFjZSwgc3RhdGVdKTtcbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIFJlbmRlcnMgdGhlIGNoaWxkIHJvdXRlJ3MgZWxlbWVudCwgaWYgdGhlcmUgaXMgb25lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9vdXRsZXRcbiAqL1xuZnVuY3Rpb24gT3V0bGV0KHByb3BzKSB7XG4gIHJldHVybiB1c2VPdXRsZXQocHJvcHMuY29udGV4dCk7XG59XG4vKipcbiAqIERlY2xhcmVzIGFuIGVsZW1lbnQgdGhhdCBzaG91bGQgYmUgcmVuZGVyZWQgYXQgYSBjZXJ0YWluIFVSTCBwYXRoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9yb3V0ZVxuICovXG5mdW5jdGlvbiBSb3V0ZShfcHJvcHMpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJBIDxSb3V0ZT4gaXMgb25seSBldmVyIHRvIGJlIHVzZWQgYXMgdGhlIGNoaWxkIG9mIDxSb3V0ZXM+IGVsZW1lbnQsIFwiICsgXCJuZXZlciByZW5kZXJlZCBkaXJlY3RseS4gUGxlYXNlIHdyYXAgeW91ciA8Um91dGU+IGluIGEgPFJvdXRlcz4uXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgO1xufVxuLyoqXG4gKiBQcm92aWRlcyBsb2NhdGlvbiBjb250ZXh0IGZvciB0aGUgcmVzdCBvZiB0aGUgYXBwLlxuICpcbiAqIE5vdGU6IFlvdSB1c3VhbGx5IHdvbid0IHJlbmRlciBhIGA8Um91dGVyPmAgZGlyZWN0bHkuIEluc3RlYWQsIHlvdSdsbCByZW5kZXIgYVxuICogcm91dGVyIHRoYXQgaXMgbW9yZSBzcGVjaWZpYyB0byB5b3VyIGVudmlyb25tZW50IHN1Y2ggYXMgYSBgPEJyb3dzZXJSb3V0ZXI+YFxuICogaW4gd2ViIGJyb3dzZXJzIG9yIGEgYDxTdGF0aWNSb3V0ZXI+YCBmb3Igc2VydmVyIHJlbmRlcmluZy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlci1jb21wb25lbnRzL3JvdXRlclxuICovXG5mdW5jdGlvbiBSb3V0ZXIoX3JlZjUpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWVQcm9wID0gXCIvXCIsXG4gICAgY2hpbGRyZW4gPSBudWxsLFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvblByb3AsXG4gICAgbmF2aWdhdGlvblR5cGUgPSBBY3Rpb24uUG9wLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IHN0YXRpY1Byb3AgPSBmYWxzZSxcbiAgICBmdXR1cmVcbiAgfSA9IF9yZWY1O1xuICAhIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90IHJlbmRlciBhIDxSb3V0ZXI+IGluc2lkZSBhbm90aGVyIDxSb3V0ZXI+LlwiICsgXCIgWW91IHNob3VsZCBuZXZlciBoYXZlIG1vcmUgdGhhbiBvbmUgaW4geW91ciBhcHAuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgLy8gUHJlc2VydmUgdHJhaWxpbmcgc2xhc2hlcyBvbiBiYXNlbmFtZSwgc28gd2UgY2FuIGxldCB0aGUgdXNlciBjb250cm9sXG4gIC8vIHRoZSBlbmZvcmNlbWVudCBvZiB0cmFpbGluZyBzbGFzaGVzIHRocm91Z2hvdXQgdGhlIGFwcFxuICBsZXQgYmFzZW5hbWUgPSBiYXNlbmFtZVByb3AucmVwbGFjZSgvXlxcLyovLCBcIi9cIik7XG4gIGxldCBuYXZpZ2F0aW9uQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3IsXG4gICAgc3RhdGljOiBzdGF0aWNQcm9wLFxuICAgIGZ1dHVyZTogX2V4dGVuZHMoe1xuICAgICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IGZhbHNlXG4gICAgfSwgZnV0dXJlKVxuICB9KSwgW2Jhc2VuYW1lLCBmdXR1cmUsIG5hdmlnYXRvciwgc3RhdGljUHJvcF0pO1xuICBpZiAodHlwZW9mIGxvY2F0aW9uUHJvcCA9PT0gXCJzdHJpbmdcIikge1xuICAgIGxvY2F0aW9uUHJvcCA9IHBhcnNlUGF0aChsb2NhdGlvblByb3ApO1xuICB9XG4gIGxldCB7XG4gICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiLFxuICAgIHN0YXRlID0gbnVsbCxcbiAgICBrZXkgPSBcImRlZmF1bHRcIlxuICB9ID0gbG9jYXRpb25Qcm9wO1xuICBsZXQgbG9jYXRpb25Db250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgbGV0IHRyYWlsaW5nUGF0aG5hbWUgPSBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSk7XG4gICAgaWYgKHRyYWlsaW5nUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBsb2NhdGlvbjoge1xuICAgICAgICBwYXRobmFtZTogdHJhaWxpbmdQYXRobmFtZSxcbiAgICAgICAgc2VhcmNoLFxuICAgICAgICBoYXNoLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAga2V5XG4gICAgICB9LFxuICAgICAgbmF2aWdhdGlvblR5cGVcbiAgICB9O1xuICB9LCBbYmFzZW5hbWUsIHBhdGhuYW1lLCBzZWFyY2gsIGhhc2gsIHN0YXRlLCBrZXksIG5hdmlnYXRpb25UeXBlXSk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGxvY2F0aW9uQ29udGV4dCAhPSBudWxsLCBcIjxSb3V0ZXIgYmFzZW5hbWU9XFxcIlwiICsgYmFzZW5hbWUgKyBcIlxcXCI+IGlzIG5vdCBhYmxlIHRvIG1hdGNoIHRoZSBVUkwgXCIgKyAoXCJcXFwiXCIgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2ggKyBcIlxcXCIgYmVjYXVzZSBpdCBkb2VzIG5vdCBzdGFydCB3aXRoIHRoZSBcIikgKyBcImJhc2VuYW1lLCBzbyB0aGUgPFJvdXRlcj4gd29uJ3QgcmVuZGVyIGFueXRoaW5nLlwiKSA6IHZvaWQgMDtcbiAgaWYgKGxvY2F0aW9uQ29udGV4dCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE5hdmlnYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IG5hdmlnYXRpb25Db250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExvY2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICB2YWx1ZTogbG9jYXRpb25Db250ZXh0XG4gIH0pKTtcbn1cbi8qKlxuICogQSBjb250YWluZXIgZm9yIGEgbmVzdGVkIHRyZWUgb2YgYDxSb3V0ZT5gIGVsZW1lbnRzIHRoYXQgcmVuZGVycyB0aGUgYnJhbmNoXG4gKiB0aGF0IGJlc3QgbWF0Y2hlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvcm91dGVzXG4gKi9cbmZ1bmN0aW9uIFJvdXRlcyhfcmVmNikge1xuICBsZXQge1xuICAgIGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uXG4gIH0gPSBfcmVmNjtcbiAgcmV0dXJuIHVzZVJvdXRlcyhjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4pLCBsb2NhdGlvbik7XG59XG4vKipcbiAqIENvbXBvbmVudCB0byB1c2UgZm9yIHJlbmRlcmluZyBsYXppbHkgbG9hZGVkIGRhdGEgZnJvbSByZXR1cm5pbmcgZGVmZXIoKVxuICogaW4gYSBsb2FkZXIgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gQXdhaXQoX3JlZjcpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlbixcbiAgICBlcnJvckVsZW1lbnQsXG4gICAgcmVzb2x2ZVxuICB9ID0gX3JlZjc7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdEVycm9yQm91bmRhcnksIHtcbiAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgIGVycm9yRWxlbWVudDogZXJyb3JFbGVtZW50XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlc29sdmVBd2FpdCwgbnVsbCwgY2hpbGRyZW4pKTtcbn1cbnZhciBBd2FpdFJlbmRlclN0YXR1cyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoQXdhaXRSZW5kZXJTdGF0dXMpIHtcbiAgQXdhaXRSZW5kZXJTdGF0dXNbQXdhaXRSZW5kZXJTdGF0dXNbXCJwZW5kaW5nXCJdID0gMF0gPSBcInBlbmRpbmdcIjtcbiAgQXdhaXRSZW5kZXJTdGF0dXNbQXdhaXRSZW5kZXJTdGF0dXNbXCJzdWNjZXNzXCJdID0gMV0gPSBcInN1Y2Nlc3NcIjtcbiAgQXdhaXRSZW5kZXJTdGF0dXNbQXdhaXRSZW5kZXJTdGF0dXNbXCJlcnJvclwiXSA9IDJdID0gXCJlcnJvclwiO1xuICByZXR1cm4gQXdhaXRSZW5kZXJTdGF0dXM7XG59KEF3YWl0UmVuZGVyU3RhdHVzIHx8IHt9KTtcbmNvbnN0IG5ldmVyU2V0dGxlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgoKSA9PiB7fSk7XG5jbGFzcyBBd2FpdEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZXJyb3I6IG51bGxcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3JcbiAgICB9O1xuICB9XG4gIGNvbXBvbmVudERpZENhdGNoKGVycm9yLCBlcnJvckluZm8pIHtcbiAgICBjb25zb2xlLmVycm9yKFwiPEF3YWl0PiBjYXVnaHQgdGhlIGZvbGxvd2luZyBlcnJvciBkdXJpbmcgcmVuZGVyXCIsIGVycm9yLCBlcnJvckluZm8pO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBsZXQge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBlcnJvckVsZW1lbnQsXG4gICAgICByZXNvbHZlXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IHByb21pc2UgPSBudWxsO1xuICAgIGxldCBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nO1xuICAgIGlmICghKHJlc29sdmUgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgICAgLy8gRGlkbid0IGdldCBhIHByb21pc2UgLSBwcm92aWRlIGFzIGEgcmVzb2x2ZWQgcHJvbWlzZVxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2VzcztcbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9kYXRhXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuZXJyb3IpIHtcbiAgICAgIC8vIENhdWdodCBhIHJlbmRlciBlcnJvciwgcHJvdmlkZSBpdCBhcyBhIHJlamVjdGVkIHByb21pc2VcbiAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yO1xuICAgICAgbGV0IHJlbmRlckVycm9yID0gdGhpcy5zdGF0ZS5lcnJvcjtcbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlamVjdCgpLmNhdGNoKCgpID0+IHt9KTsgLy8gQXZvaWQgdW5oYW5kbGVkIHJlamVjdGlvbiB3YXJuaW5nc1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiByZW5kZXJFcnJvclxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChyZXNvbHZlLl90cmFja2VkKSB7XG4gICAgICAvLyBBbHJlYWR5IHRyYWNrZWQgcHJvbWlzZSAtIGNoZWNrIGNvbnRlbnRzXG4gICAgICBwcm9taXNlID0gcmVzb2x2ZTtcbiAgICAgIHN0YXR1cyA9IHByb21pc2UuX2Vycm9yICE9PSB1bmRlZmluZWQgPyBBd2FpdFJlbmRlclN0YXR1cy5lcnJvciA6IHByb21pc2UuX2RhdGEgIT09IHVuZGVmaW5lZCA/IEF3YWl0UmVuZGVyU3RhdHVzLnN1Y2Nlc3MgOiBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSYXcgKHVudHJhY2tlZCkgcHJvbWlzZSAtIHRyYWNrIGl0XG4gICAgICBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc29sdmUsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICAgIH0pO1xuICAgICAgcHJvbWlzZSA9IHJlc29sdmUudGhlbihkYXRhID0+IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl9kYXRhXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBkYXRhXG4gICAgICB9KSwgZXJyb3IgPT4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc29sdmUsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBlcnJvclxuICAgICAgfSkpO1xuICAgIH1cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvciAmJiBwcm9taXNlLl9lcnJvciBpbnN0YW5jZW9mIEFib3J0ZWREZWZlcnJlZEVycm9yKSB7XG4gICAgICAvLyBGcmVlemUgdGhlIFVJIGJ5IHRocm93aW5nIGEgbmV2ZXIgcmVzb2x2ZWQgcHJvbWlzZVxuICAgICAgdGhyb3cgbmV2ZXJTZXR0bGVkUHJvbWlzZTtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgJiYgIWVycm9yRWxlbWVudCkge1xuICAgICAgLy8gTm8gZXJyb3JFbGVtZW50LCB0aHJvdyB0byB0aGUgbmVhcmVzdCByb3V0ZS1sZXZlbCBlcnJvciBib3VuZGFyeVxuICAgICAgdGhyb3cgcHJvbWlzZS5fZXJyb3I7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yKSB7XG4gICAgICAvLyBSZW5kZXIgdmlhIG91ciBlcnJvckVsZW1lbnRcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb21pc2UsXG4gICAgICAgIGNoaWxkcmVuOiBlcnJvckVsZW1lbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzKSB7XG4gICAgICAvLyBSZW5kZXIgY2hpbGRyZW4gd2l0aCByZXNvbHZlZCB2YWx1ZVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEF3YWl0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvbWlzZSxcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBUaHJvdyB0byB0aGUgc3VzcGVuc2UgYm91bmRhcnlcbiAgICB0aHJvdyBwcm9taXNlO1xuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEluZGlyZWN0aW9uIHRvIGxldmVyYWdlIHVzZUFzeW5jVmFsdWUgZm9yIGEgcmVuZGVyLXByb3AgQVBJIG9uIGA8QXdhaXQ+YFxuICovXG5mdW5jdGlvbiBSZXNvbHZlQXdhaXQoX3JlZjgpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjg7XG4gIGxldCBkYXRhID0gdXNlQXN5bmNWYWx1ZSgpO1xuICBsZXQgdG9SZW5kZXIgPSB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IGNoaWxkcmVuKGRhdGEpIDogY2hpbGRyZW47XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgdG9SZW5kZXIpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBVVElMU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIENyZWF0ZXMgYSByb3V0ZSBjb25maWcgZnJvbSBhIFJlYWN0IFwiY2hpbGRyZW5cIiBvYmplY3QsIHdoaWNoIGlzIHVzdWFsbHlcbiAqIGVpdGhlciBhIGA8Um91dGU+YCBlbGVtZW50IG9yIGFuIGFycmF5IG9mIHRoZW0uIFVzZWQgaW50ZXJuYWxseSBieVxuICogYDxSb3V0ZXM+YCB0byBjcmVhdGUgYSByb3V0ZSBjb25maWcgZnJvbSBpdHMgY2hpbGRyZW4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9jcmVhdGUtcm91dGVzLWZyb20tY2hpbGRyZW5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRQYXRoKSB7XG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gW107XG4gIH1cbiAgbGV0IHJvdXRlcyA9IFtdO1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCAoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgIC8vIElnbm9yZSBub24tZWxlbWVudHMuIFRoaXMgYWxsb3dzIHBlb3BsZSB0byBtb3JlIGVhc2lseSBpbmxpbmVcbiAgICAgIC8vIGNvbmRpdGlvbmFscyBpbiB0aGVpciByb3V0ZSBjb25maWcuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB0cmVlUGF0aCA9IFsuLi5wYXJlbnRQYXRoLCBpbmRleF07XG4gICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gUmVhY3QuRnJhZ21lbnQpIHtcbiAgICAgIC8vIFRyYW5zcGFyZW50bHkgc3VwcG9ydCBSZWFjdC5GcmFnbWVudCBhbmQgaXRzIGNoaWxkcmVuLlxuICAgICAgcm91dGVzLnB1c2guYXBwbHkocm91dGVzLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oZWxlbWVudC5wcm9wcy5jaGlsZHJlbiwgdHJlZVBhdGgpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgIShlbGVtZW50LnR5cGUgPT09IFJvdXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiW1wiICsgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09IFwic3RyaW5nXCIgPyBlbGVtZW50LnR5cGUgOiBlbGVtZW50LnR5cGUubmFtZSkgKyBcIl0gaXMgbm90IGEgPFJvdXRlPiBjb21wb25lbnQuIEFsbCBjb21wb25lbnQgY2hpbGRyZW4gb2YgPFJvdXRlcz4gbXVzdCBiZSBhIDxSb3V0ZT4gb3IgPFJlYWN0LkZyYWdtZW50PlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEoIWVsZW1lbnQucHJvcHMuaW5kZXggfHwgIWVsZW1lbnQucHJvcHMuY2hpbGRyZW4pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJBbiBpbmRleCByb3V0ZSBjYW5ub3QgaGF2ZSBjaGlsZCByb3V0ZXMuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbGV0IHJvdXRlID0ge1xuICAgICAgaWQ6IGVsZW1lbnQucHJvcHMuaWQgfHwgdHJlZVBhdGguam9pbihcIi1cIiksXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBlbGVtZW50LnByb3BzLmNhc2VTZW5zaXRpdmUsXG4gICAgICBlbGVtZW50OiBlbGVtZW50LnByb3BzLmVsZW1lbnQsXG4gICAgICBDb21wb25lbnQ6IGVsZW1lbnQucHJvcHMuQ29tcG9uZW50LFxuICAgICAgaW5kZXg6IGVsZW1lbnQucHJvcHMuaW5kZXgsXG4gICAgICBwYXRoOiBlbGVtZW50LnByb3BzLnBhdGgsXG4gICAgICBsb2FkZXI6IGVsZW1lbnQucHJvcHMubG9hZGVyLFxuICAgICAgYWN0aW9uOiBlbGVtZW50LnByb3BzLmFjdGlvbixcbiAgICAgIGVycm9yRWxlbWVudDogZWxlbWVudC5wcm9wcy5lcnJvckVsZW1lbnQsXG4gICAgICBFcnJvckJvdW5kYXJ5OiBlbGVtZW50LnByb3BzLkVycm9yQm91bmRhcnksXG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBlbGVtZW50LnByb3BzLkVycm9yQm91bmRhcnkgIT0gbnVsbCB8fCBlbGVtZW50LnByb3BzLmVycm9yRWxlbWVudCAhPSBudWxsLFxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZTogZWxlbWVudC5wcm9wcy5zaG91bGRSZXZhbGlkYXRlLFxuICAgICAgaGFuZGxlOiBlbGVtZW50LnByb3BzLmhhbmRsZSxcbiAgICAgIGxhenk6IGVsZW1lbnQucHJvcHMubGF6eVxuICAgIH07XG4gICAgaWYgKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgIHJvdXRlLmNoaWxkcmVuID0gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sIHRyZWVQYXRoKTtcbiAgICB9XG4gICAgcm91dGVzLnB1c2gocm91dGUpO1xuICB9KTtcbiAgcmV0dXJuIHJvdXRlcztcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSByZXN1bHQgb2YgYG1hdGNoUm91dGVzKClgIGludG8gYSBSZWFjdCBlbGVtZW50LlxuICovXG5mdW5jdGlvbiByZW5kZXJNYXRjaGVzKG1hdGNoZXMpIHtcbiAgcmV0dXJuIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMpO1xufVxuXG5mdW5jdGlvbiBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGUpIHtcbiAgbGV0IHVwZGF0ZXMgPSB7XG4gICAgLy8gTm90ZTogdGhpcyBjaGVjayBhbHNvIG9jY3VycyBpbiBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4gc28gdXBkYXRlXG4gICAgLy8gdGhlcmUgaWYgeW91IGNoYW5nZSB0aGlzIC0tIHBsZWFzZSBhbmQgdGhhbmsgeW91IVxuICAgIGhhc0Vycm9yQm91bmRhcnk6IHJvdXRlLkVycm9yQm91bmRhcnkgIT0gbnVsbCB8fCByb3V0ZS5lcnJvckVsZW1lbnQgIT0gbnVsbFxuICB9O1xuICBpZiAocm91dGUuQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHJvdXRlLmVsZW1lbnQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgaW5jbHVkZSBib3RoIGBDb21wb25lbnRgIGFuZCBgZWxlbWVudGAgb24geW91ciByb3V0ZSAtIFwiICsgXCJgQ29tcG9uZW50YCB3aWxsIGJlIHVzZWQuXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHVwZGF0ZXMsIHtcbiAgICAgIGVsZW1lbnQ6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHJvdXRlLkNvbXBvbmVudCksXG4gICAgICBDb21wb25lbnQ6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9XG4gIGlmIChyb3V0ZS5IeWRyYXRlRmFsbGJhY2spIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBpZiAocm91dGUuaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCBpbmNsdWRlIGJvdGggYEh5ZHJhdGVGYWxsYmFja2AgYW5kIGBoeWRyYXRlRmFsbGJhY2tFbGVtZW50YCBvbiB5b3VyIHJvdXRlIC0gXCIgKyBcImBIeWRyYXRlRmFsbGJhY2tgIHdpbGwgYmUgdXNlZC5cIikgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24odXBkYXRlcywge1xuICAgICAgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQocm91dGUuSHlkcmF0ZUZhbGxiYWNrKSxcbiAgICAgIEh5ZHJhdGVGYWxsYmFjazogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH1cbiAgaWYgKHJvdXRlLkVycm9yQm91bmRhcnkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBpZiAocm91dGUuZXJyb3JFbGVtZW50KSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIllvdSBzaG91bGQgbm90IGluY2x1ZGUgYm90aCBgRXJyb3JCb3VuZGFyeWAgYW5kIGBlcnJvckVsZW1lbnRgIG9uIHlvdXIgcm91dGUgLSBcIiArIFwiYEVycm9yQm91bmRhcnlgIHdpbGwgYmUgdXNlZC5cIikgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24odXBkYXRlcywge1xuICAgICAgZXJyb3JFbGVtZW50OiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChyb3V0ZS5FcnJvckJvdW5kYXJ5KSxcbiAgICAgIEVycm9yQm91bmRhcnk6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9XG4gIHJldHVybiB1cGRhdGVzO1xufVxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5Um91dGVyKHJvdXRlcywgb3B0cykge1xuICByZXR1cm4gY3JlYXRlUm91dGVyKHtcbiAgICBiYXNlbmFtZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5iYXNlbmFtZSxcbiAgICBmdXR1cmU6IF9leHRlbmRzKHt9LCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmZ1dHVyZSwge1xuICAgICAgdjdfcHJlcGVuZEJhc2VuYW1lOiB0cnVlXG4gICAgfSksXG4gICAgaGlzdG9yeTogY3JlYXRlTWVtb3J5SGlzdG9yeSh7XG4gICAgICBpbml0aWFsRW50cmllczogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxJbmRleDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5pbml0aWFsSW5kZXhcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmh5ZHJhdGlvbkRhdGEsXG4gICAgcm91dGVzLFxuICAgIG1hcFJvdXRlUHJvcGVydGllc1xuICB9KS5pbml0aWFsaXplKCk7XG59XG5cbmV4cG9ydCB7IEF3YWl0LCBNZW1vcnlSb3V0ZXIsIE5hdmlnYXRlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlclByb3ZpZGVyLCBSb3V0ZXMsIERhdGFSb3V0ZXJDb250ZXh0IGFzIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCwgRGF0YVJvdXRlclN0YXRlQ29udGV4dCBhcyBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCwgTG9jYXRpb25Db250ZXh0IGFzIFVOU0FGRV9Mb2NhdGlvbkNvbnRleHQsIE5hdmlnYXRpb25Db250ZXh0IGFzIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgUm91dGVDb250ZXh0IGFzIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIG1hcFJvdXRlUHJvcGVydGllcyBhcyBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzLCB1c2VSb3V0ZUlkIGFzIFVOU0FGRV91c2VSb3V0ZUlkLCB1c2VSb3V0ZXNJbXBsIGFzIFVOU0FGRV91c2VSb3V0ZXNJbXBsLCBjcmVhdGVNZW1vcnlSb3V0ZXIsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIGFzIGNyZWF0ZVJvdXRlc0Zyb21FbGVtZW50cywgcmVuZGVyTWF0Y2hlcywgdXNlQWN0aW9uRGF0YSwgdXNlQXN5bmNFcnJvciwgdXNlQXN5bmNWYWx1ZSwgdXNlQmxvY2tlciwgdXNlSHJlZiwgdXNlSW5Sb3V0ZXJDb250ZXh0LCB1c2VMb2FkZXJEYXRhLCB1c2VMb2NhdGlvbiwgdXNlTWF0Y2gsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRlLCB1c2VOYXZpZ2F0aW9uLCB1c2VOYXZpZ2F0aW9uVHlwZSwgdXNlT3V0bGV0LCB1c2VPdXRsZXRDb250ZXh0LCB1c2VQYXJhbXMsIHVzZVJlc29sdmVkUGF0aCwgdXNlUmV2YWxpZGF0b3IsIHVzZVJvdXRlRXJyb3IsIHVzZVJvdXRlTG9hZGVyRGF0YSwgdXNlUm91dGVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIi8qKlxuICogUmVhY3QgUm91dGVyIERPTSB2Ni4yMS4xXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzLCBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQsIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBSb3V0ZXIsIFVOU0FGRV91c2VSb3V0ZXNJbXBsLCBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIHVzZUhyZWYsIHVzZVJlc29sdmVkUGF0aCwgdXNlTG9jYXRpb24sIHVzZU5hdmlnYXRlLCBjcmVhdGVQYXRoLCBVTlNBRkVfdXNlUm91dGVJZCwgVU5TQUZFX1JvdXRlQ29udGV4dCwgdXNlTWF0Y2hlcywgdXNlTmF2aWdhdGlvbiwgdXNlQmxvY2tlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQXdhaXQsIE1lbW9yeVJvdXRlciwgTmF2aWdhdGUsIE5hdmlnYXRpb25UeXBlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlcywgVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LCBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCwgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCwgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCBVTlNBRkVfUm91dGVDb250ZXh0LCBVTlNBRkVfdXNlUm91dGVJZCwgY3JlYXRlTWVtb3J5Um91dGVyLCBjcmVhdGVQYXRoLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sIGNyZWF0ZVJvdXRlc0Zyb21FbGVtZW50cywgZGVmZXIsIGdlbmVyYXRlUGF0aCwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlZGlyZWN0RG9jdW1lbnQsIHJlbmRlck1hdGNoZXMsIHJlc29sdmVQYXRoLCB1c2VBY3Rpb25EYXRhLCB1c2VBc3luY0Vycm9yLCB1c2VBc3luY1ZhbHVlLCB1c2VCbG9ja2VyLCB1c2VIcmVmLCB1c2VJblJvdXRlckNvbnRleHQsIHVzZUxvYWRlckRhdGEsIHVzZUxvY2F0aW9uLCB1c2VNYXRjaCwgdXNlTWF0Y2hlcywgdXNlTmF2aWdhdGUsIHVzZU5hdmlnYXRpb24sIHVzZU5hdmlnYXRpb25UeXBlLCB1c2VPdXRsZXQsIHVzZU91dGxldENvbnRleHQsIHVzZVBhcmFtcywgdXNlUmVzb2x2ZWRQYXRoLCB1c2VSZXZhbGlkYXRvciwgdXNlUm91dGVFcnJvciwgdXNlUm91dGVMb2FkZXJEYXRhLCB1c2VSb3V0ZXMgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IHsgc3RyaXBCYXNlbmFtZSwgVU5TQUZFX3dhcm5pbmcsIGNyZWF0ZVJvdXRlciwgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBVTlNBRkVfRXJyb3JSZXNwb25zZUltcGwsIFVOU0FGRV9pbnZhcmlhbnQsIGpvaW5QYXRocywgSURMRV9GRVRDSEVSLCBtYXRjaFBhdGggfSBmcm9tICdAcmVtaXgtcnVuL3JvdXRlcic7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuY29uc3QgZGVmYXVsdE1ldGhvZCA9IFwiZ2V0XCI7XG5jb25zdCBkZWZhdWx0RW5jVHlwZSA9IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI7XG5mdW5jdGlvbiBpc0h0bWxFbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgdHlwZW9mIG9iamVjdC50YWdOYW1lID09PSBcInN0cmluZ1wiO1xufVxuZnVuY3Rpb24gaXNCdXR0b25FbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiYnV0dG9uXCI7XG59XG5mdW5jdGlvbiBpc0Zvcm1FbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZm9ybVwiO1xufVxuZnVuY3Rpb24gaXNJbnB1dEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiO1xufVxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cbmZ1bmN0aW9uIHNob3VsZFByb2Nlc3NMaW5rQ2xpY2soZXZlbnQsIHRhcmdldCkge1xuICByZXR1cm4gZXZlbnQuYnV0dG9uID09PSAwICYmIChcbiAgLy8gSWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmXG4gIC8vIExldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIElnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gIDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QgdXNpbmcgdGhlIGdpdmVuIGluaXRpYWxpemVyLlxuICpcbiAqIFRoaXMgaXMgaWRlbnRpY2FsIHRvIGBuZXcgVVJMU2VhcmNoUGFyYW1zKGluaXQpYCBleGNlcHQgaXQgYWxzb1xuICogc3VwcG9ydHMgYXJyYXlzIGFzIHZhbHVlcyBpbiB0aGUgb2JqZWN0IGZvcm0gb2YgdGhlIGluaXRpYWxpemVyXG4gKiBpbnN0ZWFkIG9mIGp1c3Qgc3RyaW5ncy4gVGhpcyBpcyBjb252ZW5pZW50IHdoZW4geW91IG5lZWQgbXVsdGlwbGVcbiAqIHZhbHVlcyBmb3IgYSBnaXZlbiBrZXksIGJ1dCBkb24ndCB3YW50IHRvIHVzZSBhbiBhcnJheSBpbml0aWFsaXplci5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZjpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKFtcbiAqICAgICBbJ3NvcnQnLCAnbmFtZSddLFxuICogICAgIFsnc29ydCcsICdwcmljZSddXG4gKiAgIF0pO1xuICpcbiAqIHlvdSBjYW4gZG86XG4gKlxuICogICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKHtcbiAqICAgICBzb3J0OiBbJ25hbWUnLCAncHJpY2UnXVxuICogICB9KTtcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU2VhcmNoUGFyYW1zKGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSBcIlwiO1xuICB9XG4gIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKHR5cGVvZiBpbml0ID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoaW5pdCkgfHwgaW5pdCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcyA/IGluaXQgOiBPYmplY3Qua2V5cyhpbml0KS5yZWR1Y2UoKG1lbW8sIGtleSkgPT4ge1xuICAgIGxldCB2YWx1ZSA9IGluaXRba2V5XTtcbiAgICByZXR1cm4gbWVtby5jb25jYXQoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAodiA9PiBba2V5LCB2XSkgOiBbW2tleSwgdmFsdWVdXSk7XG4gIH0sIFtdKSk7XG59XG5mdW5jdGlvbiBnZXRTZWFyY2hQYXJhbXNGb3JMb2NhdGlvbihsb2NhdGlvblNlYXJjaCwgZGVmYXVsdFNlYXJjaFBhcmFtcykge1xuICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKGxvY2F0aW9uU2VhcmNoKTtcbiAgaWYgKGRlZmF1bHRTZWFyY2hQYXJhbXMpIHtcbiAgICAvLyBVc2UgYGRlZmF1bHRTZWFyY2hQYXJhbXMuZm9yRWFjaCguLi4pYCBoZXJlIGluc3RlYWQgb2YgaXRlcmF0aW5nIG9mXG4gICAgLy8gYGRlZmF1bHRTZWFyY2hQYXJhbXMua2V5cygpYCB0byB3b3JrLWFyb3VuZCBhIGJ1ZyBpbiBGaXJlZm94IHJlbGF0ZWQgdG9cbiAgICAvLyB3ZWIgZXh0ZW5zaW9ucy4gUmVsZXZhbnQgQnVnemlsbGEgdGlja2V0czpcbiAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDE0NjAyXG4gICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTAyMzk4NFxuICAgIGRlZmF1bHRTZWFyY2hQYXJhbXMuZm9yRWFjaCgoXywga2V5KSA9PiB7XG4gICAgICBpZiAoIXNlYXJjaFBhcmFtcy5oYXMoa2V5KSkge1xuICAgICAgICBkZWZhdWx0U2VhcmNoUGFyYW1zLmdldEFsbChrZXkpLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBzZWFyY2hQYXJhbXM7XG59XG4vLyBPbmUtdGltZSBjaGVjayBmb3Igc3VibWl0dGVyIHN1cHBvcnRcbmxldCBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9IG51bGw7XG5mdW5jdGlvbiBpc0Zvcm1EYXRhU3VibWl0dGVyU3VwcG9ydGVkKCkge1xuICBpZiAoX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXIgPT09IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgbmV3IEZvcm1EYXRhKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpLFxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBpZiBGb3JtRGF0YSBzdXBwb3J0cyB0aGUgc3VibWl0dGVyIHBhcmFtZXRlciwgdGhpcyB3aWxsIHRocm93XG4gICAgICAwKTtcbiAgICAgIF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyID0gZmFsc2U7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXIgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXI7XG59XG5jb25zdCBzdXBwb3J0ZWRGb3JtRW5jVHlwZXMgPSBuZXcgU2V0KFtcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLCBcIm11bHRpcGFydC9mb3JtLWRhdGFcIiwgXCJ0ZXh0L3BsYWluXCJdKTtcbmZ1bmN0aW9uIGdldEZvcm1FbmNUeXBlKGVuY1R5cGUpIHtcbiAgaWYgKGVuY1R5cGUgIT0gbnVsbCAmJiAhc3VwcG9ydGVkRm9ybUVuY1R5cGVzLmhhcyhlbmNUeXBlKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIlxcXCJcIiArIGVuY1R5cGUgKyBcIlxcXCIgaXMgbm90IGEgdmFsaWQgYGVuY1R5cGVgIGZvciBgPEZvcm0+YC9gPGZldGNoZXIuRm9ybT5gIFwiICsgKFwiYW5kIHdpbGwgZGVmYXVsdCB0byBcXFwiXCIgKyBkZWZhdWx0RW5jVHlwZSArIFwiXFxcIlwiKSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGVuY1R5cGU7XG59XG5mdW5jdGlvbiBnZXRGb3JtU3VibWlzc2lvbkluZm8odGFyZ2V0LCBiYXNlbmFtZSkge1xuICBsZXQgbWV0aG9kO1xuICBsZXQgYWN0aW9uO1xuICBsZXQgZW5jVHlwZTtcbiAgbGV0IGZvcm1EYXRhO1xuICBsZXQgYm9keTtcbiAgaWYgKGlzRm9ybUVsZW1lbnQodGFyZ2V0KSkge1xuICAgIC8vIFdoZW4gZ3JhYmJpbmcgdGhlIGFjdGlvbiBmcm9tIHRoZSBlbGVtZW50LCBpdCB3aWxsIGhhdmUgaGFkIHRoZSBiYXNlbmFtZVxuICAgIC8vIHByZWZpeGVkIHRvIGVuc3VyZSBub24tSlMgc2NlbmFyaW9zIHdvcmssIHNvIHN0cmlwIGl0IHNpbmNlIHdlJ2xsXG4gICAgLy8gcmUtcHJlZml4IGluIHRoZSByb3V0ZXJcbiAgICBsZXQgYXR0ciA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIik7XG4gICAgYWN0aW9uID0gYXR0ciA/IHN0cmlwQmFzZW5hbWUoYXR0ciwgYmFzZW5hbWUpIDogbnVsbDtcbiAgICBtZXRob2QgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwibWV0aG9kXCIpIHx8IGRlZmF1bHRNZXRob2Q7XG4gICAgZW5jVHlwZSA9IGdldEZvcm1FbmNUeXBlKHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJlbmN0eXBlXCIpKSB8fCBkZWZhdWx0RW5jVHlwZTtcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSh0YXJnZXQpO1xuICB9IGVsc2UgaWYgKGlzQnV0dG9uRWxlbWVudCh0YXJnZXQpIHx8IGlzSW5wdXRFbGVtZW50KHRhcmdldCkgJiYgKHRhcmdldC50eXBlID09PSBcInN1Ym1pdFwiIHx8IHRhcmdldC50eXBlID09PSBcImltYWdlXCIpKSB7XG4gICAgbGV0IGZvcm0gPSB0YXJnZXQuZm9ybTtcbiAgICBpZiAoZm9ybSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc3VibWl0IGEgPGJ1dHRvbj4gb3IgPGlucHV0IHR5cGU9XFxcInN1Ym1pdFxcXCI+IHdpdGhvdXQgYSA8Zm9ybT5cIik7XG4gICAgfVxuICAgIC8vIDxidXR0b24+LzxpbnB1dCB0eXBlPVwic3VibWl0XCI+IG1heSBvdmVycmlkZSBhdHRyaWJ1dGVzIG9mIDxmb3JtPlxuICAgIC8vIFdoZW4gZ3JhYmJpbmcgdGhlIGFjdGlvbiBmcm9tIHRoZSBlbGVtZW50LCBpdCB3aWxsIGhhdmUgaGFkIHRoZSBiYXNlbmFtZVxuICAgIC8vIHByZWZpeGVkIHRvIGVuc3VyZSBub24tSlMgc2NlbmFyaW9zIHdvcmssIHNvIHN0cmlwIGl0IHNpbmNlIHdlJ2xsXG4gICAgLy8gcmUtcHJlZml4IGluIHRoZSByb3V0ZXJcbiAgICBsZXQgYXR0ciA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJmb3JtYWN0aW9uXCIpIHx8IGZvcm0uZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpO1xuICAgIGFjdGlvbiA9IGF0dHIgPyBzdHJpcEJhc2VuYW1lKGF0dHIsIGJhc2VuYW1lKSA6IG51bGw7XG4gICAgbWV0aG9kID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1tZXRob2RcIikgfHwgZm9ybS5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgfHwgZGVmYXVsdE1ldGhvZDtcbiAgICBlbmNUeXBlID0gZ2V0Rm9ybUVuY1R5cGUodGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1lbmN0eXBlXCIpKSB8fCBnZXRGb3JtRW5jVHlwZShmb3JtLmdldEF0dHJpYnV0ZShcImVuY3R5cGVcIikpIHx8IGRlZmF1bHRFbmNUeXBlO1xuICAgIC8vIEJ1aWxkIGEgRm9ybURhdGEgb2JqZWN0IHBvcHVsYXRlZCBmcm9tIGEgZm9ybSBhbmQgc3VibWl0dGVyXG4gICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSwgdGFyZ2V0KTtcbiAgICAvLyBJZiB0aGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHRoZSBgRm9ybURhdGEoZWwsIHN1Ym1pdHRlcilgIGZvcm1hdCxcbiAgICAvLyB0aGVuIHRhY2sgb24gdGhlIHN1Ym1pdHRlciB2YWx1ZSBhdCB0aGUgZW5kLiAgVGhpcyBpcyBhIGxpZ2h0d2VpZ2h0XG4gICAgLy8gc29sdXRpb24gdGhhdCBpcyBub3QgMTAwJSBzcGVjIGNvbXBsaWFudC4gIEZvciBjb21wbGV0ZSBzdXBwb3J0IGluIG9sZGVyXG4gICAgLy8gYnJvd3NlcnMsIGNvbnNpZGVyIHVzaW5nIHRoZSBgZm9ybWRhdGEtc3VibWl0dGVyLXBvbHlmaWxsYCBwYWNrYWdlXG4gICAgaWYgKCFpc0Zvcm1EYXRhU3VibWl0dGVyU3VwcG9ydGVkKCkpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHZhbHVlXG4gICAgICB9ID0gdGFyZ2V0O1xuICAgICAgaWYgKHR5cGUgPT09IFwiaW1hZ2VcIikge1xuICAgICAgICBsZXQgcHJlZml4ID0gbmFtZSA/IG5hbWUgKyBcIi5cIiA6IFwiXCI7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChwcmVmaXggKyBcInhcIiwgXCIwXCIpO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQocHJlZml4ICsgXCJ5XCIsIFwiMFwiKTtcbiAgICAgIH0gZWxzZSBpZiAobmFtZSkge1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQobmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc0h0bWxFbGVtZW50KHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc3VibWl0IGVsZW1lbnQgdGhhdCBpcyBub3QgPGZvcm0+LCA8YnV0dG9uPiwgb3IgXCIgKyBcIjxpbnB1dCB0eXBlPVxcXCJzdWJtaXR8aW1hZ2VcXFwiPlwiKTtcbiAgfSBlbHNlIHtcbiAgICBtZXRob2QgPSBkZWZhdWx0TWV0aG9kO1xuICAgIGFjdGlvbiA9IG51bGw7XG4gICAgZW5jVHlwZSA9IGRlZmF1bHRFbmNUeXBlO1xuICAgIGJvZHkgPSB0YXJnZXQ7XG4gIH1cbiAgLy8gU2VuZCBib2R5IGZvciA8Rm9ybSBlbmNUeXBlPVwidGV4dC9wbGFpblwiIHNvIHdlIGVuY29kZSBpdCBpbnRvIHRleHRcbiAgaWYgKGZvcm1EYXRhICYmIGVuY1R5cGUgPT09IFwidGV4dC9wbGFpblwiKSB7XG4gICAgYm9keSA9IGZvcm1EYXRhO1xuICAgIGZvcm1EYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiB7XG4gICAgYWN0aW9uLFxuICAgIG1ldGhvZDogbWV0aG9kLnRvTG93ZXJDYXNlKCksXG4gICAgZW5jVHlwZSxcbiAgICBmb3JtRGF0YSxcbiAgICBib2R5XG4gIH07XG59XG5cbmNvbnN0IF9leGNsdWRlZCA9IFtcIm9uQ2xpY2tcIiwgXCJyZWxhdGl2ZVwiLCBcInJlbG9hZERvY3VtZW50XCIsIFwicmVwbGFjZVwiLCBcInN0YXRlXCIsIFwidGFyZ2V0XCIsIFwidG9cIiwgXCJwcmV2ZW50U2Nyb2xsUmVzZXRcIiwgXCJ1bnN0YWJsZV92aWV3VHJhbnNpdGlvblwiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcImFyaWEtY3VycmVudFwiLCBcImNhc2VTZW5zaXRpdmVcIiwgXCJjbGFzc05hbWVcIiwgXCJlbmRcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwidW5zdGFibGVfdmlld1RyYW5zaXRpb25cIiwgXCJjaGlsZHJlblwiXSxcbiAgX2V4Y2x1ZGVkMyA9IFtcImZldGNoZXJLZXlcIiwgXCJuYXZpZ2F0ZVwiLCBcInJlbG9hZERvY3VtZW50XCIsIFwicmVwbGFjZVwiLCBcInN0YXRlXCIsIFwibWV0aG9kXCIsIFwiYWN0aW9uXCIsIFwib25TdWJtaXRcIiwgXCJyZWxhdGl2ZVwiLCBcInByZXZlbnRTY3JvbGxSZXNldFwiLCBcInVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXCJdO1xuZnVuY3Rpb24gY3JlYXRlQnJvd3NlclJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7fSwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mdXR1cmUsIHtcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZVxuICAgIH0pLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHtcbiAgICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhKSB8fCBwYXJzZUh5ZHJhdGlvbkRhdGEoKSxcbiAgICByb3V0ZXMsXG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzOiBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzLFxuICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufVxuZnVuY3Rpb24gY3JlYXRlSGFzaFJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7fSwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mdXR1cmUsIHtcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZVxuICAgIH0pLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZUhhc2hIaXN0b3J5KHtcbiAgICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhKSB8fCBwYXJzZUh5ZHJhdGlvbkRhdGEoKSxcbiAgICByb3V0ZXMsXG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzOiBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzLFxuICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufVxuZnVuY3Rpb24gcGFyc2VIeWRyYXRpb25EYXRhKCkge1xuICB2YXIgX3dpbmRvdztcbiAgbGV0IHN0YXRlID0gKF93aW5kb3cgPSB3aW5kb3cpID09IG51bGwgPyB2b2lkIDAgOiBfd2luZG93Ll9fc3RhdGljUm91dGVySHlkcmF0aW9uRGF0YTtcbiAgaWYgKHN0YXRlICYmIHN0YXRlLmVycm9ycykge1xuICAgIHN0YXRlID0gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICBlcnJvcnM6IGRlc2VyaWFsaXplRXJyb3JzKHN0YXRlLmVycm9ycylcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gc3RhdGU7XG59XG5mdW5jdGlvbiBkZXNlcmlhbGl6ZUVycm9ycyhlcnJvcnMpIHtcbiAgaWYgKCFlcnJvcnMpIHJldHVybiBudWxsO1xuICBsZXQgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKGVycm9ycyk7XG4gIGxldCBzZXJpYWxpemVkID0ge307XG4gIGZvciAobGV0IFtrZXksIHZhbF0gb2YgZW50cmllcykge1xuICAgIC8vIEhleSB5b3UhICBJZiB5b3UgY2hhbmdlIHRoaXMsIHBsZWFzZSBjaGFuZ2UgdGhlIGNvcnJlc3BvbmRpbmcgbG9naWMgaW5cbiAgICAvLyBzZXJpYWxpemVFcnJvcnMgaW4gcmVhY3Qtcm91dGVyLWRvbS9zZXJ2ZXIudHN4IDopXG4gICAgaWYgKHZhbCAmJiB2YWwuX190eXBlID09PSBcIlJvdXRlRXJyb3JSZXNwb25zZVwiKSB7XG4gICAgICBzZXJpYWxpemVkW2tleV0gPSBuZXcgVU5TQUZFX0Vycm9yUmVzcG9uc2VJbXBsKHZhbC5zdGF0dXMsIHZhbC5zdGF0dXNUZXh0LCB2YWwuZGF0YSwgdmFsLmludGVybmFsID09PSB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKHZhbCAmJiB2YWwuX190eXBlID09PSBcIkVycm9yXCIpIHtcbiAgICAgIC8vIEF0dGVtcHQgdG8gcmVjb25zdHJ1Y3QgdGhlIHJpZ2h0IHR5cGUgb2YgRXJyb3IgKGkuZS4sIFJlZmVyZW5jZUVycm9yKVxuICAgICAgaWYgKHZhbC5fX3N1YlR5cGUpIHtcbiAgICAgICAgbGV0IEVycm9yQ29uc3RydWN0b3IgPSB3aW5kb3dbdmFsLl9fc3ViVHlwZV07XG4gICAgICAgIGlmICh0eXBlb2YgRXJyb3JDb25zdHJ1Y3RvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIGxldCBlcnJvciA9IG5ldyBFcnJvckNvbnN0cnVjdG9yKHZhbC5tZXNzYWdlKTtcbiAgICAgICAgICAgIC8vIFdpcGUgYXdheSB0aGUgY2xpZW50LXNpZGUgc3RhY2sgdHJhY2UuICBOb3RoaW5nIHRvIGZpbGwgaXQgaW4gd2l0aFxuICAgICAgICAgICAgLy8gYmVjYXVzZSB3ZSBkb24ndCBzZXJpYWxpemUgU1NSIHN0YWNrIHRyYWNlcyBmb3Igc2VjdXJpdHkgcmVhc29uc1xuICAgICAgICAgICAgZXJyb3Iuc3RhY2sgPSBcIlwiO1xuICAgICAgICAgICAgc2VyaWFsaXplZFtrZXldID0gZXJyb3I7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gbm8tb3AgLSBmYWxsIHRocm91Z2ggYW5kIGNyZWF0ZSBhIG5vcm1hbCBFcnJvclxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNlcmlhbGl6ZWRba2V5XSA9PSBudWxsKSB7XG4gICAgICAgIGxldCBlcnJvciA9IG5ldyBFcnJvcih2YWwubWVzc2FnZSk7XG4gICAgICAgIC8vIFdpcGUgYXdheSB0aGUgY2xpZW50LXNpZGUgc3RhY2sgdHJhY2UuICBOb3RoaW5nIHRvIGZpbGwgaXQgaW4gd2l0aFxuICAgICAgICAvLyBiZWNhdXNlIHdlIGRvbid0IHNlcmlhbGl6ZSBTU1Igc3RhY2sgdHJhY2VzIGZvciBzZWN1cml0eSByZWFzb25zXG4gICAgICAgIGVycm9yLnN0YWNrID0gXCJcIjtcbiAgICAgICAgc2VyaWFsaXplZFtrZXldID0gZXJyb3I7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNlcmlhbGl6ZWQ7XG59XG5jb25zdCBWaWV3VHJhbnNpdGlvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh7XG4gIGlzVHJhbnNpdGlvbmluZzogZmFsc2Vcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBWaWV3VHJhbnNpdGlvbkNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlZpZXdUcmFuc2l0aW9uXCI7XG59XG5jb25zdCBGZXRjaGVyc0NvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChuZXcgTWFwKCkpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBGZXRjaGVyc0NvbnRleHQuZGlzcGxheU5hbWUgPSBcIkZldGNoZXJzXCI7XG59XG4vLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gQ29tcG9uZW50c1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8qKlxuICBXZWJwYWNrICsgUmVhY3QgMTcgZmFpbHMgdG8gY29tcGlsZSBvbiBhbnkgb2YgdGhlIGZvbGxvd2luZyBiZWNhdXNlIHdlYnBhY2tcbiAgY29tcGxhaW5zIHRoYXQgYHN0YXJ0VHJhbnNpdGlvbmAgZG9lc24ndCBleGlzdCBpbiBgUmVhY3RgOlxuICAqIGltcG9ydCB7IHN0YXJ0VHJhbnNpdGlvbiB9IGZyb20gXCJyZWFjdFwiXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3Quc3RhcnRUcmFuc2l0aW9uKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgXCJzdGFydFRyYW5zaXRpb25cIiBpbiBSZWFjdCA/IFJlYWN0W1wic3RhcnRUcmFuc2l0aW9uXCJdKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuXG4gIE1vdmluZyBpdCB0byBhIGNvbnN0YW50IHN1Y2ggYXMgdGhlIGZvbGxvd2luZyBzb2x2ZXMgdGhlIFdlYnBhY2svUmVhY3QgMTcgaXNzdWU6XG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBjb25zdCBTVEFSVF9UUkFOU0lUSU9OID0gXCJzdGFydFRyYW5zaXRpb25cIjtcbiAgICBTVEFSVF9UUkFOU0lUSU9OIGluIFJlYWN0ID8gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgSG93ZXZlciwgdGhhdCBpbnRyb2R1Y2VzIHdlYnBhY2svdGVyc2VyIG1pbmlmaWNhdGlvbiBpc3N1ZXMgaW4gcHJvZHVjdGlvbiBidWlsZHNcbiAgaW4gUmVhY3QgMTggd2hlcmUgbWluaWZpY2F0aW9uL29iZnVzY2F0aW9uIGVuZHMgdXAgcmVtb3ZpbmcgdGhlIGNhbGwgb2ZcbiAgUmVhY3Quc3RhcnRUcmFuc2l0aW9uIGVudGlyZWx5IGZyb20gdGhlIGZpcnN0IGhhbGYgb2YgdGhlIHRlcm5hcnkuICBHcmFiYmluZ1xuICB0aGlzIGV4cG9ydGVkIHJlZmVyZW5jZSBvbmNlIHVwIGZyb250IHJlc29sdmVzIHRoYXQgaXNzdWUuXG5cbiAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVhY3Qtcm91dGVyL2lzc3Vlcy8xMDU3OVxuKi9cbmNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuY29uc3Qgc3RhcnRUcmFuc2l0aW9uSW1wbCA9IFJlYWN0W1NUQVJUX1RSQU5TSVRJT05dO1xuY29uc3QgRkxVU0hfU1lOQyA9IFwiZmx1c2hTeW5jXCI7XG5jb25zdCBmbHVzaFN5bmNJbXBsID0gUmVhY3RET01bRkxVU0hfU1lOQ107XG5mdW5jdGlvbiBzdGFydFRyYW5zaXRpb25TYWZlKGNiKSB7XG4gIGlmIChzdGFydFRyYW5zaXRpb25JbXBsKSB7XG4gICAgc3RhcnRUcmFuc2l0aW9uSW1wbChjYik7XG4gIH0gZWxzZSB7XG4gICAgY2IoKTtcbiAgfVxufVxuZnVuY3Rpb24gZmx1c2hTeW5jU2FmZShjYikge1xuICBpZiAoZmx1c2hTeW5jSW1wbCkge1xuICAgIGZsdXNoU3luY0ltcGwoY2IpO1xuICB9IGVsc2Uge1xuICAgIGNiKCk7XG4gIH1cbn1cbmNsYXNzIERlZmVycmVkIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zdGF0dXMgPSBcInBlbmRpbmdcIjtcbiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLnJlc29sdmUgPSB2YWx1ZSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gXCJwZW5kaW5nXCIpIHtcbiAgICAgICAgICB0aGlzLnN0YXR1cyA9IFwicmVzb2x2ZWRcIjtcbiAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHRoaXMucmVqZWN0ID0gcmVhc29uID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICAgIHRoaXMuc3RhdHVzID0gXCJyZWplY3RlZFwiO1xuICAgICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59XG4vKipcbiAqIEdpdmVuIGEgUmVtaXggUm91dGVyIGluc3RhbmNlLCByZW5kZXIgdGhlIGFwcHJvcHJpYXRlIFVJXG4gKi9cbmZ1bmN0aW9uIFJvdXRlclByb3ZpZGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBmYWxsYmFja0VsZW1lbnQsXG4gICAgcm91dGVyLFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHJvdXRlci5zdGF0ZSk7XG4gIGxldCBbcGVuZGluZ1N0YXRlLCBzZXRQZW5kaW5nU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoKTtcbiAgbGV0IFt2dENvbnRleHQsIHNldFZ0Q29udGV4dF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZVxuICB9KTtcbiAgbGV0IFtyZW5kZXJEZmQsIHNldFJlbmRlckRmZF0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBsZXQgW3RyYW5zaXRpb24sIHNldFRyYW5zaXRpb25dID0gUmVhY3QudXNlU3RhdGUoKTtcbiAgbGV0IFtpbnRlcnJ1cHRpb24sIHNldEludGVycnVwdGlvbl0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBsZXQgZmV0Y2hlckRhdGEgPSBSZWFjdC51c2VSZWYobmV3IE1hcCgpKTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IG9wdEluU3RhcnRUcmFuc2l0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soY2IgPT4ge1xuICAgIGlmICh2N19zdGFydFRyYW5zaXRpb24pIHtcbiAgICAgIHN0YXJ0VHJhbnNpdGlvblNhZmUoY2IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfSwgW3Y3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjaygobmV3U3RhdGUsIF9yZWYyKSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIGRlbGV0ZWRGZXRjaGVycyxcbiAgICAgIHVuc3RhYmxlX2ZsdXNoU3luYzogZmx1c2hTeW5jLFxuICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25PcHRzOiB2aWV3VHJhbnNpdGlvbk9wdHNcbiAgICB9ID0gX3JlZjI7XG4gICAgZGVsZXRlZEZldGNoZXJzLmZvckVhY2goa2V5ID0+IGZldGNoZXJEYXRhLmN1cnJlbnQuZGVsZXRlKGtleSkpO1xuICAgIG5ld1N0YXRlLmZldGNoZXJzLmZvckVhY2goKGZldGNoZXIsIGtleSkgPT4ge1xuICAgICAgaWYgKGZldGNoZXIuZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZldGNoZXJEYXRhLmN1cnJlbnQuc2V0KGtleSwgZmV0Y2hlci5kYXRhKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBsZXQgaXNWaWV3VHJhbnNpdGlvblVuYXZhaWxhYmxlID0gcm91dGVyLndpbmRvdyA9PSBudWxsIHx8IHR5cGVvZiByb3V0ZXIud2luZG93LmRvY3VtZW50LnN0YXJ0Vmlld1RyYW5zaXRpb24gIT09IFwiZnVuY3Rpb25cIjtcbiAgICAvLyBJZiB0aGlzIGlzbid0IGEgdmlldyB0cmFuc2l0aW9uIG9yIGl0J3Mgbm90IGF2YWlsYWJsZSBpbiB0aGlzIGJyb3dzZXIsXG4gICAgLy8ganVzdCB1cGRhdGUgYW5kIGJlIGRvbmUgd2l0aCBpdFxuICAgIGlmICghdmlld1RyYW5zaXRpb25PcHRzIHx8IGlzVmlld1RyYW5zaXRpb25VbmF2YWlsYWJsZSkge1xuICAgICAgaWYgKGZsdXNoU3luYykge1xuICAgICAgICBmbHVzaFN5bmNTYWZlKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0SW5TdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGZsdXNoU3luYyArIHN0YXJ0Vmlld1RyYW5zaXRpb25cbiAgICBpZiAoZmx1c2hTeW5jKSB7XG4gICAgICAvLyBGbHVzaCB0aHJvdWdoIHRoZSBjb250ZXh0IHRvIG1hcmsgRE9NIGVsZW1lbnRzIGFzIHRyYW5zaXRpb249aW5nXG4gICAgICBmbHVzaFN5bmNTYWZlKCgpID0+IHtcbiAgICAgICAgLy8gQ2FuY2VsIGFueSBwZW5kaW5nIHRyYW5zaXRpb25zXG4gICAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgICAgcmVuZGVyRGZkICYmIHJlbmRlckRmZC5yZXNvbHZlKCk7XG4gICAgICAgICAgdHJhbnNpdGlvbi5za2lwVHJhbnNpdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHNldFZ0Q29udGV4dCh7XG4gICAgICAgICAgaXNUcmFuc2l0aW9uaW5nOiB0cnVlLFxuICAgICAgICAgIGZsdXNoU3luYzogdHJ1ZSxcbiAgICAgICAgICBjdXJyZW50TG9jYXRpb246IHZpZXdUcmFuc2l0aW9uT3B0cy5jdXJyZW50TG9jYXRpb24sXG4gICAgICAgICAgbmV4dExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMubmV4dExvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICAvLyBVcGRhdGUgdGhlIERPTVxuICAgICAgbGV0IHQgPSByb3V0ZXIud2luZG93LmRvY3VtZW50LnN0YXJ0Vmlld1RyYW5zaXRpb24oKCkgPT4ge1xuICAgICAgICBmbHVzaFN5bmNTYWZlKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpO1xuICAgICAgfSk7XG4gICAgICAvLyBDbGVhbiB1cCBhZnRlciB0aGUgYW5pbWF0aW9uIGNvbXBsZXRlc1xuICAgICAgdC5maW5pc2hlZC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiB7XG4gICAgICAgICAgc2V0UmVuZGVyRGZkKHVuZGVmaW5lZCk7XG4gICAgICAgICAgc2V0VHJhbnNpdGlvbih1bmRlZmluZWQpO1xuICAgICAgICAgIHNldFBlbmRpbmdTdGF0ZSh1bmRlZmluZWQpO1xuICAgICAgICAgIHNldFZ0Q29udGV4dCh7XG4gICAgICAgICAgICBpc1RyYW5zaXRpb25pbmc6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBmbHVzaFN5bmNTYWZlKCgpID0+IHNldFRyYW5zaXRpb24odCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBzdGFydFRyYW5zaXRpb24gKyBzdGFydFZpZXdUcmFuc2l0aW9uXG4gICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgIC8vIEludGVycnVwdGluZyBhbiBpbi1wcm9ncmVzcyB0cmFuc2l0aW9uLCBjYW5jZWwgYW5kIGxldCBldmVyeXRoaW5nIGZsdXNoXG4gICAgICAvLyBvdXQsIGFuZCB0aGVuIGtpY2sgb2ZmIGEgbmV3IHRyYW5zaXRpb24gZnJvbSB0aGUgaW50ZXJydXB0aW9uIHN0YXRlXG4gICAgICByZW5kZXJEZmQgJiYgcmVuZGVyRGZkLnJlc29sdmUoKTtcbiAgICAgIHRyYW5zaXRpb24uc2tpcFRyYW5zaXRpb24oKTtcbiAgICAgIHNldEludGVycnVwdGlvbih7XG4gICAgICAgIHN0YXRlOiBuZXdTdGF0ZSxcbiAgICAgICAgY3VycmVudExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMuY3VycmVudExvY2F0aW9uLFxuICAgICAgICBuZXh0TG9jYXRpb246IHZpZXdUcmFuc2l0aW9uT3B0cy5uZXh0TG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDb21wbGV0ZWQgbmF2aWdhdGlvbiB1cGRhdGUgd2l0aCBvcHRlZC1pbiB2aWV3IHRyYW5zaXRpb25zLCBsZXQgJ2VyIHJpcFxuICAgICAgc2V0UGVuZGluZ1N0YXRlKG5ld1N0YXRlKTtcbiAgICAgIHNldFZ0Q29udGV4dCh7XG4gICAgICAgIGlzVHJhbnNpdGlvbmluZzogdHJ1ZSxcbiAgICAgICAgZmx1c2hTeW5jOiBmYWxzZSxcbiAgICAgICAgY3VycmVudExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMuY3VycmVudExvY2F0aW9uLFxuICAgICAgICBuZXh0TG9jYXRpb246IHZpZXdUcmFuc2l0aW9uT3B0cy5uZXh0TG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3JvdXRlci53aW5kb3csIHRyYW5zaXRpb24sIHJlbmRlckRmZCwgZmV0Y2hlckRhdGEsIG9wdEluU3RhcnRUcmFuc2l0aW9uXSk7XG4gIC8vIE5lZWQgdG8gdXNlIGEgbGF5b3V0IGVmZmVjdCBoZXJlIHNvIHdlIGFyZSBzdWJzY3JpYmVkIGVhcmx5IGVub3VnaCB0b1xuICAvLyBwaWNrIHVwIG9uIGFueSByZW5kZXItZHJpdmVuIHJlZGlyZWN0cy9uYXZpZ2F0aW9ucyAodXNlRWZmZWN0LzxOYXZpZ2F0ZT4pXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiByb3V0ZXIuc3Vic2NyaWJlKHNldFN0YXRlKSwgW3JvdXRlciwgc2V0U3RhdGVdKTtcbiAgLy8gV2hlbiB3ZSBzdGFydCBhIHZpZXcgdHJhbnNpdGlvbiwgY3JlYXRlIGEgRGVmZXJyZWQgd2UgY2FuIHVzZSBmb3IgdGhlXG4gIC8vIGV2ZW50dWFsIFwiY29tcGxldGVkXCIgcmVuZGVyXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHZ0Q29udGV4dC5pc1RyYW5zaXRpb25pbmcgJiYgIXZ0Q29udGV4dC5mbHVzaFN5bmMpIHtcbiAgICAgIHNldFJlbmRlckRmZChuZXcgRGVmZXJyZWQoKSk7XG4gICAgfVxuICB9LCBbdnRDb250ZXh0XSk7XG4gIC8vIE9uY2UgdGhlIGRlZmVycmVkIGlzIGNyZWF0ZWQsIGtpY2sgb2ZmIHN0YXJ0Vmlld1RyYW5zaXRpb24oKSB0byB1cGRhdGUgdGhlXG4gIC8vIERPTSBhbmQgdGhlbiB3YWl0IG9uIHRoZSBEZWZlcnJlZCB0byByZXNvbHZlIChpbmRpY2F0aW5nIHRoZSBET00gdXBkYXRlIGhhc1xuICAvLyBoYXBwZW5lZClcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocmVuZGVyRGZkICYmIHBlbmRpbmdTdGF0ZSAmJiByb3V0ZXIud2luZG93KSB7XG4gICAgICBsZXQgbmV3U3RhdGUgPSBwZW5kaW5nU3RhdGU7XG4gICAgICBsZXQgcmVuZGVyUHJvbWlzZSA9IHJlbmRlckRmZC5wcm9taXNlO1xuICAgICAgbGV0IHRyYW5zaXRpb24gPSByb3V0ZXIud2luZG93LmRvY3VtZW50LnN0YXJ0Vmlld1RyYW5zaXRpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgICBvcHRJblN0YXJ0VHJhbnNpdGlvbigoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICAgICAgYXdhaXQgcmVuZGVyUHJvbWlzZTtcbiAgICAgIH0pO1xuICAgICAgdHJhbnNpdGlvbi5maW5pc2hlZC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgc2V0UmVuZGVyRGZkKHVuZGVmaW5lZCk7XG4gICAgICAgIHNldFRyYW5zaXRpb24odW5kZWZpbmVkKTtcbiAgICAgICAgc2V0UGVuZGluZ1N0YXRlKHVuZGVmaW5lZCk7XG4gICAgICAgIHNldFZ0Q29udGV4dCh7XG4gICAgICAgICAgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgc2V0VHJhbnNpdGlvbih0cmFuc2l0aW9uKTtcbiAgICB9XG4gIH0sIFtvcHRJblN0YXJ0VHJhbnNpdGlvbiwgcGVuZGluZ1N0YXRlLCByZW5kZXJEZmQsIHJvdXRlci53aW5kb3ddKTtcbiAgLy8gV2hlbiB0aGUgbmV3IGxvY2F0aW9uIGZpbmFsbHkgcmVuZGVycyBhbmQgaXMgY29tbWl0dGVkIHRvIHRoZSBET00sIHRoaXNcbiAgLy8gZWZmZWN0IHdpbGwgcnVuIHRvIHJlc29sdmUgdGhlIHRyYW5zaXRpb25cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocmVuZGVyRGZkICYmIHBlbmRpbmdTdGF0ZSAmJiBzdGF0ZS5sb2NhdGlvbi5rZXkgPT09IHBlbmRpbmdTdGF0ZS5sb2NhdGlvbi5rZXkpIHtcbiAgICAgIHJlbmRlckRmZC5yZXNvbHZlKCk7XG4gICAgfVxuICB9LCBbcmVuZGVyRGZkLCB0cmFuc2l0aW9uLCBzdGF0ZS5sb2NhdGlvbiwgcGVuZGluZ1N0YXRlXSk7XG4gIC8vIElmIHdlIGdldCBpbnRlcnJ1cHRlZCB3aXRoIGEgbmV3IG5hdmlnYXRpb24gZHVyaW5nIGEgdHJhbnNpdGlvbiwgd2Ugc2tpcFxuICAvLyB0aGUgYWN0aXZlIHRyYW5zaXRpb24sIGxldCBpdCBjbGVhbnVwLCB0aGVuIGtpY2sgaXQgb2ZmIGFnYWluIGhlcmVcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXZ0Q29udGV4dC5pc1RyYW5zaXRpb25pbmcgJiYgaW50ZXJydXB0aW9uKSB7XG4gICAgICBzZXRQZW5kaW5nU3RhdGUoaW50ZXJydXB0aW9uLnN0YXRlKTtcbiAgICAgIHNldFZ0Q29udGV4dCh7XG4gICAgICAgIGlzVHJhbnNpdGlvbmluZzogdHJ1ZSxcbiAgICAgICAgZmx1c2hTeW5jOiBmYWxzZSxcbiAgICAgICAgY3VycmVudExvY2F0aW9uOiBpbnRlcnJ1cHRpb24uY3VycmVudExvY2F0aW9uLFxuICAgICAgICBuZXh0TG9jYXRpb246IGludGVycnVwdGlvbi5uZXh0TG9jYXRpb25cbiAgICAgIH0pO1xuICAgICAgc2V0SW50ZXJydXB0aW9uKHVuZGVmaW5lZCk7XG4gICAgfVxuICB9LCBbdnRDb250ZXh0LmlzVHJhbnNpdGlvbmluZywgaW50ZXJydXB0aW9uXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsbGJhY2tFbGVtZW50ID09IG51bGwgfHwgIXJvdXRlci5mdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiwgXCJgPFJvdXRlclByb3ZpZGVyIGZhbGxiYWNrRWxlbWVudD5gIGlzIGRlcHJlY2F0ZWQgd2hlbiB1c2luZyBcIiArIFwiYHY3X3BhcnRpYWxIeWRyYXRpb25gLCB1c2UgYSBgSHlkcmF0ZUZhbGxiYWNrYCBjb21wb25lbnQgaW5zdGVhZFwiKSA6IHZvaWQgMDtcbiAgICAvLyBPbmx5IGxvZyB0aGlzIG9uY2Ugb24gaW5pdGlhbCBtb3VudFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW10pO1xuICBsZXQgbmF2aWdhdG9yID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyZWF0ZUhyZWY6IHJvdXRlci5jcmVhdGVIcmVmLFxuICAgICAgZW5jb2RlTG9jYXRpb246IHJvdXRlci5lbmNvZGVMb2NhdGlvbixcbiAgICAgIGdvOiBuID0+IHJvdXRlci5uYXZpZ2F0ZShuKSxcbiAgICAgIHB1c2g6ICh0bywgc3RhdGUsIG9wdHMpID0+IHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSksXG4gICAgICByZXBsYWNlOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pXG4gICAgfTtcbiAgfSwgW3JvdXRlcl0pO1xuICBsZXQgYmFzZW5hbWUgPSByb3V0ZXIuYmFzZW5hbWUgfHwgXCIvXCI7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICByb3V0ZXIsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogZmFsc2UsXG4gICAgYmFzZW5hbWVcbiAgfSksIFtyb3V0ZXIsIG5hdmlnYXRvciwgYmFzZW5hbWVdKTtcbiAgLy8gVGhlIGZyYWdtZW50IGFuZCB7bnVsbH0gaGVyZSBhcmUgaW1wb3J0YW50ISAgV2UgbmVlZCB0aGVtIHRvIGtlZXAgUmVhY3QgMTgnc1xuICAvLyB1c2VJZCBoYXBweSB3aGVuIHdlIGFyZSBzZXJ2ZXItcmVuZGVyaW5nIHNpbmNlIHdlIG1heSBoYXZlIGEgPHNjcmlwdD4gaGVyZVxuICAvLyBjb250YWluaW5nIHRoZSBoeWRyYXRlZCBzZXJ2ZXItc2lkZSBzdGF0aWNDb250ZXh0IChmcm9tIFN0YXRpY1JvdXRlclByb3ZpZGVyKS5cbiAgLy8gdXNlSWQgcmVsaWVzIG9uIHRoZSBjb21wb25lbnQgdHJlZSBzdHJ1Y3R1cmUgdG8gZ2VuZXJhdGUgZGV0ZXJtaW5pc3RpYyBpZCdzXG4gIC8vIHNvIHdlIG5lZWQgdG8gZW5zdXJlIGl0IHJlbWFpbnMgdGhlIHNhbWUgb24gdGhlIGNsaWVudCBldmVuIHRob3VnaFxuICAvLyB3ZSBkb24ndCBuZWVkIHRoZSA8c2NyaXB0PiB0YWdcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogZGF0YVJvdXRlckNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogc3RhdGVcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRmV0Y2hlcnNDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGZldGNoZXJEYXRhLmN1cnJlbnRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVmlld1RyYW5zaXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHZ0Q29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5oaXN0b3J5QWN0aW9uLFxuICAgIG5hdmlnYXRvcjogbmF2aWdhdG9yLFxuICAgIGZ1dHVyZToge1xuICAgICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IHJvdXRlci5mdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGhcbiAgICB9XG4gIH0sIHN0YXRlLmluaXRpYWxpemVkIHx8IHJvdXRlci5mdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXMsIHtcbiAgICByb3V0ZXM6IHJvdXRlci5yb3V0ZXMsXG4gICAgZnV0dXJlOiByb3V0ZXIuZnV0dXJlLFxuICAgIHN0YXRlOiBzdGF0ZVxuICB9KSA6IGZhbGxiYWNrRWxlbWVudCkpKSkpLCBudWxsKTtcbn1cbmZ1bmN0aW9uIERhdGFSb3V0ZXMoX3JlZjMpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXMsXG4gICAgZnV0dXJlLFxuICAgIHN0YXRlXG4gIH0gPSBfcmVmMztcbiAgcmV0dXJuIFVOU0FGRV91c2VSb3V0ZXNJbXBsKHJvdXRlcywgdW5kZWZpbmVkLCBzdGF0ZSwgZnV0dXJlKTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBQcm92aWRlcyB0aGUgY2xlYW5lc3QgVVJMcy5cbiAqL1xuZnVuY3Rpb24gQnJvd3NlclJvdXRlcihfcmVmNCkge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGZ1dHVyZSxcbiAgICB3aW5kb3dcbiAgfSA9IF9yZWY0O1xuICBsZXQgaGlzdG9yeVJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVCcm93c2VySGlzdG9yeSh7XG4gICAgICB3aW5kb3csXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnksIHNldFN0YXRlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeSxcbiAgICBmdXR1cmU6IGZ1dHVyZVxuICB9KTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBTdG9yZXMgdGhlIGxvY2F0aW9uIGluIHRoZSBoYXNoXG4gKiBwb3J0aW9uIG9mIHRoZSBVUkwgc28gaXQgaXMgbm90IHNlbnQgdG8gdGhlIHNlcnZlci5cbiAqL1xuZnVuY3Rpb24gSGFzaFJvdXRlcihfcmVmNSkge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGZ1dHVyZSxcbiAgICB3aW5kb3dcbiAgfSA9IF9yZWY1O1xuICBsZXQgaGlzdG9yeVJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVIYXNoSGlzdG9yeSh7XG4gICAgICB3aW5kb3csXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnksIHNldFN0YXRlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeSxcbiAgICBmdXR1cmU6IGZ1dHVyZVxuICB9KTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIHRoYXQgYWNjZXB0cyBhIHByZS1pbnN0YW50aWF0ZWQgaGlzdG9yeSBvYmplY3QuIEl0J3MgaW1wb3J0YW50XG4gKiB0byBub3RlIHRoYXQgdXNpbmcgeW91ciBvd24gaGlzdG9yeSBvYmplY3QgaXMgaGlnaGx5IGRpc2NvdXJhZ2VkIGFuZCBtYXkgYWRkXG4gKiB0d28gdmVyc2lvbnMgb2YgdGhlIGhpc3RvcnkgbGlicmFyeSB0byB5b3VyIGJ1bmRsZXMgdW5sZXNzIHlvdSB1c2UgdGhlIHNhbWVcbiAqIHZlcnNpb24gb2YgdGhlIGhpc3RvcnkgbGlicmFyeSB0aGF0IFJlYWN0IFJvdXRlciB1c2VzIGludGVybmFsbHkuXG4gKi9cbmZ1bmN0aW9uIEhpc3RvcnlSb3V0ZXIoX3JlZjYpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBmdXR1cmUsXG4gICAgaGlzdG9yeVxuICB9ID0gX3JlZjY7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvbiAmJiBzdGFydFRyYW5zaXRpb25JbXBsID8gc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKSA6IHNldFN0YXRlSW1wbChuZXdTdGF0ZSk7XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5LFxuICAgIGZ1dHVyZTogZnV0dXJlXG4gIH0pO1xufVxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIaXN0b3J5Um91dGVyLmRpc3BsYXlOYW1lID0gXCJ1bnN0YWJsZV9IaXN0b3J5Um91dGVyXCI7XG59XG5jb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xuY29uc3QgQUJTT0xVVEVfVVJMX1JFR0VYID0gL14oPzpbYS16XVthLXowLTkrLi1dKjp8XFwvXFwvKS9pO1xuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSBgPGE+YC5cbiAqL1xuY29uc3QgTGluayA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpbmtXaXRoUmVmKF9yZWY3LCByZWYpIHtcbiAgbGV0IHtcbiAgICAgIG9uQ2xpY2ssXG4gICAgICByZWxhdGl2ZSxcbiAgICAgIHJlbG9hZERvY3VtZW50LFxuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlLFxuICAgICAgdGFyZ2V0LFxuICAgICAgdG8sXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICAgIH0gPSBfcmVmNyxcbiAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjcsIF9leGNsdWRlZCk7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgLy8gUmVuZGVyZWQgaW50byA8YSBocmVmPiBmb3IgYWJzb2x1dGUgVVJMc1xuICBsZXQgYWJzb2x1dGVIcmVmO1xuICBsZXQgaXNFeHRlcm5hbCA9IGZhbHNlO1xuICBpZiAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiICYmIEFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KHRvKSkge1xuICAgIC8vIFJlbmRlciB0aGUgYWJzb2x1dGUgaHJlZiBzZXJ2ZXItIGFuZCBjbGllbnQtc2lkZVxuICAgIGFic29sdXRlSHJlZiA9IHRvO1xuICAgIC8vIE9ubHkgY2hlY2sgZm9yIGV4dGVybmFsIG9yaWdpbnMgY2xpZW50LXNpZGVcbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgY3VycmVudFVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICBsZXQgdGFyZ2V0VXJsID0gdG8uc3RhcnRzV2l0aChcIi8vXCIpID8gbmV3IFVSTChjdXJyZW50VXJsLnByb3RvY29sICsgdG8pIDogbmV3IFVSTCh0byk7XG4gICAgICAgIGxldCBwYXRoID0gc3RyaXBCYXNlbmFtZSh0YXJnZXRVcmwucGF0aG5hbWUsIGJhc2VuYW1lKTtcbiAgICAgICAgaWYgKHRhcmdldFVybC5vcmlnaW4gPT09IGN1cnJlbnRVcmwub3JpZ2luICYmIHBhdGggIT0gbnVsbCkge1xuICAgICAgICAgIC8vIFN0cmlwIHRoZSBwcm90b2NvbC9vcmlnaW4vYmFzZW5hbWUgZm9yIHNhbWUtb3JpZ2luIGFic29sdXRlIFVSTHNcbiAgICAgICAgICB0byA9IHBhdGggKyB0YXJnZXRVcmwuc2VhcmNoICsgdGFyZ2V0VXJsLmhhc2g7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXNFeHRlcm5hbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gV2UgY2FuJ3QgZG8gZXh0ZXJuYWwgVVJMIGRldGVjdGlvbiB3aXRob3V0IGEgdmFsaWQgVVJMXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIjxMaW5rIHRvPVxcXCJcIiArIHRvICsgXCJcXFwiPiBjb250YWlucyBhbiBpbnZhbGlkIFVSTCB3aGljaCB3aWxsIHByb2JhYmx5IGJyZWFrIFwiICsgXCJ3aGVuIGNsaWNrZWQgLSBwbGVhc2UgdXBkYXRlIHRvIGEgdmFsaWQgVVJMIHBhdGguXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBSZW5kZXJlZCBpbnRvIDxhIGhyZWY+IGZvciByZWxhdGl2ZSBVUkxzXG4gIGxldCBocmVmID0gdXNlSHJlZih0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgaW50ZXJuYWxPbkNsaWNrID0gdXNlTGlua0NsaWNrSGFuZGxlcih0bywge1xuICAgIHJlcGxhY2UsXG4gICAgc3RhdGUsXG4gICAgdGFyZ2V0LFxuICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICByZWxhdGl2ZSxcbiAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICB9KTtcbiAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAob25DbGljaykgb25DbGljayhldmVudCk7XG4gICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBpbnRlcm5hbE9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gKFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWhhcy1jb250ZW50XG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhyZWY6IGFic29sdXRlSHJlZiB8fCBocmVmLFxuICAgICAgb25DbGljazogaXNFeHRlcm5hbCB8fCByZWxvYWREb2N1bWVudCA/IG9uQ2xpY2sgOiBoYW5kbGVDbGljayxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICB9KSlcbiAgKTtcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG59XG4vKipcbiAqIEEgYDxMaW5rPmAgd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cbmNvbnN0IE5hdkxpbmsgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBOYXZMaW5rV2l0aFJlZihfcmVmOCwgcmVmKSB7XG4gIGxldCB7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudFByb3AgPSBcInBhZ2VcIixcbiAgICAgIGNhc2VTZW5zaXRpdmUgPSBmYWxzZSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lUHJvcCA9IFwiXCIsXG4gICAgICBlbmQgPSBmYWxzZSxcbiAgICAgIHN0eWxlOiBzdHlsZVByb3AsXG4gICAgICB0byxcbiAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uLFxuICAgICAgY2hpbGRyZW5cbiAgICB9ID0gX3JlZjgsXG4gICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY4LCBfZXhjbHVkZWQyKTtcbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8sIHtcbiAgICByZWxhdGl2ZTogcmVzdC5yZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlclN0YXRlID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbmF2aWdhdG9yXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCBpc1RyYW5zaXRpb25pbmcgPSByb3V0ZXJTdGF0ZSAhPSBudWxsICYmXG4gIC8vIENvbmRpdGlvbmFsIHVzYWdlIGlzIE9LIGhlcmUgYmVjYXVzZSB0aGUgdXNhZ2Ugb2YgYSBkYXRhIHJvdXRlciBpcyBzdGF0aWNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gIHVzZVZpZXdUcmFuc2l0aW9uU3RhdGUocGF0aCkgJiYgdW5zdGFibGVfdmlld1RyYW5zaXRpb24gPT09IHRydWU7XG4gIGxldCB0b1BhdGhuYW1lID0gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKHBhdGgpLnBhdGhuYW1lIDogcGF0aC5wYXRobmFtZTtcbiAgbGV0IGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZTtcbiAgbGV0IG5leHRMb2NhdGlvblBhdGhuYW1lID0gcm91dGVyU3RhdGUgJiYgcm91dGVyU3RhdGUubmF2aWdhdGlvbiAmJiByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uID8gcm91dGVyU3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbi5wYXRobmFtZSA6IG51bGw7XG4gIGlmICghY2FzZVNlbnNpdGl2ZSkge1xuICAgIGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgbmV4dExvY2F0aW9uUGF0aG5hbWUgPSBuZXh0TG9jYXRpb25QYXRobmFtZSA/IG5leHRMb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xuICAgIHRvUGF0aG5hbWUgPSB0b1BhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gIH1cbiAgLy8gSWYgdGhlIGB0b2AgaGFzIGEgdHJhaWxpbmcgc2xhc2gsIGxvb2sgYXQgdGhhdCBleGFjdCBzcG90LiAgT3RoZXJ3aXNlLFxuICAvLyB3ZSdyZSBsb29raW5nIGZvciBhIHNsYXNoIF9hZnRlcl8gd2hhdCdzIGluIGB0b2AuICBGb3IgZXhhbXBsZTpcbiAgLy9cbiAgLy8gPE5hdkxpbmsgdG89XCIvdXNlcnNcIj4gYW5kIDxOYXZMaW5rIHRvPVwiL3VzZXJzL1wiPlxuICAvLyBib3RoIHdhbnQgdG8gbG9vayBmb3IgYSAvIGF0IGluZGV4IDYgdG8gbWF0Y2ggVVJMIGAvdXNlcnMvbWF0dGBcbiAgY29uc3QgZW5kU2xhc2hQb3NpdGlvbiA9IHRvUGF0aG5hbWUgIT09IFwiL1wiICYmIHRvUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpID8gdG9QYXRobmFtZS5sZW5ndGggLSAxIDogdG9QYXRobmFtZS5sZW5ndGg7XG4gIGxldCBpc0FjdGl2ZSA9IGxvY2F0aW9uUGF0aG5hbWUgPT09IHRvUGF0aG5hbWUgfHwgIWVuZCAmJiBsb2NhdGlvblBhdGhuYW1lLnN0YXJ0c1dpdGgodG9QYXRobmFtZSkgJiYgbG9jYXRpb25QYXRobmFtZS5jaGFyQXQoZW5kU2xhc2hQb3NpdGlvbikgPT09IFwiL1wiO1xuICBsZXQgaXNQZW5kaW5nID0gbmV4dExvY2F0aW9uUGF0aG5hbWUgIT0gbnVsbCAmJiAobmV4dExvY2F0aW9uUGF0aG5hbWUgPT09IHRvUGF0aG5hbWUgfHwgIWVuZCAmJiBuZXh0TG9jYXRpb25QYXRobmFtZS5zdGFydHNXaXRoKHRvUGF0aG5hbWUpICYmIG5leHRMb2NhdGlvblBhdGhuYW1lLmNoYXJBdCh0b1BhdGhuYW1lLmxlbmd0aCkgPT09IFwiL1wiKTtcbiAgbGV0IHJlbmRlclByb3BzID0ge1xuICAgIGlzQWN0aXZlLFxuICAgIGlzUGVuZGluZyxcbiAgICBpc1RyYW5zaXRpb25pbmdcbiAgfTtcbiAgbGV0IGFyaWFDdXJyZW50ID0gaXNBY3RpdmUgPyBhcmlhQ3VycmVudFByb3AgOiB1bmRlZmluZWQ7XG4gIGxldCBjbGFzc05hbWU7XG4gIGlmICh0eXBlb2YgY2xhc3NOYW1lUHJvcCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lUHJvcChyZW5kZXJQcm9wcyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgdGhlIGNsYXNzTmFtZSBwcm9wIGlzIG5vdCBhIGZ1bmN0aW9uLCB3ZSB1c2UgYSBkZWZhdWx0IGBhY3RpdmVgXG4gICAgLy8gY2xhc3MgZm9yIDxOYXZMaW5rIC8+cyB0aGF0IGFyZSBhY3RpdmUuIEluIHY1IGBhY3RpdmVgIHdhcyB0aGUgZGVmYXVsdFxuICAgIC8vIHZhbHVlIGZvciBgYWN0aXZlQ2xhc3NOYW1lYCwgYnV0IHdlIGFyZSByZW1vdmluZyB0aGF0IEFQSSBhbmQgY2FuIHN0aWxsXG4gICAgLy8gdXNlIHRoZSBvbGQgZGVmYXVsdCBiZWhhdmlvciBmb3IgYSBjbGVhbmVyIHVwZ3JhZGUgcGF0aCBhbmQga2VlcCB0aGVcbiAgICAvLyBzaW1wbGUgc3R5bGluZyBydWxlcyB3b3JraW5nIGFzIHRoZXkgY3VycmVudGx5IGRvLlxuICAgIGNsYXNzTmFtZSA9IFtjbGFzc05hbWVQcm9wLCBpc0FjdGl2ZSA/IFwiYWN0aXZlXCIgOiBudWxsLCBpc1BlbmRpbmcgPyBcInBlbmRpbmdcIiA6IG51bGwsIGlzVHJhbnNpdGlvbmluZyA/IFwidHJhbnNpdGlvbmluZ1wiIDogbnVsbF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpO1xuICB9XG4gIGxldCBzdHlsZSA9IHR5cGVvZiBzdHlsZVByb3AgPT09IFwiZnVuY3Rpb25cIiA/IHN0eWxlUHJvcChyZW5kZXJQcm9wcykgOiBzdHlsZVByb3A7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50LFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIHJlZjogcmVmLFxuICAgIHN0eWxlOiBzdHlsZSxcbiAgICB0bzogdG8sXG4gICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb246IHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXG4gIH0pLCB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IGNoaWxkcmVuKHJlbmRlclByb3BzKSA6IGNoaWxkcmVuKTtcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG59XG4vKipcbiAqIEEgYEByZW1peC1ydW4vcm91dGVyYC1hd2FyZSBgPGZvcm0+YC4gSXQgYmVoYXZlcyBsaWtlIGEgbm9ybWFsIGZvcm0gZXhjZXB0XG4gKiB0aGF0IHRoZSBpbnRlcmFjdGlvbiB3aXRoIHRoZSBzZXJ2ZXIgaXMgd2l0aCBgZmV0Y2hgIGluc3RlYWQgb2YgbmV3IGRvY3VtZW50XG4gKiByZXF1ZXN0cywgYWxsb3dpbmcgY29tcG9uZW50cyB0byBhZGQgbmljZXIgVVggdG8gdGhlIHBhZ2UgYXMgdGhlIGZvcm0gaXNcbiAqIHN1Ym1pdHRlZCBhbmQgcmV0dXJucyB3aXRoIGRhdGEuXG4gKi9cbmNvbnN0IEZvcm0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigoX3JlZjksIGZvcndhcmRlZFJlZikgPT4ge1xuICBsZXQge1xuICAgICAgZmV0Y2hlcktleSxcbiAgICAgIG5hdmlnYXRlLFxuICAgICAgcmVsb2FkRG9jdW1lbnQsXG4gICAgICByZXBsYWNlLFxuICAgICAgc3RhdGUsXG4gICAgICBtZXRob2QgPSBkZWZhdWx0TWV0aG9kLFxuICAgICAgYWN0aW9uLFxuICAgICAgb25TdWJtaXQsXG4gICAgICByZWxhdGl2ZSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXG4gICAgfSA9IF9yZWY5LFxuICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjksIF9leGNsdWRlZDMpO1xuICBsZXQgc3VibWl0ID0gdXNlU3VibWl0KCk7XG4gIGxldCBmb3JtQWN0aW9uID0gdXNlRm9ybUFjdGlvbihhY3Rpb24sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGZvcm1NZXRob2QgPSBtZXRob2QudG9Mb3dlckNhc2UoKSA9PT0gXCJnZXRcIiA/IFwiZ2V0XCIgOiBcInBvc3RcIjtcbiAgbGV0IHN1Ym1pdEhhbmRsZXIgPSBldmVudCA9PiB7XG4gICAgb25TdWJtaXQgJiYgb25TdWJtaXQoZXZlbnQpO1xuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBsZXQgc3VibWl0dGVyID0gZXZlbnQubmF0aXZlRXZlbnQuc3VibWl0dGVyO1xuICAgIGxldCBzdWJtaXRNZXRob2QgPSAoc3VibWl0dGVyID09IG51bGwgPyB2b2lkIDAgOiBzdWJtaXR0ZXIuZ2V0QXR0cmlidXRlKFwiZm9ybW1ldGhvZFwiKSkgfHwgbWV0aG9kO1xuICAgIHN1Ym1pdChzdWJtaXR0ZXIgfHwgZXZlbnQuY3VycmVudFRhcmdldCwge1xuICAgICAgZmV0Y2hlcktleSxcbiAgICAgIG1ldGhvZDogc3VibWl0TWV0aG9kLFxuICAgICAgbmF2aWdhdGUsXG4gICAgICByZXBsYWNlLFxuICAgICAgc3RhdGUsXG4gICAgICByZWxhdGl2ZSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXG4gICAgfSk7XG4gIH07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImZvcm1cIiwgX2V4dGVuZHMoe1xuICAgIHJlZjogZm9yd2FyZGVkUmVmLFxuICAgIG1ldGhvZDogZm9ybU1ldGhvZCxcbiAgICBhY3Rpb246IGZvcm1BY3Rpb24sXG4gICAgb25TdWJtaXQ6IHJlbG9hZERvY3VtZW50ID8gb25TdWJtaXQgOiBzdWJtaXRIYW5kbGVyXG4gIH0sIHByb3BzKSk7XG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgRm9ybS5kaXNwbGF5TmFtZSA9IFwiRm9ybVwiO1xufVxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCB3aWxsIGVtdWxhdGUgdGhlIGJyb3dzZXIncyBzY3JvbGwgcmVzdG9yYXRpb24gb24gbG9jYXRpb25cbiAqIGNoYW5nZXMuXG4gKi9cbmZ1bmN0aW9uIFNjcm9sbFJlc3RvcmF0aW9uKF9yZWYxMCkge1xuICBsZXQge1xuICAgIGdldEtleSxcbiAgICBzdG9yYWdlS2V5XG4gIH0gPSBfcmVmMTA7XG4gIHVzZVNjcm9sbFJlc3RvcmF0aW9uKHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9KTtcbiAgcmV0dXJuIG51bGw7XG59XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFNjcm9sbFJlc3RvcmF0aW9uLmRpc3BsYXlOYW1lID0gXCJTY3JvbGxSZXN0b3JhdGlvblwiO1xufVxuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIEhvb2tzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xudmFyIERhdGFSb3V0ZXJIb29rO1xuKGZ1bmN0aW9uIChEYXRhUm91dGVySG9vaykge1xuICBEYXRhUm91dGVySG9va1tcIlVzZVNjcm9sbFJlc3RvcmF0aW9uXCJdID0gXCJ1c2VTY3JvbGxSZXN0b3JhdGlvblwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZVN1Ym1pdFwiXSA9IFwidXNlU3VibWl0XCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlU3VibWl0RmV0Y2hlclwiXSA9IFwidXNlU3VibWl0RmV0Y2hlclwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZUZldGNoZXJcIl0gPSBcInVzZUZldGNoZXJcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJ1c2VWaWV3VHJhbnNpdGlvblN0YXRlXCJdID0gXCJ1c2VWaWV3VHJhbnNpdGlvblN0YXRlXCI7XG59KShEYXRhUm91dGVySG9vayB8fCAoRGF0YVJvdXRlckhvb2sgPSB7fSkpO1xudmFyIERhdGFSb3V0ZXJTdGF0ZUhvb2s7XG4oZnVuY3Rpb24gKERhdGFSb3V0ZXJTdGF0ZUhvb2spIHtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUZldGNoZXJcIl0gPSBcInVzZUZldGNoZXJcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUZldGNoZXJzXCJdID0gXCJ1c2VGZXRjaGVyc1wiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlU2Nyb2xsUmVzdG9yYXRpb25cIl0gPSBcInVzZVNjcm9sbFJlc3RvcmF0aW9uXCI7XG59KShEYXRhUm91dGVyU3RhdGVIb29rIHx8IChEYXRhUm91dGVyU3RhdGVIb29rID0ge30pKTtcbi8vIEludGVybmFsIGhvb2tzXG5mdW5jdGlvbiBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSB7XG4gIHJldHVybiBob29rTmFtZSArIFwiIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBkYXRhIHJvdXRlci4gIFNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9yb3V0ZXJzL3BpY2tpbmctYS1yb3V0ZXIuXCI7XG59XG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyQ29udGV4dChob29rTmFtZSkge1xuICBsZXQgY3R4ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQpO1xuICAhY3R4ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBjdHg7XG59XG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyU3RhdGUoaG9va05hbWUpIHtcbiAgbGV0IHN0YXRlID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gICFzdGF0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gc3RhdGU7XG59XG4vLyBFeHRlcm5hbCBob29rc1xuLyoqXG4gKiBIYW5kbGVzIHRoZSBjbGljayBiZWhhdmlvciBmb3Igcm91dGVyIGA8TGluaz5gIGNvbXBvbmVudHMuIFRoaXMgaXMgdXNlZnVsIGlmXG4gKiB5b3UgbmVlZCB0byBjcmVhdGUgY3VzdG9tIGA8TGluaz5gIGNvbXBvbmVudHMgd2l0aCB0aGUgc2FtZSBjbGljayBiZWhhdmlvciB3ZVxuICogdXNlIGluIG91ciBleHBvcnRlZCBgPExpbms+YC5cbiAqL1xuZnVuY3Rpb24gdXNlTGlua0NsaWNrSGFuZGxlcih0bywgX3RlbXApIHtcbiAgbGV0IHtcbiAgICB0YXJnZXQsXG4gICAgcmVwbGFjZTogcmVwbGFjZVByb3AsXG4gICAgc3RhdGUsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgIHJlbGF0aXZlLFxuICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBpZiAoc2hvdWxkUHJvY2Vzc0xpbmtDbGljayhldmVudCwgdGFyZ2V0KSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIC8vIElmIHRoZSBVUkwgaGFzbid0IGNoYW5nZWQsIGEgcmVndWxhciA8YT4gd2lsbCBkbyBhIHJlcGxhY2UgaW5zdGVhZCBvZlxuICAgICAgLy8gYSBwdXNoLCBzbyBkbyB0aGUgc2FtZSBoZXJlIHVubGVzcyB0aGUgcmVwbGFjZSBwcm9wIGlzIGV4cGxpY2l0bHkgc2V0XG4gICAgICBsZXQgcmVwbGFjZSA9IHJlcGxhY2VQcm9wICE9PSB1bmRlZmluZWQgPyByZXBsYWNlUHJvcCA6IGNyZWF0ZVBhdGgobG9jYXRpb24pID09PSBjcmVhdGVQYXRoKHBhdGgpO1xuICAgICAgbmF2aWdhdGUodG8sIHtcbiAgICAgICAgcmVwbGFjZSxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgcmVsYXRpdmUsXG4gICAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtsb2NhdGlvbiwgbmF2aWdhdGUsIHBhdGgsIHJlcGxhY2VQcm9wLCBzdGF0ZSwgdGFyZ2V0LCB0bywgcHJldmVudFNjcm9sbFJlc2V0LCByZWxhdGl2ZSwgdW5zdGFibGVfdmlld1RyYW5zaXRpb25dKTtcbn1cbi8qKlxuICogQSBjb252ZW5pZW50IHdyYXBwZXIgZm9yIHJlYWRpbmcgYW5kIHdyaXRpbmcgc2VhcmNoIHBhcmFtZXRlcnMgdmlhIHRoZVxuICogVVJMU2VhcmNoUGFyYW1zIGludGVyZmFjZS5cbiAqL1xuZnVuY3Rpb24gdXNlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09IFwidW5kZWZpbmVkXCIsIFwiWW91IGNhbm5vdCB1c2UgdGhlIGB1c2VTZWFyY2hQYXJhbXNgIGhvb2sgaW4gYSBicm93c2VyIHRoYXQgZG9lcyBub3QgXCIgKyBcInN1cHBvcnQgdGhlIFVSTFNlYXJjaFBhcmFtcyBBUEkuIElmIHlvdSBuZWVkIHRvIHN1cHBvcnQgSW50ZXJuZXQgXCIgKyBcIkV4cGxvcmVyIDExLCB3ZSByZWNvbW1lbmQgeW91IGxvYWQgYSBwb2x5ZmlsbCBzdWNoIGFzIFwiICsgXCJodHRwczovL2dpdGh1Yi5jb20vdW5nYXAvdXJsLXNlYXJjaC1wYXJhbXNcXG5cXG5cIiArIFwiSWYgeW91J3JlIHVuc3VyZSBob3cgdG8gbG9hZCBwb2x5ZmlsbHMsIHdlIHJlY29tbWVuZCB5b3UgY2hlY2sgb3V0IFwiICsgXCJodHRwczovL3BvbHlmaWxsLmlvL3YzLyB3aGljaCBwcm92aWRlcyBzb21lIHJlY29tbWVuZGF0aW9ucyBhYm91dCBob3cgXCIgKyBcInRvIGxvYWQgcG9seWZpbGxzIG9ubHkgZm9yIHVzZXJzIHRoYXQgbmVlZCB0aGVtLCBpbnN0ZWFkIG9mIGZvciBldmVyeSBcIiArIFwidXNlci5cIikgOiB2b2lkIDA7XG4gIGxldCBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmID0gUmVhY3QudXNlUmVmKGNyZWF0ZVNlYXJjaFBhcmFtcyhkZWZhdWx0SW5pdCkpO1xuICBsZXQgaGFzU2V0U2VhcmNoUGFyYW1zUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IFJlYWN0LnVzZU1lbW8oKCkgPT5cbiAgLy8gT25seSBtZXJnZSBpbiB0aGUgZGVmYXVsdHMgaWYgd2UgaGF2ZW4ndCB5ZXQgY2FsbGVkIHNldFNlYXJjaFBhcmFtcy5cbiAgLy8gT25jZSB3ZSBjYWxsIHRoYXQgd2Ugd2FudCB0aG9zZSB0byB0YWtlIHByZWNlZGVuY2UsIG90aGVyd2lzZSB5b3UgY2FuJ3RcbiAgLy8gcmVtb3ZlIGEgcGFyYW0gd2l0aCBzZXRTZWFyY2hQYXJhbXMoe30pIGlmIGl0IGhhcyBhbiBpbml0aWFsIHZhbHVlXG4gIGdldFNlYXJjaFBhcmFtc0ZvckxvY2F0aW9uKGxvY2F0aW9uLnNlYXJjaCwgaGFzU2V0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQgPyBudWxsIDogZGVmYXVsdFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50KSwgW2xvY2F0aW9uLnNlYXJjaF0pO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgc2V0U2VhcmNoUGFyYW1zID0gUmVhY3QudXNlQ2FsbGJhY2soKG5leHRJbml0LCBuYXZpZ2F0ZU9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBuZXdTZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXModHlwZW9mIG5leHRJbml0ID09PSBcImZ1bmN0aW9uXCIgPyBuZXh0SW5pdChzZWFyY2hQYXJhbXMpIDogbmV4dEluaXQpO1xuICAgIGhhc1NldFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICBuYXZpZ2F0ZShcIj9cIiArIG5ld1NlYXJjaFBhcmFtcywgbmF2aWdhdGVPcHRpb25zKTtcbiAgfSwgW25hdmlnYXRlLCBzZWFyY2hQYXJhbXNdKTtcbiAgcmV0dXJuIFtzZWFyY2hQYXJhbXMsIHNldFNlYXJjaFBhcmFtc107XG59XG5mdW5jdGlvbiB2YWxpZGF0ZUNsaWVudFNpZGVTdWJtaXNzaW9uKCkge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBjYWxsaW5nIHN1Ym1pdCBkdXJpbmcgdGhlIHNlcnZlciByZW5kZXIuIFwiICsgXCJUcnkgY2FsbGluZyBzdWJtaXQgd2l0aGluIGEgYHVzZUVmZmVjdGAgb3IgY2FsbGJhY2sgaW5zdGVhZC5cIik7XG4gIH1cbn1cbmxldCBmZXRjaGVySWQgPSAwO1xubGV0IGdldFVuaXF1ZUZldGNoZXJJZCA9ICgpID0+IFwiX19cIiArIFN0cmluZygrK2ZldGNoZXJJZCkgKyBcIl9fXCI7XG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IG1heSBiZSB1c2VkIHRvIHByb2dyYW1tYXRpY2FsbHkgc3VibWl0IGEgZm9ybSAob3JcbiAqIHNvbWUgYXJiaXRyYXJ5IGRhdGEpIHRvIHRoZSBzZXJ2ZXIuXG4gKi9cbmZ1bmN0aW9uIHVzZVN1Ym1pdCgpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVN1Ym1pdCk7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IGN1cnJlbnRSb3V0ZUlkID0gVU5TQUZFX3VzZVJvdXRlSWQoKTtcbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIHZhbGlkYXRlQ2xpZW50U2lkZVN1Ym1pc3Npb24oKTtcbiAgICBsZXQge1xuICAgICAgYWN0aW9uLFxuICAgICAgbWV0aG9kLFxuICAgICAgZW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhLFxuICAgICAgYm9keVxuICAgIH0gPSBnZXRGb3JtU3VibWlzc2lvbkluZm8odGFyZ2V0LCBiYXNlbmFtZSk7XG4gICAgaWYgKG9wdGlvbnMubmF2aWdhdGUgPT09IGZhbHNlKSB7XG4gICAgICBsZXQga2V5ID0gb3B0aW9ucy5mZXRjaGVyS2V5IHx8IGdldFVuaXF1ZUZldGNoZXJJZCgpO1xuICAgICAgcm91dGVyLmZldGNoKGtleSwgY3VycmVudFJvdXRlSWQsIG9wdGlvbnMuYWN0aW9uIHx8IGFjdGlvbiwge1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdGlvbnMucHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgICBmb3JtRGF0YSxcbiAgICAgICAgYm9keSxcbiAgICAgICAgZm9ybU1ldGhvZDogb3B0aW9ucy5tZXRob2QgfHwgbWV0aG9kLFxuICAgICAgICBmb3JtRW5jVHlwZTogb3B0aW9ucy5lbmNUeXBlIHx8IGVuY1R5cGUsXG4gICAgICAgIHVuc3RhYmxlX2ZsdXNoU3luYzogb3B0aW9ucy51bnN0YWJsZV9mbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByb3V0ZXIubmF2aWdhdGUob3B0aW9ucy5hY3Rpb24gfHwgYWN0aW9uLCB7XG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0aW9ucy5wcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgIGZvcm1EYXRhLFxuICAgICAgICBib2R5LFxuICAgICAgICBmb3JtTWV0aG9kOiBvcHRpb25zLm1ldGhvZCB8fCBtZXRob2QsXG4gICAgICAgIGZvcm1FbmNUeXBlOiBvcHRpb25zLmVuY1R5cGUgfHwgZW5jVHlwZSxcbiAgICAgICAgcmVwbGFjZTogb3B0aW9ucy5yZXBsYWNlLFxuICAgICAgICBzdGF0ZTogb3B0aW9ucy5zdGF0ZSxcbiAgICAgICAgZnJvbVJvdXRlSWQ6IGN1cnJlbnRSb3V0ZUlkLFxuICAgICAgICB1bnN0YWJsZV9mbHVzaFN5bmM6IG9wdGlvbnMudW5zdGFibGVfZmx1c2hTeW5jLFxuICAgICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbjogb3B0aW9ucy51bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbcm91dGVyLCBiYXNlbmFtZSwgY3VycmVudFJvdXRlSWRdKTtcbn1cbi8vIHY3OiBFdmVudHVhbGx5IHdlIHNob3VsZCBkZXByZWNhdGUgdGhpcyBlbnRpcmVseSBpbiBmYXZvciBvZiB1c2luZyB0aGVcbi8vIHJvdXRlciBtZXRob2QgZGlyZWN0bHk/XG5mdW5jdGlvbiB1c2VGb3JtQWN0aW9uKGFjdGlvbiwgX3RlbXAyKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHJvdXRlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX1JvdXRlQ29udGV4dCk7XG4gICFyb3V0ZUNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZvcm1BY3Rpb24gbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgW21hdGNoXSA9IHJvdXRlQ29udGV4dC5tYXRjaGVzLnNsaWNlKC0xKTtcbiAgLy8gU2hhbGxvdyBjbG9uZSBwYXRoIHNvIHdlIGNhbiBtb2RpZnkgaXQgYmVsb3csIG90aGVyd2lzZSB3ZSBtb2RpZnkgdGhlXG4gIC8vIG9iamVjdCByZWZlcmVuY2VkIGJ5IHVzZU1lbW8gaW5zaWRlIHVzZVJlc29sdmVkUGF0aFxuICBsZXQgcGF0aCA9IF9leHRlbmRzKHt9LCB1c2VSZXNvbHZlZFBhdGgoYWN0aW9uID8gYWN0aW9uIDogXCIuXCIsIHtcbiAgICByZWxhdGl2ZVxuICB9KSk7XG4gIC8vIElmIG5vIGFjdGlvbiB3YXMgc3BlY2lmaWVkLCBicm93c2VycyB3aWxsIHBlcnNpc3QgY3VycmVudCBzZWFyY2ggcGFyYW1zXG4gIC8vIHdoZW4gZGV0ZXJtaW5pbmcgdGhlIHBhdGgsIHNvIG1hdGNoIHRoYXQgYmVoYXZpb3JcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZW1peC9pc3N1ZXMvOTI3XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGlmIChhY3Rpb24gPT0gbnVsbCkge1xuICAgIC8vIFNhZmUgdG8gd3JpdGUgdG8gdGhpcyBkaXJlY3RseSBoZXJlIHNpbmNlIGlmIGFjdGlvbiB3YXMgdW5kZWZpbmVkLCB3ZVxuICAgIC8vIHdvdWxkIGhhdmUgY2FsbGVkIHVzZVJlc29sdmVkUGF0aChcIi5cIikgd2hpY2ggd2lsbCBuZXZlciBpbmNsdWRlIGEgc2VhcmNoXG4gICAgcGF0aC5zZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2g7XG4gICAgLy8gV2hlbiBncmFiYmluZyBzZWFyY2ggcGFyYW1zIGZyb20gdGhlIFVSTCwgcmVtb3ZlIGFueSBpbmNsdWRlZCA/aW5kZXggcGFyYW1cbiAgICAvLyBzaW5jZSBpdCBtaWdodCBub3QgYXBwbHkgdG8gb3VyIGNvbnRleHR1YWwgcm91dGUuICBXZSBhZGQgaXQgYmFjayBiYXNlZFxuICAgIC8vIG9uIG1hdGNoLnJvdXRlLmluZGV4IGJlbG93XG4gICAgbGV0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMocGF0aC5zZWFyY2gpO1xuICAgIGlmIChwYXJhbXMuaGFzKFwiaW5kZXhcIikgJiYgcGFyYW1zLmdldChcImluZGV4XCIpID09PSBcIlwiKSB7XG4gICAgICBwYXJhbXMuZGVsZXRlKFwiaW5kZXhcIik7XG4gICAgICBwYXRoLnNlYXJjaCA9IHBhcmFtcy50b1N0cmluZygpID8gXCI/XCIgKyBwYXJhbXMudG9TdHJpbmcoKSA6IFwiXCI7XG4gICAgfVxuICB9XG4gIGlmICgoIWFjdGlvbiB8fCBhY3Rpb24gPT09IFwiLlwiKSAmJiBtYXRjaC5yb3V0ZS5pbmRleCkge1xuICAgIHBhdGguc2VhcmNoID0gcGF0aC5zZWFyY2ggPyBwYXRoLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgXCI/aW5kZXgmXCIpIDogXCI/aW5kZXhcIjtcbiAgfVxuICAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gIC8vIHRvIGNyZWF0aW5nIHRoZSBmb3JtIGFjdGlvbi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2VcbiAgLy8gdGhlIHJhdyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlXG4gIC8vIHByZXNlbmNlIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBhY3Rpb25zXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBwYXRoLnBhdGhuYW1lID0gcGF0aC5wYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlUGF0aChwYXRoKTtcbn1cbi8vIFRPRE86ICh2NykgQ2hhbmdlIHRoZSB1c2VGZXRjaGVyIGdlbmVyaWMgZGVmYXVsdCBmcm9tIGBhbnlgIHRvIGB1bmtub3duYFxuLyoqXG4gKiBJbnRlcmFjdHMgd2l0aCByb3V0ZSBsb2FkZXJzIGFuZCBhY3Rpb25zIHdpdGhvdXQgY2F1c2luZyBhIG5hdmlnYXRpb24uIEdyZWF0XG4gKiBmb3IgYW55IGludGVyYWN0aW9uIHRoYXQgc3RheXMgb24gdGhlIHNhbWUgcGFnZS5cbiAqL1xuZnVuY3Rpb24gdXNlRmV0Y2hlcihfdGVtcDMpIHtcbiAgdmFyIF9yb3V0ZSRtYXRjaGVzO1xuICBsZXQge1xuICAgIGtleVxuICB9ID0gX3RlbXAzID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMztcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZUZldGNoZXIpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VGZXRjaGVyKTtcbiAgbGV0IGZldGNoZXJEYXRhID0gUmVhY3QudXNlQ29udGV4dChGZXRjaGVyc0NvbnRleHQpO1xuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9Sb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVJZCA9IChfcm91dGUkbWF0Y2hlcyA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yb3V0ZSRtYXRjaGVzLnJvdXRlLmlkO1xuICAhZmV0Y2hlckRhdGEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZldGNoZXIgbXVzdCBiZSB1c2VkIGluc2lkZSBhIEZldGNoZXJzQ29udGV4dFwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhcm91dGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZldGNoZXIgbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhKHJvdXRlSWQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcInVzZUZldGNoZXIgY2FuIG9ubHkgYmUgdXNlZCBvbiByb3V0ZXMgdGhhdCBjb250YWluIGEgdW5pcXVlIFxcXCJpZFxcXCJcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgLy8gRmV0Y2hlciBrZXkgaGFuZGxpbmdcbiAgbGV0IFtmZXRjaGVyS2V5LCBzZXRGZXRjaGVyS2V5XSA9IFJlYWN0LnVzZVN0YXRlKGtleSB8fCBcIlwiKTtcbiAgaWYgKGtleSAmJiBrZXkgIT09IGZldGNoZXJLZXkpIHtcbiAgICBzZXRGZXRjaGVyS2V5KGtleSk7XG4gIH0gZWxzZSBpZiAoIWZldGNoZXJLZXkpIHtcbiAgICBzZXRGZXRjaGVyS2V5KGdldFVuaXF1ZUZldGNoZXJJZCgpKTtcbiAgfVxuICAvLyBSZWdpc3RyYXRpb24vY2xlYW51cFxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJvdXRlci5nZXRGZXRjaGVyKGZldGNoZXJLZXkpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAvLyBUZWxsIHRoZSByb3V0ZXIgd2UndmUgdW5tb3VudGVkIC0gaWYgdjdfZmV0Y2hlclBlcnNpc3QgaXMgZW5hYmxlZCB0aGlzXG4gICAgICAvLyB3aWxsIG5vdCBkZWxldGUgaW1tZWRpYXRlbHkgYnV0IGluc3RlYWQgcXVldWUgdXAgYSBkZWxldGUgYWZ0ZXIgdGhlXG4gICAgICAvLyBmZXRjaGVyIHJldHVybnMgdG8gYW4gYGlkbGVgIHN0YXRlXG4gICAgICByb3V0ZXIuZGVsZXRlRmV0Y2hlcihmZXRjaGVyS2V5KTtcbiAgICB9O1xuICB9LCBbcm91dGVyLCBmZXRjaGVyS2V5XSk7XG4gIC8vIEZldGNoZXIgYWRkaXRpb25zXG4gIGxldCBsb2FkID0gUmVhY3QudXNlQ2FsbGJhY2soKGhyZWYsIG9wdHMpID0+IHtcbiAgICAhcm91dGVJZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiTm8gcm91dGVJZCBhdmFpbGFibGUgZm9yIGZldGNoZXIubG9hZCgpXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcm91dGVyLmZldGNoKGZldGNoZXJLZXksIHJvdXRlSWQsIGhyZWYsIG9wdHMpO1xuICB9LCBbZmV0Y2hlcktleSwgcm91dGVJZCwgcm91dGVyXSk7XG4gIGxldCBzdWJtaXRJbXBsID0gdXNlU3VibWl0KCk7XG4gIGxldCBzdWJtaXQgPSBSZWFjdC51c2VDYWxsYmFjaygodGFyZ2V0LCBvcHRzKSA9PiB7XG4gICAgc3VibWl0SW1wbCh0YXJnZXQsIF9leHRlbmRzKHt9LCBvcHRzLCB7XG4gICAgICBuYXZpZ2F0ZTogZmFsc2UsXG4gICAgICBmZXRjaGVyS2V5XG4gICAgfSkpO1xuICB9LCBbZmV0Y2hlcktleSwgc3VibWl0SW1wbF0pO1xuICBsZXQgRmV0Y2hlckZvcm0gPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgRmV0Y2hlckZvcm0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm0sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBuYXZpZ2F0ZTogZmFsc2UsXG4gICAgICAgIGZldGNoZXJLZXk6IGZldGNoZXJLZXksXG4gICAgICAgIHJlZjogcmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgRmV0Y2hlckZvcm0uZGlzcGxheU5hbWUgPSBcImZldGNoZXIuRm9ybVwiO1xuICAgIH1cbiAgICByZXR1cm4gRmV0Y2hlckZvcm07XG4gIH0sIFtmZXRjaGVyS2V5XSk7XG4gIC8vIEV4cG9zZWQgRmV0Y2hlcldpdGhDb21wb25lbnRzXG4gIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGZldGNoZXJLZXkpIHx8IElETEVfRkVUQ0hFUjtcbiAgbGV0IGRhdGEgPSBmZXRjaGVyRGF0YS5nZXQoZmV0Y2hlcktleSk7XG4gIGxldCBmZXRjaGVyV2l0aENvbXBvbmVudHMgPSBSZWFjdC51c2VNZW1vKCgpID0+IF9leHRlbmRzKHtcbiAgICBGb3JtOiBGZXRjaGVyRm9ybSxcbiAgICBzdWJtaXQsXG4gICAgbG9hZFxuICB9LCBmZXRjaGVyLCB7XG4gICAgZGF0YVxuICB9KSwgW0ZldGNoZXJGb3JtLCBzdWJtaXQsIGxvYWQsIGZldGNoZXIsIGRhdGFdKTtcbiAgcmV0dXJuIGZldGNoZXJXaXRoQ29tcG9uZW50cztcbn1cbi8qKlxuICogUHJvdmlkZXMgYWxsIGZldGNoZXJzIGN1cnJlbnRseSBvbiB0aGUgcGFnZS4gVXNlZnVsIGZvciBsYXlvdXRzIGFuZCBwYXJlbnRcbiAqIHJvdXRlcyB0aGF0IG5lZWQgdG8gcHJvdmlkZSBwZW5kaW5nL29wdGltaXN0aWMgVUkgcmVnYXJkaW5nIHRoZSBmZXRjaC5cbiAqL1xuZnVuY3Rpb24gdXNlRmV0Y2hlcnMoKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUZldGNoZXJzKTtcbiAgcmV0dXJuIEFycmF5LmZyb20oc3RhdGUuZmV0Y2hlcnMuZW50cmllcygpKS5tYXAoX3JlZjExID0+IHtcbiAgICBsZXQgW2tleSwgZmV0Y2hlcl0gPSBfcmVmMTE7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBmZXRjaGVyLCB7XG4gICAgICBrZXlcbiAgICB9KTtcbiAgfSk7XG59XG5jb25zdCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVkgPSBcInJlYWN0LXJvdXRlci1zY3JvbGwtcG9zaXRpb25zXCI7XG5sZXQgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSB7fTtcbi8qKlxuICogV2hlbiByZW5kZXJlZCBpbnNpZGUgYSBSb3V0ZXJQcm92aWRlciwgd2lsbCByZXN0b3JlIHNjcm9sbCBwb3NpdGlvbnMgb24gbmF2aWdhdGlvbnNcbiAqL1xuZnVuY3Rpb24gdXNlU2Nyb2xsUmVzdG9yYXRpb24oX3RlbXA0KSB7XG4gIGxldCB7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSA9IF90ZW1wNCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDQ7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VTY3JvbGxSZXN0b3JhdGlvbik7XG4gIGxldCB7XG4gICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldFxuICB9ID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlU2Nyb2xsUmVzdG9yYXRpb24pO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBtYXRjaGVzID0gdXNlTWF0Y2hlcygpO1xuICBsZXQgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb24oKTtcbiAgLy8gVHJpZ2dlciBtYW51YWwgc2Nyb2xsIHJlc3RvcmF0aW9uIHdoaWxlIHdlJ3JlIGFjdGl2ZVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJtYW51YWxcIjtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcImF1dG9cIjtcbiAgICB9O1xuICB9LCBbXSk7XG4gIC8vIFNhdmUgcG9zaXRpb25zIG9uIHBhZ2VoaWRlXG4gIHVzZVBhZ2VIaWRlKFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAobmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIGxldCBrZXkgPSAoZ2V0S2V5ID8gZ2V0S2V5KGxvY2F0aW9uLCBtYXRjaGVzKSA6IG51bGwpIHx8IGxvY2F0aW9uLmtleTtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV0gPSB3aW5kb3cuc2Nyb2xsWTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oc3RvcmFnZUtleSB8fCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVksIEpTT04uc3RyaW5naWZ5KHNhdmVkU2Nyb2xsUG9zaXRpb25zKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIkZhaWxlZCB0byBzYXZlIHNjcm9sbCBwb3NpdGlvbnMgaW4gc2Vzc2lvblN0b3JhZ2UsIDxTY3JvbGxSZXN0b3JhdGlvbiAvPiB3aWxsIG5vdCB3b3JrIHByb3Blcmx5IChcIiArIGVycm9yICsgXCIpLlwiKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcImF1dG9cIjtcbiAgfSwgW3N0b3JhZ2VLZXksIGdldEtleSwgbmF2aWdhdGlvbi5zdGF0ZSwgbG9jYXRpb24sIG1hdGNoZXNdKSk7XG4gIC8vIFJlYWQgaW4gYW55IHNhdmVkIHNjcm9sbCBsb2NhdGlvbnNcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgc2Vzc2lvblBvc2l0aW9ucyA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oc3RvcmFnZUtleSB8fCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVkpO1xuICAgICAgICBpZiAoc2Vzc2lvblBvc2l0aW9ucykge1xuICAgICAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gSlNPTi5wYXJzZShzZXNzaW9uUG9zaXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBuby1vcCwgdXNlIGRlZmF1bHQgZW1wdHkgb2JqZWN0XG4gICAgICB9XG4gICAgfSwgW3N0b3JhZ2VLZXldKTtcbiAgICAvLyBFbmFibGUgc2Nyb2xsIHJlc3RvcmF0aW9uIGluIHRoZSByb3V0ZXJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgbGV0IGdldEtleVdpdGhvdXRCYXNlbmFtZSA9IGdldEtleSAmJiBiYXNlbmFtZSAhPT0gXCIvXCIgPyAobG9jYXRpb24sIG1hdGNoZXMpID0+IGdldEtleSggLy8gU3RyaXAgdGhlIGJhc2VuYW1lIHRvIG1hdGNoIHVzZUxvY2F0aW9uKClcbiAgICAgIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICBwYXRobmFtZTogc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KSwgbWF0Y2hlcykgOiBnZXRLZXk7XG4gICAgICBsZXQgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uID0gcm91dGVyID09IG51bGwgPyB2b2lkIDAgOiByb3V0ZXIuZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24oc2F2ZWRTY3JvbGxQb3NpdGlvbnMsICgpID0+IHdpbmRvdy5zY3JvbGxZLCBnZXRLZXlXaXRob3V0QmFzZW5hbWUpO1xuICAgICAgcmV0dXJuICgpID0+IGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbiAmJiBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24oKTtcbiAgICB9LCBbcm91dGVyLCBiYXNlbmFtZSwgZ2V0S2V5XSk7XG4gICAgLy8gUmVzdG9yZSBzY3JvbGxpbmcgd2hlbiBzdGF0ZS5yZXN0b3JlU2Nyb2xsUG9zaXRpb24gY2hhbmdlc1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAvLyBFeHBsaWNpdCBmYWxzZSBtZWFucyBkb24ndCBkbyBhbnl0aGluZyAodXNlZCBmb3Igc3VibWlzc2lvbnMpXG4gICAgICBpZiAocmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBiZWVuIGhlcmUgYmVmb3JlLCBzY3JvbGwgdG8gaXRcbiAgICAgIGlmICh0eXBlb2YgcmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCByZXN0b3JlU2Nyb2xsUG9zaXRpb24pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyB0cnkgdG8gc2Nyb2xsIHRvIHRoZSBoYXNoXG4gICAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgICBsZXQgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkZWNvZGVVUklDb21wb25lbnQobG9jYXRpb24uaGFzaC5zbGljZSgxKSkpO1xuICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICBlbC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRG9uJ3QgcmVzZXQgaWYgdGhpcyBuYXZpZ2F0aW9uIG9wdGVkIG91dFxuICAgICAgaWYgKHByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBvdGhlcndpc2UgZ28gdG8gdGhlIHRvcCBvbiBuZXcgbG9jYXRpb25zXG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgfSwgW2xvY2F0aW9uLCByZXN0b3JlU2Nyb2xsUG9zaXRpb24sIHByZXZlbnRTY3JvbGxSZXNldF0pO1xuICB9XG59XG4vKipcbiAqIFNldHVwIGEgY2FsbGJhY2sgdG8gYmUgZmlyZWQgb24gdGhlIHdpbmRvdydzIGBiZWZvcmV1bmxvYWRgIGV2ZW50LiBUaGlzIGlzXG4gKiB1c2VmdWwgZm9yIHNhdmluZyBzb21lIGRhdGEgdG8gYHdpbmRvdy5sb2NhbFN0b3JhZ2VgIGp1c3QgYmVmb3JlIHRoZSBwYWdlXG4gKiByZWZyZXNoZXMuXG4gKlxuICogTm90ZTogVGhlIGBjYWxsYmFja2AgYXJndW1lbnQgc2hvdWxkIGJlIGEgZnVuY3Rpb24gY3JlYXRlZCB3aXRoXG4gKiBgUmVhY3QudXNlQ2FsbGJhY2soKWAuXG4gKi9cbmZ1bmN0aW9uIHVzZUJlZm9yZVVubG9hZChjYWxsYmFjaywgb3B0aW9ucykge1xuICBsZXQge1xuICAgIGNhcHR1cmVcbiAgfSA9IG9wdGlvbnMgfHwge307XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IG9wdHMgPSBjYXB0dXJlICE9IG51bGwgPyB7XG4gICAgICBjYXB0dXJlXG4gICAgfSA6IHVuZGVmaW5lZDtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICB9O1xuICB9LCBbY2FsbGJhY2ssIGNhcHR1cmVdKTtcbn1cbi8qKlxuICogU2V0dXAgYSBjYWxsYmFjayB0byBiZSBmaXJlZCBvbiB0aGUgd2luZG93J3MgYHBhZ2VoaWRlYCBldmVudC4gVGhpcyBpc1xuICogdXNlZnVsIGZvciBzYXZpbmcgc29tZSBkYXRhIHRvIGB3aW5kb3cubG9jYWxTdG9yYWdlYCBqdXN0IGJlZm9yZSB0aGUgcGFnZVxuICogcmVmcmVzaGVzLiAgVGhpcyBldmVudCBpcyBiZXR0ZXIgc3VwcG9ydGVkIHRoYW4gYmVmb3JldW5sb2FkIGFjcm9zcyBicm93c2Vycy5cbiAqXG4gKiBOb3RlOiBUaGUgYGNhbGxiYWNrYCBhcmd1bWVudCBzaG91bGQgYmUgYSBmdW5jdGlvbiBjcmVhdGVkIHdpdGhcbiAqIGBSZWFjdC51c2VDYWxsYmFjaygpYC5cbiAqL1xuZnVuY3Rpb24gdXNlUGFnZUhpZGUoY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgbGV0IHtcbiAgICBjYXB0dXJlXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBvcHRzID0gY2FwdHVyZSAhPSBudWxsID8ge1xuICAgICAgY2FwdHVyZVxuICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIH07XG4gIH0sIFtjYWxsYmFjaywgY2FwdHVyZV0pO1xufVxuLyoqXG4gKiBXcmFwcGVyIGFyb3VuZCB1c2VCbG9ja2VyIHRvIHNob3cgYSB3aW5kb3cuY29uZmlybSBwcm9tcHQgdG8gdXNlcnMgaW5zdGVhZFxuICogb2YgYnVpbGRpbmcgYSBjdXN0b20gVUkgd2l0aCB1c2VCbG9ja2VyLlxuICpcbiAqIFdhcm5pbmc6IFRoaXMgaGFzICphIGxvdCBvZiByb3VnaCBlZGdlcyogYW5kIGJlaGF2ZXMgdmVyeSBkaWZmZXJlbnRseSAoYW5kXG4gKiB2ZXJ5IGluY29ycmVjdGx5IGluIHNvbWUgY2FzZXMpIGFjcm9zcyBicm93c2VycyBpZiB1c2VyIGNsaWNrIGFkZGl0aW9uXG4gKiBiYWNrL2ZvcndhcmQgbmF2aWdhdGlvbnMgd2hpbGUgdGhlIGNvbmZpcm0gaXMgb3Blbi4gIFVzZSBhdCB5b3VyIG93biByaXNrLlxuICovXG5mdW5jdGlvbiB1c2VQcm9tcHQoX3JlZjEyKSB7XG4gIGxldCB7XG4gICAgd2hlbixcbiAgICBtZXNzYWdlXG4gIH0gPSBfcmVmMTI7XG4gIGxldCBibG9ja2VyID0gdXNlQmxvY2tlcih3aGVuKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIpIHtcbiAgICAgIGxldCBwcm9jZWVkID0gd2luZG93LmNvbmZpcm0obWVzc2FnZSk7XG4gICAgICBpZiAocHJvY2VlZCkge1xuICAgICAgICAvLyBUaGlzIHRpbWVvdXQgaXMgbmVlZGVkIHRvIGF2b2lkIGEgd2VpcmQgXCJyYWNlXCIgb24gUE9QIG5hdmlnYXRpb25zXG4gICAgICAgIC8vIGJldHdlZW4gdGhlIGB3aW5kb3cuaGlzdG9yeWAgcmV2ZXJ0IG5hdmlnYXRpb24gYW5kIHRoZSByZXN1bHQgb2ZcbiAgICAgICAgLy8gYHdpbmRvdy5jb25maXJtYFxuICAgICAgICBzZXRUaW1lb3V0KGJsb2NrZXIucHJvY2VlZCwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBibG9ja2VyLnJlc2V0KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbYmxvY2tlciwgbWVzc2FnZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiAhd2hlbikge1xuICAgICAgYmxvY2tlci5yZXNldCgpO1xuICAgIH1cbiAgfSwgW2Jsb2NrZXIsIHdoZW5dKTtcbn1cbi8qKlxuICogUmV0dXJuIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZXJlIGlzIGFuIGFjdGl2ZSB2aWV3IHRyYW5zaXRpb24gdG8gdGhlXG4gKiBnaXZlbiBocmVmLiAgWW91IGNhbiB1c2UgdGhpcyB2YWx1ZSB0byByZW5kZXIgQ1NTIGNsYXNzZXMgb3Igdmlld1RyYW5zaXRpb25OYW1lXG4gKiBzdHlsZXMgb250byB5b3VyIGVsZW1lbnRzXG4gKlxuICogQHBhcmFtIGhyZWYgVGhlIGRlc3RpbmF0aW9uIGhyZWZcbiAqIEBwYXJhbSBbb3B0cy5yZWxhdGl2ZV0gUmVsYXRpdmUgcm91dGluZyB0eXBlIChcInJvdXRlXCIgfCBcInBhdGhcIilcbiAqL1xuZnVuY3Rpb24gdXNlVmlld1RyYW5zaXRpb25TdGF0ZSh0bywgb3B0cykge1xuICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0cyA9IHt9O1xuICB9XG4gIGxldCB2dENvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFZpZXdUcmFuc2l0aW9uQ29udGV4dCk7XG4gICEodnRDb250ZXh0ICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJgdW5zdGFibGVfdXNlVmlld1RyYW5zaXRpb25TdGF0ZWAgbXVzdCBiZSB1c2VkIHdpdGhpbiBgcmVhY3Qtcm91dGVyLWRvbWAncyBgUm91dGVyUHJvdmlkZXJgLiAgXCIgKyBcIkRpZCB5b3UgYWNjaWRlbnRhbGx5IGltcG9ydCBgUm91dGVyUHJvdmlkZXJgIGZyb20gYHJlYWN0LXJvdXRlcmA/XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLnVzZVZpZXdUcmFuc2l0aW9uU3RhdGUpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlOiBvcHRzLnJlbGF0aXZlXG4gIH0pO1xuICBpZiAoIXZ0Q29udGV4dC5pc1RyYW5zaXRpb25pbmcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbGV0IGN1cnJlbnRQYXRoID0gc3RyaXBCYXNlbmFtZSh2dENvbnRleHQuY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgdnRDb250ZXh0LmN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgbGV0IG5leHRQYXRoID0gc3RyaXBCYXNlbmFtZSh2dENvbnRleHQubmV4dExvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgdnRDb250ZXh0Lm5leHRMb2NhdGlvbi5wYXRobmFtZTtcbiAgLy8gVHJhbnNpdGlvbiBpcyBhY3RpdmUgaWYgd2UncmUgZ29pbmcgdG8gb3IgY29taW5nIGZyb20gdGhlIGluZGljYXRlZFxuICAvLyBkZXN0aW5hdGlvbi4gIFRoaXMgZW5zdXJlcyB0aGF0IG90aGVyIFBVU0ggbmF2aWdhdGlvbnMgdGhhdCByZXZlcnNlXG4gIC8vIGFuIGluZGljYXRlZCB0cmFuc2l0aW9uIGFwcGx5LiAgSS5lLiwgb24gdGhlIGxpc3QgdmlldyB5b3UgaGF2ZTpcbiAgLy9cbiAgLy8gICA8TmF2TGluayB0bz1cIi9kZXRhaWxzLzFcIiB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbj5cbiAgLy9cbiAgLy8gSWYgeW91IGNsaWNrIHRoZSBicmVhZGNydW1iIGJhY2sgdG8gdGhlIGxpc3QgdmlldzpcbiAgLy9cbiAgLy8gICA8TmF2TGluayB0bz1cIi9saXN0XCIgdW5zdGFibGVfdmlld1RyYW5zaXRpb24+XG4gIC8vXG4gIC8vIFdlIHNob3VsZCBhcHBseSB0aGUgdHJhbnNpdGlvbiBiZWNhdXNlIGl0J3MgaW5kaWNhdGVkIGFzIGFjdGl2ZSBnb2luZ1xuICAvLyBmcm9tIC9saXN0IC0+IC9kZXRhaWxzLzEgYW5kIHRoZXJlZm9yZSBzaG91bGQgYmUgYWN0aXZlIG9uIHRoZSByZXZlcnNlXG4gIC8vIChldmVuIHRob3VnaCB0aGlzIGlzbid0IHN0cmljdGx5IGEgUE9QIHJldmVyc2UpXG4gIHJldHVybiBtYXRjaFBhdGgocGF0aC5wYXRobmFtZSwgbmV4dFBhdGgpICE9IG51bGwgfHwgbWF0Y2hQYXRoKHBhdGgucGF0aG5hbWUsIGN1cnJlbnRQYXRoKSAhPSBudWxsO1xufVxuLy8jZW5kcmVnaW9uXG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEZvcm0sIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmssIFJvdXRlclByb3ZpZGVyLCBTY3JvbGxSZXN0b3JhdGlvbiwgRmV0Y2hlcnNDb250ZXh0IGFzIFVOU0FGRV9GZXRjaGVyc0NvbnRleHQsIFZpZXdUcmFuc2l0aW9uQ29udGV4dCBhcyBVTlNBRkVfVmlld1RyYW5zaXRpb25Db250ZXh0LCB1c2VTY3JvbGxSZXN0b3JhdGlvbiBhcyBVTlNBRkVfdXNlU2Nyb2xsUmVzdG9yYXRpb24sIGNyZWF0ZUJyb3dzZXJSb3V0ZXIsIGNyZWF0ZUhhc2hSb3V0ZXIsIGNyZWF0ZVNlYXJjaFBhcmFtcywgSGlzdG9yeVJvdXRlciBhcyB1bnN0YWJsZV9IaXN0b3J5Um91dGVyLCB1c2VQcm9tcHQgYXMgdW5zdGFibGVfdXNlUHJvbXB0LCB1c2VWaWV3VHJhbnNpdGlvblN0YXRlIGFzIHVuc3RhYmxlX3VzZVZpZXdUcmFuc2l0aW9uU3RhdGUsIHVzZUJlZm9yZVVubG9hZCwgdXNlRmV0Y2hlciwgdXNlRmV0Y2hlcnMsIHVzZUZvcm1BY3Rpb24sIHVzZUxpbmtDbGlja0hhbmRsZXIsIHVzZVNlYXJjaFBhcmFtcywgdXNlU3VibWl0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9yb290LnN0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcm9vdC5zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXgubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXgubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuaW1wb3J0IHN0eWxlIGZyb20gJy4vaW5kZXgubW9kdWxlLmNzcydcbmltcG9ydCB0MTAwSW1hZ2UgZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9UMTAwXzA3MjQuanBnJ1xuaW1wb3J0IGdpdEh1Ykljb24gZnJvbSAnLi4vLi4vYXNzZXRzL2xvZ29JY29ucy9naXRodWIvZ2l0aHViLW1hcmsucG5nJ1xuXG5jb25zdCB7IE5hdkJ0biB9ID0gcmVxdWlyZSgnLi4vY29tcG9uZW50cy9OYXZCdG4nKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIb21lUGFnZSgpIHtcblx0Y29uc3QgbmF2QnRuID0gTmF2QnRuKCdCdWNrZXQgTGltaXRlZCwgTExDJywgbnVsbClcblx0XG5cdHJldHVybiAoXG5cdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlLmhvbWVQYWdlV3JhcHBlcn0+XG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17c3R5bGUubmF2V3JhcHBlcn0+e25hdkJ0bn08L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtzdHlsZS5pbWFnZUNvbnRhaW5lcn0+XG5cdFx0XHRcdDxpbWcgc3JjPXt0MTAwSW1hZ2V9IGFsdD1cImltYWdlIG9mIHRydWNrXCIvPlxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8bmF2IGNsYXNzTmFtZT17c3R5bGUubmF2T3B0aW9uc30+XG5cdFx0XHRcdDx1bD5cblx0XHRcdFx0XHQ8bGk+XG5cdFx0XHRcdFx0XHQ8TGluayB0bz17J3BlcnNvbmFsJ30+e2A8UGVyc29uYWwgLz5gfTwvTGluaz5cblx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHRcdDxsaT5cblx0XHRcdFx0XHRcdDxMaW5rIHRvPXsnY29udGFjdCd9PntgPENvbnRhY3QgLz5gfTwvTGluaz5cblx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHRcdDxsaT5cblx0XHRcdFx0XHRcdDxMaW5rIHRvPXsnc3Bpbl9jb25uZWN0J30+e2A8U3BpbkNvbm5lY3QgLz5gfTwvTGluaz5cblx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHRcdDxsaT5cblx0XHRcdFx0XHRcdDxMaW5rIHRvPXsncG9vcF9tYWNoaW5lJ30+e2A8UG9vcE1hY2hpbmUgLz5gfTwvTGluaz5cblx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHQ8L3VsPlxuXHRcdFx0PC9uYXY+XG5cdFx0XHQ8Zm9vdGVyIGNsYXNzTmFtZT17c3R5bGUuZm9vdGVyQ29udGFpbmVyfT5cblx0XHRcdFx0PExpbmsgdG89eydodHRwczovL2dpdGh1Yi5jb20vZGFuaWVsYnVja2V0J30+XG5cdFx0XHRcdFx0PGltZyBzcmM9e2dpdEh1Ykljb259IGFsdD1cIkdpdGh1YiBJY29uXCIvPlxuXHRcdFx0XHQ8L0xpbms+XG5cdFx0XHQ8L2Zvb3Rlcj5cblx0XHQ8L2Rpdj5cblx0KVxufSIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5tb2R1bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUvaW5kZXgubW9kdWxlLmNzcydcbmltcG9ydCB7IHVzZU5hdmlnYXRlIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcblxuaW1wb3J0IHsgTmF2QnRuIH0gZnJvbSAnLi4vY29tcG9uZW50cy9OYXZCdG4nXG5cbmNvbnN0IHNlbGZpSW1hZ2UgPSByZXF1aXJlKCcuLi8uLi9hc3NldHMvaW1hZ2VzL3NlbGZpXzA3MjMuanBnJylcbmNvbnN0IHsgYmlvVGV4dCB9ID0gIHJlcXVpcmUoJy4vYmlvVGV4dC5qcycpXG5jb25zdCB7IHBlcnNvbk5hbWUgfSA9IHJlcXVpcmUoJy4vYmlvVGV4dC5qcycpXG5jb25zdCB7IHBvc2l0aW9uIH0gPSByZXF1aXJlKCcuL2Jpb1RleHQuanMnKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQZXJzb25hbCgpIHtcblx0Y29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpXG5cblx0Y29uc3QgaGFuZGxlQ2xpY2sgPSAoKSA9PiB7XG5cdFx0bmF2aWdhdGUoLTEpXG5cdH1cblxuXHRjb25zdCBuYXZCdG4gPSBOYXZCdG4oJ0hvbWUnLCBoYW5kbGVDbGljaylcblxuXHRyZXR1cm4gKFxuXHRcdDxkaXYgY2xhc3NOYW1lPXtzdHlsZS5wZXJzb25hbFdyYXBwZXJ9PlxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlLm5hdldyYXBwZXJ9PntuYXZCdG59PC9kaXY+XG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17c3R5bGUuaW1hZ2VDb250YWluZXJ9PlxuXHRcdFx0XHQ8aW1nIHNyYz17c2VsZmlJbWFnZX0gYWx0PVwicGVyc29uYWwgcGhvdG9cIiAvPlxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17c3R5bGUuYmlvQ29udGFpbmVyfT5cblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlLnBlcnNvblRleHR9PlxuXHRcdFx0XHRcdDxoMT57cGVyc29uTmFtZX08L2gxPlxuXHRcdFx0XHRcdDxwPntwb3NpdGlvbn08L3A+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17c3R5bGUuYmlvVGV4dH0+XG5cdFx0XHRcdFx0PHA+e2Jpb1RleHR9PC9wPlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlLmZvb3RlckNvbnRhaW5lcn0+Rm9vdGVyPC9kaXY+XG5cdFx0PC9kaXY+XG5cdClcbn0iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXgubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXgubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnZhciBpc0NoZWNrQm94SW5wdXQgPSAoZWxlbWVudCkgPT4gZWxlbWVudC50eXBlID09PSAnY2hlY2tib3gnO1xuXG52YXIgaXNEYXRlT2JqZWN0ID0gKHZhbHVlKSA9PiB2YWx1ZSBpbnN0YW5jZW9mIERhdGU7XG5cbnZhciBpc051bGxPclVuZGVmaW5lZCA9ICh2YWx1ZSkgPT4gdmFsdWUgPT0gbnVsbDtcblxuY29uc3QgaXNPYmplY3RUeXBlID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnO1xudmFyIGlzT2JqZWN0ID0gKHZhbHVlKSA9PiAhaXNOdWxsT3JVbmRlZmluZWQodmFsdWUpICYmXG4gICAgIUFycmF5LmlzQXJyYXkodmFsdWUpICYmXG4gICAgaXNPYmplY3RUeXBlKHZhbHVlKSAmJlxuICAgICFpc0RhdGVPYmplY3QodmFsdWUpO1xuXG52YXIgZ2V0RXZlbnRWYWx1ZSA9IChldmVudCkgPT4gaXNPYmplY3QoZXZlbnQpICYmIGV2ZW50LnRhcmdldFxuICAgID8gaXNDaGVja0JveElucHV0KGV2ZW50LnRhcmdldClcbiAgICAgICAgPyBldmVudC50YXJnZXQuY2hlY2tlZFxuICAgICAgICA6IGV2ZW50LnRhcmdldC52YWx1ZVxuICAgIDogZXZlbnQ7XG5cbnZhciBnZXROb2RlUGFyZW50TmFtZSA9IChuYW1lKSA9PiBuYW1lLnN1YnN0cmluZygwLCBuYW1lLnNlYXJjaCgvXFwuXFxkKyhcXC58JCkvKSkgfHwgbmFtZTtcblxudmFyIGlzTmFtZUluRmllbGRBcnJheSA9IChuYW1lcywgbmFtZSkgPT4gbmFtZXMuaGFzKGdldE5vZGVQYXJlbnROYW1lKG5hbWUpKTtcblxudmFyIGlzUGxhaW5PYmplY3QgPSAodGVtcE9iamVjdCkgPT4ge1xuICAgIGNvbnN0IHByb3RvdHlwZUNvcHkgPSB0ZW1wT2JqZWN0LmNvbnN0cnVjdG9yICYmIHRlbXBPYmplY3QuY29uc3RydWN0b3IucHJvdG90eXBlO1xuICAgIHJldHVybiAoaXNPYmplY3QocHJvdG90eXBlQ29weSkgJiYgcHJvdG90eXBlQ29weS5oYXNPd25Qcm9wZXJ0eSgnaXNQcm90b3R5cGVPZicpKTtcbn07XG5cbnZhciBpc1dlYiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIHdpbmRvdy5IVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG5mdW5jdGlvbiBjbG9uZU9iamVjdChkYXRhKSB7XG4gICAgbGV0IGNvcHk7XG4gICAgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoZGF0YSk7XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIGNvcHkgPSBuZXcgRGF0ZShkYXRhKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICBjb3B5ID0gbmV3IFNldChkYXRhKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIShpc1dlYiAmJiAoZGF0YSBpbnN0YW5jZW9mIEJsb2IgfHwgZGF0YSBpbnN0YW5jZW9mIEZpbGVMaXN0KSkgJiZcbiAgICAgICAgKGlzQXJyYXkgfHwgaXNPYmplY3QoZGF0YSkpKSB7XG4gICAgICAgIGNvcHkgPSBpc0FycmF5ID8gW10gOiB7fTtcbiAgICAgICAgaWYgKCFpc0FycmF5ICYmICFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgICBjb3B5ID0gZGF0YTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvcHlba2V5XSA9IGNsb25lT2JqZWN0KGRhdGFba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIGNvcHk7XG59XG5cbnZhciBjb21wYWN0ID0gKHZhbHVlKSA9PiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmZpbHRlcihCb29sZWFuKSA6IFtdO1xuXG52YXIgaXNVbmRlZmluZWQgPSAodmFsKSA9PiB2YWwgPT09IHVuZGVmaW5lZDtcblxudmFyIGdldCA9IChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkgPT4ge1xuICAgIGlmICghcGF0aCB8fCAhaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBjb21wYWN0KHBhdGguc3BsaXQoL1ssW1xcXS5dKz8vKSkucmVkdWNlKChyZXN1bHQsIGtleSkgPT4gaXNOdWxsT3JVbmRlZmluZWQocmVzdWx0KSA/IHJlc3VsdCA6IHJlc3VsdFtrZXldLCBvYmplY3QpO1xuICAgIHJldHVybiBpc1VuZGVmaW5lZChyZXN1bHQpIHx8IHJlc3VsdCA9PT0gb2JqZWN0XG4gICAgICAgID8gaXNVbmRlZmluZWQob2JqZWN0W3BhdGhdKVxuICAgICAgICAgICAgPyBkZWZhdWx0VmFsdWVcbiAgICAgICAgICAgIDogb2JqZWN0W3BhdGhdXG4gICAgICAgIDogcmVzdWx0O1xufTtcblxudmFyIGlzQm9vbGVhbiA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbic7XG5cbmNvbnN0IEVWRU5UUyA9IHtcbiAgICBCTFVSOiAnYmx1cicsXG4gICAgRk9DVVNfT1VUOiAnZm9jdXNvdXQnLFxuICAgIENIQU5HRTogJ2NoYW5nZScsXG59O1xuY29uc3QgVkFMSURBVElPTl9NT0RFID0ge1xuICAgIG9uQmx1cjogJ29uQmx1cicsXG4gICAgb25DaGFuZ2U6ICdvbkNoYW5nZScsXG4gICAgb25TdWJtaXQ6ICdvblN1Ym1pdCcsXG4gICAgb25Ub3VjaGVkOiAnb25Ub3VjaGVkJyxcbiAgICBhbGw6ICdhbGwnLFxufTtcbmNvbnN0IElOUFVUX1ZBTElEQVRJT05fUlVMRVMgPSB7XG4gICAgbWF4OiAnbWF4JyxcbiAgICBtaW46ICdtaW4nLFxuICAgIG1heExlbmd0aDogJ21heExlbmd0aCcsXG4gICAgbWluTGVuZ3RoOiAnbWluTGVuZ3RoJyxcbiAgICBwYXR0ZXJuOiAncGF0dGVybicsXG4gICAgcmVxdWlyZWQ6ICdyZXF1aXJlZCcsXG4gICAgdmFsaWRhdGU6ICd2YWxpZGF0ZScsXG59O1xuXG5jb25zdCBIb29rRm9ybUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuLyoqXG4gKiBUaGlzIGN1c3RvbSBob29rIGFsbG93cyB5b3UgdG8gYWNjZXNzIHRoZSBmb3JtIGNvbnRleHQuIHVzZUZvcm1Db250ZXh0IGlzIGludGVuZGVkIHRvIGJlIHVzZWQgaW4gZGVlcGx5IG5lc3RlZCBzdHJ1Y3R1cmVzLCB3aGVyZSBpdCB3b3VsZCBiZWNvbWUgaW5jb252ZW5pZW50IHRvIHBhc3MgdGhlIGNvbnRleHQgYXMgYSBwcm9wLiBUbyBiZSB1c2VkIHdpdGgge0BsaW5rIEZvcm1Qcm92aWRlcn0uXG4gKlxuICogQHJlbWFya3NcbiAqIFtBUEldKGh0dHBzOi8vcmVhY3QtaG9vay1mb3JtLmNvbS9kb2NzL3VzZWZvcm1jb250ZXh0KSDigKIgW0RlbW9dKGh0dHBzOi8vY29kZXNhbmRib3guaW8vcy9yZWFjdC1ob29rLWZvcm0tdjctZm9ybS1jb250ZXh0LXl0dWRpKVxuICpcbiAqIEByZXR1cm5zIHJldHVybiBhbGwgdXNlRm9ybSBtZXRob2RzXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzeFxuICogZnVuY3Rpb24gQXBwKCkge1xuICogICBjb25zdCBtZXRob2RzID0gdXNlRm9ybSgpO1xuICogICBjb25zdCBvblN1Ym1pdCA9IGRhdGEgPT4gY29uc29sZS5sb2coZGF0YSk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxGb3JtUHJvdmlkZXIgey4uLm1ldGhvZHN9ID5cbiAqICAgICAgIDxmb3JtIG9uU3VibWl0PXttZXRob2RzLmhhbmRsZVN1Ym1pdChvblN1Ym1pdCl9PlxuICogICAgICAgICA8TmVzdGVkSW5wdXQgLz5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJzdWJtaXRcIiAvPlxuICogICAgICAgPC9mb3JtPlxuICogICAgIDwvRm9ybVByb3ZpZGVyPlxuICogICApO1xuICogfVxuICpcbiAqICBmdW5jdGlvbiBOZXN0ZWRJbnB1dCgpIHtcbiAqICAgY29uc3QgeyByZWdpc3RlciB9ID0gdXNlRm9ybUNvbnRleHQoKTsgLy8gcmV0cmlldmUgYWxsIGhvb2sgbWV0aG9kc1xuICogICByZXR1cm4gPGlucHV0IHsuLi5yZWdpc3RlcihcInRlc3RcIil9IC8+O1xuICogfVxuICogYGBgXG4gKi9cbmNvbnN0IHVzZUZvcm1Db250ZXh0ID0gKCkgPT4gUmVhY3QudXNlQ29udGV4dChIb29rRm9ybUNvbnRleHQpO1xuLyoqXG4gKiBBIHByb3ZpZGVyIGNvbXBvbmVudCB0aGF0IHByb3BhZ2F0ZXMgdGhlIGB1c2VGb3JtYCBtZXRob2RzIHRvIGFsbCBjaGlsZHJlbiBjb21wb25lbnRzIHZpYSBbUmVhY3QgQ29udGV4dF0oaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2NvbnRleHQuaHRtbCkgQVBJLiBUbyBiZSB1c2VkIHdpdGgge0BsaW5rIHVzZUZvcm1Db250ZXh0fS5cbiAqXG4gKiBAcmVtYXJrc1xuICogW0FQSV0oaHR0cHM6Ly9yZWFjdC1ob29rLWZvcm0uY29tL2RvY3MvdXNlZm9ybWNvbnRleHQpIOKAoiBbRGVtb10oaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL3JlYWN0LWhvb2stZm9ybS12Ny1mb3JtLWNvbnRleHQteXR1ZGkpXG4gKlxuICogQHBhcmFtIHByb3BzIC0gYWxsIHVzZUZvcm0gbWV0aG9kc1xuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgbWV0aG9kcyA9IHVzZUZvcm0oKTtcbiAqICAgY29uc3Qgb25TdWJtaXQgPSBkYXRhID0+IGNvbnNvbGUubG9nKGRhdGEpO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8Rm9ybVByb3ZpZGVyIHsuLi5tZXRob2RzfSA+XG4gKiAgICAgICA8Zm9ybSBvblN1Ym1pdD17bWV0aG9kcy5oYW5kbGVTdWJtaXQob25TdWJtaXQpfT5cbiAqICAgICAgICAgPE5lc3RlZElucHV0IC8+XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIgLz5cbiAqICAgICAgIDwvZm9ybT5cbiAqICAgICA8L0Zvcm1Qcm92aWRlcj5cbiAqICAgKTtcbiAqIH1cbiAqXG4gKiAgZnVuY3Rpb24gTmVzdGVkSW5wdXQoKSB7XG4gKiAgIGNvbnN0IHsgcmVnaXN0ZXIgfSA9IHVzZUZvcm1Db250ZXh0KCk7IC8vIHJldHJpZXZlIGFsbCBob29rIG1ldGhvZHNcbiAqICAgcmV0dXJuIDxpbnB1dCB7Li4ucmVnaXN0ZXIoXCJ0ZXN0XCIpfSAvPjtcbiAqIH1cbiAqIGBgYFxuICovXG5jb25zdCBGb3JtUHJvdmlkZXIgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCAuLi5kYXRhIH0gPSBwcm9wcztcbiAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoSG9va0Zvcm1Db250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBkYXRhIH0sIGNoaWxkcmVuKSk7XG59O1xuXG52YXIgZ2V0UHJveHlGb3JtU3RhdGUgPSAoZm9ybVN0YXRlLCBjb250cm9sLCBsb2NhbFByb3h5Rm9ybVN0YXRlLCBpc1Jvb3QgPSB0cnVlKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICBkZWZhdWx0VmFsdWVzOiBjb250cm9sLl9kZWZhdWx0VmFsdWVzLFxuICAgIH07XG4gICAgZm9yIChjb25zdCBrZXkgaW4gZm9ybVN0YXRlKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXN1bHQsIGtleSwge1xuICAgICAgICAgICAgZ2V0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgX2tleSA9IGtleTtcbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbC5fcHJveHlGb3JtU3RhdGVbX2tleV0gIT09IFZBTElEQVRJT05fTU9ERS5hbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbC5fcHJveHlGb3JtU3RhdGVbX2tleV0gPSAhaXNSb290IHx8IFZBTElEQVRJT05fTU9ERS5hbGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxvY2FsUHJveHlGb3JtU3RhdGUgJiYgKGxvY2FsUHJveHlGb3JtU3RhdGVbX2tleV0gPSB0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybVN0YXRlW19rZXldO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgaXNFbXB0eU9iamVjdCA9ICh2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpICYmICFPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoO1xuXG52YXIgc2hvdWxkUmVuZGVyRm9ybVN0YXRlID0gKGZvcm1TdGF0ZURhdGEsIF9wcm94eUZvcm1TdGF0ZSwgdXBkYXRlRm9ybVN0YXRlLCBpc1Jvb3QpID0+IHtcbiAgICB1cGRhdGVGb3JtU3RhdGUoZm9ybVN0YXRlRGF0YSk7XG4gICAgY29uc3QgeyBuYW1lLCAuLi5mb3JtU3RhdGUgfSA9IGZvcm1TdGF0ZURhdGE7XG4gICAgcmV0dXJuIChpc0VtcHR5T2JqZWN0KGZvcm1TdGF0ZSkgfHxcbiAgICAgICAgT2JqZWN0LmtleXMoZm9ybVN0YXRlKS5sZW5ndGggPj0gT2JqZWN0LmtleXMoX3Byb3h5Rm9ybVN0YXRlKS5sZW5ndGggfHxcbiAgICAgICAgT2JqZWN0LmtleXMoZm9ybVN0YXRlKS5maW5kKChrZXkpID0+IF9wcm94eUZvcm1TdGF0ZVtrZXldID09PVxuICAgICAgICAgICAgKCFpc1Jvb3QgfHwgVkFMSURBVElPTl9NT0RFLmFsbCkpKTtcbn07XG5cbnZhciBjb252ZXJ0VG9BcnJheVBheWxvYWQgPSAodmFsdWUpID0+IChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXSk7XG5cbnZhciBzaG91bGRTdWJzY3JpYmVCeU5hbWUgPSAobmFtZSwgc2lnbmFsTmFtZSwgZXhhY3QpID0+ICFuYW1lIHx8XG4gICAgIXNpZ25hbE5hbWUgfHxcbiAgICBuYW1lID09PSBzaWduYWxOYW1lIHx8XG4gICAgY29udmVydFRvQXJyYXlQYXlsb2FkKG5hbWUpLnNvbWUoKGN1cnJlbnROYW1lKSA9PiBjdXJyZW50TmFtZSAmJlxuICAgICAgICAoZXhhY3RcbiAgICAgICAgICAgID8gY3VycmVudE5hbWUgPT09IHNpZ25hbE5hbWVcbiAgICAgICAgICAgIDogY3VycmVudE5hbWUuc3RhcnRzV2l0aChzaWduYWxOYW1lKSB8fFxuICAgICAgICAgICAgICAgIHNpZ25hbE5hbWUuc3RhcnRzV2l0aChjdXJyZW50TmFtZSkpKTtcblxuZnVuY3Rpb24gdXNlU3Vic2NyaWJlKHByb3BzKSB7XG4gICAgY29uc3QgX3Byb3BzID0gUmVhY3QudXNlUmVmKHByb3BzKTtcbiAgICBfcHJvcHMuY3VycmVudCA9IHByb3BzO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9ICFwcm9wcy5kaXNhYmxlZCAmJlxuICAgICAgICAgICAgX3Byb3BzLmN1cnJlbnQuc3ViamVjdCAmJlxuICAgICAgICAgICAgX3Byb3BzLmN1cnJlbnQuc3ViamVjdC5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICAgIG5leHQ6IF9wcm9wcy5jdXJyZW50Lm5leHQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiAmJiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfTtcbiAgICB9LCBbcHJvcHMuZGlzYWJsZWRdKTtcbn1cblxuLyoqXG4gKiBUaGlzIGN1c3RvbSBob29rIGFsbG93cyB5b3UgdG8gc3Vic2NyaWJlIHRvIGVhY2ggZm9ybSBzdGF0ZSwgYW5kIGlzb2xhdGUgdGhlIHJlLXJlbmRlciBhdCB0aGUgY3VzdG9tIGhvb2sgbGV2ZWwuIEl0IGhhcyBpdHMgc2NvcGUgaW4gdGVybXMgb2YgZm9ybSBzdGF0ZSBzdWJzY3JpcHRpb24sIHNvIGl0IHdvdWxkIG5vdCBhZmZlY3Qgb3RoZXIgdXNlRm9ybVN0YXRlIGFuZCB1c2VGb3JtLiBVc2luZyB0aGlzIGhvb2sgY2FuIHJlZHVjZSB0aGUgcmUtcmVuZGVyIGltcGFjdCBvbiBsYXJnZSBhbmQgY29tcGxleCBmb3JtIGFwcGxpY2F0aW9uLlxuICpcbiAqIEByZW1hcmtzXG4gKiBbQVBJXShodHRwczovL3JlYWN0LWhvb2stZm9ybS5jb20vZG9jcy91c2Vmb3Jtc3RhdGUpIOKAoiBbRGVtb10oaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL3VzZWZvcm1zdGF0ZS03NXhseSlcbiAqXG4gKiBAcGFyYW0gcHJvcHMgLSBpbmNsdWRlIG9wdGlvbnMgb24gc3BlY2lmeSBmaWVsZHMgdG8gc3Vic2NyaWJlLiB7QGxpbmsgVXNlRm9ybVN0YXRlUmV0dXJufVxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgeyByZWdpc3RlciwgaGFuZGxlU3VibWl0LCBjb250cm9sIH0gPSB1c2VGb3JtKHtcbiAqICAgICBkZWZhdWx0VmFsdWVzOiB7XG4gKiAgICAgZmlyc3ROYW1lOiBcImZpcnN0TmFtZVwiXG4gKiAgIH19KTtcbiAqICAgY29uc3QgeyBkaXJ0eUZpZWxkcyB9ID0gdXNlRm9ybVN0YXRlKHtcbiAqICAgICBjb250cm9sXG4gKiAgIH0pO1xuICogICBjb25zdCBvblN1Ym1pdCA9IChkYXRhKSA9PiBjb25zb2xlLmxvZyhkYXRhKTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGZvcm0gb25TdWJtaXQ9e2hhbmRsZVN1Ym1pdChvblN1Ym1pdCl9PlxuICogICAgICAgPGlucHV0IHsuLi5yZWdpc3RlcihcImZpcnN0TmFtZVwiKX0gcGxhY2Vob2xkZXI9XCJGaXJzdCBOYW1lXCIgLz5cbiAqICAgICAgIHtkaXJ0eUZpZWxkcy5maXJzdE5hbWUgJiYgPHA+RmllbGQgaXMgZGlydHkuPC9wPn1cbiAqICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIgLz5cbiAqICAgICA8L2Zvcm0+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gdXNlRm9ybVN0YXRlKHByb3BzKSB7XG4gICAgY29uc3QgbWV0aG9kcyA9IHVzZUZvcm1Db250ZXh0KCk7XG4gICAgY29uc3QgeyBjb250cm9sID0gbWV0aG9kcy5jb250cm9sLCBkaXNhYmxlZCwgbmFtZSwgZXhhY3QgfSA9IHByb3BzIHx8IHt9O1xuICAgIGNvbnN0IFtmb3JtU3RhdGUsIHVwZGF0ZUZvcm1TdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZShjb250cm9sLl9mb3JtU3RhdGUpO1xuICAgIGNvbnN0IF9tb3VudGVkID0gUmVhY3QudXNlUmVmKHRydWUpO1xuICAgIGNvbnN0IF9sb2NhbFByb3h5Rm9ybVN0YXRlID0gUmVhY3QudXNlUmVmKHtcbiAgICAgICAgaXNEaXJ0eTogZmFsc2UsXG4gICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgIGRpcnR5RmllbGRzOiBmYWxzZSxcbiAgICAgICAgdG91Y2hlZEZpZWxkczogZmFsc2UsXG4gICAgICAgIGlzVmFsaWRhdGluZzogZmFsc2UsXG4gICAgICAgIGlzVmFsaWQ6IGZhbHNlLFxuICAgICAgICBlcnJvcnM6IGZhbHNlLFxuICAgIH0pO1xuICAgIGNvbnN0IF9uYW1lID0gUmVhY3QudXNlUmVmKG5hbWUpO1xuICAgIF9uYW1lLmN1cnJlbnQgPSBuYW1lO1xuICAgIHVzZVN1YnNjcmliZSh7XG4gICAgICAgIGRpc2FibGVkLFxuICAgICAgICBuZXh0OiAodmFsdWUpID0+IF9tb3VudGVkLmN1cnJlbnQgJiZcbiAgICAgICAgICAgIHNob3VsZFN1YnNjcmliZUJ5TmFtZShfbmFtZS5jdXJyZW50LCB2YWx1ZS5uYW1lLCBleGFjdCkgJiZcbiAgICAgICAgICAgIHNob3VsZFJlbmRlckZvcm1TdGF0ZSh2YWx1ZSwgX2xvY2FsUHJveHlGb3JtU3RhdGUuY3VycmVudCwgY29udHJvbC5fdXBkYXRlRm9ybVN0YXRlKSAmJlxuICAgICAgICAgICAgdXBkYXRlRm9ybVN0YXRlKHtcbiAgICAgICAgICAgICAgICAuLi5jb250cm9sLl9mb3JtU3RhdGUsXG4gICAgICAgICAgICAgICAgLi4udmFsdWUsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgc3ViamVjdDogY29udHJvbC5fc3ViamVjdHMuc3RhdGUsXG4gICAgfSk7XG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgX21vdW50ZWQuY3VycmVudCA9IHRydWU7XG4gICAgICAgIF9sb2NhbFByb3h5Rm9ybVN0YXRlLmN1cnJlbnQuaXNWYWxpZCAmJiBjb250cm9sLl91cGRhdGVWYWxpZCh0cnVlKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIF9tb3VudGVkLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9LCBbY29udHJvbF0pO1xuICAgIHJldHVybiBnZXRQcm94eUZvcm1TdGF0ZShmb3JtU3RhdGUsIGNvbnRyb2wsIF9sb2NhbFByb3h5Rm9ybVN0YXRlLmN1cnJlbnQsIGZhbHNlKTtcbn1cblxudmFyIGlzU3RyaW5nID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuXG52YXIgZ2VuZXJhdGVXYXRjaE91dHB1dCA9IChuYW1lcywgX25hbWVzLCBmb3JtVmFsdWVzLCBpc0dsb2JhbCwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gICAgaWYgKGlzU3RyaW5nKG5hbWVzKSkge1xuICAgICAgICBpc0dsb2JhbCAmJiBfbmFtZXMud2F0Y2guYWRkKG5hbWVzKTtcbiAgICAgICAgcmV0dXJuIGdldChmb3JtVmFsdWVzLCBuYW1lcywgZGVmYXVsdFZhbHVlKTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobmFtZXMpKSB7XG4gICAgICAgIHJldHVybiBuYW1lcy5tYXAoKGZpZWxkTmFtZSkgPT4gKGlzR2xvYmFsICYmIF9uYW1lcy53YXRjaC5hZGQoZmllbGROYW1lKSwgZ2V0KGZvcm1WYWx1ZXMsIGZpZWxkTmFtZSkpKTtcbiAgICB9XG4gICAgaXNHbG9iYWwgJiYgKF9uYW1lcy53YXRjaEFsbCA9IHRydWUpO1xuICAgIHJldHVybiBmb3JtVmFsdWVzO1xufTtcblxuLyoqXG4gKiBDdXN0b20gaG9vayB0byBzdWJzY3JpYmUgdG8gZmllbGQgY2hhbmdlIGFuZCBpc29sYXRlIHJlLXJlbmRlcmluZyBhdCB0aGUgY29tcG9uZW50IGxldmVsLlxuICpcbiAqIEByZW1hcmtzXG4gKlxuICogW0FQSV0oaHR0cHM6Ly9yZWFjdC1ob29rLWZvcm0uY29tL2RvY3MvdXNld2F0Y2gpIOKAoiBbRGVtb10oaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL3JlYWN0LWhvb2stZm9ybS12Ny10cy11c2V3YXRjaC1oOWk1ZSlcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHN4XG4gKiBjb25zdCB7IGNvbnRyb2wgfSA9IHVzZUZvcm0oKTtcbiAqIGNvbnN0IHZhbHVlcyA9IHVzZVdhdGNoKHtcbiAqICAgbmFtZTogXCJmaWVsZE5hbWVcIlxuICogICBjb250cm9sLFxuICogfSlcbiAqIGBgYFxuICovXG5mdW5jdGlvbiB1c2VXYXRjaChwcm9wcykge1xuICAgIGNvbnN0IG1ldGhvZHMgPSB1c2VGb3JtQ29udGV4dCgpO1xuICAgIGNvbnN0IHsgY29udHJvbCA9IG1ldGhvZHMuY29udHJvbCwgbmFtZSwgZGVmYXVsdFZhbHVlLCBkaXNhYmxlZCwgZXhhY3QsIH0gPSBwcm9wcyB8fCB7fTtcbiAgICBjb25zdCBfbmFtZSA9IFJlYWN0LnVzZVJlZihuYW1lKTtcbiAgICBfbmFtZS5jdXJyZW50ID0gbmFtZTtcbiAgICB1c2VTdWJzY3JpYmUoe1xuICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgc3ViamVjdDogY29udHJvbC5fc3ViamVjdHMudmFsdWVzLFxuICAgICAgICBuZXh0OiAoZm9ybVN0YXRlKSA9PiB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkU3Vic2NyaWJlQnlOYW1lKF9uYW1lLmN1cnJlbnQsIGZvcm1TdGF0ZS5uYW1lLCBleGFjdCkpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVWYWx1ZShjbG9uZU9iamVjdChnZW5lcmF0ZVdhdGNoT3V0cHV0KF9uYW1lLmN1cnJlbnQsIGNvbnRyb2wuX25hbWVzLCBmb3JtU3RhdGUudmFsdWVzIHx8IGNvbnRyb2wuX2Zvcm1WYWx1ZXMsIGZhbHNlLCBkZWZhdWx0VmFsdWUpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgY29uc3QgW3ZhbHVlLCB1cGRhdGVWYWx1ZV0gPSBSZWFjdC51c2VTdGF0ZShjb250cm9sLl9nZXRXYXRjaChuYW1lLCBkZWZhdWx0VmFsdWUpKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4gY29udHJvbC5fcmVtb3ZlVW5tb3VudGVkKCkpO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIGlzS2V5ID0gKHZhbHVlKSA9PiAvXlxcdyokLy50ZXN0KHZhbHVlKTtcblxudmFyIHN0cmluZ1RvUGF0aCA9IChpbnB1dCkgPT4gY29tcGFjdChpbnB1dC5yZXBsYWNlKC9bXCJ8J118XFxdL2csICcnKS5zcGxpdCgvXFwufFxcWy8pKTtcblxudmFyIHNldCA9IChvYmplY3QsIHBhdGgsIHZhbHVlKSA9PiB7XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgY29uc3QgdGVtcFBhdGggPSBpc0tleShwYXRoKSA/IFtwYXRoXSA6IHN0cmluZ1RvUGF0aChwYXRoKTtcbiAgICBjb25zdCBsZW5ndGggPSB0ZW1wUGF0aC5sZW5ndGg7XG4gICAgY29uc3QgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBjb25zdCBrZXkgPSB0ZW1wUGF0aFtpbmRleF07XG4gICAgICAgIGxldCBuZXdWYWx1ZSA9IHZhbHVlO1xuICAgICAgICBpZiAoaW5kZXggIT09IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgY29uc3Qgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID1cbiAgICAgICAgICAgICAgICBpc09iamVjdChvYmpWYWx1ZSkgfHwgQXJyYXkuaXNBcnJheShvYmpWYWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgPyBvYmpWYWx1ZVxuICAgICAgICAgICAgICAgICAgICA6ICFpc05hTigrdGVtcFBhdGhbaW5kZXggKyAxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gW11cbiAgICAgICAgICAgICAgICAgICAgICAgIDoge307XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0W2tleV0gPSBuZXdWYWx1ZTtcbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG59O1xuXG4vKipcbiAqIEN1c3RvbSBob29rIHRvIHdvcmsgd2l0aCBjb250cm9sbGVkIGNvbXBvbmVudCwgdGhpcyBmdW5jdGlvbiBwcm92aWRlIHlvdSB3aXRoIGJvdGggZm9ybSBhbmQgZmllbGQgbGV2ZWwgc3RhdGUuIFJlLXJlbmRlciBpcyBpc29sYXRlZCBhdCB0aGUgaG9vayBsZXZlbC5cbiAqXG4gKiBAcmVtYXJrc1xuICogW0FQSV0oaHR0cHM6Ly9yZWFjdC1ob29rLWZvcm0uY29tL2RvY3MvdXNlY29udHJvbGxlcikg4oCiIFtEZW1vXShodHRwczovL2NvZGVzYW5kYm94LmlvL3MvdXNlY29udHJvbGxlci0wbzhweClcbiAqXG4gKiBAcGFyYW0gcHJvcHMgLSB0aGUgcGF0aCBuYW1lIHRvIHRoZSBmb3JtIGZpZWxkIHZhbHVlLCBhbmQgdmFsaWRhdGlvbiBydWxlcy5cbiAqXG4gKiBAcmV0dXJucyBmaWVsZCBwcm9wZXJ0aWVzLCBmaWVsZCBhbmQgZm9ybSBzdGF0ZS4ge0BsaW5rIFVzZUNvbnRyb2xsZXJSZXR1cm59XG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzeFxuICogZnVuY3Rpb24gSW5wdXQocHJvcHMpIHtcbiAqICAgY29uc3QgeyBmaWVsZCwgZmllbGRTdGF0ZSwgZm9ybVN0YXRlIH0gPSB1c2VDb250cm9sbGVyKHByb3BzKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPGlucHV0IHsuLi5maWVsZH0gcGxhY2Vob2xkZXI9e3Byb3BzLm5hbWV9IC8+XG4gKiAgICAgICA8cD57ZmllbGRTdGF0ZS5pc1RvdWNoZWQgJiYgXCJUb3VjaGVkXCJ9PC9wPlxuICogICAgICAgPHA+e2Zvcm1TdGF0ZS5pc1N1Ym1pdHRlZCA/IFwic3VibWl0dGVkXCIgOiBcIlwifTwvcD5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICovXG5mdW5jdGlvbiB1c2VDb250cm9sbGVyKHByb3BzKSB7XG4gICAgY29uc3QgbWV0aG9kcyA9IHVzZUZvcm1Db250ZXh0KCk7XG4gICAgY29uc3QgeyBuYW1lLCBkaXNhYmxlZCwgY29udHJvbCA9IG1ldGhvZHMuY29udHJvbCwgc2hvdWxkVW5yZWdpc3RlciB9ID0gcHJvcHM7XG4gICAgY29uc3QgaXNBcnJheUZpZWxkID0gaXNOYW1lSW5GaWVsZEFycmF5KGNvbnRyb2wuX25hbWVzLmFycmF5LCBuYW1lKTtcbiAgICBjb25zdCB2YWx1ZSA9IHVzZVdhdGNoKHtcbiAgICAgICAgY29udHJvbCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBnZXQoY29udHJvbC5fZm9ybVZhbHVlcywgbmFtZSwgZ2V0KGNvbnRyb2wuX2RlZmF1bHRWYWx1ZXMsIG5hbWUsIHByb3BzLmRlZmF1bHRWYWx1ZSkpLFxuICAgICAgICBleGFjdDogdHJ1ZSxcbiAgICB9KTtcbiAgICBjb25zdCBmb3JtU3RhdGUgPSB1c2VGb3JtU3RhdGUoe1xuICAgICAgICBjb250cm9sLFxuICAgICAgICBuYW1lLFxuICAgIH0pO1xuICAgIGNvbnN0IF9yZWdpc3RlclByb3BzID0gUmVhY3QudXNlUmVmKGNvbnRyb2wucmVnaXN0ZXIobmFtZSwge1xuICAgICAgICAuLi5wcm9wcy5ydWxlcyxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIC4uLihpc0Jvb2xlYW4ocHJvcHMuZGlzYWJsZWQpID8geyBkaXNhYmxlZDogcHJvcHMuZGlzYWJsZWQgfSA6IHt9KSxcbiAgICB9KSk7XG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgY29uc3QgX3Nob3VsZFVucmVnaXN0ZXJGaWVsZCA9IGNvbnRyb2wuX29wdGlvbnMuc2hvdWxkVW5yZWdpc3RlciB8fCBzaG91bGRVbnJlZ2lzdGVyO1xuICAgICAgICBjb25zdCB1cGRhdGVNb3VudGVkID0gKG5hbWUsIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZCA9IGdldChjb250cm9sLl9maWVsZHMsIG5hbWUpO1xuICAgICAgICAgICAgaWYgKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgZmllbGQuX2YubW91bnQgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdXBkYXRlTW91bnRlZChuYW1lLCB0cnVlKTtcbiAgICAgICAgaWYgKF9zaG91bGRVbnJlZ2lzdGVyRmllbGQpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY2xvbmVPYmplY3QoZ2V0KGNvbnRyb2wuX29wdGlvbnMuZGVmYXVsdFZhbHVlcywgbmFtZSkpO1xuICAgICAgICAgICAgc2V0KGNvbnRyb2wuX2RlZmF1bHRWYWx1ZXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZChnZXQoY29udHJvbC5fZm9ybVZhbHVlcywgbmFtZSkpKSB7XG4gICAgICAgICAgICAgICAgc2V0KGNvbnRyb2wuX2Zvcm1WYWx1ZXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgKGlzQXJyYXlGaWVsZFxuICAgICAgICAgICAgICAgID8gX3Nob3VsZFVucmVnaXN0ZXJGaWVsZCAmJiAhY29udHJvbC5fc3RhdGUuYWN0aW9uXG4gICAgICAgICAgICAgICAgOiBfc2hvdWxkVW5yZWdpc3RlckZpZWxkKVxuICAgICAgICAgICAgICAgID8gY29udHJvbC51bnJlZ2lzdGVyKG5hbWUpXG4gICAgICAgICAgICAgICAgOiB1cGRhdGVNb3VudGVkKG5hbWUsIGZhbHNlKTtcbiAgICAgICAgfTtcbiAgICB9LCBbbmFtZSwgY29udHJvbCwgaXNBcnJheUZpZWxkLCBzaG91bGRVbnJlZ2lzdGVyXSk7XG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKGdldChjb250cm9sLl9maWVsZHMsIG5hbWUpKSB7XG4gICAgICAgICAgICBjb250cm9sLl91cGRhdGVEaXNhYmxlZEZpZWxkKHtcbiAgICAgICAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICAgICAgICBmaWVsZHM6IGNvbnRyb2wuX2ZpZWxkcyxcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBnZXQoY29udHJvbC5fZmllbGRzLCBuYW1lKS5fZi52YWx1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwgW2Rpc2FibGVkLCBuYW1lLCBjb250cm9sXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZmllbGQ6IHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIC4uLihpc0Jvb2xlYW4oZGlzYWJsZWQpIHx8IGZvcm1TdGF0ZS5kaXNhYmxlZFxuICAgICAgICAgICAgICAgID8geyBkaXNhYmxlZDogZm9ybVN0YXRlLmRpc2FibGVkIHx8IGRpc2FibGVkIH1cbiAgICAgICAgICAgICAgICA6IHt9KSxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBSZWFjdC51c2VDYWxsYmFjaygoZXZlbnQpID0+IF9yZWdpc3RlclByb3BzLmN1cnJlbnQub25DaGFuZ2Uoe1xuICAgICAgICAgICAgICAgIHRhcmdldDoge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZ2V0RXZlbnRWYWx1ZShldmVudCksXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0eXBlOiBFVkVOVFMuQ0hBTkdFLFxuICAgICAgICAgICAgfSksIFtuYW1lXSksXG4gICAgICAgICAgICBvbkJsdXI6IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IF9yZWdpc3RlclByb3BzLmN1cnJlbnQub25CbHVyKHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGdldChjb250cm9sLl9mb3JtVmFsdWVzLCBuYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHR5cGU6IEVWRU5UUy5CTFVSLFxuICAgICAgICAgICAgfSksIFtuYW1lLCBjb250cm9sXSksXG4gICAgICAgICAgICByZWY6IChlbG0pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZCA9IGdldChjb250cm9sLl9maWVsZHMsIG5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChmaWVsZCAmJiBlbG0pIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQuX2YucmVmID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXM6ICgpID0+IGVsbS5mb2N1cygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0OiAoKSA9PiBlbG0uc2VsZWN0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRDdXN0b21WYWxpZGl0eTogKG1lc3NhZ2UpID0+IGVsbS5zZXRDdXN0b21WYWxpZGl0eShtZXNzYWdlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcG9ydFZhbGlkaXR5OiAoKSA9PiBlbG0ucmVwb3J0VmFsaWRpdHkoKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBmb3JtU3RhdGUsXG4gICAgICAgIGZpZWxkU3RhdGU6IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHt9LCB7XG4gICAgICAgICAgICBpbnZhbGlkOiB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+ICEhZ2V0KGZvcm1TdGF0ZS5lcnJvcnMsIG5hbWUpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzRGlydHk6IHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldDogKCkgPT4gISFnZXQoZm9ybVN0YXRlLmRpcnR5RmllbGRzLCBuYW1lKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1RvdWNoZWQ6IHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldDogKCkgPT4gISFnZXQoZm9ybVN0YXRlLnRvdWNoZWRGaWVsZHMsIG5hbWUpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IGdldChmb3JtU3RhdGUuZXJyb3JzLCBuYW1lKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgIH07XG59XG5cbi8qKlxuICogQ29tcG9uZW50IGJhc2VkIG9uIGB1c2VDb250cm9sbGVyYCBob29rIHRvIHdvcmsgd2l0aCBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAqXG4gKiBAcmVtYXJrc1xuICogW0FQSV0oaHR0cHM6Ly9yZWFjdC1ob29rLWZvcm0uY29tL2RvY3MvdXNlY29udHJvbGxlci9jb250cm9sbGVyKSDigKIgW0RlbW9dKGh0dHBzOi8vY29kZXNhbmRib3guaW8vcy9yZWFjdC1ob29rLWZvcm0tdjYtY29udHJvbGxlci10cy1qd3l6dykg4oCiIFtWaWRlb10oaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1OMlVOa19VQ1Z5QSlcbiAqXG4gKiBAcGFyYW0gcHJvcHMgLSB0aGUgcGF0aCBuYW1lIHRvIHRoZSBmb3JtIGZpZWxkIHZhbHVlLCBhbmQgdmFsaWRhdGlvbiBydWxlcy5cbiAqXG4gKiBAcmV0dXJucyBwcm92aWRlIGZpZWxkIGhhbmRsZXIgZnVuY3Rpb25zLCBmaWVsZCBhbmQgZm9ybSBzdGF0ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHN4XG4gKiBmdW5jdGlvbiBBcHAoKSB7XG4gKiAgIGNvbnN0IHsgY29udHJvbCB9ID0gdXNlRm9ybTxGb3JtVmFsdWVzPih7XG4gKiAgICAgZGVmYXVsdFZhbHVlczoge1xuICogICAgICAgdGVzdDogXCJcIlxuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxmb3JtPlxuICogICAgICAgPENvbnRyb2xsZXJcbiAqICAgICAgICAgY29udHJvbD17Y29udHJvbH1cbiAqICAgICAgICAgbmFtZT1cInRlc3RcIlxuICogICAgICAgICByZW5kZXI9eyh7IGZpZWxkOiB7IG9uQ2hhbmdlLCBvbkJsdXIsIHZhbHVlLCByZWYgfSwgZm9ybVN0YXRlLCBmaWVsZFN0YXRlIH0pID0+IChcbiAqICAgICAgICAgICA8PlxuICogICAgICAgICAgICAgPGlucHV0XG4gKiAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX0gLy8gc2VuZCB2YWx1ZSB0byBob29rIGZvcm1cbiAqICAgICAgICAgICAgICAgb25CbHVyPXtvbkJsdXJ9IC8vIG5vdGlmeSB3aGVuIGlucHV0IGlzIHRvdWNoZWRcbiAqICAgICAgICAgICAgICAgdmFsdWU9e3ZhbHVlfSAvLyByZXR1cm4gdXBkYXRlZCB2YWx1ZVxuICogICAgICAgICAgICAgICByZWY9e3JlZn0gLy8gc2V0IHJlZiBmb3IgZm9jdXMgbWFuYWdlbWVudFxuICogICAgICAgICAgICAgLz5cbiAqICAgICAgICAgICAgIDxwPntmb3JtU3RhdGUuaXNTdWJtaXR0ZWQgPyBcInN1Ym1pdHRlZFwiIDogXCJcIn08L3A+XG4gKiAgICAgICAgICAgICA8cD57ZmllbGRTdGF0ZS5pc1RvdWNoZWQgPyBcInRvdWNoZWRcIiA6IFwiXCJ9PC9wPlxuICogICAgICAgICAgIDwvPlxuICogICAgICAgICApfVxuICogICAgICAgLz5cbiAqICAgICA8L2Zvcm0+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGBcbiAqL1xuY29uc3QgQ29udHJvbGxlciA9IChwcm9wcykgPT4gcHJvcHMucmVuZGVyKHVzZUNvbnRyb2xsZXIocHJvcHMpKTtcblxuY29uc3QgUE9TVF9SRVFVRVNUID0gJ3Bvc3QnO1xuLyoqXG4gKiBGb3JtIGNvbXBvbmVudCB0byBtYW5hZ2Ugc3VibWlzc2lvbi5cbiAqXG4gKiBAcGFyYW0gcHJvcHMgLSB0byBzZXR1cCBzdWJtaXNzaW9uIGRldGFpbC4ge0BsaW5rIEZvcm1Qcm9wc31cbiAqXG4gKiBAcmV0dXJucyBmb3JtIGNvbXBvbmVudCBvciBoZWFkbGVzcyByZW5kZXIgcHJvcC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHN4XG4gKiBmdW5jdGlvbiBBcHAoKSB7XG4gKiAgIGNvbnN0IHsgY29udHJvbCwgZm9ybVN0YXRlOiB7IGVycm9ycyB9IH0gPSB1c2VGb3JtKCk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxGb3JtIGFjdGlvbj1cIi9hcGlcIiBjb250cm9sPXtjb250cm9sfT5cbiAqICAgICAgIDxpbnB1dCB7Li4ucmVnaXN0ZXIoXCJuYW1lXCIpfSAvPlxuICogICAgICAgPHA+e2Vycm9ycz8ucm9vdD8uc2VydmVyICYmICdTZXJ2ZXIgZXJyb3InfTwvcD5cbiAqICAgICAgIDxidXR0b24+U3VibWl0PC9idXR0b24+XG4gKiAgICAgPC9Gb3JtPlxuICogICApO1xuICogfVxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIEZvcm0ocHJvcHMpIHtcbiAgICBjb25zdCBtZXRob2RzID0gdXNlRm9ybUNvbnRleHQoKTtcbiAgICBjb25zdCBbbW91bnRlZCwgc2V0TW91bnRlZF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgeyBjb250cm9sID0gbWV0aG9kcy5jb250cm9sLCBvblN1Ym1pdCwgY2hpbGRyZW4sIGFjdGlvbiwgbWV0aG9kID0gUE9TVF9SRVFVRVNULCBoZWFkZXJzLCBlbmNUeXBlLCBvbkVycm9yLCByZW5kZXIsIG9uU3VjY2VzcywgdmFsaWRhdGVTdGF0dXMsIC4uLnJlc3QgfSA9IHByb3BzO1xuICAgIGNvbnN0IHN1Ym1pdCA9IGFzeW5jIChldmVudCkgPT4ge1xuICAgICAgICBsZXQgaGFzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgbGV0IHR5cGUgPSAnJztcbiAgICAgICAgYXdhaXQgY29udHJvbC5oYW5kbGVTdWJtaXQoYXN5bmMgKGRhdGEpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgICAgICBsZXQgZm9ybURhdGFKc29uID0gJyc7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvcm1EYXRhSnNvbiA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF9hKSB7IH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBjb250cm9sLl9uYW1lcy5tb3VudCkge1xuICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChuYW1lLCBnZXQoZGF0YSwgbmFtZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9uU3VibWl0KSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgb25TdWJtaXQoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgZm9ybURhdGFKc29uLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFjdGlvbikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNob3VsZFN0cmluZ2lmeVN1Ym1pc3Npb25EYXRhID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycyAmJiBoZWFkZXJzWydDb250ZW50LVR5cGUnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuY1R5cGUsXG4gICAgICAgICAgICAgICAgICAgIF0uc29tZSgodmFsdWUpID0+IHZhbHVlICYmIHZhbHVlLmluY2x1ZGVzKCdqc29uJykpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFjdGlvbiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uKGVuY1R5cGUgPyB7ICdDb250ZW50LVR5cGUnOiBlbmNUeXBlIH0gOiB7fSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogc2hvdWxkU3RyaW5naWZ5U3VibWlzc2lvbkRhdGEgPyBmb3JtRGF0YUpzb24gOiBmb3JtRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKHZhbGlkYXRlU3RhdHVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAhdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogcmVzcG9uc2Uuc3RhdHVzIDwgMjAwIHx8IHJlc3BvbnNlLnN0YXR1cyA+PSAzMDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yICYmIG9uRXJyb3IoeyByZXNwb25zZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSBTdHJpbmcocmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uU3VjY2VzcyAmJiBvblN1Y2Nlc3MoeyByZXNwb25zZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yICYmIG9uRXJyb3IoeyBlcnJvciB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKGV2ZW50KTtcbiAgICAgICAgaWYgKGhhc0Vycm9yICYmIHByb3BzLmNvbnRyb2wpIHtcbiAgICAgICAgICAgIHByb3BzLmNvbnRyb2wuX3N1YmplY3RzLnN0YXRlLm5leHQoe1xuICAgICAgICAgICAgICAgIGlzU3VibWl0U3VjY2Vzc2Z1bDogZmFsc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHByb3BzLmNvbnRyb2wuc2V0RXJyb3IoJ3Jvb3Quc2VydmVyJywge1xuICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc2V0TW91bnRlZCh0cnVlKTtcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIHJlbmRlciA/IChSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCByZW5kZXIoe1xuICAgICAgICBzdWJtaXQsXG4gICAgfSkpKSA6IChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiLCB7IG5vVmFsaWRhdGU6IG1vdW50ZWQsIGFjdGlvbjogYWN0aW9uLCBtZXRob2Q6IG1ldGhvZCwgZW5jVHlwZTogZW5jVHlwZSwgb25TdWJtaXQ6IHN1Ym1pdCwgLi4ucmVzdCB9LCBjaGlsZHJlbikpO1xufVxuXG52YXIgYXBwZW5kRXJyb3JzID0gKG5hbWUsIHZhbGlkYXRlQWxsRmllbGRDcml0ZXJpYSwgZXJyb3JzLCB0eXBlLCBtZXNzYWdlKSA9PiB2YWxpZGF0ZUFsbEZpZWxkQ3JpdGVyaWFcbiAgICA/IHtcbiAgICAgICAgLi4uZXJyb3JzW25hbWVdLFxuICAgICAgICB0eXBlczoge1xuICAgICAgICAgICAgLi4uKGVycm9yc1tuYW1lXSAmJiBlcnJvcnNbbmFtZV0udHlwZXMgPyBlcnJvcnNbbmFtZV0udHlwZXMgOiB7fSksXG4gICAgICAgICAgICBbdHlwZV06IG1lc3NhZ2UgfHwgdHJ1ZSxcbiAgICAgICAgfSxcbiAgICB9XG4gICAgOiB7fTtcblxudmFyIGdlbmVyYXRlSWQgPSAoKSA9PiB7XG4gICAgY29uc3QgZCA9IHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gJ3VuZGVmaW5lZCcgPyBEYXRlLm5vdygpIDogcGVyZm9ybWFuY2Uubm93KCkgKiAxMDAwO1xuICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIChjKSA9PiB7XG4gICAgICAgIGNvbnN0IHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2ICsgZCkgJSAxNiB8IDA7XG4gICAgICAgIHJldHVybiAoYyA9PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4KS50b1N0cmluZygxNik7XG4gICAgfSk7XG59O1xuXG52YXIgZ2V0Rm9jdXNGaWVsZE5hbWUgPSAobmFtZSwgaW5kZXgsIG9wdGlvbnMgPSB7fSkgPT4gb3B0aW9ucy5zaG91bGRGb2N1cyB8fCBpc1VuZGVmaW5lZChvcHRpb25zLnNob3VsZEZvY3VzKVxuICAgID8gb3B0aW9ucy5mb2N1c05hbWUgfHxcbiAgICAgICAgYCR7bmFtZX0uJHtpc1VuZGVmaW5lZChvcHRpb25zLmZvY3VzSW5kZXgpID8gaW5kZXggOiBvcHRpb25zLmZvY3VzSW5kZXh9LmBcbiAgICA6ICcnO1xuXG52YXIgZ2V0VmFsaWRhdGlvbk1vZGVzID0gKG1vZGUpID0+ICh7XG4gICAgaXNPblN1Ym1pdDogIW1vZGUgfHwgbW9kZSA9PT0gVkFMSURBVElPTl9NT0RFLm9uU3VibWl0LFxuICAgIGlzT25CbHVyOiBtb2RlID09PSBWQUxJREFUSU9OX01PREUub25CbHVyLFxuICAgIGlzT25DaGFuZ2U6IG1vZGUgPT09IFZBTElEQVRJT05fTU9ERS5vbkNoYW5nZSxcbiAgICBpc09uQWxsOiBtb2RlID09PSBWQUxJREFUSU9OX01PREUuYWxsLFxuICAgIGlzT25Ub3VjaDogbW9kZSA9PT0gVkFMSURBVElPTl9NT0RFLm9uVG91Y2hlZCxcbn0pO1xuXG52YXIgaXNXYXRjaGVkID0gKG5hbWUsIF9uYW1lcywgaXNCbHVyRXZlbnQpID0+ICFpc0JsdXJFdmVudCAmJlxuICAgIChfbmFtZXMud2F0Y2hBbGwgfHxcbiAgICAgICAgX25hbWVzLndhdGNoLmhhcyhuYW1lKSB8fFxuICAgICAgICBbLi4uX25hbWVzLndhdGNoXS5zb21lKCh3YXRjaE5hbWUpID0+IG5hbWUuc3RhcnRzV2l0aCh3YXRjaE5hbWUpICYmXG4gICAgICAgICAgICAvXlxcLlxcdysvLnRlc3QobmFtZS5zbGljZSh3YXRjaE5hbWUubGVuZ3RoKSkpKTtcblxuY29uc3QgaXRlcmF0ZUZpZWxkc0J5QWN0aW9uID0gKGZpZWxkcywgYWN0aW9uLCBmaWVsZHNOYW1lcywgYWJvcnRFYXJseSkgPT4ge1xuICAgIGZvciAoY29uc3Qga2V5IG9mIGZpZWxkc05hbWVzIHx8IE9iamVjdC5rZXlzKGZpZWxkcykpIHtcbiAgICAgICAgY29uc3QgZmllbGQgPSBnZXQoZmllbGRzLCBrZXkpO1xuICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgX2YsIC4uLmN1cnJlbnRGaWVsZCB9ID0gZmllbGQ7XG4gICAgICAgICAgICBpZiAoX2YpIHtcbiAgICAgICAgICAgICAgICBpZiAoX2YucmVmcyAmJiBfZi5yZWZzWzBdICYmIGFjdGlvbihfZi5yZWZzWzBdLCBrZXkpICYmICFhYm9ydEVhcmx5KSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChfZi5yZWYgJiYgYWN0aW9uKF9mLnJlZiwgX2YubmFtZSkgJiYgIWFib3J0RWFybHkpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpdGVyYXRlRmllbGRzQnlBY3Rpb24oY3VycmVudEZpZWxkLCBhY3Rpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KGN1cnJlbnRGaWVsZCkpIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRlRmllbGRzQnlBY3Rpb24oY3VycmVudEZpZWxkLCBhY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIHVwZGF0ZUZpZWxkQXJyYXlSb290RXJyb3IgPSAoZXJyb3JzLCBlcnJvciwgbmFtZSkgPT4ge1xuICAgIGNvbnN0IGZpZWxkQXJyYXlFcnJvcnMgPSBjb21wYWN0KGdldChlcnJvcnMsIG5hbWUpKTtcbiAgICBzZXQoZmllbGRBcnJheUVycm9ycywgJ3Jvb3QnLCBlcnJvcltuYW1lXSk7XG4gICAgc2V0KGVycm9ycywgbmFtZSwgZmllbGRBcnJheUVycm9ycyk7XG4gICAgcmV0dXJuIGVycm9ycztcbn07XG5cbnZhciBpc0ZpbGVJbnB1dCA9IChlbGVtZW50KSA9PiBlbGVtZW50LnR5cGUgPT09ICdmaWxlJztcblxudmFyIGlzRnVuY3Rpb24gPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcblxudmFyIGlzSFRNTEVsZW1lbnQgPSAodmFsdWUpID0+IHtcbiAgICBpZiAoIWlzV2ViKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3Qgb3duZXIgPSB2YWx1ZSA/IHZhbHVlLm93bmVyRG9jdW1lbnQgOiAwO1xuICAgIHJldHVybiAodmFsdWUgaW5zdGFuY2VvZlxuICAgICAgICAob3duZXIgJiYgb3duZXIuZGVmYXVsdFZpZXcgPyBvd25lci5kZWZhdWx0Vmlldy5IVE1MRWxlbWVudCA6IEhUTUxFbGVtZW50KSk7XG59O1xuXG52YXIgaXNNZXNzYWdlID0gKHZhbHVlKSA9PiBpc1N0cmluZyh2YWx1ZSk7XG5cbnZhciBpc1JhZGlvSW5wdXQgPSAoZWxlbWVudCkgPT4gZWxlbWVudC50eXBlID09PSAncmFkaW8nO1xuXG52YXIgaXNSZWdleCA9ICh2YWx1ZSkgPT4gdmFsdWUgaW5zdGFuY2VvZiBSZWdFeHA7XG5cbmNvbnN0IGRlZmF1bHRSZXN1bHQgPSB7XG4gICAgdmFsdWU6IGZhbHNlLFxuICAgIGlzVmFsaWQ6IGZhbHNlLFxufTtcbmNvbnN0IHZhbGlkUmVzdWx0ID0geyB2YWx1ZTogdHJ1ZSwgaXNWYWxpZDogdHJ1ZSB9O1xudmFyIGdldENoZWNrYm94VmFsdWUgPSAob3B0aW9ucykgPT4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IG9wdGlvbnNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChvcHRpb24pID0+IG9wdGlvbiAmJiBvcHRpb24uY2hlY2tlZCAmJiAhb3B0aW9uLmRpc2FibGVkKVxuICAgICAgICAgICAgICAgIC5tYXAoKG9wdGlvbikgPT4gb3B0aW9uLnZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB2YWx1ZXMsIGlzVmFsaWQ6ICEhdmFsdWVzLmxlbmd0aCB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcHRpb25zWzBdLmNoZWNrZWQgJiYgIW9wdGlvbnNbMF0uZGlzYWJsZWRcbiAgICAgICAgICAgID8gLy8gQHRzLWV4cGVjdC1lcnJvciBleHBlY3RlZCB0byB3b3JrIGluIHRoZSBicm93c2VyXG4gICAgICAgICAgICAgICAgb3B0aW9uc1swXS5hdHRyaWJ1dGVzICYmICFpc1VuZGVmaW5lZChvcHRpb25zWzBdLmF0dHJpYnV0ZXMudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgID8gaXNVbmRlZmluZWQob3B0aW9uc1swXS52YWx1ZSkgfHwgb3B0aW9uc1swXS52YWx1ZSA9PT0gJydcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdmFsaWRSZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogeyB2YWx1ZTogb3B0aW9uc1swXS52YWx1ZSwgaXNWYWxpZDogdHJ1ZSB9XG4gICAgICAgICAgICAgICAgICAgIDogdmFsaWRSZXN1bHRcbiAgICAgICAgICAgIDogZGVmYXVsdFJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRSZXN1bHQ7XG59O1xuXG5jb25zdCBkZWZhdWx0UmV0dXJuID0ge1xuICAgIGlzVmFsaWQ6IGZhbHNlLFxuICAgIHZhbHVlOiBudWxsLFxufTtcbnZhciBnZXRSYWRpb1ZhbHVlID0gKG9wdGlvbnMpID0+IEFycmF5LmlzQXJyYXkob3B0aW9ucylcbiAgICA/IG9wdGlvbnMucmVkdWNlKChwcmV2aW91cywgb3B0aW9uKSA9PiBvcHRpb24gJiYgb3B0aW9uLmNoZWNrZWQgJiYgIW9wdGlvbi5kaXNhYmxlZFxuICAgICAgICA/IHtcbiAgICAgICAgICAgIGlzVmFsaWQ6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogb3B0aW9uLnZhbHVlLFxuICAgICAgICB9XG4gICAgICAgIDogcHJldmlvdXMsIGRlZmF1bHRSZXR1cm4pXG4gICAgOiBkZWZhdWx0UmV0dXJuO1xuXG5mdW5jdGlvbiBnZXRWYWxpZGF0ZUVycm9yKHJlc3VsdCwgcmVmLCB0eXBlID0gJ3ZhbGlkYXRlJykge1xuICAgIGlmIChpc01lc3NhZ2UocmVzdWx0KSB8fFxuICAgICAgICAoQXJyYXkuaXNBcnJheShyZXN1bHQpICYmIHJlc3VsdC5ldmVyeShpc01lc3NhZ2UpKSB8fFxuICAgICAgICAoaXNCb29sZWFuKHJlc3VsdCkgJiYgIXJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICBtZXNzYWdlOiBpc01lc3NhZ2UocmVzdWx0KSA/IHJlc3VsdCA6ICcnLFxuICAgICAgICAgICAgcmVmLFxuICAgICAgICB9O1xuICAgIH1cbn1cblxudmFyIGdldFZhbHVlQW5kTWVzc2FnZSA9ICh2YWxpZGF0aW9uRGF0YSkgPT4gaXNPYmplY3QodmFsaWRhdGlvbkRhdGEpICYmICFpc1JlZ2V4KHZhbGlkYXRpb25EYXRhKVxuICAgID8gdmFsaWRhdGlvbkRhdGFcbiAgICA6IHtcbiAgICAgICAgdmFsdWU6IHZhbGlkYXRpb25EYXRhLFxuICAgICAgICBtZXNzYWdlOiAnJyxcbiAgICB9O1xuXG52YXIgdmFsaWRhdGVGaWVsZCA9IGFzeW5jIChmaWVsZCwgZm9ybVZhbHVlcywgdmFsaWRhdGVBbGxGaWVsZENyaXRlcmlhLCBzaG91bGRVc2VOYXRpdmVWYWxpZGF0aW9uLCBpc0ZpZWxkQXJyYXkpID0+IHtcbiAgICBjb25zdCB7IHJlZiwgcmVmcywgcmVxdWlyZWQsIG1heExlbmd0aCwgbWluTGVuZ3RoLCBtaW4sIG1heCwgcGF0dGVybiwgdmFsaWRhdGUsIG5hbWUsIHZhbHVlQXNOdW1iZXIsIG1vdW50LCBkaXNhYmxlZCwgfSA9IGZpZWxkLl9mO1xuICAgIGNvbnN0IGlucHV0VmFsdWUgPSBnZXQoZm9ybVZhbHVlcywgbmFtZSk7XG4gICAgaWYgKCFtb3VudCB8fCBkaXNhYmxlZCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGNvbnN0IGlucHV0UmVmID0gcmVmcyA/IHJlZnNbMF0gOiByZWY7XG4gICAgY29uc3Qgc2V0Q3VzdG9tVmFsaWRpdHkgPSAobWVzc2FnZSkgPT4ge1xuICAgICAgICBpZiAoc2hvdWxkVXNlTmF0aXZlVmFsaWRhdGlvbiAmJiBpbnB1dFJlZi5yZXBvcnRWYWxpZGl0eSkge1xuICAgICAgICAgICAgaW5wdXRSZWYuc2V0Q3VzdG9tVmFsaWRpdHkoaXNCb29sZWFuKG1lc3NhZ2UpID8gJycgOiBtZXNzYWdlIHx8ICcnKTtcbiAgICAgICAgICAgIGlucHV0UmVmLnJlcG9ydFZhbGlkaXR5KCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGVycm9yID0ge307XG4gICAgY29uc3QgaXNSYWRpbyA9IGlzUmFkaW9JbnB1dChyZWYpO1xuICAgIGNvbnN0IGlzQ2hlY2tCb3ggPSBpc0NoZWNrQm94SW5wdXQocmVmKTtcbiAgICBjb25zdCBpc1JhZGlvT3JDaGVja2JveCA9IGlzUmFkaW8gfHwgaXNDaGVja0JveDtcbiAgICBjb25zdCBpc0VtcHR5ID0gKCh2YWx1ZUFzTnVtYmVyIHx8IGlzRmlsZUlucHV0KHJlZikpICYmXG4gICAgICAgIGlzVW5kZWZpbmVkKHJlZi52YWx1ZSkgJiZcbiAgICAgICAgaXNVbmRlZmluZWQoaW5wdXRWYWx1ZSkpIHx8XG4gICAgICAgIChpc0hUTUxFbGVtZW50KHJlZikgJiYgcmVmLnZhbHVlID09PSAnJykgfHxcbiAgICAgICAgaW5wdXRWYWx1ZSA9PT0gJycgfHxcbiAgICAgICAgKEFycmF5LmlzQXJyYXkoaW5wdXRWYWx1ZSkgJiYgIWlucHV0VmFsdWUubGVuZ3RoKTtcbiAgICBjb25zdCBhcHBlbmRFcnJvcnNDdXJyeSA9IGFwcGVuZEVycm9ycy5iaW5kKG51bGwsIG5hbWUsIHZhbGlkYXRlQWxsRmllbGRDcml0ZXJpYSwgZXJyb3IpO1xuICAgIGNvbnN0IGdldE1pbk1heE1lc3NhZ2UgPSAoZXhjZWVkTWF4LCBtYXhMZW5ndGhNZXNzYWdlLCBtaW5MZW5ndGhNZXNzYWdlLCBtYXhUeXBlID0gSU5QVVRfVkFMSURBVElPTl9SVUxFUy5tYXhMZW5ndGgsIG1pblR5cGUgPSBJTlBVVF9WQUxJREFUSU9OX1JVTEVTLm1pbkxlbmd0aCkgPT4ge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gZXhjZWVkTWF4ID8gbWF4TGVuZ3RoTWVzc2FnZSA6IG1pbkxlbmd0aE1lc3NhZ2U7XG4gICAgICAgIGVycm9yW25hbWVdID0ge1xuICAgICAgICAgICAgdHlwZTogZXhjZWVkTWF4ID8gbWF4VHlwZSA6IG1pblR5cGUsXG4gICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgcmVmLFxuICAgICAgICAgICAgLi4uYXBwZW5kRXJyb3JzQ3VycnkoZXhjZWVkTWF4ID8gbWF4VHlwZSA6IG1pblR5cGUsIG1lc3NhZ2UpLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgaWYgKGlzRmllbGRBcnJheVxuICAgICAgICA/ICFBcnJheS5pc0FycmF5KGlucHV0VmFsdWUpIHx8ICFpbnB1dFZhbHVlLmxlbmd0aFxuICAgICAgICA6IHJlcXVpcmVkICYmXG4gICAgICAgICAgICAoKCFpc1JhZGlvT3JDaGVja2JveCAmJiAoaXNFbXB0eSB8fCBpc051bGxPclVuZGVmaW5lZChpbnB1dFZhbHVlKSkpIHx8XG4gICAgICAgICAgICAgICAgKGlzQm9vbGVhbihpbnB1dFZhbHVlKSAmJiAhaW5wdXRWYWx1ZSkgfHxcbiAgICAgICAgICAgICAgICAoaXNDaGVja0JveCAmJiAhZ2V0Q2hlY2tib3hWYWx1ZShyZWZzKS5pc1ZhbGlkKSB8fFxuICAgICAgICAgICAgICAgIChpc1JhZGlvICYmICFnZXRSYWRpb1ZhbHVlKHJlZnMpLmlzVmFsaWQpKSkge1xuICAgICAgICBjb25zdCB7IHZhbHVlLCBtZXNzYWdlIH0gPSBpc01lc3NhZ2UocmVxdWlyZWQpXG4gICAgICAgICAgICA/IHsgdmFsdWU6ICEhcmVxdWlyZWQsIG1lc3NhZ2U6IHJlcXVpcmVkIH1cbiAgICAgICAgICAgIDogZ2V0VmFsdWVBbmRNZXNzYWdlKHJlcXVpcmVkKTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBlcnJvcltuYW1lXSA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBJTlBVVF9WQUxJREFUSU9OX1JVTEVTLnJlcXVpcmVkLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgcmVmOiBpbnB1dFJlZixcbiAgICAgICAgICAgICAgICAuLi5hcHBlbmRFcnJvcnNDdXJyeShJTlBVVF9WQUxJREFUSU9OX1JVTEVTLnJlcXVpcmVkLCBtZXNzYWdlKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoIXZhbGlkYXRlQWxsRmllbGRDcml0ZXJpYSkge1xuICAgICAgICAgICAgICAgIHNldEN1c3RvbVZhbGlkaXR5KG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWlzRW1wdHkgJiYgKCFpc051bGxPclVuZGVmaW5lZChtaW4pIHx8ICFpc051bGxPclVuZGVmaW5lZChtYXgpKSkge1xuICAgICAgICBsZXQgZXhjZWVkTWF4O1xuICAgICAgICBsZXQgZXhjZWVkTWluO1xuICAgICAgICBjb25zdCBtYXhPdXRwdXQgPSBnZXRWYWx1ZUFuZE1lc3NhZ2UobWF4KTtcbiAgICAgICAgY29uc3QgbWluT3V0cHV0ID0gZ2V0VmFsdWVBbmRNZXNzYWdlKG1pbik7XG4gICAgICAgIGlmICghaXNOdWxsT3JVbmRlZmluZWQoaW5wdXRWYWx1ZSkgJiYgIWlzTmFOKGlucHV0VmFsdWUpKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZU51bWJlciA9IHJlZi52YWx1ZUFzTnVtYmVyIHx8XG4gICAgICAgICAgICAgICAgKGlucHV0VmFsdWUgPyAraW5wdXRWYWx1ZSA6IGlucHV0VmFsdWUpO1xuICAgICAgICAgICAgaWYgKCFpc051bGxPclVuZGVmaW5lZChtYXhPdXRwdXQudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgZXhjZWVkTWF4ID0gdmFsdWVOdW1iZXIgPiBtYXhPdXRwdXQudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKG1pbk91dHB1dC52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBleGNlZWRNaW4gPSB2YWx1ZU51bWJlciA8IG1pbk91dHB1dC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlRGF0ZSA9IHJlZi52YWx1ZUFzRGF0ZSB8fCBuZXcgRGF0ZShpbnB1dFZhbHVlKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnZlcnRUaW1lVG9EYXRlID0gKHRpbWUpID0+IG5ldyBEYXRlKG5ldyBEYXRlKCkudG9EYXRlU3RyaW5nKCkgKyAnICcgKyB0aW1lKTtcbiAgICAgICAgICAgIGNvbnN0IGlzVGltZSA9IHJlZi50eXBlID09ICd0aW1lJztcbiAgICAgICAgICAgIGNvbnN0IGlzV2VlayA9IHJlZi50eXBlID09ICd3ZWVrJztcbiAgICAgICAgICAgIGlmIChpc1N0cmluZyhtYXhPdXRwdXQudmFsdWUpICYmIGlucHV0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBleGNlZWRNYXggPSBpc1RpbWVcbiAgICAgICAgICAgICAgICAgICAgPyBjb252ZXJ0VGltZVRvRGF0ZShpbnB1dFZhbHVlKSA+IGNvbnZlcnRUaW1lVG9EYXRlKG1heE91dHB1dC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgOiBpc1dlZWtcbiAgICAgICAgICAgICAgICAgICAgICAgID8gaW5wdXRWYWx1ZSA+IG1heE91dHB1dC52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZURhdGUgPiBuZXcgRGF0ZShtYXhPdXRwdXQudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaW5nKG1pbk91dHB1dC52YWx1ZSkgJiYgaW5wdXRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGV4Y2VlZE1pbiA9IGlzVGltZVxuICAgICAgICAgICAgICAgICAgICA/IGNvbnZlcnRUaW1lVG9EYXRlKGlucHV0VmFsdWUpIDwgY29udmVydFRpbWVUb0RhdGUobWluT3V0cHV0LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA6IGlzV2Vla1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBpbnB1dFZhbHVlIDwgbWluT3V0cHV0LnZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHZhbHVlRGF0ZSA8IG5ldyBEYXRlKG1pbk91dHB1dC52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4Y2VlZE1heCB8fCBleGNlZWRNaW4pIHtcbiAgICAgICAgICAgIGdldE1pbk1heE1lc3NhZ2UoISFleGNlZWRNYXgsIG1heE91dHB1dC5tZXNzYWdlLCBtaW5PdXRwdXQubWVzc2FnZSwgSU5QVVRfVkFMSURBVElPTl9SVUxFUy5tYXgsIElOUFVUX1ZBTElEQVRJT05fUlVMRVMubWluKTtcbiAgICAgICAgICAgIGlmICghdmFsaWRhdGVBbGxGaWVsZENyaXRlcmlhKSB7XG4gICAgICAgICAgICAgICAgc2V0Q3VzdG9tVmFsaWRpdHkoZXJyb3JbbmFtZV0ubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmICgobWF4TGVuZ3RoIHx8IG1pbkxlbmd0aCkgJiZcbiAgICAgICAgIWlzRW1wdHkgJiZcbiAgICAgICAgKGlzU3RyaW5nKGlucHV0VmFsdWUpIHx8IChpc0ZpZWxkQXJyYXkgJiYgQXJyYXkuaXNBcnJheShpbnB1dFZhbHVlKSkpKSB7XG4gICAgICAgIGNvbnN0IG1heExlbmd0aE91dHB1dCA9IGdldFZhbHVlQW5kTWVzc2FnZShtYXhMZW5ndGgpO1xuICAgICAgICBjb25zdCBtaW5MZW5ndGhPdXRwdXQgPSBnZXRWYWx1ZUFuZE1lc3NhZ2UobWluTGVuZ3RoKTtcbiAgICAgICAgY29uc3QgZXhjZWVkTWF4ID0gIWlzTnVsbE9yVW5kZWZpbmVkKG1heExlbmd0aE91dHB1dC52YWx1ZSkgJiZcbiAgICAgICAgICAgIGlucHV0VmFsdWUubGVuZ3RoID4gK21heExlbmd0aE91dHB1dC52YWx1ZTtcbiAgICAgICAgY29uc3QgZXhjZWVkTWluID0gIWlzTnVsbE9yVW5kZWZpbmVkKG1pbkxlbmd0aE91dHB1dC52YWx1ZSkgJiZcbiAgICAgICAgICAgIGlucHV0VmFsdWUubGVuZ3RoIDwgK21pbkxlbmd0aE91dHB1dC52YWx1ZTtcbiAgICAgICAgaWYgKGV4Y2VlZE1heCB8fCBleGNlZWRNaW4pIHtcbiAgICAgICAgICAgIGdldE1pbk1heE1lc3NhZ2UoZXhjZWVkTWF4LCBtYXhMZW5ndGhPdXRwdXQubWVzc2FnZSwgbWluTGVuZ3RoT3V0cHV0Lm1lc3NhZ2UpO1xuICAgICAgICAgICAgaWYgKCF2YWxpZGF0ZUFsbEZpZWxkQ3JpdGVyaWEpIHtcbiAgICAgICAgICAgICAgICBzZXRDdXN0b21WYWxpZGl0eShlcnJvcltuYW1lXS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhdHRlcm4gJiYgIWlzRW1wdHkgJiYgaXNTdHJpbmcoaW5wdXRWYWx1ZSkpIHtcbiAgICAgICAgY29uc3QgeyB2YWx1ZTogcGF0dGVyblZhbHVlLCBtZXNzYWdlIH0gPSBnZXRWYWx1ZUFuZE1lc3NhZ2UocGF0dGVybik7XG4gICAgICAgIGlmIChpc1JlZ2V4KHBhdHRlcm5WYWx1ZSkgJiYgIWlucHV0VmFsdWUubWF0Y2gocGF0dGVyblZhbHVlKSkge1xuICAgICAgICAgICAgZXJyb3JbbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogSU5QVVRfVkFMSURBVElPTl9SVUxFUy5wYXR0ZXJuLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgcmVmLFxuICAgICAgICAgICAgICAgIC4uLmFwcGVuZEVycm9yc0N1cnJ5KElOUFVUX1ZBTElEQVRJT05fUlVMRVMucGF0dGVybiwgbWVzc2FnZSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCF2YWxpZGF0ZUFsbEZpZWxkQ3JpdGVyaWEpIHtcbiAgICAgICAgICAgICAgICBzZXRDdXN0b21WYWxpZGl0eShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHZhbGlkYXRlKSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbGlkYXRlKSkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmFsaWRhdGUoaW5wdXRWYWx1ZSwgZm9ybVZhbHVlcyk7XG4gICAgICAgICAgICBjb25zdCB2YWxpZGF0ZUVycm9yID0gZ2V0VmFsaWRhdGVFcnJvcihyZXN1bHQsIGlucHV0UmVmKTtcbiAgICAgICAgICAgIGlmICh2YWxpZGF0ZUVycm9yKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JbbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnZhbGlkYXRlRXJyb3IsXG4gICAgICAgICAgICAgICAgICAgIC4uLmFwcGVuZEVycm9yc0N1cnJ5KElOUFVUX1ZBTElEQVRJT05fUlVMRVMudmFsaWRhdGUsIHZhbGlkYXRlRXJyb3IubWVzc2FnZSksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoIXZhbGlkYXRlQWxsRmllbGRDcml0ZXJpYSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRDdXN0b21WYWxpZGl0eSh2YWxpZGF0ZUVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KHZhbGlkYXRlKSkge1xuICAgICAgICAgICAgbGV0IHZhbGlkYXRpb25SZXN1bHQgPSB7fTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHZhbGlkYXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc0VtcHR5T2JqZWN0KHZhbGlkYXRpb25SZXN1bHQpICYmICF2YWxpZGF0ZUFsbEZpZWxkQ3JpdGVyaWEpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRlRXJyb3IgPSBnZXRWYWxpZGF0ZUVycm9yKGF3YWl0IHZhbGlkYXRlW2tleV0oaW5wdXRWYWx1ZSwgZm9ybVZhbHVlcyksIGlucHV0UmVmLCBrZXkpO1xuICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0ZUVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb25SZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi52YWxpZGF0ZUVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uYXBwZW5kRXJyb3JzQ3Vycnkoa2V5LCB2YWxpZGF0ZUVycm9yLm1lc3NhZ2UpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBzZXRDdXN0b21WYWxpZGl0eSh2YWxpZGF0ZUVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGVBbGxGaWVsZENyaXRlcmlhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcltuYW1lXSA9IHZhbGlkYXRpb25SZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzRW1wdHlPYmplY3QodmFsaWRhdGlvblJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICBlcnJvcltuYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmVmOiBpbnB1dFJlZixcbiAgICAgICAgICAgICAgICAgICAgLi4udmFsaWRhdGlvblJlc3VsdCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmICghdmFsaWRhdGVBbGxGaWVsZENyaXRlcmlhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0Q3VzdG9tVmFsaWRpdHkodHJ1ZSk7XG4gICAgcmV0dXJuIGVycm9yO1xufTtcblxudmFyIGFwcGVuZEF0ID0gKGRhdGEsIHZhbHVlKSA9PiBbXG4gICAgLi4uZGF0YSxcbiAgICAuLi5jb252ZXJ0VG9BcnJheVBheWxvYWQodmFsdWUpLFxuXTtcblxudmFyIGZpbGxFbXB0eUFycmF5ID0gKHZhbHVlKSA9PiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcCgoKSA9PiB1bmRlZmluZWQpIDogdW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpbnNlcnQoZGF0YSwgaW5kZXgsIHZhbHVlKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgLi4uZGF0YS5zbGljZSgwLCBpbmRleCksXG4gICAgICAgIC4uLmNvbnZlcnRUb0FycmF5UGF5bG9hZCh2YWx1ZSksXG4gICAgICAgIC4uLmRhdGEuc2xpY2UoaW5kZXgpLFxuICAgIF07XG59XG5cbnZhciBtb3ZlQXJyYXlBdCA9IChkYXRhLCBmcm9tLCB0bykgPT4ge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmIChpc1VuZGVmaW5lZChkYXRhW3RvXSkpIHtcbiAgICAgICAgZGF0YVt0b10gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGRhdGEuc3BsaWNlKHRvLCAwLCBkYXRhLnNwbGljZShmcm9tLCAxKVswXSk7XG4gICAgcmV0dXJuIGRhdGE7XG59O1xuXG52YXIgcHJlcGVuZEF0ID0gKGRhdGEsIHZhbHVlKSA9PiBbXG4gICAgLi4uY29udmVydFRvQXJyYXlQYXlsb2FkKHZhbHVlKSxcbiAgICAuLi5jb252ZXJ0VG9BcnJheVBheWxvYWQoZGF0YSksXG5dO1xuXG5mdW5jdGlvbiByZW1vdmVBdEluZGV4ZXMoZGF0YSwgaW5kZXhlcykge1xuICAgIGxldCBpID0gMDtcbiAgICBjb25zdCB0ZW1wID0gWy4uLmRhdGFdO1xuICAgIGZvciAoY29uc3QgaW5kZXggb2YgaW5kZXhlcykge1xuICAgICAgICB0ZW1wLnNwbGljZShpbmRleCAtIGksIDEpO1xuICAgICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiBjb21wYWN0KHRlbXApLmxlbmd0aCA/IHRlbXAgOiBbXTtcbn1cbnZhciByZW1vdmVBcnJheUF0ID0gKGRhdGEsIGluZGV4KSA9PiBpc1VuZGVmaW5lZChpbmRleClcbiAgICA/IFtdXG4gICAgOiByZW1vdmVBdEluZGV4ZXMoZGF0YSwgY29udmVydFRvQXJyYXlQYXlsb2FkKGluZGV4KS5zb3J0KChhLCBiKSA9PiBhIC0gYikpO1xuXG52YXIgc3dhcEFycmF5QXQgPSAoZGF0YSwgaW5kZXhBLCBpbmRleEIpID0+IHtcbiAgICBbZGF0YVtpbmRleEFdLCBkYXRhW2luZGV4Ql1dID0gW2RhdGFbaW5kZXhCXSwgZGF0YVtpbmRleEFdXTtcbn07XG5cbmZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCB1cGRhdGVQYXRoKSB7XG4gICAgY29uc3QgbGVuZ3RoID0gdXBkYXRlUGF0aC5zbGljZSgwLCAtMSkubGVuZ3RoO1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIG9iamVjdCA9IGlzVW5kZWZpbmVkKG9iamVjdCkgPyBpbmRleCsrIDogb2JqZWN0W3VwZGF0ZVBhdGhbaW5kZXgrK11dO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xufVxuZnVuY3Rpb24gaXNFbXB0eUFycmF5KG9iaikge1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkgJiYgIWlzVW5kZWZpbmVkKG9ialtrZXldKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gdW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgY29uc3QgcGF0aHMgPSBBcnJheS5pc0FycmF5KHBhdGgpXG4gICAgICAgID8gcGF0aFxuICAgICAgICA6IGlzS2V5KHBhdGgpXG4gICAgICAgICAgICA/IFtwYXRoXVxuICAgICAgICAgICAgOiBzdHJpbmdUb1BhdGgocGF0aCk7XG4gICAgY29uc3QgY2hpbGRPYmplY3QgPSBwYXRocy5sZW5ndGggPT09IDEgPyBvYmplY3QgOiBiYXNlR2V0KG9iamVjdCwgcGF0aHMpO1xuICAgIGNvbnN0IGluZGV4ID0gcGF0aHMubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBrZXkgPSBwYXRoc1tpbmRleF07XG4gICAgaWYgKGNoaWxkT2JqZWN0KSB7XG4gICAgICAgIGRlbGV0ZSBjaGlsZE9iamVjdFtrZXldO1xuICAgIH1cbiAgICBpZiAoaW5kZXggIT09IDAgJiZcbiAgICAgICAgKChpc09iamVjdChjaGlsZE9iamVjdCkgJiYgaXNFbXB0eU9iamVjdChjaGlsZE9iamVjdCkpIHx8XG4gICAgICAgICAgICAoQXJyYXkuaXNBcnJheShjaGlsZE9iamVjdCkgJiYgaXNFbXB0eUFycmF5KGNoaWxkT2JqZWN0KSkpKSB7XG4gICAgICAgIHVuc2V0KG9iamVjdCwgcGF0aHMuc2xpY2UoMCwgLTEpKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbn1cblxudmFyIHVwZGF0ZUF0ID0gKGZpZWxkVmFsdWVzLCBpbmRleCwgdmFsdWUpID0+IHtcbiAgICBmaWVsZFZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICByZXR1cm4gZmllbGRWYWx1ZXM7XG59O1xuXG4vKipcbiAqIEEgY3VzdG9tIGhvb2sgdGhhdCBleHBvc2VzIGNvbnZlbmllbnQgbWV0aG9kcyB0byBwZXJmb3JtIG9wZXJhdGlvbnMgd2l0aCBhIGxpc3Qgb2YgZHluYW1pYyBpbnB1dHMgdGhhdCBuZWVkIHRvIGJlIGFwcGVuZGVkLCB1cGRhdGVkLCByZW1vdmVkIGV0Yy4g4oCiIFtEZW1vXShodHRwczovL2NvZGVzYW5kYm94LmlvL3MvcmVhY3QtaG9vay1mb3JtLXVzZWZpZWxkYXJyYXktc3N1Z24pIOKAoiBbVmlkZW9dKGh0dHBzOi8veW91dHUuYmUvNE1yYmZHU0ZZMkEpXG4gKlxuICogQHJlbWFya3NcbiAqIFtBUEldKGh0dHBzOi8vcmVhY3QtaG9vay1mb3JtLmNvbS9kb2NzL3VzZWZpZWxkYXJyYXkpIOKAoiBbRGVtb10oaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL3JlYWN0LWhvb2stZm9ybS11c2VmaWVsZGFycmF5LXNzdWduKVxuICpcbiAqIEBwYXJhbSBwcm9wcyAtIHVzZUZpZWxkQXJyYXkgcHJvcHNcbiAqXG4gKiBAcmV0dXJucyBtZXRob2RzIC0gZnVuY3Rpb25zIHRvIG1hbmlwdWxhdGUgd2l0aCB0aGUgRmllbGQgQXJyYXlzIChkeW5hbWljIGlucHV0cykge0BsaW5rIFVzZUZpZWxkQXJyYXlSZXR1cm59XG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzeFxuICogZnVuY3Rpb24gQXBwKCkge1xuICogICBjb25zdCB7IHJlZ2lzdGVyLCBjb250cm9sLCBoYW5kbGVTdWJtaXQsIHJlc2V0LCB0cmlnZ2VyLCBzZXRFcnJvciB9ID0gdXNlRm9ybSh7XG4gKiAgICAgZGVmYXVsdFZhbHVlczoge1xuICogICAgICAgdGVzdDogW11cbiAqICAgICB9XG4gKiAgIH0pO1xuICogICBjb25zdCB7IGZpZWxkcywgYXBwZW5kIH0gPSB1c2VGaWVsZEFycmF5KHtcbiAqICAgICBjb250cm9sLFxuICogICAgIG5hbWU6IFwidGVzdFwiXG4gKiAgIH0pO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8Zm9ybSBvblN1Ym1pdD17aGFuZGxlU3VibWl0KGRhdGEgPT4gY29uc29sZS5sb2coZGF0YSkpfT5cbiAqICAgICAgIHtmaWVsZHMubWFwKChpdGVtLCBpbmRleCkgPT4gKFxuICogICAgICAgICAgPGlucHV0IGtleT17aXRlbS5pZH0gey4uLnJlZ2lzdGVyKGB0ZXN0LiR7aW5kZXh9LmZpcnN0TmFtZWApfSAgLz5cbiAqICAgICAgICkpfVxuICogICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17KCkgPT4gYXBwZW5kKHsgZmlyc3ROYW1lOiBcImJpbGxcIiB9KX0+XG4gKiAgICAgICAgIGFwcGVuZFxuICogICAgICAgPC9idXR0b24+XG4gKiAgICAgICA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIC8+XG4gKiAgICAgPC9mb3JtPlxuICogICApO1xuICogfVxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIHVzZUZpZWxkQXJyYXkocHJvcHMpIHtcbiAgICBjb25zdCBtZXRob2RzID0gdXNlRm9ybUNvbnRleHQoKTtcbiAgICBjb25zdCB7IGNvbnRyb2wgPSBtZXRob2RzLmNvbnRyb2wsIG5hbWUsIGtleU5hbWUgPSAnaWQnLCBzaG91bGRVbnJlZ2lzdGVyLCB9ID0gcHJvcHM7XG4gICAgY29uc3QgW2ZpZWxkcywgc2V0RmllbGRzXSA9IFJlYWN0LnVzZVN0YXRlKGNvbnRyb2wuX2dldEZpZWxkQXJyYXkobmFtZSkpO1xuICAgIGNvbnN0IGlkcyA9IFJlYWN0LnVzZVJlZihjb250cm9sLl9nZXRGaWVsZEFycmF5KG5hbWUpLm1hcChnZW5lcmF0ZUlkKSk7XG4gICAgY29uc3QgX2ZpZWxkSWRzID0gUmVhY3QudXNlUmVmKGZpZWxkcyk7XG4gICAgY29uc3QgX25hbWUgPSBSZWFjdC51c2VSZWYobmFtZSk7XG4gICAgY29uc3QgX2FjdGlvbmVkID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgICBfbmFtZS5jdXJyZW50ID0gbmFtZTtcbiAgICBfZmllbGRJZHMuY3VycmVudCA9IGZpZWxkcztcbiAgICBjb250cm9sLl9uYW1lcy5hcnJheS5hZGQobmFtZSk7XG4gICAgcHJvcHMucnVsZXMgJiZcbiAgICAgICAgY29udHJvbC5yZWdpc3RlcihuYW1lLCBwcm9wcy5ydWxlcyk7XG4gICAgdXNlU3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogKHsgdmFsdWVzLCBuYW1lOiBmaWVsZEFycmF5TmFtZSwgfSkgPT4ge1xuICAgICAgICAgICAgaWYgKGZpZWxkQXJyYXlOYW1lID09PSBfbmFtZS5jdXJyZW50IHx8ICFmaWVsZEFycmF5TmFtZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkVmFsdWVzID0gZ2V0KHZhbHVlcywgX25hbWUuY3VycmVudCk7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZmllbGRWYWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldEZpZWxkcyhmaWVsZFZhbHVlcyk7XG4gICAgICAgICAgICAgICAgICAgIGlkcy5jdXJyZW50ID0gZmllbGRWYWx1ZXMubWFwKGdlbmVyYXRlSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc3ViamVjdDogY29udHJvbC5fc3ViamVjdHMuYXJyYXksXG4gICAgfSk7XG4gICAgY29uc3QgdXBkYXRlVmFsdWVzID0gUmVhY3QudXNlQ2FsbGJhY2soKHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzKSA9PiB7XG4gICAgICAgIF9hY3Rpb25lZC5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgY29udHJvbC5fdXBkYXRlRmllbGRBcnJheShuYW1lLCB1cGRhdGVkRmllbGRBcnJheVZhbHVlcyk7XG4gICAgfSwgW2NvbnRyb2wsIG5hbWVdKTtcbiAgICBjb25zdCBhcHBlbmQgPSAodmFsdWUsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgY29uc3QgYXBwZW5kVmFsdWUgPSBjb252ZXJ0VG9BcnJheVBheWxvYWQoY2xvbmVPYmplY3QodmFsdWUpKTtcbiAgICAgICAgY29uc3QgdXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMgPSBhcHBlbmRBdChjb250cm9sLl9nZXRGaWVsZEFycmF5KG5hbWUpLCBhcHBlbmRWYWx1ZSk7XG4gICAgICAgIGNvbnRyb2wuX25hbWVzLmZvY3VzID0gZ2V0Rm9jdXNGaWVsZE5hbWUobmFtZSwgdXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMubGVuZ3RoIC0gMSwgb3B0aW9ucyk7XG4gICAgICAgIGlkcy5jdXJyZW50ID0gYXBwZW5kQXQoaWRzLmN1cnJlbnQsIGFwcGVuZFZhbHVlLm1hcChnZW5lcmF0ZUlkKSk7XG4gICAgICAgIHVwZGF0ZVZhbHVlcyh1cGRhdGVkRmllbGRBcnJheVZhbHVlcyk7XG4gICAgICAgIHNldEZpZWxkcyh1cGRhdGVkRmllbGRBcnJheVZhbHVlcyk7XG4gICAgICAgIGNvbnRyb2wuX3VwZGF0ZUZpZWxkQXJyYXkobmFtZSwgdXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMsIGFwcGVuZEF0LCB7XG4gICAgICAgICAgICBhcmdBOiBmaWxsRW1wdHlBcnJheSh2YWx1ZSksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgcHJlcGVuZCA9ICh2YWx1ZSwgb3B0aW9ucykgPT4ge1xuICAgICAgICBjb25zdCBwcmVwZW5kVmFsdWUgPSBjb252ZXJ0VG9BcnJheVBheWxvYWQoY2xvbmVPYmplY3QodmFsdWUpKTtcbiAgICAgICAgY29uc3QgdXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMgPSBwcmVwZW5kQXQoY29udHJvbC5fZ2V0RmllbGRBcnJheShuYW1lKSwgcHJlcGVuZFZhbHVlKTtcbiAgICAgICAgY29udHJvbC5fbmFtZXMuZm9jdXMgPSBnZXRGb2N1c0ZpZWxkTmFtZShuYW1lLCAwLCBvcHRpb25zKTtcbiAgICAgICAgaWRzLmN1cnJlbnQgPSBwcmVwZW5kQXQoaWRzLmN1cnJlbnQsIHByZXBlbmRWYWx1ZS5tYXAoZ2VuZXJhdGVJZCkpO1xuICAgICAgICB1cGRhdGVWYWx1ZXModXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMpO1xuICAgICAgICBzZXRGaWVsZHModXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMpO1xuICAgICAgICBjb250cm9sLl91cGRhdGVGaWVsZEFycmF5KG5hbWUsIHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzLCBwcmVwZW5kQXQsIHtcbiAgICAgICAgICAgIGFyZ0E6IGZpbGxFbXB0eUFycmF5KHZhbHVlKSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmUgPSAoaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgdXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMgPSByZW1vdmVBcnJheUF0KGNvbnRyb2wuX2dldEZpZWxkQXJyYXkobmFtZSksIGluZGV4KTtcbiAgICAgICAgaWRzLmN1cnJlbnQgPSByZW1vdmVBcnJheUF0KGlkcy5jdXJyZW50LCBpbmRleCk7XG4gICAgICAgIHVwZGF0ZVZhbHVlcyh1cGRhdGVkRmllbGRBcnJheVZhbHVlcyk7XG4gICAgICAgIHNldEZpZWxkcyh1cGRhdGVkRmllbGRBcnJheVZhbHVlcyk7XG4gICAgICAgIGNvbnRyb2wuX3VwZGF0ZUZpZWxkQXJyYXkobmFtZSwgdXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMsIHJlbW92ZUFycmF5QXQsIHtcbiAgICAgICAgICAgIGFyZ0E6IGluZGV4LFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGluc2VydCQxID0gKGluZGV4LCB2YWx1ZSwgb3B0aW9ucykgPT4ge1xuICAgICAgICBjb25zdCBpbnNlcnRWYWx1ZSA9IGNvbnZlcnRUb0FycmF5UGF5bG9hZChjbG9uZU9iamVjdCh2YWx1ZSkpO1xuICAgICAgICBjb25zdCB1cGRhdGVkRmllbGRBcnJheVZhbHVlcyA9IGluc2VydChjb250cm9sLl9nZXRGaWVsZEFycmF5KG5hbWUpLCBpbmRleCwgaW5zZXJ0VmFsdWUpO1xuICAgICAgICBjb250cm9sLl9uYW1lcy5mb2N1cyA9IGdldEZvY3VzRmllbGROYW1lKG5hbWUsIGluZGV4LCBvcHRpb25zKTtcbiAgICAgICAgaWRzLmN1cnJlbnQgPSBpbnNlcnQoaWRzLmN1cnJlbnQsIGluZGV4LCBpbnNlcnRWYWx1ZS5tYXAoZ2VuZXJhdGVJZCkpO1xuICAgICAgICB1cGRhdGVWYWx1ZXModXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMpO1xuICAgICAgICBzZXRGaWVsZHModXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMpO1xuICAgICAgICBjb250cm9sLl91cGRhdGVGaWVsZEFycmF5KG5hbWUsIHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzLCBpbnNlcnQsIHtcbiAgICAgICAgICAgIGFyZ0E6IGluZGV4LFxuICAgICAgICAgICAgYXJnQjogZmlsbEVtcHR5QXJyYXkodmFsdWUpLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHN3YXAgPSAoaW5kZXhBLCBpbmRleEIpID0+IHtcbiAgICAgICAgY29uc3QgdXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMgPSBjb250cm9sLl9nZXRGaWVsZEFycmF5KG5hbWUpO1xuICAgICAgICBzd2FwQXJyYXlBdCh1cGRhdGVkRmllbGRBcnJheVZhbHVlcywgaW5kZXhBLCBpbmRleEIpO1xuICAgICAgICBzd2FwQXJyYXlBdChpZHMuY3VycmVudCwgaW5kZXhBLCBpbmRleEIpO1xuICAgICAgICB1cGRhdGVWYWx1ZXModXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMpO1xuICAgICAgICBzZXRGaWVsZHModXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMpO1xuICAgICAgICBjb250cm9sLl91cGRhdGVGaWVsZEFycmF5KG5hbWUsIHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzLCBzd2FwQXJyYXlBdCwge1xuICAgICAgICAgICAgYXJnQTogaW5kZXhBLFxuICAgICAgICAgICAgYXJnQjogaW5kZXhCLFxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgfTtcbiAgICBjb25zdCBtb3ZlID0gKGZyb20sIHRvKSA9PiB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzID0gY29udHJvbC5fZ2V0RmllbGRBcnJheShuYW1lKTtcbiAgICAgICAgbW92ZUFycmF5QXQodXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMsIGZyb20sIHRvKTtcbiAgICAgICAgbW92ZUFycmF5QXQoaWRzLmN1cnJlbnQsIGZyb20sIHRvKTtcbiAgICAgICAgdXBkYXRlVmFsdWVzKHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzKTtcbiAgICAgICAgc2V0RmllbGRzKHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzKTtcbiAgICAgICAgY29udHJvbC5fdXBkYXRlRmllbGRBcnJheShuYW1lLCB1cGRhdGVkRmllbGRBcnJheVZhbHVlcywgbW92ZUFycmF5QXQsIHtcbiAgICAgICAgICAgIGFyZ0E6IGZyb20sXG4gICAgICAgICAgICBhcmdCOiB0byxcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgIH07XG4gICAgY29uc3QgdXBkYXRlID0gKGluZGV4LCB2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCB1cGRhdGVWYWx1ZSA9IGNsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgY29uc3QgdXBkYXRlZEZpZWxkQXJyYXlWYWx1ZXMgPSB1cGRhdGVBdChjb250cm9sLl9nZXRGaWVsZEFycmF5KG5hbWUpLCBpbmRleCwgdXBkYXRlVmFsdWUpO1xuICAgICAgICBpZHMuY3VycmVudCA9IFsuLi51cGRhdGVkRmllbGRBcnJheVZhbHVlc10ubWFwKChpdGVtLCBpKSA9PiAhaXRlbSB8fCBpID09PSBpbmRleCA/IGdlbmVyYXRlSWQoKSA6IGlkcy5jdXJyZW50W2ldKTtcbiAgICAgICAgdXBkYXRlVmFsdWVzKHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzKTtcbiAgICAgICAgc2V0RmllbGRzKFsuLi51cGRhdGVkRmllbGRBcnJheVZhbHVlc10pO1xuICAgICAgICBjb250cm9sLl91cGRhdGVGaWVsZEFycmF5KG5hbWUsIHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzLCB1cGRhdGVBdCwge1xuICAgICAgICAgICAgYXJnQTogaW5kZXgsXG4gICAgICAgICAgICBhcmdCOiB1cGRhdGVWYWx1ZSxcbiAgICAgICAgfSwgdHJ1ZSwgZmFsc2UpO1xuICAgIH07XG4gICAgY29uc3QgcmVwbGFjZSA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCB1cGRhdGVkRmllbGRBcnJheVZhbHVlcyA9IGNvbnZlcnRUb0FycmF5UGF5bG9hZChjbG9uZU9iamVjdCh2YWx1ZSkpO1xuICAgICAgICBpZHMuY3VycmVudCA9IHVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzLm1hcChnZW5lcmF0ZUlkKTtcbiAgICAgICAgdXBkYXRlVmFsdWVzKFsuLi51cGRhdGVkRmllbGRBcnJheVZhbHVlc10pO1xuICAgICAgICBzZXRGaWVsZHMoWy4uLnVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzXSk7XG4gICAgICAgIGNvbnRyb2wuX3VwZGF0ZUZpZWxkQXJyYXkobmFtZSwgWy4uLnVwZGF0ZWRGaWVsZEFycmF5VmFsdWVzXSwgKGRhdGEpID0+IGRhdGEsIHt9LCB0cnVlLCBmYWxzZSk7XG4gICAgfTtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb250cm9sLl9zdGF0ZS5hY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgaXNXYXRjaGVkKG5hbWUsIGNvbnRyb2wuX25hbWVzKSAmJlxuICAgICAgICAgICAgY29udHJvbC5fc3ViamVjdHMuc3RhdGUubmV4dCh7XG4gICAgICAgICAgICAgICAgLi4uY29udHJvbC5fZm9ybVN0YXRlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIGlmIChfYWN0aW9uZWQuY3VycmVudCAmJlxuICAgICAgICAgICAgKCFnZXRWYWxpZGF0aW9uTW9kZXMoY29udHJvbC5fb3B0aW9ucy5tb2RlKS5pc09uU3VibWl0IHx8XG4gICAgICAgICAgICAgICAgY29udHJvbC5fZm9ybVN0YXRlLmlzU3VibWl0dGVkKSkge1xuICAgICAgICAgICAgaWYgKGNvbnRyb2wuX29wdGlvbnMucmVzb2x2ZXIpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sLl9leGVjdXRlU2NoZW1hKFtuYW1lXSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gZ2V0KHJlc3VsdC5lcnJvcnMsIG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZ0Vycm9yID0gZ2V0KGNvbnRyb2wuX2Zvcm1TdGF0ZS5lcnJvcnMsIG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdFcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgPyAoIWVycm9yICYmIGV4aXN0aW5nRXJyb3IudHlwZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZXJyb3IgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGV4aXN0aW5nRXJyb3IudHlwZSAhPT0gZXJyb3IudHlwZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdFcnJvci5tZXNzYWdlICE9PSBlcnJvci5tZXNzYWdlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZXJyb3IgJiYgZXJyb3IudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHNldChjb250cm9sLl9mb3JtU3RhdGUuZXJyb3JzLCBuYW1lLCBlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHVuc2V0KGNvbnRyb2wuX2Zvcm1TdGF0ZS5lcnJvcnMsIG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbC5fc3ViamVjdHMuc3RhdGUubmV4dCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzOiBjb250cm9sLl9mb3JtU3RhdGUuZXJyb3JzLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkID0gZ2V0KGNvbnRyb2wuX2ZpZWxkcywgbmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkICYmXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkLl9mICYmXG4gICAgICAgICAgICAgICAgICAgICEoZ2V0VmFsaWRhdGlvbk1vZGVzKGNvbnRyb2wuX29wdGlvbnMucmVWYWxpZGF0ZU1vZGUpLmlzT25TdWJtaXQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFZhbGlkYXRpb25Nb2Rlcyhjb250cm9sLl9vcHRpb25zLm1vZGUpLmlzT25TdWJtaXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlRmllbGQoZmllbGQsIGNvbnRyb2wuX2Zvcm1WYWx1ZXMsIGNvbnRyb2wuX29wdGlvbnMuY3JpdGVyaWFNb2RlID09PSBWQUxJREFUSU9OX01PREUuYWxsLCBjb250cm9sLl9vcHRpb25zLnNob3VsZFVzZU5hdGl2ZVZhbGlkYXRpb24sIHRydWUpLnRoZW4oKGVycm9yKSA9PiAhaXNFbXB0eU9iamVjdChlcnJvcikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2wuX3N1YmplY3RzLnN0YXRlLm5leHQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yczogdXBkYXRlRmllbGRBcnJheVJvb3RFcnJvcihjb250cm9sLl9mb3JtU3RhdGUuZXJyb3JzLCBlcnJvciwgbmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnRyb2wuX3N1YmplY3RzLnZhbHVlcy5uZXh0KHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICB2YWx1ZXM6IHsgLi4uY29udHJvbC5fZm9ybVZhbHVlcyB9LFxuICAgICAgICB9KTtcbiAgICAgICAgY29udHJvbC5fbmFtZXMuZm9jdXMgJiZcbiAgICAgICAgICAgIGl0ZXJhdGVGaWVsZHNCeUFjdGlvbihjb250cm9sLl9maWVsZHMsIChyZWYsIGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjb250cm9sLl9uYW1lcy5mb2N1cyAmJlxuICAgICAgICAgICAgICAgICAgICBrZXkuc3RhcnRzV2l0aChjb250cm9sLl9uYW1lcy5mb2N1cykgJiZcbiAgICAgICAgICAgICAgICAgICAgcmVmLmZvY3VzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZi5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIGNvbnRyb2wuX25hbWVzLmZvY3VzID0gJyc7XG4gICAgICAgIGNvbnRyb2wuX3VwZGF0ZVZhbGlkKCk7XG4gICAgICAgIF9hY3Rpb25lZC5jdXJyZW50ID0gZmFsc2U7XG4gICAgfSwgW2ZpZWxkcywgbmFtZSwgY29udHJvbF0pO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICFnZXQoY29udHJvbC5fZm9ybVZhbHVlcywgbmFtZSkgJiYgY29udHJvbC5fdXBkYXRlRmllbGRBcnJheShuYW1lKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIChjb250cm9sLl9vcHRpb25zLnNob3VsZFVucmVnaXN0ZXIgfHwgc2hvdWxkVW5yZWdpc3RlcikgJiZcbiAgICAgICAgICAgICAgICBjb250cm9sLnVucmVnaXN0ZXIobmFtZSk7XG4gICAgICAgIH07XG4gICAgfSwgW25hbWUsIGNvbnRyb2wsIGtleU5hbWUsIHNob3VsZFVucmVnaXN0ZXJdKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzd2FwOiBSZWFjdC51c2VDYWxsYmFjayhzd2FwLCBbdXBkYXRlVmFsdWVzLCBuYW1lLCBjb250cm9sXSksXG4gICAgICAgIG1vdmU6IFJlYWN0LnVzZUNhbGxiYWNrKG1vdmUsIFt1cGRhdGVWYWx1ZXMsIG5hbWUsIGNvbnRyb2xdKSxcbiAgICAgICAgcHJlcGVuZDogUmVhY3QudXNlQ2FsbGJhY2socHJlcGVuZCwgW3VwZGF0ZVZhbHVlcywgbmFtZSwgY29udHJvbF0pLFxuICAgICAgICBhcHBlbmQ6IFJlYWN0LnVzZUNhbGxiYWNrKGFwcGVuZCwgW3VwZGF0ZVZhbHVlcywgbmFtZSwgY29udHJvbF0pLFxuICAgICAgICByZW1vdmU6IFJlYWN0LnVzZUNhbGxiYWNrKHJlbW92ZSwgW3VwZGF0ZVZhbHVlcywgbmFtZSwgY29udHJvbF0pLFxuICAgICAgICBpbnNlcnQ6IFJlYWN0LnVzZUNhbGxiYWNrKGluc2VydCQxLCBbdXBkYXRlVmFsdWVzLCBuYW1lLCBjb250cm9sXSksXG4gICAgICAgIHVwZGF0ZTogUmVhY3QudXNlQ2FsbGJhY2sodXBkYXRlLCBbdXBkYXRlVmFsdWVzLCBuYW1lLCBjb250cm9sXSksXG4gICAgICAgIHJlcGxhY2U6IFJlYWN0LnVzZUNhbGxiYWNrKHJlcGxhY2UsIFt1cGRhdGVWYWx1ZXMsIG5hbWUsIGNvbnRyb2xdKSxcbiAgICAgICAgZmllbGRzOiBSZWFjdC51c2VNZW1vKCgpID0+IGZpZWxkcy5tYXAoKGZpZWxkLCBpbmRleCkgPT4gKHtcbiAgICAgICAgICAgIC4uLmZpZWxkLFxuICAgICAgICAgICAgW2tleU5hbWVdOiBpZHMuY3VycmVudFtpbmRleF0gfHwgZ2VuZXJhdGVJZCgpLFxuICAgICAgICB9KSksIFtmaWVsZHMsIGtleU5hbWVdKSxcbiAgICB9O1xufVxuXG52YXIgY3JlYXRlU3ViamVjdCA9ICgpID0+IHtcbiAgICBsZXQgX29ic2VydmVycyA9IFtdO1xuICAgIGNvbnN0IG5leHQgPSAodmFsdWUpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBvYnNlcnZlciBvZiBfb2JzZXJ2ZXJzKSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0ICYmIG9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzdWJzY3JpYmUgPSAob2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgX29ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgX29ic2VydmVycyA9IF9vYnNlcnZlcnMuZmlsdGVyKChvKSA9PiBvICE9PSBvYnNlcnZlcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgdW5zdWJzY3JpYmUgPSAoKSA9PiB7XG4gICAgICAgIF9vYnNlcnZlcnMgPSBbXTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIGdldCBvYnNlcnZlcnMoKSB7XG4gICAgICAgICAgICByZXR1cm4gX29ic2VydmVycztcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dCxcbiAgICAgICAgc3Vic2NyaWJlLFxuICAgICAgICB1bnN1YnNjcmliZSxcbiAgICB9O1xufTtcblxudmFyIGlzUHJpbWl0aXZlID0gKHZhbHVlKSA9PiBpc051bGxPclVuZGVmaW5lZCh2YWx1ZSkgfHwgIWlzT2JqZWN0VHlwZSh2YWx1ZSk7XG5cbmZ1bmN0aW9uIGRlZXBFcXVhbChvYmplY3QxLCBvYmplY3QyKSB7XG4gICAgaWYgKGlzUHJpbWl0aXZlKG9iamVjdDEpIHx8IGlzUHJpbWl0aXZlKG9iamVjdDIpKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QxID09PSBvYmplY3QyO1xuICAgIH1cbiAgICBpZiAoaXNEYXRlT2JqZWN0KG9iamVjdDEpICYmIGlzRGF0ZU9iamVjdChvYmplY3QyKSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0MS5nZXRUaW1lKCkgPT09IG9iamVjdDIuZ2V0VGltZSgpO1xuICAgIH1cbiAgICBjb25zdCBrZXlzMSA9IE9iamVjdC5rZXlzKG9iamVjdDEpO1xuICAgIGNvbnN0IGtleXMyID0gT2JqZWN0LmtleXMob2JqZWN0Mik7XG4gICAgaWYgKGtleXMxLmxlbmd0aCAhPT0ga2V5czIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5czEpIHtcbiAgICAgICAgY29uc3QgdmFsMSA9IG9iamVjdDFba2V5XTtcbiAgICAgICAgaWYgKCFrZXlzMi5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtleSAhPT0gJ3JlZicpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbDIgPSBvYmplY3QyW2tleV07XG4gICAgICAgICAgICBpZiAoKGlzRGF0ZU9iamVjdCh2YWwxKSAmJiBpc0RhdGVPYmplY3QodmFsMikpIHx8XG4gICAgICAgICAgICAgICAgKGlzT2JqZWN0KHZhbDEpICYmIGlzT2JqZWN0KHZhbDIpKSB8fFxuICAgICAgICAgICAgICAgIChBcnJheS5pc0FycmF5KHZhbDEpICYmIEFycmF5LmlzQXJyYXkodmFsMikpXG4gICAgICAgICAgICAgICAgPyAhZGVlcEVxdWFsKHZhbDEsIHZhbDIpXG4gICAgICAgICAgICAgICAgOiB2YWwxICE9PSB2YWwyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG52YXIgaXNNdWx0aXBsZVNlbGVjdCA9IChlbGVtZW50KSA9PiBlbGVtZW50LnR5cGUgPT09IGBzZWxlY3QtbXVsdGlwbGVgO1xuXG52YXIgaXNSYWRpb09yQ2hlY2tib3ggPSAocmVmKSA9PiBpc1JhZGlvSW5wdXQocmVmKSB8fCBpc0NoZWNrQm94SW5wdXQocmVmKTtcblxudmFyIGxpdmUgPSAocmVmKSA9PiBpc0hUTUxFbGVtZW50KHJlZikgJiYgcmVmLmlzQ29ubmVjdGVkO1xuXG52YXIgb2JqZWN0SGFzRnVuY3Rpb24gPSAoZGF0YSkgPT4ge1xuICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEpIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oZGF0YVtrZXldKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuZnVuY3Rpb24gbWFya0ZpZWxkc0RpcnR5KGRhdGEsIGZpZWxkcyA9IHt9KSB7XG4gICAgY29uc3QgaXNQYXJlbnROb2RlQXJyYXkgPSBBcnJheS5pc0FycmF5KGRhdGEpO1xuICAgIGlmIChpc09iamVjdChkYXRhKSB8fCBpc1BhcmVudE5vZGVBcnJheSkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhW2tleV0pIHx8XG4gICAgICAgICAgICAgICAgKGlzT2JqZWN0KGRhdGFba2V5XSkgJiYgIW9iamVjdEhhc0Z1bmN0aW9uKGRhdGFba2V5XSkpKSB7XG4gICAgICAgICAgICAgICAgZmllbGRzW2tleV0gPSBBcnJheS5pc0FycmF5KGRhdGFba2V5XSkgPyBbXSA6IHt9O1xuICAgICAgICAgICAgICAgIG1hcmtGaWVsZHNEaXJ0eShkYXRhW2tleV0sIGZpZWxkc1trZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFpc051bGxPclVuZGVmaW5lZChkYXRhW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgZmllbGRzW2tleV0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmaWVsZHM7XG59XG5mdW5jdGlvbiBnZXREaXJ0eUZpZWxkc0Zyb21EZWZhdWx0VmFsdWVzKGRhdGEsIGZvcm1WYWx1ZXMsIGRpcnR5RmllbGRzRnJvbVZhbHVlcykge1xuICAgIGNvbnN0IGlzUGFyZW50Tm9kZUFycmF5ID0gQXJyYXkuaXNBcnJheShkYXRhKTtcbiAgICBpZiAoaXNPYmplY3QoZGF0YSkgfHwgaXNQYXJlbnROb2RlQXJyYXkpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YVtrZXldKSB8fFxuICAgICAgICAgICAgICAgIChpc09iamVjdChkYXRhW2tleV0pICYmICFvYmplY3RIYXNGdW5jdGlvbihkYXRhW2tleV0pKSkge1xuICAgICAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZChmb3JtVmFsdWVzKSB8fFxuICAgICAgICAgICAgICAgICAgICBpc1ByaW1pdGl2ZShkaXJ0eUZpZWxkc0Zyb21WYWx1ZXNba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlydHlGaWVsZHNGcm9tVmFsdWVzW2tleV0gPSBBcnJheS5pc0FycmF5KGRhdGFba2V5XSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbWFya0ZpZWxkc0RpcnR5KGRhdGFba2V5XSwgW10pXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHsgLi4ubWFya0ZpZWxkc0RpcnR5KGRhdGFba2V5XSkgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdldERpcnR5RmllbGRzRnJvbURlZmF1bHRWYWx1ZXMoZGF0YVtrZXldLCBpc051bGxPclVuZGVmaW5lZChmb3JtVmFsdWVzKSA/IHt9IDogZm9ybVZhbHVlc1trZXldLCBkaXJ0eUZpZWxkc0Zyb21WYWx1ZXNba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGlydHlGaWVsZHNGcm9tVmFsdWVzW2tleV0gPSAhZGVlcEVxdWFsKGRhdGFba2V5XSwgZm9ybVZhbHVlc1trZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGlydHlGaWVsZHNGcm9tVmFsdWVzO1xufVxudmFyIGdldERpcnR5RmllbGRzID0gKGRlZmF1bHRWYWx1ZXMsIGZvcm1WYWx1ZXMpID0+IGdldERpcnR5RmllbGRzRnJvbURlZmF1bHRWYWx1ZXMoZGVmYXVsdFZhbHVlcywgZm9ybVZhbHVlcywgbWFya0ZpZWxkc0RpcnR5KGZvcm1WYWx1ZXMpKTtcblxudmFyIGdldEZpZWxkVmFsdWVBcyA9ICh2YWx1ZSwgeyB2YWx1ZUFzTnVtYmVyLCB2YWx1ZUFzRGF0ZSwgc2V0VmFsdWVBcyB9KSA9PiBpc1VuZGVmaW5lZCh2YWx1ZSlcbiAgICA/IHZhbHVlXG4gICAgOiB2YWx1ZUFzTnVtYmVyXG4gICAgICAgID8gdmFsdWUgPT09ICcnXG4gICAgICAgICAgICA/IE5hTlxuICAgICAgICAgICAgOiB2YWx1ZVxuICAgICAgICAgICAgICAgID8gK3ZhbHVlXG4gICAgICAgICAgICAgICAgOiB2YWx1ZVxuICAgICAgICA6IHZhbHVlQXNEYXRlICYmIGlzU3RyaW5nKHZhbHVlKVxuICAgICAgICAgICAgPyBuZXcgRGF0ZSh2YWx1ZSlcbiAgICAgICAgICAgIDogc2V0VmFsdWVBc1xuICAgICAgICAgICAgICAgID8gc2V0VmFsdWVBcyh2YWx1ZSlcbiAgICAgICAgICAgICAgICA6IHZhbHVlO1xuXG5mdW5jdGlvbiBnZXRGaWVsZFZhbHVlKF9mKSB7XG4gICAgY29uc3QgcmVmID0gX2YucmVmO1xuICAgIGlmIChfZi5yZWZzID8gX2YucmVmcy5ldmVyeSgocmVmKSA9PiByZWYuZGlzYWJsZWQpIDogcmVmLmRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzRmlsZUlucHV0KHJlZikpIHtcbiAgICAgICAgcmV0dXJuIHJlZi5maWxlcztcbiAgICB9XG4gICAgaWYgKGlzUmFkaW9JbnB1dChyZWYpKSB7XG4gICAgICAgIHJldHVybiBnZXRSYWRpb1ZhbHVlKF9mLnJlZnMpLnZhbHVlO1xuICAgIH1cbiAgICBpZiAoaXNNdWx0aXBsZVNlbGVjdChyZWYpKSB7XG4gICAgICAgIHJldHVybiBbLi4ucmVmLnNlbGVjdGVkT3B0aW9uc10ubWFwKCh7IHZhbHVlIH0pID0+IHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKGlzQ2hlY2tCb3hJbnB1dChyZWYpKSB7XG4gICAgICAgIHJldHVybiBnZXRDaGVja2JveFZhbHVlKF9mLnJlZnMpLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0RmllbGRWYWx1ZUFzKGlzVW5kZWZpbmVkKHJlZi52YWx1ZSkgPyBfZi5yZWYudmFsdWUgOiByZWYudmFsdWUsIF9mKTtcbn1cblxudmFyIGdldFJlc29sdmVyT3B0aW9ucyA9IChmaWVsZHNOYW1lcywgX2ZpZWxkcywgY3JpdGVyaWFNb2RlLCBzaG91bGRVc2VOYXRpdmVWYWxpZGF0aW9uKSA9PiB7XG4gICAgY29uc3QgZmllbGRzID0ge307XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIGZpZWxkc05hbWVzKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gZ2V0KF9maWVsZHMsIG5hbWUpO1xuICAgICAgICBmaWVsZCAmJiBzZXQoZmllbGRzLCBuYW1lLCBmaWVsZC5fZik7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGNyaXRlcmlhTW9kZSxcbiAgICAgICAgbmFtZXM6IFsuLi5maWVsZHNOYW1lc10sXG4gICAgICAgIGZpZWxkcyxcbiAgICAgICAgc2hvdWxkVXNlTmF0aXZlVmFsaWRhdGlvbixcbiAgICB9O1xufTtcblxudmFyIGdldFJ1bGVWYWx1ZSA9IChydWxlKSA9PiBpc1VuZGVmaW5lZChydWxlKVxuICAgID8gcnVsZVxuICAgIDogaXNSZWdleChydWxlKVxuICAgICAgICA/IHJ1bGUuc291cmNlXG4gICAgICAgIDogaXNPYmplY3QocnVsZSlcbiAgICAgICAgICAgID8gaXNSZWdleChydWxlLnZhbHVlKVxuICAgICAgICAgICAgICAgID8gcnVsZS52YWx1ZS5zb3VyY2VcbiAgICAgICAgICAgICAgICA6IHJ1bGUudmFsdWVcbiAgICAgICAgICAgIDogcnVsZTtcblxudmFyIGhhc1ZhbGlkYXRpb24gPSAob3B0aW9ucykgPT4gb3B0aW9ucy5tb3VudCAmJlxuICAgIChvcHRpb25zLnJlcXVpcmVkIHx8XG4gICAgICAgIG9wdGlvbnMubWluIHx8XG4gICAgICAgIG9wdGlvbnMubWF4IHx8XG4gICAgICAgIG9wdGlvbnMubWF4TGVuZ3RoIHx8XG4gICAgICAgIG9wdGlvbnMubWluTGVuZ3RoIHx8XG4gICAgICAgIG9wdGlvbnMucGF0dGVybiB8fFxuICAgICAgICBvcHRpb25zLnZhbGlkYXRlKTtcblxuZnVuY3Rpb24gc2NoZW1hRXJyb3JMb29rdXAoZXJyb3JzLCBfZmllbGRzLCBuYW1lKSB7XG4gICAgY29uc3QgZXJyb3IgPSBnZXQoZXJyb3JzLCBuYW1lKTtcbiAgICBpZiAoZXJyb3IgfHwgaXNLZXkobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgbmFtZXMgPSBuYW1lLnNwbGl0KCcuJyk7XG4gICAgd2hpbGUgKG5hbWVzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBuYW1lcy5qb2luKCcuJyk7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gZ2V0KF9maWVsZHMsIGZpZWxkTmFtZSk7XG4gICAgICAgIGNvbnN0IGZvdW5kRXJyb3IgPSBnZXQoZXJyb3JzLCBmaWVsZE5hbWUpO1xuICAgICAgICBpZiAoZmllbGQgJiYgIUFycmF5LmlzQXJyYXkoZmllbGQpICYmIG5hbWUgIT09IGZpZWxkTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgbmFtZSB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3VuZEVycm9yICYmIGZvdW5kRXJyb3IudHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBmaWVsZE5hbWUsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZvdW5kRXJyb3IsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIG5hbWVzLnBvcCgpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lLFxuICAgIH07XG59XG5cbnZhciBza2lwVmFsaWRhdGlvbiA9IChpc0JsdXJFdmVudCwgaXNUb3VjaGVkLCBpc1N1Ym1pdHRlZCwgcmVWYWxpZGF0ZU1vZGUsIG1vZGUpID0+IHtcbiAgICBpZiAobW9kZS5pc09uQWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIWlzU3VibWl0dGVkICYmIG1vZGUuaXNPblRvdWNoKSB7XG4gICAgICAgIHJldHVybiAhKGlzVG91Y2hlZCB8fCBpc0JsdXJFdmVudCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzU3VibWl0dGVkID8gcmVWYWxpZGF0ZU1vZGUuaXNPbkJsdXIgOiBtb2RlLmlzT25CbHVyKSB7XG4gICAgICAgIHJldHVybiAhaXNCbHVyRXZlbnQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzU3VibWl0dGVkID8gcmVWYWxpZGF0ZU1vZGUuaXNPbkNoYW5nZSA6IG1vZGUuaXNPbkNoYW5nZSkge1xuICAgICAgICByZXR1cm4gaXNCbHVyRXZlbnQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcblxudmFyIHVuc2V0RW1wdHlBcnJheSA9IChyZWYsIG5hbWUpID0+ICFjb21wYWN0KGdldChyZWYsIG5hbWUpKS5sZW5ndGggJiYgdW5zZXQocmVmLCBuYW1lKTtcblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgbW9kZTogVkFMSURBVElPTl9NT0RFLm9uU3VibWl0LFxuICAgIHJlVmFsaWRhdGVNb2RlOiBWQUxJREFUSU9OX01PREUub25DaGFuZ2UsXG4gICAgc2hvdWxkRm9jdXNFcnJvcjogdHJ1ZSxcbn07XG5mdW5jdGlvbiBjcmVhdGVGb3JtQ29udHJvbChwcm9wcyA9IHt9LCBmbHVzaFJvb3RSZW5kZXIpIHtcbiAgICBsZXQgX29wdGlvbnMgPSB7XG4gICAgICAgIC4uLmRlZmF1bHRPcHRpb25zLFxuICAgICAgICAuLi5wcm9wcyxcbiAgICB9O1xuICAgIGxldCBfZm9ybVN0YXRlID0ge1xuICAgICAgICBzdWJtaXRDb3VudDogMCxcbiAgICAgICAgaXNEaXJ0eTogZmFsc2UsXG4gICAgICAgIGlzTG9hZGluZzogaXNGdW5jdGlvbihfb3B0aW9ucy5kZWZhdWx0VmFsdWVzKSxcbiAgICAgICAgaXNWYWxpZGF0aW5nOiBmYWxzZSxcbiAgICAgICAgaXNTdWJtaXR0ZWQ6IGZhbHNlLFxuICAgICAgICBpc1N1Ym1pdHRpbmc6IGZhbHNlLFxuICAgICAgICBpc1N1Ym1pdFN1Y2Nlc3NmdWw6IGZhbHNlLFxuICAgICAgICBpc1ZhbGlkOiBmYWxzZSxcbiAgICAgICAgdG91Y2hlZEZpZWxkczoge30sXG4gICAgICAgIGRpcnR5RmllbGRzOiB7fSxcbiAgICAgICAgZXJyb3JzOiBfb3B0aW9ucy5lcnJvcnMgfHwge30sXG4gICAgICAgIGRpc2FibGVkOiBfb3B0aW9ucy5kaXNhYmxlZCB8fCBmYWxzZSxcbiAgICB9O1xuICAgIGxldCBfZmllbGRzID0ge307XG4gICAgbGV0IF9kZWZhdWx0VmFsdWVzID0gaXNPYmplY3QoX29wdGlvbnMudmFsdWVzKSB8fCBpc09iamVjdChfb3B0aW9ucy5kZWZhdWx0VmFsdWVzKVxuICAgICAgICA/IGNsb25lT2JqZWN0KF9vcHRpb25zLnZhbHVlcyB8fCBfb3B0aW9ucy5kZWZhdWx0VmFsdWVzKSB8fCB7fVxuICAgICAgICA6IHt9O1xuICAgIGxldCBfZm9ybVZhbHVlcyA9IF9vcHRpb25zLnNob3VsZFVucmVnaXN0ZXJcbiAgICAgICAgPyB7fVxuICAgICAgICA6IGNsb25lT2JqZWN0KF9kZWZhdWx0VmFsdWVzKTtcbiAgICBsZXQgX3N0YXRlID0ge1xuICAgICAgICBhY3Rpb246IGZhbHNlLFxuICAgICAgICBtb3VudDogZmFsc2UsXG4gICAgICAgIHdhdGNoOiBmYWxzZSxcbiAgICB9O1xuICAgIGxldCBfbmFtZXMgPSB7XG4gICAgICAgIG1vdW50OiBuZXcgU2V0KCksXG4gICAgICAgIHVuTW91bnQ6IG5ldyBTZXQoKSxcbiAgICAgICAgYXJyYXk6IG5ldyBTZXQoKSxcbiAgICAgICAgd2F0Y2g6IG5ldyBTZXQoKSxcbiAgICB9O1xuICAgIGxldCBkZWxheUVycm9yQ2FsbGJhY2s7XG4gICAgbGV0IHRpbWVyID0gMDtcbiAgICBjb25zdCBfcHJveHlGb3JtU3RhdGUgPSB7XG4gICAgICAgIGlzRGlydHk6IGZhbHNlLFxuICAgICAgICBkaXJ0eUZpZWxkczogZmFsc2UsXG4gICAgICAgIHRvdWNoZWRGaWVsZHM6IGZhbHNlLFxuICAgICAgICBpc1ZhbGlkYXRpbmc6IGZhbHNlLFxuICAgICAgICBpc1ZhbGlkOiBmYWxzZSxcbiAgICAgICAgZXJyb3JzOiBmYWxzZSxcbiAgICB9O1xuICAgIGNvbnN0IF9zdWJqZWN0cyA9IHtcbiAgICAgICAgdmFsdWVzOiBjcmVhdGVTdWJqZWN0KCksXG4gICAgICAgIGFycmF5OiBjcmVhdGVTdWJqZWN0KCksXG4gICAgICAgIHN0YXRlOiBjcmVhdGVTdWJqZWN0KCksXG4gICAgfTtcbiAgICBjb25zdCB2YWxpZGF0aW9uTW9kZUJlZm9yZVN1Ym1pdCA9IGdldFZhbGlkYXRpb25Nb2Rlcyhfb3B0aW9ucy5tb2RlKTtcbiAgICBjb25zdCB2YWxpZGF0aW9uTW9kZUFmdGVyU3VibWl0ID0gZ2V0VmFsaWRhdGlvbk1vZGVzKF9vcHRpb25zLnJlVmFsaWRhdGVNb2RlKTtcbiAgICBjb25zdCBzaG91bGREaXNwbGF5QWxsQXNzb2NpYXRlZEVycm9ycyA9IF9vcHRpb25zLmNyaXRlcmlhTW9kZSA9PT0gVkFMSURBVElPTl9NT0RFLmFsbDtcbiAgICBjb25zdCBkZWJvdW5jZSA9IChjYWxsYmFjaykgPT4gKHdhaXQpID0+IHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGNhbGxiYWNrLCB3YWl0KTtcbiAgICB9O1xuICAgIGNvbnN0IF91cGRhdGVWYWxpZCA9IGFzeW5jIChzaG91bGRVcGRhdGVWYWxpZCkgPT4ge1xuICAgICAgICBpZiAoX3Byb3h5Rm9ybVN0YXRlLmlzVmFsaWQgfHwgc2hvdWxkVXBkYXRlVmFsaWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSBfb3B0aW9ucy5yZXNvbHZlclxuICAgICAgICAgICAgICAgID8gaXNFbXB0eU9iamVjdCgoYXdhaXQgX2V4ZWN1dGVTY2hlbWEoKSkuZXJyb3JzKVxuICAgICAgICAgICAgICAgIDogYXdhaXQgZXhlY3V0ZUJ1aWx0SW5WYWxpZGF0aW9uKF9maWVsZHMsIHRydWUpO1xuICAgICAgICAgICAgaWYgKGlzVmFsaWQgIT09IF9mb3JtU3RhdGUuaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgIF9zdWJqZWN0cy5zdGF0ZS5uZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgX3VwZGF0ZUlzVmFsaWRhdGluZyA9ICh2YWx1ZSkgPT4gX3Byb3h5Rm9ybVN0YXRlLmlzVmFsaWRhdGluZyAmJlxuICAgICAgICBfc3ViamVjdHMuc3RhdGUubmV4dCh7XG4gICAgICAgICAgICBpc1ZhbGlkYXRpbmc6IHZhbHVlLFxuICAgICAgICB9KTtcbiAgICBjb25zdCBfdXBkYXRlRmllbGRBcnJheSA9IChuYW1lLCB2YWx1ZXMgPSBbXSwgbWV0aG9kLCBhcmdzLCBzaG91bGRTZXRWYWx1ZXMgPSB0cnVlLCBzaG91bGRVcGRhdGVGaWVsZHNBbmRTdGF0ZSA9IHRydWUpID0+IHtcbiAgICAgICAgaWYgKGFyZ3MgJiYgbWV0aG9kKSB7XG4gICAgICAgICAgICBfc3RhdGUuYWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChzaG91bGRVcGRhdGVGaWVsZHNBbmRTdGF0ZSAmJiBBcnJheS5pc0FycmF5KGdldChfZmllbGRzLCBuYW1lKSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZFZhbHVlcyA9IG1ldGhvZChnZXQoX2ZpZWxkcywgbmFtZSksIGFyZ3MuYXJnQSwgYXJncy5hcmdCKTtcbiAgICAgICAgICAgICAgICBzaG91bGRTZXRWYWx1ZXMgJiYgc2V0KF9maWVsZHMsIG5hbWUsIGZpZWxkVmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzaG91bGRVcGRhdGVGaWVsZHNBbmRTdGF0ZSAmJlxuICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoZ2V0KF9mb3JtU3RhdGUuZXJyb3JzLCBuYW1lKSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvcnMgPSBtZXRob2QoZ2V0KF9mb3JtU3RhdGUuZXJyb3JzLCBuYW1lKSwgYXJncy5hcmdBLCBhcmdzLmFyZ0IpO1xuICAgICAgICAgICAgICAgIHNob3VsZFNldFZhbHVlcyAmJiBzZXQoX2Zvcm1TdGF0ZS5lcnJvcnMsIG5hbWUsIGVycm9ycyk7XG4gICAgICAgICAgICAgICAgdW5zZXRFbXB0eUFycmF5KF9mb3JtU3RhdGUuZXJyb3JzLCBuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfcHJveHlGb3JtU3RhdGUudG91Y2hlZEZpZWxkcyAmJlxuICAgICAgICAgICAgICAgIHNob3VsZFVwZGF0ZUZpZWxkc0FuZFN0YXRlICYmXG4gICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheShnZXQoX2Zvcm1TdGF0ZS50b3VjaGVkRmllbGRzLCBuYW1lKSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b3VjaGVkRmllbGRzID0gbWV0aG9kKGdldChfZm9ybVN0YXRlLnRvdWNoZWRGaWVsZHMsIG5hbWUpLCBhcmdzLmFyZ0EsIGFyZ3MuYXJnQik7XG4gICAgICAgICAgICAgICAgc2hvdWxkU2V0VmFsdWVzICYmIHNldChfZm9ybVN0YXRlLnRvdWNoZWRGaWVsZHMsIG5hbWUsIHRvdWNoZWRGaWVsZHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF9wcm94eUZvcm1TdGF0ZS5kaXJ0eUZpZWxkcykge1xuICAgICAgICAgICAgICAgIF9mb3JtU3RhdGUuZGlydHlGaWVsZHMgPSBnZXREaXJ0eUZpZWxkcyhfZGVmYXVsdFZhbHVlcywgX2Zvcm1WYWx1ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3N1YmplY3RzLnN0YXRlLm5leHQoe1xuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgaXNEaXJ0eTogX2dldERpcnR5KG5hbWUsIHZhbHVlcyksXG4gICAgICAgICAgICAgICAgZGlydHlGaWVsZHM6IF9mb3JtU3RhdGUuZGlydHlGaWVsZHMsXG4gICAgICAgICAgICAgICAgZXJyb3JzOiBfZm9ybVN0YXRlLmVycm9ycyxcbiAgICAgICAgICAgICAgICBpc1ZhbGlkOiBfZm9ybVN0YXRlLmlzVmFsaWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNldChfZm9ybVZhbHVlcywgbmFtZSwgdmFsdWVzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgdXBkYXRlRXJyb3JzID0gKG5hbWUsIGVycm9yKSA9PiB7XG4gICAgICAgIHNldChfZm9ybVN0YXRlLmVycm9ycywgbmFtZSwgZXJyb3IpO1xuICAgICAgICBfc3ViamVjdHMuc3RhdGUubmV4dCh7XG4gICAgICAgICAgICBlcnJvcnM6IF9mb3JtU3RhdGUuZXJyb3JzLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IF9zZXRFcnJvcnMgPSAoZXJyb3JzKSA9PiB7XG4gICAgICAgIF9mb3JtU3RhdGUuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgICBfc3ViamVjdHMuc3RhdGUubmV4dCh7XG4gICAgICAgICAgICBlcnJvcnM6IF9mb3JtU3RhdGUuZXJyb3JzLFxuICAgICAgICAgICAgaXNWYWxpZDogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgdXBkYXRlVmFsaWRBbmRWYWx1ZSA9IChuYW1lLCBzaG91bGRTa2lwU2V0VmFsdWVBcywgdmFsdWUsIHJlZikgPT4ge1xuICAgICAgICBjb25zdCBmaWVsZCA9IGdldChfZmllbGRzLCBuYW1lKTtcbiAgICAgICAgaWYgKGZpZWxkKSB7XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSBnZXQoX2Zvcm1WYWx1ZXMsIG5hbWUsIGlzVW5kZWZpbmVkKHZhbHVlKSA/IGdldChfZGVmYXVsdFZhbHVlcywgbmFtZSkgOiB2YWx1ZSk7XG4gICAgICAgICAgICBpc1VuZGVmaW5lZChkZWZhdWx0VmFsdWUpIHx8XG4gICAgICAgICAgICAgICAgKHJlZiAmJiByZWYuZGVmYXVsdENoZWNrZWQpIHx8XG4gICAgICAgICAgICAgICAgc2hvdWxkU2tpcFNldFZhbHVlQXNcbiAgICAgICAgICAgICAgICA/IHNldChfZm9ybVZhbHVlcywgbmFtZSwgc2hvdWxkU2tpcFNldFZhbHVlQXMgPyBkZWZhdWx0VmFsdWUgOiBnZXRGaWVsZFZhbHVlKGZpZWxkLl9mKSlcbiAgICAgICAgICAgICAgICA6IHNldEZpZWxkVmFsdWUobmFtZSwgZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgIF9zdGF0ZS5tb3VudCAmJiBfdXBkYXRlVmFsaWQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgdXBkYXRlVG91Y2hBbmREaXJ0eSA9IChuYW1lLCBmaWVsZFZhbHVlLCBpc0JsdXJFdmVudCwgc2hvdWxkRGlydHksIHNob3VsZFJlbmRlcikgPT4ge1xuICAgICAgICBsZXQgc2hvdWxkVXBkYXRlRmllbGQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGlzUHJldmlvdXNEaXJ0eSA9IGZhbHNlO1xuICAgICAgICBjb25zdCBvdXRwdXQgPSB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBkaXNhYmxlZEZpZWxkID0gISEoZ2V0KF9maWVsZHMsIG5hbWUpICYmIGdldChfZmllbGRzLCBuYW1lKS5fZi5kaXNhYmxlZCk7XG4gICAgICAgIGlmICghaXNCbHVyRXZlbnQgfHwgc2hvdWxkRGlydHkpIHtcbiAgICAgICAgICAgIGlmIChfcHJveHlGb3JtU3RhdGUuaXNEaXJ0eSkge1xuICAgICAgICAgICAgICAgIGlzUHJldmlvdXNEaXJ0eSA9IF9mb3JtU3RhdGUuaXNEaXJ0eTtcbiAgICAgICAgICAgICAgICBfZm9ybVN0YXRlLmlzRGlydHkgPSBvdXRwdXQuaXNEaXJ0eSA9IF9nZXREaXJ0eSgpO1xuICAgICAgICAgICAgICAgIHNob3VsZFVwZGF0ZUZpZWxkID0gaXNQcmV2aW91c0RpcnR5ICE9PSBvdXRwdXQuaXNEaXJ0eTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGlzQ3VycmVudEZpZWxkUHJpc3RpbmUgPSBkaXNhYmxlZEZpZWxkIHx8IGRlZXBFcXVhbChnZXQoX2RlZmF1bHRWYWx1ZXMsIG5hbWUpLCBmaWVsZFZhbHVlKTtcbiAgICAgICAgICAgIGlzUHJldmlvdXNEaXJ0eSA9ICEhKCFkaXNhYmxlZEZpZWxkICYmIGdldChfZm9ybVN0YXRlLmRpcnR5RmllbGRzLCBuYW1lKSk7XG4gICAgICAgICAgICBpc0N1cnJlbnRGaWVsZFByaXN0aW5lIHx8IGRpc2FibGVkRmllbGRcbiAgICAgICAgICAgICAgICA/IHVuc2V0KF9mb3JtU3RhdGUuZGlydHlGaWVsZHMsIG5hbWUpXG4gICAgICAgICAgICAgICAgOiBzZXQoX2Zvcm1TdGF0ZS5kaXJ0eUZpZWxkcywgbmFtZSwgdHJ1ZSk7XG4gICAgICAgICAgICBvdXRwdXQuZGlydHlGaWVsZHMgPSBfZm9ybVN0YXRlLmRpcnR5RmllbGRzO1xuICAgICAgICAgICAgc2hvdWxkVXBkYXRlRmllbGQgPVxuICAgICAgICAgICAgICAgIHNob3VsZFVwZGF0ZUZpZWxkIHx8XG4gICAgICAgICAgICAgICAgICAgIChfcHJveHlGb3JtU3RhdGUuZGlydHlGaWVsZHMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzUHJldmlvdXNEaXJ0eSAhPT0gIWlzQ3VycmVudEZpZWxkUHJpc3RpbmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0JsdXJFdmVudCkge1xuICAgICAgICAgICAgY29uc3QgaXNQcmV2aW91c0ZpZWxkVG91Y2hlZCA9IGdldChfZm9ybVN0YXRlLnRvdWNoZWRGaWVsZHMsIG5hbWUpO1xuICAgICAgICAgICAgaWYgKCFpc1ByZXZpb3VzRmllbGRUb3VjaGVkKSB7XG4gICAgICAgICAgICAgICAgc2V0KF9mb3JtU3RhdGUudG91Y2hlZEZpZWxkcywgbmFtZSwgaXNCbHVyRXZlbnQpO1xuICAgICAgICAgICAgICAgIG91dHB1dC50b3VjaGVkRmllbGRzID0gX2Zvcm1TdGF0ZS50b3VjaGVkRmllbGRzO1xuICAgICAgICAgICAgICAgIHNob3VsZFVwZGF0ZUZpZWxkID1cbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkVXBkYXRlRmllbGQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChfcHJveHlGb3JtU3RhdGUudG91Y2hlZEZpZWxkcyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUHJldmlvdXNGaWVsZFRvdWNoZWQgIT09IGlzQmx1ckV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzaG91bGRVcGRhdGVGaWVsZCAmJiBzaG91bGRSZW5kZXIgJiYgX3N1YmplY3RzLnN0YXRlLm5leHQob3V0cHV0KTtcbiAgICAgICAgcmV0dXJuIHNob3VsZFVwZGF0ZUZpZWxkID8gb3V0cHV0IDoge307XG4gICAgfTtcbiAgICBjb25zdCBzaG91bGRSZW5kZXJCeUVycm9yID0gKG5hbWUsIGlzVmFsaWQsIGVycm9yLCBmaWVsZFN0YXRlKSA9PiB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzRmllbGRFcnJvciA9IGdldChfZm9ybVN0YXRlLmVycm9ycywgbmFtZSk7XG4gICAgICAgIGNvbnN0IHNob3VsZFVwZGF0ZVZhbGlkID0gX3Byb3h5Rm9ybVN0YXRlLmlzVmFsaWQgJiZcbiAgICAgICAgICAgIGlzQm9vbGVhbihpc1ZhbGlkKSAmJlxuICAgICAgICAgICAgX2Zvcm1TdGF0ZS5pc1ZhbGlkICE9PSBpc1ZhbGlkO1xuICAgICAgICBpZiAocHJvcHMuZGVsYXlFcnJvciAmJiBlcnJvcikge1xuICAgICAgICAgICAgZGVsYXlFcnJvckNhbGxiYWNrID0gZGVib3VuY2UoKCkgPT4gdXBkYXRlRXJyb3JzKG5hbWUsIGVycm9yKSk7XG4gICAgICAgICAgICBkZWxheUVycm9yQ2FsbGJhY2socHJvcHMuZGVsYXlFcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgZGVsYXlFcnJvckNhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgICAgICAgPyBzZXQoX2Zvcm1TdGF0ZS5lcnJvcnMsIG5hbWUsIGVycm9yKVxuICAgICAgICAgICAgICAgIDogdW5zZXQoX2Zvcm1TdGF0ZS5lcnJvcnMsIG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoZXJyb3IgPyAhZGVlcEVxdWFsKHByZXZpb3VzRmllbGRFcnJvciwgZXJyb3IpIDogcHJldmlvdXNGaWVsZEVycm9yKSB8fFxuICAgICAgICAgICAgIWlzRW1wdHlPYmplY3QoZmllbGRTdGF0ZSkgfHxcbiAgICAgICAgICAgIHNob3VsZFVwZGF0ZVZhbGlkKSB7XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkRm9ybVN0YXRlID0ge1xuICAgICAgICAgICAgICAgIC4uLmZpZWxkU3RhdGUsXG4gICAgICAgICAgICAgICAgLi4uKHNob3VsZFVwZGF0ZVZhbGlkICYmIGlzQm9vbGVhbihpc1ZhbGlkKSA/IHsgaXNWYWxpZCB9IDoge30pLFxuICAgICAgICAgICAgICAgIGVycm9yczogX2Zvcm1TdGF0ZS5lcnJvcnMsXG4gICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfZm9ybVN0YXRlID0ge1xuICAgICAgICAgICAgICAgIC4uLl9mb3JtU3RhdGUsXG4gICAgICAgICAgICAgICAgLi4udXBkYXRlZEZvcm1TdGF0ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfc3ViamVjdHMuc3RhdGUubmV4dCh1cGRhdGVkRm9ybVN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBfdXBkYXRlSXNWYWxpZGF0aW5nKGZhbHNlKTtcbiAgICB9O1xuICAgIGNvbnN0IF9leGVjdXRlU2NoZW1hID0gYXN5bmMgKG5hbWUpID0+IF9vcHRpb25zLnJlc29sdmVyKF9mb3JtVmFsdWVzLCBfb3B0aW9ucy5jb250ZXh0LCBnZXRSZXNvbHZlck9wdGlvbnMobmFtZSB8fCBfbmFtZXMubW91bnQsIF9maWVsZHMsIF9vcHRpb25zLmNyaXRlcmlhTW9kZSwgX29wdGlvbnMuc2hvdWxkVXNlTmF0aXZlVmFsaWRhdGlvbikpO1xuICAgIGNvbnN0IGV4ZWN1dGVTY2hlbWFBbmRVcGRhdGVTdGF0ZSA9IGFzeW5jIChuYW1lcykgPT4ge1xuICAgICAgICBjb25zdCB7IGVycm9ycyB9ID0gYXdhaXQgX2V4ZWN1dGVTY2hlbWEobmFtZXMpO1xuICAgICAgICBpZiAobmFtZXMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBuYW1lcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gZ2V0KGVycm9ycywgbmFtZSk7XG4gICAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgPyBzZXQoX2Zvcm1TdGF0ZS5lcnJvcnMsIG5hbWUsIGVycm9yKVxuICAgICAgICAgICAgICAgICAgICA6IHVuc2V0KF9mb3JtU3RhdGUuZXJyb3JzLCBuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9mb3JtU3RhdGUuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgfTtcbiAgICBjb25zdCBleGVjdXRlQnVpbHRJblZhbGlkYXRpb24gPSBhc3luYyAoZmllbGRzLCBzaG91bGRPbmx5Q2hlY2tWYWxpZCwgY29udGV4dCA9IHtcbiAgICAgICAgdmFsaWQ6IHRydWUsXG4gICAgfSkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gZmllbGRzKSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZCA9IGZpZWxkc1tuYW1lXTtcbiAgICAgICAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgX2YsIC4uLmZpZWxkVmFsdWUgfSA9IGZpZWxkO1xuICAgICAgICAgICAgICAgIGlmIChfZikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0ZpZWxkQXJyYXlSb290ID0gX25hbWVzLmFycmF5LmhhcyhfZi5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGRFcnJvciA9IGF3YWl0IHZhbGlkYXRlRmllbGQoZmllbGQsIF9mb3JtVmFsdWVzLCBzaG91bGREaXNwbGF5QWxsQXNzb2NpYXRlZEVycm9ycywgX29wdGlvbnMuc2hvdWxkVXNlTmF0aXZlVmFsaWRhdGlvbiAmJiAhc2hvdWxkT25seUNoZWNrVmFsaWQsIGlzRmllbGRBcnJheVJvb3QpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGRFcnJvcltfZi5uYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC52YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNob3VsZE9ubHlDaGVja1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIXNob3VsZE9ubHlDaGVja1ZhbGlkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoZ2V0KGZpZWxkRXJyb3IsIF9mLm5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpc0ZpZWxkQXJyYXlSb290XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdXBkYXRlRmllbGRBcnJheVJvb3RFcnJvcihfZm9ybVN0YXRlLmVycm9ycywgZmllbGRFcnJvciwgX2YubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBzZXQoX2Zvcm1TdGF0ZS5lcnJvcnMsIF9mLm5hbWUsIGZpZWxkRXJyb3JbX2YubmFtZV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB1bnNldChfZm9ybVN0YXRlLmVycm9ycywgX2YubmFtZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaWVsZFZhbHVlICYmXG4gICAgICAgICAgICAgICAgICAgIChhd2FpdCBleGVjdXRlQnVpbHRJblZhbGlkYXRpb24oZmllbGRWYWx1ZSwgc2hvdWxkT25seUNoZWNrVmFsaWQsIGNvbnRleHQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGV4dC52YWxpZDtcbiAgICB9O1xuICAgIGNvbnN0IF9yZW1vdmVVbm1vdW50ZWQgPSAoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBfbmFtZXMudW5Nb3VudCkge1xuICAgICAgICAgICAgY29uc3QgZmllbGQgPSBnZXQoX2ZpZWxkcywgbmFtZSk7XG4gICAgICAgICAgICBmaWVsZCAmJlxuICAgICAgICAgICAgICAgIChmaWVsZC5fZi5yZWZzXG4gICAgICAgICAgICAgICAgICAgID8gZmllbGQuX2YucmVmcy5ldmVyeSgocmVmKSA9PiAhbGl2ZShyZWYpKVxuICAgICAgICAgICAgICAgICAgICA6ICFsaXZlKGZpZWxkLl9mLnJlZikpICYmXG4gICAgICAgICAgICAgICAgdW5yZWdpc3RlcihuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBfbmFtZXMudW5Nb3VudCA9IG5ldyBTZXQoKTtcbiAgICB9O1xuICAgIGNvbnN0IF9nZXREaXJ0eSA9IChuYW1lLCBkYXRhKSA9PiAobmFtZSAmJiBkYXRhICYmIHNldChfZm9ybVZhbHVlcywgbmFtZSwgZGF0YSksXG4gICAgICAgICFkZWVwRXF1YWwoZ2V0VmFsdWVzKCksIF9kZWZhdWx0VmFsdWVzKSk7XG4gICAgY29uc3QgX2dldFdhdGNoID0gKG5hbWVzLCBkZWZhdWx0VmFsdWUsIGlzR2xvYmFsKSA9PiBnZW5lcmF0ZVdhdGNoT3V0cHV0KG5hbWVzLCBfbmFtZXMsIHtcbiAgICAgICAgLi4uKF9zdGF0ZS5tb3VudFxuICAgICAgICAgICAgPyBfZm9ybVZhbHVlc1xuICAgICAgICAgICAgOiBpc1VuZGVmaW5lZChkZWZhdWx0VmFsdWUpXG4gICAgICAgICAgICAgICAgPyBfZGVmYXVsdFZhbHVlc1xuICAgICAgICAgICAgICAgIDogaXNTdHJpbmcobmFtZXMpXG4gICAgICAgICAgICAgICAgICAgID8geyBbbmFtZXNdOiBkZWZhdWx0VmFsdWUgfVxuICAgICAgICAgICAgICAgICAgICA6IGRlZmF1bHRWYWx1ZSksXG4gICAgfSwgaXNHbG9iYWwsIGRlZmF1bHRWYWx1ZSk7XG4gICAgY29uc3QgX2dldEZpZWxkQXJyYXkgPSAobmFtZSkgPT4gY29tcGFjdChnZXQoX3N0YXRlLm1vdW50ID8gX2Zvcm1WYWx1ZXMgOiBfZGVmYXVsdFZhbHVlcywgbmFtZSwgcHJvcHMuc2hvdWxkVW5yZWdpc3RlciA/IGdldChfZGVmYXVsdFZhbHVlcywgbmFtZSwgW10pIDogW10pKTtcbiAgICBjb25zdCBzZXRGaWVsZFZhbHVlID0gKG5hbWUsIHZhbHVlLCBvcHRpb25zID0ge30pID0+IHtcbiAgICAgICAgY29uc3QgZmllbGQgPSBnZXQoX2ZpZWxkcywgbmFtZSk7XG4gICAgICAgIGxldCBmaWVsZFZhbHVlID0gdmFsdWU7XG4gICAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICAgICAgY29uc3QgZmllbGRSZWZlcmVuY2UgPSBmaWVsZC5fZjtcbiAgICAgICAgICAgIGlmIChmaWVsZFJlZmVyZW5jZSkge1xuICAgICAgICAgICAgICAgICFmaWVsZFJlZmVyZW5jZS5kaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgICAgICBzZXQoX2Zvcm1WYWx1ZXMsIG5hbWUsIGdldEZpZWxkVmFsdWVBcyh2YWx1ZSwgZmllbGRSZWZlcmVuY2UpKTtcbiAgICAgICAgICAgICAgICBmaWVsZFZhbHVlID1cbiAgICAgICAgICAgICAgICAgICAgaXNIVE1MRWxlbWVudChmaWVsZFJlZmVyZW5jZS5yZWYpICYmIGlzTnVsbE9yVW5kZWZpbmVkKHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoaXNNdWx0aXBsZVNlbGVjdChmaWVsZFJlZmVyZW5jZS5yZWYpKSB7XG4gICAgICAgICAgICAgICAgICAgIFsuLi5maWVsZFJlZmVyZW5jZS5yZWYub3B0aW9uc10uZm9yRWFjaCgob3B0aW9uUmVmKSA9PiAob3B0aW9uUmVmLnNlbGVjdGVkID0gZmllbGRWYWx1ZS5pbmNsdWRlcyhvcHRpb25SZWYudmFsdWUpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGZpZWxkUmVmZXJlbmNlLnJlZnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ2hlY2tCb3hJbnB1dChmaWVsZFJlZmVyZW5jZS5yZWYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZFJlZmVyZW5jZS5yZWZzLmxlbmd0aCA+IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZpZWxkUmVmZXJlbmNlLnJlZnMuZm9yRWFjaCgoY2hlY2tib3hSZWYpID0+ICghY2hlY2tib3hSZWYuZGVmYXVsdENoZWNrZWQgfHwgIWNoZWNrYm94UmVmLmRpc2FibGVkKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2hlY2tib3hSZWYuY2hlY2tlZCA9IEFycmF5LmlzQXJyYXkoZmllbGRWYWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gISFmaWVsZFZhbHVlLmZpbmQoKGRhdGEpID0+IGRhdGEgPT09IGNoZWNrYm94UmVmLnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmaWVsZFZhbHVlID09PSBjaGVja2JveFJlZi52YWx1ZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmaWVsZFJlZmVyZW5jZS5yZWZzWzBdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmaWVsZFJlZmVyZW5jZS5yZWZzWzBdLmNoZWNrZWQgPSAhIWZpZWxkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRSZWZlcmVuY2UucmVmcy5mb3JFYWNoKChyYWRpb1JlZikgPT4gKHJhZGlvUmVmLmNoZWNrZWQgPSByYWRpb1JlZi52YWx1ZSA9PT0gZmllbGRWYWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzRmlsZUlucHV0KGZpZWxkUmVmZXJlbmNlLnJlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRSZWZlcmVuY2UucmVmLnZhbHVlID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZFJlZmVyZW5jZS5yZWYudmFsdWUgPSBmaWVsZFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWZpZWxkUmVmZXJlbmNlLnJlZi50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3ViamVjdHMudmFsdWVzLm5leHQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiB7IC4uLl9mb3JtVmFsdWVzIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAob3B0aW9ucy5zaG91bGREaXJ0eSB8fCBvcHRpb25zLnNob3VsZFRvdWNoKSAmJlxuICAgICAgICAgICAgdXBkYXRlVG91Y2hBbmREaXJ0eShuYW1lLCBmaWVsZFZhbHVlLCBvcHRpb25zLnNob3VsZFRvdWNoLCBvcHRpb25zLnNob3VsZERpcnR5LCB0cnVlKTtcbiAgICAgICAgb3B0aW9ucy5zaG91bGRWYWxpZGF0ZSAmJiB0cmlnZ2VyKG5hbWUpO1xuICAgIH07XG4gICAgY29uc3Qgc2V0VmFsdWVzID0gKG5hbWUsIHZhbHVlLCBvcHRpb25zKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgZmllbGRLZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkVmFsdWUgPSB2YWx1ZVtmaWVsZEtleV07XG4gICAgICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBgJHtuYW1lfS4ke2ZpZWxkS2V5fWA7XG4gICAgICAgICAgICBjb25zdCBmaWVsZCA9IGdldChfZmllbGRzLCBmaWVsZE5hbWUpO1xuICAgICAgICAgICAgKF9uYW1lcy5hcnJheS5oYXMobmFtZSkgfHxcbiAgICAgICAgICAgICAgICAhaXNQcmltaXRpdmUoZmllbGRWYWx1ZSkgfHxcbiAgICAgICAgICAgICAgICAoZmllbGQgJiYgIWZpZWxkLl9mKSkgJiZcbiAgICAgICAgICAgICAgICAhaXNEYXRlT2JqZWN0KGZpZWxkVmFsdWUpXG4gICAgICAgICAgICAgICAgPyBzZXRWYWx1ZXMoZmllbGROYW1lLCBmaWVsZFZhbHVlLCBvcHRpb25zKVxuICAgICAgICAgICAgICAgIDogc2V0RmllbGRWYWx1ZShmaWVsZE5hbWUsIGZpZWxkVmFsdWUsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzZXRWYWx1ZSA9IChuYW1lLCB2YWx1ZSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gZ2V0KF9maWVsZHMsIG5hbWUpO1xuICAgICAgICBjb25zdCBpc0ZpZWxkQXJyYXkgPSBfbmFtZXMuYXJyYXkuaGFzKG5hbWUpO1xuICAgICAgICBjb25zdCBjbG9uZVZhbHVlID0gY2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgICBzZXQoX2Zvcm1WYWx1ZXMsIG5hbWUsIGNsb25lVmFsdWUpO1xuICAgICAgICBpZiAoaXNGaWVsZEFycmF5KSB7XG4gICAgICAgICAgICBfc3ViamVjdHMuYXJyYXkubmV4dCh7XG4gICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IHsgLi4uX2Zvcm1WYWx1ZXMgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKChfcHJveHlGb3JtU3RhdGUuaXNEaXJ0eSB8fCBfcHJveHlGb3JtU3RhdGUuZGlydHlGaWVsZHMpICYmXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zaG91bGREaXJ0eSkge1xuICAgICAgICAgICAgICAgIF9zdWJqZWN0cy5zdGF0ZS5uZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZGlydHlGaWVsZHM6IGdldERpcnR5RmllbGRzKF9kZWZhdWx0VmFsdWVzLCBfZm9ybVZhbHVlcyksXG4gICAgICAgICAgICAgICAgICAgIGlzRGlydHk6IF9nZXREaXJ0eShuYW1lLCBjbG9uZVZhbHVlKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZpZWxkICYmICFmaWVsZC5fZiAmJiAhaXNOdWxsT3JVbmRlZmluZWQoY2xvbmVWYWx1ZSlcbiAgICAgICAgICAgICAgICA/IHNldFZhbHVlcyhuYW1lLCBjbG9uZVZhbHVlLCBvcHRpb25zKVxuICAgICAgICAgICAgICAgIDogc2V0RmllbGRWYWx1ZShuYW1lLCBjbG9uZVZhbHVlLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpc1dhdGNoZWQobmFtZSwgX25hbWVzKSAmJiBfc3ViamVjdHMuc3RhdGUubmV4dCh7IC4uLl9mb3JtU3RhdGUgfSk7XG4gICAgICAgIF9zdWJqZWN0cy52YWx1ZXMubmV4dCh7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgdmFsdWVzOiB7IC4uLl9mb3JtVmFsdWVzIH0sXG4gICAgICAgIH0pO1xuICAgICAgICAhX3N0YXRlLm1vdW50ICYmIGZsdXNoUm9vdFJlbmRlcigpO1xuICAgIH07XG4gICAgY29uc3Qgb25DaGFuZ2UgPSBhc3luYyAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICBsZXQgbmFtZSA9IHRhcmdldC5uYW1lO1xuICAgICAgICBsZXQgaXNGaWVsZFZhbHVlVXBkYXRlZCA9IHRydWU7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gZ2V0KF9maWVsZHMsIG5hbWUpO1xuICAgICAgICBjb25zdCBnZXRDdXJyZW50RmllbGRWYWx1ZSA9ICgpID0+IHRhcmdldC50eXBlID8gZ2V0RmllbGRWYWx1ZShmaWVsZC5fZikgOiBnZXRFdmVudFZhbHVlKGV2ZW50KTtcbiAgICAgICAgY29uc3QgX3VwZGF0ZUlzRmllbGRWYWx1ZVVwZGF0ZWQgPSAoZmllbGRWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgaXNGaWVsZFZhbHVlVXBkYXRlZCA9XG4gICAgICAgICAgICAgICAgTnVtYmVyLmlzTmFOKGZpZWxkVmFsdWUpIHx8XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkVmFsdWUgPT09IGdldChfZm9ybVZhbHVlcywgbmFtZSwgZmllbGRWYWx1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICAgICAgbGV0IGVycm9yO1xuICAgICAgICAgICAgbGV0IGlzVmFsaWQ7XG4gICAgICAgICAgICBjb25zdCBmaWVsZFZhbHVlID0gZ2V0Q3VycmVudEZpZWxkVmFsdWUoKTtcbiAgICAgICAgICAgIGNvbnN0IGlzQmx1ckV2ZW50ID0gZXZlbnQudHlwZSA9PT0gRVZFTlRTLkJMVVIgfHwgZXZlbnQudHlwZSA9PT0gRVZFTlRTLkZPQ1VTX09VVDtcbiAgICAgICAgICAgIGNvbnN0IHNob3VsZFNraXBWYWxpZGF0aW9uID0gKCFoYXNWYWxpZGF0aW9uKGZpZWxkLl9mKSAmJlxuICAgICAgICAgICAgICAgICFfb3B0aW9ucy5yZXNvbHZlciAmJlxuICAgICAgICAgICAgICAgICFnZXQoX2Zvcm1TdGF0ZS5lcnJvcnMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICAgIWZpZWxkLl9mLmRlcHMpIHx8XG4gICAgICAgICAgICAgICAgc2tpcFZhbGlkYXRpb24oaXNCbHVyRXZlbnQsIGdldChfZm9ybVN0YXRlLnRvdWNoZWRGaWVsZHMsIG5hbWUpLCBfZm9ybVN0YXRlLmlzU3VibWl0dGVkLCB2YWxpZGF0aW9uTW9kZUFmdGVyU3VibWl0LCB2YWxpZGF0aW9uTW9kZUJlZm9yZVN1Ym1pdCk7XG4gICAgICAgICAgICBjb25zdCB3YXRjaGVkID0gaXNXYXRjaGVkKG5hbWUsIF9uYW1lcywgaXNCbHVyRXZlbnQpO1xuICAgICAgICAgICAgc2V0KF9mb3JtVmFsdWVzLCBuYW1lLCBmaWVsZFZhbHVlKTtcbiAgICAgICAgICAgIGlmIChpc0JsdXJFdmVudCkge1xuICAgICAgICAgICAgICAgIGZpZWxkLl9mLm9uQmx1ciAmJiBmaWVsZC5fZi5vbkJsdXIoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGRlbGF5RXJyb3JDYWxsYmFjayAmJiBkZWxheUVycm9yQ2FsbGJhY2soMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChmaWVsZC5fZi5vbkNoYW5nZSkge1xuICAgICAgICAgICAgICAgIGZpZWxkLl9mLm9uQ2hhbmdlKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZpZWxkU3RhdGUgPSB1cGRhdGVUb3VjaEFuZERpcnR5KG5hbWUsIGZpZWxkVmFsdWUsIGlzQmx1ckV2ZW50LCBmYWxzZSk7XG4gICAgICAgICAgICBjb25zdCBzaG91bGRSZW5kZXIgPSAhaXNFbXB0eU9iamVjdChmaWVsZFN0YXRlKSB8fCB3YXRjaGVkO1xuICAgICAgICAgICAgIWlzQmx1ckV2ZW50ICYmXG4gICAgICAgICAgICAgICAgX3N1YmplY3RzLnZhbHVlcy5uZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogZXZlbnQudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiB7IC4uLl9mb3JtVmFsdWVzIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoc2hvdWxkU2tpcFZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgICAgICBfcHJveHlGb3JtU3RhdGUuaXNWYWxpZCAmJiBfdXBkYXRlVmFsaWQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHNob3VsZFJlbmRlciAmJlxuICAgICAgICAgICAgICAgICAgICBfc3ViamVjdHMuc3RhdGUubmV4dCh7IG5hbWUsIC4uLih3YXRjaGVkID8ge30gOiBmaWVsZFN0YXRlKSB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAhaXNCbHVyRXZlbnQgJiYgd2F0Y2hlZCAmJiBfc3ViamVjdHMuc3RhdGUubmV4dCh7IC4uLl9mb3JtU3RhdGUgfSk7XG4gICAgICAgICAgICBfdXBkYXRlSXNWYWxpZGF0aW5nKHRydWUpO1xuICAgICAgICAgICAgaWYgKF9vcHRpb25zLnJlc29sdmVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBlcnJvcnMgfSA9IGF3YWl0IF9leGVjdXRlU2NoZW1hKFtuYW1lXSk7XG4gICAgICAgICAgICAgICAgX3VwZGF0ZUlzRmllbGRWYWx1ZVVwZGF0ZWQoZmllbGRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzRmllbGRWYWx1ZVVwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldmlvdXNFcnJvckxvb2t1cFJlc3VsdCA9IHNjaGVtYUVycm9yTG9va3VwKF9mb3JtU3RhdGUuZXJyb3JzLCBfZmllbGRzLCBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3JMb29rdXBSZXN1bHQgPSBzY2hlbWFFcnJvckxvb2t1cChlcnJvcnMsIF9maWVsZHMsIHByZXZpb3VzRXJyb3JMb29rdXBSZXN1bHQubmFtZSB8fCBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBlcnJvckxvb2t1cFJlc3VsdC5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGVycm9yTG9va3VwUmVzdWx0Lm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBpc0VtcHR5T2JqZWN0KGVycm9ycyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZXJyb3IgPSAoYXdhaXQgdmFsaWRhdGVGaWVsZChmaWVsZCwgX2Zvcm1WYWx1ZXMsIHNob3VsZERpc3BsYXlBbGxBc3NvY2lhdGVkRXJyb3JzLCBfb3B0aW9ucy5zaG91bGRVc2VOYXRpdmVWYWxpZGF0aW9uKSlbbmFtZV07XG4gICAgICAgICAgICAgICAgX3VwZGF0ZUlzRmllbGRWYWx1ZVVwZGF0ZWQoZmllbGRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzRmllbGRWYWx1ZVVwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoX3Byb3h5Rm9ybVN0YXRlLmlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBhd2FpdCBleGVjdXRlQnVpbHRJblZhbGlkYXRpb24oX2ZpZWxkcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNGaWVsZFZhbHVlVXBkYXRlZCkge1xuICAgICAgICAgICAgICAgIGZpZWxkLl9mLmRlcHMgJiZcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcihmaWVsZC5fZi5kZXBzKTtcbiAgICAgICAgICAgICAgICBzaG91bGRSZW5kZXJCeUVycm9yKG5hbWUsIGlzVmFsaWQsIGVycm9yLCBmaWVsZFN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgX2ZvY3VzSW5wdXQgPSAocmVmLCBrZXkpID0+IHtcbiAgICAgICAgaWYgKGdldChfZm9ybVN0YXRlLmVycm9ycywga2V5KSAmJiByZWYuZm9jdXMpIHtcbiAgICAgICAgICAgIHJlZi5mb2N1cygpO1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH07XG4gICAgY29uc3QgdHJpZ2dlciA9IGFzeW5jIChuYW1lLCBvcHRpb25zID0ge30pID0+IHtcbiAgICAgICAgbGV0IGlzVmFsaWQ7XG4gICAgICAgIGxldCB2YWxpZGF0aW9uUmVzdWx0O1xuICAgICAgICBjb25zdCBmaWVsZE5hbWVzID0gY29udmVydFRvQXJyYXlQYXlsb2FkKG5hbWUpO1xuICAgICAgICBfdXBkYXRlSXNWYWxpZGF0aW5nKHRydWUpO1xuICAgICAgICBpZiAoX29wdGlvbnMucmVzb2x2ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9ycyA9IGF3YWl0IGV4ZWN1dGVTY2hlbWFBbmRVcGRhdGVTdGF0ZShpc1VuZGVmaW5lZChuYW1lKSA/IG5hbWUgOiBmaWVsZE5hbWVzKTtcbiAgICAgICAgICAgIGlzVmFsaWQgPSBpc0VtcHR5T2JqZWN0KGVycm9ycyk7XG4gICAgICAgICAgICB2YWxpZGF0aW9uUmVzdWx0ID0gbmFtZVxuICAgICAgICAgICAgICAgID8gIWZpZWxkTmFtZXMuc29tZSgobmFtZSkgPT4gZ2V0KGVycm9ycywgbmFtZSkpXG4gICAgICAgICAgICAgICAgOiBpc1ZhbGlkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb25SZXN1bHQgPSAoYXdhaXQgUHJvbWlzZS5hbGwoZmllbGROYW1lcy5tYXAoYXN5bmMgKGZpZWxkTmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkID0gZ2V0KF9maWVsZHMsIGZpZWxkTmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGV4ZWN1dGVCdWlsdEluVmFsaWRhdGlvbihmaWVsZCAmJiBmaWVsZC5fZiA/IHsgW2ZpZWxkTmFtZV06IGZpZWxkIH0gOiBmaWVsZCk7XG4gICAgICAgICAgICB9KSkpLmV2ZXJ5KEJvb2xlYW4pO1xuICAgICAgICAgICAgISghdmFsaWRhdGlvblJlc3VsdCAmJiAhX2Zvcm1TdGF0ZS5pc1ZhbGlkKSAmJiBfdXBkYXRlVmFsaWQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb25SZXN1bHQgPSBpc1ZhbGlkID0gYXdhaXQgZXhlY3V0ZUJ1aWx0SW5WYWxpZGF0aW9uKF9maWVsZHMpO1xuICAgICAgICB9XG4gICAgICAgIF9zdWJqZWN0cy5zdGF0ZS5uZXh0KHtcbiAgICAgICAgICAgIC4uLighaXNTdHJpbmcobmFtZSkgfHxcbiAgICAgICAgICAgICAgICAoX3Byb3h5Rm9ybVN0YXRlLmlzVmFsaWQgJiYgaXNWYWxpZCAhPT0gX2Zvcm1TdGF0ZS5pc1ZhbGlkKVxuICAgICAgICAgICAgICAgID8ge31cbiAgICAgICAgICAgICAgICA6IHsgbmFtZSB9KSxcbiAgICAgICAgICAgIC4uLihfb3B0aW9ucy5yZXNvbHZlciB8fCAhbmFtZSA/IHsgaXNWYWxpZCB9IDoge30pLFxuICAgICAgICAgICAgZXJyb3JzOiBfZm9ybVN0YXRlLmVycm9ycyxcbiAgICAgICAgICAgIGlzVmFsaWRhdGluZzogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgICAgICBvcHRpb25zLnNob3VsZEZvY3VzICYmXG4gICAgICAgICAgICAhdmFsaWRhdGlvblJlc3VsdCAmJlxuICAgICAgICAgICAgaXRlcmF0ZUZpZWxkc0J5QWN0aW9uKF9maWVsZHMsIF9mb2N1c0lucHV0LCBuYW1lID8gZmllbGROYW1lcyA6IF9uYW1lcy5tb3VudCk7XG4gICAgICAgIHJldHVybiB2YWxpZGF0aW9uUmVzdWx0O1xuICAgIH07XG4gICAgY29uc3QgZ2V0VmFsdWVzID0gKGZpZWxkTmFtZXMpID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWVzID0ge1xuICAgICAgICAgICAgLi4uX2RlZmF1bHRWYWx1ZXMsXG4gICAgICAgICAgICAuLi4oX3N0YXRlLm1vdW50ID8gX2Zvcm1WYWx1ZXMgOiB7fSksXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBpc1VuZGVmaW5lZChmaWVsZE5hbWVzKVxuICAgICAgICAgICAgPyB2YWx1ZXNcbiAgICAgICAgICAgIDogaXNTdHJpbmcoZmllbGROYW1lcylcbiAgICAgICAgICAgICAgICA/IGdldCh2YWx1ZXMsIGZpZWxkTmFtZXMpXG4gICAgICAgICAgICAgICAgOiBmaWVsZE5hbWVzLm1hcCgobmFtZSkgPT4gZ2V0KHZhbHVlcywgbmFtZSkpO1xuICAgIH07XG4gICAgY29uc3QgZ2V0RmllbGRTdGF0ZSA9IChuYW1lLCBmb3JtU3RhdGUpID0+ICh7XG4gICAgICAgIGludmFsaWQ6ICEhZ2V0KChmb3JtU3RhdGUgfHwgX2Zvcm1TdGF0ZSkuZXJyb3JzLCBuYW1lKSxcbiAgICAgICAgaXNEaXJ0eTogISFnZXQoKGZvcm1TdGF0ZSB8fCBfZm9ybVN0YXRlKS5kaXJ0eUZpZWxkcywgbmFtZSksXG4gICAgICAgIGlzVG91Y2hlZDogISFnZXQoKGZvcm1TdGF0ZSB8fCBfZm9ybVN0YXRlKS50b3VjaGVkRmllbGRzLCBuYW1lKSxcbiAgICAgICAgZXJyb3I6IGdldCgoZm9ybVN0YXRlIHx8IF9mb3JtU3RhdGUpLmVycm9ycywgbmFtZSksXG4gICAgfSk7XG4gICAgY29uc3QgY2xlYXJFcnJvcnMgPSAobmFtZSkgPT4ge1xuICAgICAgICBuYW1lICYmXG4gICAgICAgICAgICBjb252ZXJ0VG9BcnJheVBheWxvYWQobmFtZSkuZm9yRWFjaCgoaW5wdXROYW1lKSA9PiB1bnNldChfZm9ybVN0YXRlLmVycm9ycywgaW5wdXROYW1lKSk7XG4gICAgICAgIF9zdWJqZWN0cy5zdGF0ZS5uZXh0KHtcbiAgICAgICAgICAgIGVycm9yczogbmFtZSA/IF9mb3JtU3RhdGUuZXJyb3JzIDoge30sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3Qgc2V0RXJyb3IgPSAobmFtZSwgZXJyb3IsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgY29uc3QgcmVmID0gKGdldChfZmllbGRzLCBuYW1lLCB7IF9mOiB7fSB9KS5fZiB8fCB7fSkucmVmO1xuICAgICAgICBzZXQoX2Zvcm1TdGF0ZS5lcnJvcnMsIG5hbWUsIHtcbiAgICAgICAgICAgIC4uLmVycm9yLFxuICAgICAgICAgICAgcmVmLFxuICAgICAgICB9KTtcbiAgICAgICAgX3N1YmplY3RzLnN0YXRlLm5leHQoe1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGVycm9yczogX2Zvcm1TdGF0ZS5lcnJvcnMsXG4gICAgICAgICAgICBpc1ZhbGlkOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5zaG91bGRGb2N1cyAmJiByZWYgJiYgcmVmLmZvY3VzICYmIHJlZi5mb2N1cygpO1xuICAgIH07XG4gICAgY29uc3Qgd2F0Y2ggPSAobmFtZSwgZGVmYXVsdFZhbHVlKSA9PiBpc0Z1bmN0aW9uKG5hbWUpXG4gICAgICAgID8gX3N1YmplY3RzLnZhbHVlcy5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgbmV4dDogKHBheWxvYWQpID0+IG5hbWUoX2dldFdhdGNoKHVuZGVmaW5lZCwgZGVmYXVsdFZhbHVlKSwgcGF5bG9hZCksXG4gICAgICAgIH0pXG4gICAgICAgIDogX2dldFdhdGNoKG5hbWUsIGRlZmF1bHRWYWx1ZSwgdHJ1ZSk7XG4gICAgY29uc3QgdW5yZWdpc3RlciA9IChuYW1lLCBvcHRpb25zID0ge30pID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBmaWVsZE5hbWUgb2YgbmFtZSA/IGNvbnZlcnRUb0FycmF5UGF5bG9hZChuYW1lKSA6IF9uYW1lcy5tb3VudCkge1xuICAgICAgICAgICAgX25hbWVzLm1vdW50LmRlbGV0ZShmaWVsZE5hbWUpO1xuICAgICAgICAgICAgX25hbWVzLmFycmF5LmRlbGV0ZShmaWVsZE5hbWUpO1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmtlZXBWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHVuc2V0KF9maWVsZHMsIGZpZWxkTmFtZSk7XG4gICAgICAgICAgICAgICAgdW5zZXQoX2Zvcm1WYWx1ZXMsIGZpZWxkTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAhb3B0aW9ucy5rZWVwRXJyb3IgJiYgdW5zZXQoX2Zvcm1TdGF0ZS5lcnJvcnMsIGZpZWxkTmFtZSk7XG4gICAgICAgICAgICAhb3B0aW9ucy5rZWVwRGlydHkgJiYgdW5zZXQoX2Zvcm1TdGF0ZS5kaXJ0eUZpZWxkcywgZmllbGROYW1lKTtcbiAgICAgICAgICAgICFvcHRpb25zLmtlZXBUb3VjaGVkICYmIHVuc2V0KF9mb3JtU3RhdGUudG91Y2hlZEZpZWxkcywgZmllbGROYW1lKTtcbiAgICAgICAgICAgICFfb3B0aW9ucy5zaG91bGRVbnJlZ2lzdGVyICYmXG4gICAgICAgICAgICAgICAgIW9wdGlvbnMua2VlcERlZmF1bHRWYWx1ZSAmJlxuICAgICAgICAgICAgICAgIHVuc2V0KF9kZWZhdWx0VmFsdWVzLCBmaWVsZE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIF9zdWJqZWN0cy52YWx1ZXMubmV4dCh7XG4gICAgICAgICAgICB2YWx1ZXM6IHsgLi4uX2Zvcm1WYWx1ZXMgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIF9zdWJqZWN0cy5zdGF0ZS5uZXh0KHtcbiAgICAgICAgICAgIC4uLl9mb3JtU3RhdGUsXG4gICAgICAgICAgICAuLi4oIW9wdGlvbnMua2VlcERpcnR5ID8ge30gOiB7IGlzRGlydHk6IF9nZXREaXJ0eSgpIH0pLFxuICAgICAgICB9KTtcbiAgICAgICAgIW9wdGlvbnMua2VlcElzVmFsaWQgJiYgX3VwZGF0ZVZhbGlkKCk7XG4gICAgfTtcbiAgICBjb25zdCBfdXBkYXRlRGlzYWJsZWRGaWVsZCA9ICh7IGRpc2FibGVkLCBuYW1lLCBmaWVsZCwgZmllbGRzLCB2YWx1ZSwgfSkgPT4ge1xuICAgICAgICBpZiAoaXNCb29sZWFuKGRpc2FibGVkKSkge1xuICAgICAgICAgICAgY29uc3QgaW5wdXRWYWx1ZSA9IGRpc2FibGVkXG4gICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA6IGlzVW5kZWZpbmVkKHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA/IGdldEZpZWxkVmFsdWUoZmllbGQgPyBmaWVsZC5fZiA6IGdldChmaWVsZHMsIG5hbWUpLl9mKVxuICAgICAgICAgICAgICAgICAgICA6IHZhbHVlO1xuICAgICAgICAgICAgc2V0KF9mb3JtVmFsdWVzLCBuYW1lLCBpbnB1dFZhbHVlKTtcbiAgICAgICAgICAgIHVwZGF0ZVRvdWNoQW5kRGlydHkobmFtZSwgaW5wdXRWYWx1ZSwgZmFsc2UsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcmVnaXN0ZXIgPSAobmFtZSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICAgIGxldCBmaWVsZCA9IGdldChfZmllbGRzLCBuYW1lKTtcbiAgICAgICAgY29uc3QgZGlzYWJsZWRJc0RlZmluZWQgPSBpc0Jvb2xlYW4ob3B0aW9ucy5kaXNhYmxlZCk7XG4gICAgICAgIHNldChfZmllbGRzLCBuYW1lLCB7XG4gICAgICAgICAgICAuLi4oZmllbGQgfHwge30pLFxuICAgICAgICAgICAgX2Y6IHtcbiAgICAgICAgICAgICAgICAuLi4oZmllbGQgJiYgZmllbGQuX2YgPyBmaWVsZC5fZiA6IHsgcmVmOiB7IG5hbWUgfSB9KSxcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIG1vdW50OiB0cnVlLFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgX25hbWVzLm1vdW50LmFkZChuYW1lKTtcbiAgICAgICAgaWYgKGZpZWxkKSB7XG4gICAgICAgICAgICBfdXBkYXRlRGlzYWJsZWRGaWVsZCh7XG4gICAgICAgICAgICAgICAgZmllbGQsXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6IG9wdGlvbnMuZGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogb3B0aW9ucy52YWx1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdXBkYXRlVmFsaWRBbmRWYWx1ZShuYW1lLCB0cnVlLCBvcHRpb25zLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uKGRpc2FibGVkSXNEZWZpbmVkID8geyBkaXNhYmxlZDogb3B0aW9ucy5kaXNhYmxlZCB9IDoge30pLFxuICAgICAgICAgICAgLi4uKF9vcHRpb25zLnByb2dyZXNzaXZlXG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAhIW9wdGlvbnMucmVxdWlyZWQsXG4gICAgICAgICAgICAgICAgICAgIG1pbjogZ2V0UnVsZVZhbHVlKG9wdGlvbnMubWluKSxcbiAgICAgICAgICAgICAgICAgICAgbWF4OiBnZXRSdWxlVmFsdWUob3B0aW9ucy5tYXgpLFxuICAgICAgICAgICAgICAgICAgICBtaW5MZW5ndGg6IGdldFJ1bGVWYWx1ZShvcHRpb25zLm1pbkxlbmd0aCksXG4gICAgICAgICAgICAgICAgICAgIG1heExlbmd0aDogZ2V0UnVsZVZhbHVlKG9wdGlvbnMubWF4TGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogZ2V0UnVsZVZhbHVlKG9wdGlvbnMucGF0dGVybiksXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDoge30pLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIG9uQ2hhbmdlLFxuICAgICAgICAgICAgb25CbHVyOiBvbkNoYW5nZSxcbiAgICAgICAgICAgIHJlZjogKHJlZikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXIobmFtZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkID0gZ2V0KF9maWVsZHMsIG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWVsZFJlZiA9IGlzVW5kZWZpbmVkKHJlZi52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcmVmLnF1ZXJ5U2VsZWN0b3JBbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHJlZi5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCxzZWxlY3QsdGV4dGFyZWEnKVswXSB8fCByZWZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHJlZlxuICAgICAgICAgICAgICAgICAgICAgICAgOiByZWY7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhZGlvT3JDaGVja2JveCA9IGlzUmFkaW9PckNoZWNrYm94KGZpZWxkUmVmKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVmcyA9IGZpZWxkLl9mLnJlZnMgfHwgW107XG4gICAgICAgICAgICAgICAgICAgIGlmIChyYWRpb09yQ2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcmVmcy5maW5kKChvcHRpb24pID0+IG9wdGlvbiA9PT0gZmllbGRSZWYpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGZpZWxkUmVmID09PSBmaWVsZC5fZi5yZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXQoX2ZpZWxkcywgbmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2Y6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5maWVsZC5fZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4ocmFkaW9PckNoZWNrYm94XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnJlZnMuZmlsdGVyKGxpdmUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkUmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLihBcnJheS5pc0FycmF5KGdldChfZGVmYXVsdFZhbHVlcywgbmFtZSkpID8gW3t9XSA6IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY6IHsgdHlwZTogZmllbGRSZWYudHlwZSwgbmFtZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogeyByZWY6IGZpZWxkUmVmIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVZhbGlkQW5kVmFsdWUobmFtZSwgZmFsc2UsIHVuZGVmaW5lZCwgZmllbGRSZWYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQgPSBnZXQoX2ZpZWxkcywgbmFtZSwge30pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQuX2YpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLl9mLm1vdW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKF9vcHRpb25zLnNob3VsZFVucmVnaXN0ZXIgfHwgb3B0aW9ucy5zaG91bGRVbnJlZ2lzdGVyKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIShpc05hbWVJbkZpZWxkQXJyYXkoX25hbWVzLmFycmF5LCBuYW1lKSAmJiBfc3RhdGUuYWN0aW9uKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgX25hbWVzLnVuTW91bnQuYWRkKG5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBfZm9jdXNFcnJvciA9ICgpID0+IF9vcHRpb25zLnNob3VsZEZvY3VzRXJyb3IgJiZcbiAgICAgICAgaXRlcmF0ZUZpZWxkc0J5QWN0aW9uKF9maWVsZHMsIF9mb2N1c0lucHV0LCBfbmFtZXMubW91bnQpO1xuICAgIGNvbnN0IF9kaXNhYmxlRm9ybSA9IChkaXNhYmxlZCkgPT4ge1xuICAgICAgICBpZiAoaXNCb29sZWFuKGRpc2FibGVkKSkge1xuICAgICAgICAgICAgX3N1YmplY3RzLnN0YXRlLm5leHQoeyBkaXNhYmxlZCB9KTtcbiAgICAgICAgICAgIGl0ZXJhdGVGaWVsZHNCeUFjdGlvbihfZmllbGRzLCAocmVmLCBuYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHJlcXVpcmVkRGlzYWJsZWRTdGF0ZSA9IGRpc2FibGVkO1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRGaWVsZCA9IGdldChfZmllbGRzLCBuYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEZpZWxkICYmIGlzQm9vbGVhbihjdXJyZW50RmllbGQuX2YuZGlzYWJsZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkRGlzYWJsZWRTdGF0ZSB8fCAocmVxdWlyZWREaXNhYmxlZFN0YXRlID0gY3VycmVudEZpZWxkLl9mLmRpc2FibGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVmLmRpc2FibGVkID0gcmVxdWlyZWREaXNhYmxlZFN0YXRlO1xuICAgICAgICAgICAgfSwgMCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVTdWJtaXQgPSAob25WYWxpZCwgb25JbnZhbGlkKSA9PiBhc3luYyAoZSkgPT4ge1xuICAgICAgICBsZXQgb25WYWxpZEVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnBlcnNpc3QgJiYgZS5wZXJzaXN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGZpZWxkVmFsdWVzID0gY2xvbmVPYmplY3QoX2Zvcm1WYWx1ZXMpO1xuICAgICAgICBfc3ViamVjdHMuc3RhdGUubmV4dCh7XG4gICAgICAgICAgICBpc1N1Ym1pdHRpbmc6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoX29wdGlvbnMucmVzb2x2ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZXJyb3JzLCB2YWx1ZXMgfSA9IGF3YWl0IF9leGVjdXRlU2NoZW1hKCk7XG4gICAgICAgICAgICBfZm9ybVN0YXRlLmVycm9ycyA9IGVycm9ycztcbiAgICAgICAgICAgIGZpZWxkVmFsdWVzID0gdmFsdWVzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgZXhlY3V0ZUJ1aWx0SW5WYWxpZGF0aW9uKF9maWVsZHMpO1xuICAgICAgICB9XG4gICAgICAgIHVuc2V0KF9mb3JtU3RhdGUuZXJyb3JzLCAncm9vdCcpO1xuICAgICAgICBpZiAoaXNFbXB0eU9iamVjdChfZm9ybVN0YXRlLmVycm9ycykpIHtcbiAgICAgICAgICAgIF9zdWJqZWN0cy5zdGF0ZS5uZXh0KHtcbiAgICAgICAgICAgICAgICBlcnJvcnM6IHt9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IG9uVmFsaWQoZmllbGRWYWx1ZXMsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgb25WYWxpZEVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAob25JbnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgb25JbnZhbGlkKHsgLi4uX2Zvcm1TdGF0ZS5lcnJvcnMgfSwgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfZm9jdXNFcnJvcigpO1xuICAgICAgICAgICAgc2V0VGltZW91dChfZm9jdXNFcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgX3N1YmplY3RzLnN0YXRlLm5leHQoe1xuICAgICAgICAgICAgaXNTdWJtaXR0ZWQ6IHRydWUsXG4gICAgICAgICAgICBpc1N1Ym1pdHRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgaXNTdWJtaXRTdWNjZXNzZnVsOiBpc0VtcHR5T2JqZWN0KF9mb3JtU3RhdGUuZXJyb3JzKSAmJiAhb25WYWxpZEVycm9yLFxuICAgICAgICAgICAgc3VibWl0Q291bnQ6IF9mb3JtU3RhdGUuc3VibWl0Q291bnQgKyAxLFxuICAgICAgICAgICAgZXJyb3JzOiBfZm9ybVN0YXRlLmVycm9ycyxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChvblZhbGlkRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG9uVmFsaWRFcnJvcjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcmVzZXRGaWVsZCA9IChuYW1lLCBvcHRpb25zID0ge30pID0+IHtcbiAgICAgICAgaWYgKGdldChfZmllbGRzLCBuYW1lKSkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKG9wdGlvbnMuZGVmYXVsdFZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHNldFZhbHVlKG5hbWUsIGNsb25lT2JqZWN0KGdldChfZGVmYXVsdFZhbHVlcywgbmFtZSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldFZhbHVlKG5hbWUsIG9wdGlvbnMuZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgICAgICBzZXQoX2RlZmF1bHRWYWx1ZXMsIG5hbWUsIGNsb25lT2JqZWN0KG9wdGlvbnMuZGVmYXVsdFZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMua2VlcFRvdWNoZWQpIHtcbiAgICAgICAgICAgICAgICB1bnNldChfZm9ybVN0YXRlLnRvdWNoZWRGaWVsZHMsIG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmtlZXBEaXJ0eSkge1xuICAgICAgICAgICAgICAgIHVuc2V0KF9mb3JtU3RhdGUuZGlydHlGaWVsZHMsIG5hbWUpO1xuICAgICAgICAgICAgICAgIF9mb3JtU3RhdGUuaXNEaXJ0eSA9IG9wdGlvbnMuZGVmYXVsdFZhbHVlXG4gICAgICAgICAgICAgICAgICAgID8gX2dldERpcnR5KG5hbWUsIGNsb25lT2JqZWN0KGdldChfZGVmYXVsdFZhbHVlcywgbmFtZSkpKVxuICAgICAgICAgICAgICAgICAgICA6IF9nZXREaXJ0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmtlZXBFcnJvcikge1xuICAgICAgICAgICAgICAgIHVuc2V0KF9mb3JtU3RhdGUuZXJyb3JzLCBuYW1lKTtcbiAgICAgICAgICAgICAgICBfcHJveHlGb3JtU3RhdGUuaXNWYWxpZCAmJiBfdXBkYXRlVmFsaWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9zdWJqZWN0cy5zdGF0ZS5uZXh0KHsgLi4uX2Zvcm1TdGF0ZSB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgX3Jlc2V0ID0gKGZvcm1WYWx1ZXMsIGtlZXBTdGF0ZU9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgICBjb25zdCB1cGRhdGVkVmFsdWVzID0gZm9ybVZhbHVlcyA/IGNsb25lT2JqZWN0KGZvcm1WYWx1ZXMpIDogX2RlZmF1bHRWYWx1ZXM7XG4gICAgICAgIGNvbnN0IGNsb25lVXBkYXRlZFZhbHVlcyA9IGNsb25lT2JqZWN0KHVwZGF0ZWRWYWx1ZXMpO1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBmb3JtVmFsdWVzICYmICFpc0VtcHR5T2JqZWN0KGZvcm1WYWx1ZXMpXG4gICAgICAgICAgICA/IGNsb25lVXBkYXRlZFZhbHVlc1xuICAgICAgICAgICAgOiBfZGVmYXVsdFZhbHVlcztcbiAgICAgICAgaWYgKCFrZWVwU3RhdGVPcHRpb25zLmtlZXBEZWZhdWx0VmFsdWVzKSB7XG4gICAgICAgICAgICBfZGVmYXVsdFZhbHVlcyA9IHVwZGF0ZWRWYWx1ZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFrZWVwU3RhdGVPcHRpb25zLmtlZXBWYWx1ZXMpIHtcbiAgICAgICAgICAgIGlmIChrZWVwU3RhdGVPcHRpb25zLmtlZXBEaXJ0eVZhbHVlcykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZmllbGROYW1lIG9mIF9uYW1lcy5tb3VudCkge1xuICAgICAgICAgICAgICAgICAgICBnZXQoX2Zvcm1TdGF0ZS5kaXJ0eUZpZWxkcywgZmllbGROYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBzZXQodmFsdWVzLCBmaWVsZE5hbWUsIGdldChfZm9ybVZhbHVlcywgZmllbGROYW1lKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogc2V0VmFsdWUoZmllbGROYW1lLCBnZXQodmFsdWVzLCBmaWVsZE5hbWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNXZWIgJiYgaXNVbmRlZmluZWQoZm9ybVZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIF9uYW1lcy5tb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGQgPSBnZXQoX2ZpZWxkcywgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQgJiYgZmllbGQuX2YpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWVsZFJlZmVyZW5jZSA9IEFycmF5LmlzQXJyYXkoZmllbGQuX2YucmVmcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBmaWVsZC5fZi5yZWZzWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZmllbGQuX2YucmVmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0hUTUxFbGVtZW50KGZpZWxkUmVmZXJlbmNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtID0gZmllbGRSZWZlcmVuY2UuY2xvc2VzdCgnZm9ybScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5yZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX2ZpZWxkcyA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX2Zvcm1WYWx1ZXMgPSBwcm9wcy5zaG91bGRVbnJlZ2lzdGVyXG4gICAgICAgICAgICAgICAgPyBrZWVwU3RhdGVPcHRpb25zLmtlZXBEZWZhdWx0VmFsdWVzXG4gICAgICAgICAgICAgICAgICAgID8gY2xvbmVPYmplY3QoX2RlZmF1bHRWYWx1ZXMpXG4gICAgICAgICAgICAgICAgICAgIDoge31cbiAgICAgICAgICAgICAgICA6IGNsb25lT2JqZWN0KHZhbHVlcyk7XG4gICAgICAgICAgICBfc3ViamVjdHMuYXJyYXkubmV4dCh7XG4gICAgICAgICAgICAgICAgdmFsdWVzOiB7IC4uLnZhbHVlcyB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfc3ViamVjdHMudmFsdWVzLm5leHQoe1xuICAgICAgICAgICAgICAgIHZhbHVlczogeyAuLi52YWx1ZXMgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIF9uYW1lcyA9IHtcbiAgICAgICAgICAgIG1vdW50OiBuZXcgU2V0KCksXG4gICAgICAgICAgICB1bk1vdW50OiBuZXcgU2V0KCksXG4gICAgICAgICAgICBhcnJheTogbmV3IFNldCgpLFxuICAgICAgICAgICAgd2F0Y2g6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgIHdhdGNoQWxsOiBmYWxzZSxcbiAgICAgICAgICAgIGZvY3VzOiAnJyxcbiAgICAgICAgfTtcbiAgICAgICAgIV9zdGF0ZS5tb3VudCAmJiBmbHVzaFJvb3RSZW5kZXIoKTtcbiAgICAgICAgX3N0YXRlLm1vdW50ID1cbiAgICAgICAgICAgICFfcHJveHlGb3JtU3RhdGUuaXNWYWxpZCB8fFxuICAgICAgICAgICAgICAgICEha2VlcFN0YXRlT3B0aW9ucy5rZWVwSXNWYWxpZCB8fFxuICAgICAgICAgICAgICAgICEha2VlcFN0YXRlT3B0aW9ucy5rZWVwRGlydHlWYWx1ZXM7XG4gICAgICAgIF9zdGF0ZS53YXRjaCA9ICEhcHJvcHMuc2hvdWxkVW5yZWdpc3RlcjtcbiAgICAgICAgX3N1YmplY3RzLnN0YXRlLm5leHQoe1xuICAgICAgICAgICAgc3VibWl0Q291bnQ6IGtlZXBTdGF0ZU9wdGlvbnMua2VlcFN1Ym1pdENvdW50XG4gICAgICAgICAgICAgICAgPyBfZm9ybVN0YXRlLnN1Ym1pdENvdW50XG4gICAgICAgICAgICAgICAgOiAwLFxuICAgICAgICAgICAgaXNEaXJ0eToga2VlcFN0YXRlT3B0aW9ucy5rZWVwRGlydHlcbiAgICAgICAgICAgICAgICA/IF9mb3JtU3RhdGUuaXNEaXJ0eVxuICAgICAgICAgICAgICAgIDogISEoa2VlcFN0YXRlT3B0aW9ucy5rZWVwRGVmYXVsdFZhbHVlcyAmJlxuICAgICAgICAgICAgICAgICAgICAhZGVlcEVxdWFsKGZvcm1WYWx1ZXMsIF9kZWZhdWx0VmFsdWVzKSksXG4gICAgICAgICAgICBpc1N1Ym1pdHRlZDoga2VlcFN0YXRlT3B0aW9ucy5rZWVwSXNTdWJtaXR0ZWRcbiAgICAgICAgICAgICAgICA/IF9mb3JtU3RhdGUuaXNTdWJtaXR0ZWRcbiAgICAgICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgZGlydHlGaWVsZHM6IGtlZXBTdGF0ZU9wdGlvbnMua2VlcERpcnR5VmFsdWVzXG4gICAgICAgICAgICAgICAgPyBrZWVwU3RhdGVPcHRpb25zLmtlZXBEZWZhdWx0VmFsdWVzICYmIF9mb3JtVmFsdWVzXG4gICAgICAgICAgICAgICAgICAgID8gZ2V0RGlydHlGaWVsZHMoX2RlZmF1bHRWYWx1ZXMsIF9mb3JtVmFsdWVzKVxuICAgICAgICAgICAgICAgICAgICA6IF9mb3JtU3RhdGUuZGlydHlGaWVsZHNcbiAgICAgICAgICAgICAgICA6IGtlZXBTdGF0ZU9wdGlvbnMua2VlcERlZmF1bHRWYWx1ZXMgJiYgZm9ybVZhbHVlc1xuICAgICAgICAgICAgICAgICAgICA/IGdldERpcnR5RmllbGRzKF9kZWZhdWx0VmFsdWVzLCBmb3JtVmFsdWVzKVxuICAgICAgICAgICAgICAgICAgICA6IHt9LFxuICAgICAgICAgICAgdG91Y2hlZEZpZWxkczoga2VlcFN0YXRlT3B0aW9ucy5rZWVwVG91Y2hlZFxuICAgICAgICAgICAgICAgID8gX2Zvcm1TdGF0ZS50b3VjaGVkRmllbGRzXG4gICAgICAgICAgICAgICAgOiB7fSxcbiAgICAgICAgICAgIGVycm9yczoga2VlcFN0YXRlT3B0aW9ucy5rZWVwRXJyb3JzID8gX2Zvcm1TdGF0ZS5lcnJvcnMgOiB7fSxcbiAgICAgICAgICAgIGlzU3VibWl0U3VjY2Vzc2Z1bDoga2VlcFN0YXRlT3B0aW9ucy5rZWVwSXNTdWJtaXRTdWNjZXNzZnVsXG4gICAgICAgICAgICAgICAgPyBfZm9ybVN0YXRlLmlzU3VibWl0U3VjY2Vzc2Z1bFxuICAgICAgICAgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICBpc1N1Ym1pdHRpbmc6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHJlc2V0ID0gKGZvcm1WYWx1ZXMsIGtlZXBTdGF0ZU9wdGlvbnMpID0+IF9yZXNldChpc0Z1bmN0aW9uKGZvcm1WYWx1ZXMpXG4gICAgICAgID8gZm9ybVZhbHVlcyhfZm9ybVZhbHVlcylcbiAgICAgICAgOiBmb3JtVmFsdWVzLCBrZWVwU3RhdGVPcHRpb25zKTtcbiAgICBjb25zdCBzZXRGb2N1cyA9IChuYW1lLCBvcHRpb25zID0ge30pID0+IHtcbiAgICAgICAgY29uc3QgZmllbGQgPSBnZXQoX2ZpZWxkcywgbmFtZSk7XG4gICAgICAgIGNvbnN0IGZpZWxkUmVmZXJlbmNlID0gZmllbGQgJiYgZmllbGQuX2Y7XG4gICAgICAgIGlmIChmaWVsZFJlZmVyZW5jZSkge1xuICAgICAgICAgICAgY29uc3QgZmllbGRSZWYgPSBmaWVsZFJlZmVyZW5jZS5yZWZzXG4gICAgICAgICAgICAgICAgPyBmaWVsZFJlZmVyZW5jZS5yZWZzWzBdXG4gICAgICAgICAgICAgICAgOiBmaWVsZFJlZmVyZW5jZS5yZWY7XG4gICAgICAgICAgICBpZiAoZmllbGRSZWYuZm9jdXMpIHtcbiAgICAgICAgICAgICAgICBmaWVsZFJlZi5mb2N1cygpO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuc2hvdWxkU2VsZWN0ICYmIGZpZWxkUmVmLnNlbGVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBfdXBkYXRlRm9ybVN0YXRlID0gKHVwZGF0ZWRGb3JtU3RhdGUpID0+IHtcbiAgICAgICAgX2Zvcm1TdGF0ZSA9IHtcbiAgICAgICAgICAgIC4uLl9mb3JtU3RhdGUsXG4gICAgICAgICAgICAuLi51cGRhdGVkRm9ybVN0YXRlLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgX3Jlc2V0RGVmYXVsdFZhbHVlcyA9ICgpID0+IGlzRnVuY3Rpb24oX29wdGlvbnMuZGVmYXVsdFZhbHVlcykgJiZcbiAgICAgICAgX29wdGlvbnMuZGVmYXVsdFZhbHVlcygpLnRoZW4oKHZhbHVlcykgPT4ge1xuICAgICAgICAgICAgcmVzZXQodmFsdWVzLCBfb3B0aW9ucy5yZXNldE9wdGlvbnMpO1xuICAgICAgICAgICAgX3N1YmplY3RzLnN0YXRlLm5leHQoe1xuICAgICAgICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29udHJvbDoge1xuICAgICAgICAgICAgcmVnaXN0ZXIsXG4gICAgICAgICAgICB1bnJlZ2lzdGVyLFxuICAgICAgICAgICAgZ2V0RmllbGRTdGF0ZSxcbiAgICAgICAgICAgIGhhbmRsZVN1Ym1pdCxcbiAgICAgICAgICAgIHNldEVycm9yLFxuICAgICAgICAgICAgX2V4ZWN1dGVTY2hlbWEsXG4gICAgICAgICAgICBfZ2V0V2F0Y2gsXG4gICAgICAgICAgICBfZ2V0RGlydHksXG4gICAgICAgICAgICBfdXBkYXRlVmFsaWQsXG4gICAgICAgICAgICBfcmVtb3ZlVW5tb3VudGVkLFxuICAgICAgICAgICAgX3VwZGF0ZUZpZWxkQXJyYXksXG4gICAgICAgICAgICBfdXBkYXRlRGlzYWJsZWRGaWVsZCxcbiAgICAgICAgICAgIF9nZXRGaWVsZEFycmF5LFxuICAgICAgICAgICAgX3Jlc2V0LFxuICAgICAgICAgICAgX3Jlc2V0RGVmYXVsdFZhbHVlcyxcbiAgICAgICAgICAgIF91cGRhdGVGb3JtU3RhdGUsXG4gICAgICAgICAgICBfZGlzYWJsZUZvcm0sXG4gICAgICAgICAgICBfc3ViamVjdHMsXG4gICAgICAgICAgICBfcHJveHlGb3JtU3RhdGUsXG4gICAgICAgICAgICBfc2V0RXJyb3JzLFxuICAgICAgICAgICAgZ2V0IF9maWVsZHMoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9maWVsZHM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IF9mb3JtVmFsdWVzKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfZm9ybVZhbHVlcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgX3N0YXRlKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfc3RhdGU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0IF9zdGF0ZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIF9zdGF0ZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldCBfZGVmYXVsdFZhbHVlcygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2RlZmF1bHRWYWx1ZXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0IF9uYW1lcygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX25hbWVzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldCBfbmFtZXModmFsdWUpIHtcbiAgICAgICAgICAgICAgICBfbmFtZXMgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgX2Zvcm1TdGF0ZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2Zvcm1TdGF0ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQgX2Zvcm1TdGF0ZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIF9mb3JtU3RhdGUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgX29wdGlvbnMoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9vcHRpb25zO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldCBfb3B0aW9ucyh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIF9vcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5fb3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgLi4udmFsdWUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHRyaWdnZXIsXG4gICAgICAgIHJlZ2lzdGVyLFxuICAgICAgICBoYW5kbGVTdWJtaXQsXG4gICAgICAgIHdhdGNoLFxuICAgICAgICBzZXRWYWx1ZSxcbiAgICAgICAgZ2V0VmFsdWVzLFxuICAgICAgICByZXNldCxcbiAgICAgICAgcmVzZXRGaWVsZCxcbiAgICAgICAgY2xlYXJFcnJvcnMsXG4gICAgICAgIHVucmVnaXN0ZXIsXG4gICAgICAgIHNldEVycm9yLFxuICAgICAgICBzZXRGb2N1cyxcbiAgICAgICAgZ2V0RmllbGRTdGF0ZSxcbiAgICB9O1xufVxuXG4vKipcbiAqIEN1c3RvbSBob29rIHRvIG1hbmFnZSB0aGUgZW50aXJlIGZvcm0uXG4gKlxuICogQHJlbWFya3NcbiAqIFtBUEldKGh0dHBzOi8vcmVhY3QtaG9vay1mb3JtLmNvbS9kb2NzL3VzZWZvcm0pIOKAoiBbRGVtb10oaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL3JlYWN0LWhvb2stZm9ybS1nZXQtc3RhcnRlZC10cy01a3NtbSkg4oCiIFtWaWRlb10oaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1Sa1h2NEFYWENfNClcbiAqXG4gKiBAcGFyYW0gcHJvcHMgLSBmb3JtIGNvbmZpZ3VyYXRpb24gYW5kIHZhbGlkYXRpb24gcGFyYW1ldGVycy5cbiAqXG4gKiBAcmV0dXJucyBtZXRob2RzIC0gaW5kaXZpZHVhbCBmdW5jdGlvbnMgdG8gbWFuYWdlIHRoZSBmb3JtIHN0YXRlLiB7QGxpbmsgVXNlRm9ybVJldHVybn1cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHN4XG4gKiBmdW5jdGlvbiBBcHAoKSB7XG4gKiAgIGNvbnN0IHsgcmVnaXN0ZXIsIGhhbmRsZVN1Ym1pdCwgd2F0Y2gsIGZvcm1TdGF0ZTogeyBlcnJvcnMgfSB9ID0gdXNlRm9ybSgpO1xuICogICBjb25zdCBvblN1Ym1pdCA9IGRhdGEgPT4gY29uc29sZS5sb2coZGF0YSk7XG4gKlxuICogICBjb25zb2xlLmxvZyh3YXRjaChcImV4YW1wbGVcIikpO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8Zm9ybSBvblN1Ym1pdD17aGFuZGxlU3VibWl0KG9uU3VibWl0KX0+XG4gKiAgICAgICA8aW5wdXQgZGVmYXVsdFZhbHVlPVwidGVzdFwiIHsuLi5yZWdpc3RlcihcImV4YW1wbGVcIil9IC8+XG4gKiAgICAgICA8aW5wdXQgey4uLnJlZ2lzdGVyKFwiZXhhbXBsZVJlcXVpcmVkXCIsIHsgcmVxdWlyZWQ6IHRydWUgfSl9IC8+XG4gKiAgICAgICB7ZXJyb3JzLmV4YW1wbGVSZXF1aXJlZCAmJiA8c3Bhbj5UaGlzIGZpZWxkIGlzIHJlcXVpcmVkPC9zcGFuPn1cbiAqICAgICAgIDxidXR0b24+U3VibWl0PC9idXR0b24+XG4gKiAgICAgPC9mb3JtPlxuICogICApO1xuICogfVxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIHVzZUZvcm0ocHJvcHMgPSB7fSkge1xuICAgIGNvbnN0IF9mb3JtQ29udHJvbCA9IFJlYWN0LnVzZVJlZigpO1xuICAgIGNvbnN0IF92YWx1ZXMgPSBSZWFjdC51c2VSZWYoKTtcbiAgICBjb25zdCBbZm9ybVN0YXRlLCB1cGRhdGVGb3JtU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgICAgICBpc0RpcnR5OiBmYWxzZSxcbiAgICAgICAgaXNWYWxpZGF0aW5nOiBmYWxzZSxcbiAgICAgICAgaXNMb2FkaW5nOiBpc0Z1bmN0aW9uKHByb3BzLmRlZmF1bHRWYWx1ZXMpLFxuICAgICAgICBpc1N1Ym1pdHRlZDogZmFsc2UsXG4gICAgICAgIGlzU3VibWl0dGluZzogZmFsc2UsXG4gICAgICAgIGlzU3VibWl0U3VjY2Vzc2Z1bDogZmFsc2UsXG4gICAgICAgIGlzVmFsaWQ6IGZhbHNlLFxuICAgICAgICBzdWJtaXRDb3VudDogMCxcbiAgICAgICAgZGlydHlGaWVsZHM6IHt9LFxuICAgICAgICB0b3VjaGVkRmllbGRzOiB7fSxcbiAgICAgICAgZXJyb3JzOiBwcm9wcy5lcnJvcnMgfHwge30sXG4gICAgICAgIGRpc2FibGVkOiBwcm9wcy5kaXNhYmxlZCB8fCBmYWxzZSxcbiAgICAgICAgZGVmYXVsdFZhbHVlczogaXNGdW5jdGlvbihwcm9wcy5kZWZhdWx0VmFsdWVzKVxuICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgIDogcHJvcHMuZGVmYXVsdFZhbHVlcyxcbiAgICB9KTtcbiAgICBpZiAoIV9mb3JtQ29udHJvbC5jdXJyZW50KSB7XG4gICAgICAgIF9mb3JtQ29udHJvbC5jdXJyZW50ID0ge1xuICAgICAgICAgICAgLi4uY3JlYXRlRm9ybUNvbnRyb2wocHJvcHMsICgpID0+IHVwZGF0ZUZvcm1TdGF0ZSgoZm9ybVN0YXRlKSA9PiAoeyAuLi5mb3JtU3RhdGUgfSkpKSxcbiAgICAgICAgICAgIGZvcm1TdGF0ZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgY29udHJvbCA9IF9mb3JtQ29udHJvbC5jdXJyZW50LmNvbnRyb2w7XG4gICAgY29udHJvbC5fb3B0aW9ucyA9IHByb3BzO1xuICAgIHVzZVN1YnNjcmliZSh7XG4gICAgICAgIHN1YmplY3Q6IGNvbnRyb2wuX3N1YmplY3RzLnN0YXRlLFxuICAgICAgICBuZXh0OiAodmFsdWUpID0+IHtcbiAgICAgICAgICAgIGlmIChzaG91bGRSZW5kZXJGb3JtU3RhdGUodmFsdWUsIGNvbnRyb2wuX3Byb3h5Rm9ybVN0YXRlLCBjb250cm9sLl91cGRhdGVGb3JtU3RhdGUsIHRydWUpKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlRm9ybVN0YXRlKHsgLi4uY29udHJvbC5fZm9ybVN0YXRlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiBjb250cm9sLl9kaXNhYmxlRm9ybShwcm9wcy5kaXNhYmxlZCksIFtjb250cm9sLCBwcm9wcy5kaXNhYmxlZF0pO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChjb250cm9sLl9wcm94eUZvcm1TdGF0ZS5pc0RpcnR5KSB7XG4gICAgICAgICAgICBjb25zdCBpc0RpcnR5ID0gY29udHJvbC5fZ2V0RGlydHkoKTtcbiAgICAgICAgICAgIGlmIChpc0RpcnR5ICE9PSBmb3JtU3RhdGUuaXNEaXJ0eSkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2wuX3N1YmplY3RzLnN0YXRlLm5leHQoe1xuICAgICAgICAgICAgICAgICAgICBpc0RpcnR5LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgW2NvbnRyb2wsIGZvcm1TdGF0ZS5pc0RpcnR5XSk7XG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKHByb3BzLnZhbHVlcyAmJiAhZGVlcEVxdWFsKHByb3BzLnZhbHVlcywgX3ZhbHVlcy5jdXJyZW50KSkge1xuICAgICAgICAgICAgY29udHJvbC5fcmVzZXQocHJvcHMudmFsdWVzLCBjb250cm9sLl9vcHRpb25zLnJlc2V0T3B0aW9ucyk7XG4gICAgICAgICAgICBfdmFsdWVzLmN1cnJlbnQgPSBwcm9wcy52YWx1ZXM7XG4gICAgICAgICAgICB1cGRhdGVGb3JtU3RhdGUoKHN0YXRlKSA9PiAoeyAuLi5zdGF0ZSB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb250cm9sLl9yZXNldERlZmF1bHRWYWx1ZXMoKTtcbiAgICAgICAgfVxuICAgIH0sIFtwcm9wcy52YWx1ZXMsIGNvbnRyb2xdKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAocHJvcHMuZXJyb3JzKSB7XG4gICAgICAgICAgICBjb250cm9sLl9zZXRFcnJvcnMocHJvcHMuZXJyb3JzKTtcbiAgICAgICAgfVxuICAgIH0sIFtwcm9wcy5lcnJvcnMsIGNvbnRyb2xdKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWNvbnRyb2wuX3N0YXRlLm1vdW50KSB7XG4gICAgICAgICAgICBjb250cm9sLl91cGRhdGVWYWxpZCgpO1xuICAgICAgICAgICAgY29udHJvbC5fc3RhdGUubW91bnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250cm9sLl9zdGF0ZS53YXRjaCkge1xuICAgICAgICAgICAgY29udHJvbC5fc3RhdGUud2F0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnRyb2wuX3N1YmplY3RzLnN0YXRlLm5leHQoeyAuLi5jb250cm9sLl9mb3JtU3RhdGUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29udHJvbC5fcmVtb3ZlVW5tb3VudGVkKCk7XG4gICAgfSk7XG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgcHJvcHMuc2hvdWxkVW5yZWdpc3RlciAmJlxuICAgICAgICAgICAgY29udHJvbC5fc3ViamVjdHMudmFsdWVzLm5leHQoe1xuICAgICAgICAgICAgICAgIHZhbHVlczogY29udHJvbC5fZ2V0V2F0Y2goKSxcbiAgICAgICAgICAgIH0pO1xuICAgIH0sIFtwcm9wcy5zaG91bGRVbnJlZ2lzdGVyLCBjb250cm9sXSk7XG4gICAgX2Zvcm1Db250cm9sLmN1cnJlbnQuZm9ybVN0YXRlID0gZ2V0UHJveHlGb3JtU3RhdGUoZm9ybVN0YXRlLCBjb250cm9sKTtcbiAgICByZXR1cm4gX2Zvcm1Db250cm9sLmN1cnJlbnQ7XG59XG5cbmV4cG9ydCB7IENvbnRyb2xsZXIsIEZvcm0sIEZvcm1Qcm92aWRlciwgYXBwZW5kRXJyb3JzLCBnZXQsIHNldCwgdXNlQ29udHJvbGxlciwgdXNlRmllbGRBcnJheSwgdXNlRm9ybSwgdXNlRm9ybUNvbnRleHQsIHVzZUZvcm1TdGF0ZSwgdXNlV2F0Y2ggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbS5tanMubWFwXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY29udGFjdEZvcm0ubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY29udGFjdEZvcm0ubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5pbXBvcnQgeyB1c2VGb3JtIH0gZnJvbSAncmVhY3QtaG9vay1mb3JtJ1xuaW1wb3J0IHN0eWxlIGZyb20gJy4uL3N0eWxlL2NvbnRhY3RGb3JtLm1vZHVsZS5jc3MnXG5cbmV4cG9ydCBmdW5jdGlvbiBDb250YWN0Rm9ybSgpIHtcblx0Y29uc3QgeyByZWdpc3RlciwgaGFuZGxlU3VibWl0LCBmb3JtU3RhdGU6IHsgZXJyb3JzIH0gfSA9IHVzZUZvcm0oKVxuXHRjb25zdCBbc3VibWl0U3VjY2Vzcywgc2V0U3VibWl0U3VjY2Vzc10gPSB1c2VTdGF0ZShmYWxzZSlcblx0Y29uc3QgW2ZpcnN0TmFtZSwgc2V0Rmlyc3ROYW1lXSA9IHVzZVN0YXRlKCcnKVxuXHRjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpXG5cdGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGUoKVxuXG5cdGNvbnN0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKVxuXHRjb25zdCBiYXNlVVJMID0gJy9hcGkvdjEvY29udGFjdF9mb3JtL25ldydcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuXHRcdGlmIChzdWJtaXRTdWNjZXNzKSB7XG5cdFx0XHRuYXZpZ2F0ZSgnL2NvbnRhY3Qvc3VibWl0Jywge1xuXHRcdFx0XHRzdGF0ZToge1xuXHRcdFx0XHRcdGZpcnN0TmFtZTogZmlyc3ROYW1lLFxuXHRcdFx0XHRcdHN1Ym1pdFN1Y2Nlc3M6IHN1Ym1pdFN1Y2Nlc3MsXG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0fVxuICB9LFtzdWJtaXRTdWNjZXNzXSlcblxuICBjb25zdCBvblN1Ym1pdCA9IChkYXRhPXt9KSA9PiB7XG5cdFx0ZmV0Y2goYmFzZVVSTCwge1xuXHRcdFx0bWV0aG9kOiBcIlBPU1RcIixcblx0ICAgIGhlYWRlcnM6IHtcblx0ICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG5cdCAgICB9LFxuXHRcdFx0Ym9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG5cdFx0fSlcblx0XHQudGhlbihyZXMgPT4ge1xuXHRcdFx0aWYgKCFyZXMub2spIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdOZXR3b3JrIHJlc3BvbnNlIHdhcyBub3Qgb2snKVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlcy5qc29uKClcblx0XHR9IClcblx0XHQudGhlbihyZXMgPT4ge1xuXHRcdFx0c2V0Rmlyc3ROYW1lKCgpID0+IHJlcy5maXJzdE5hbWUpXG5cdFx0XHRzZXRTdWJtaXRTdWNjZXNzKCgpID0+IHRydWUpXG5cdFx0XHRzZXRJc0xvYWRpbmcoKCkgPT4gZmFsc2UpXG5cdFx0fSlcblx0XHQuY2F0Y2goZXJyb3IgPT4ge1xuXHRcdFx0c2V0U3VibWl0U3VjY2VzcygoKSA9PiBmYWxzZSlcblx0XHQgIHNldEVycm9yKCgpID0+IGVycm9yKVxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGVycm9yKVxuXHRcdH0pXG4gIH1cblxuICBpZiAoaXNMb2FkaW5nKSB7XG4gIFx0cmV0dXJuIChcbiAgXHRcdDxkaXY+TG9hZGluZy4uLjwvZGl2PlxuICBcdClcbiAgfVxuXG4gIGlmIChlcnJvcikge1xuICBcdHJldHVybiAoXG4gIFx0XHQ8ZGl2PlNvbWV0aGluZyB3ZW50IHdyb25nOiB7ZXJyfTwvZGl2PlxuICBcdClcbiAgfVxuICBcbiAgcmV0dXJuIChcbiAgICA8Zm9ybSBjbGFzc05hbWU9e3N0eWxlLmZvcm1Db250YWluZXJ9IG9uU3VibWl0PXtoYW5kbGVTdWJtaXQob25TdWJtaXQpfT5cblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtzdHlsZS5pbnB1dENvbnRhaW5lcn0+XG5cdFx0XHRcdDxpbnB1dCB2YWx1ZT0nQm9yaycgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIkZpcnN0IE5hbWUgKHJlcXVpcmVkKVwiIHsuLi5yZWdpc3RlcihcImZpcnN0TmFtZVwiLCB7cmVxdWlyZWQ6IHRydWUsIG1heExlbmd0aDogODB9KX0gLz5cblx0XHRcdFx0PGlucHV0IHZhbHVlPSdEb3JrJyB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiTGFzdCBOYW1lIChyZXF1aXJlZClcIiB7Li4ucmVnaXN0ZXIoXCJsYXN0TmFtZVwiLCB7cmVxdWlyZWQ6IHRydWUsIG1heExlbmd0aDogMTAwfSl9IC8+XG5cdFx0XHRcdDxpbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiRW1haWwgKHJlcXVpcmVkKVwiIHsuLi5yZWdpc3RlcihcImVtYWlsXCIsIHtyZXF1aXJlZDogdHJ1ZSwgcGF0dGVybjogL15cXFMrQFxcUyskL2l9KX0gLz5cblx0XHRcdFx0PGlucHV0IHR5cGU9XCJ0ZWxcIiBwbGFjZWhvbGRlcj1cIlBob25lIChvcHRpb25hbClcIiB7Li4ucmVnaXN0ZXIoXCJtb2JpbGVOdW1iZXJcIiwge3JlcXVpcmVkOiBmYWxzZSwgbWluTGVuZ3RoOiA2LCBtYXhMZW5ndGg6IDEyfSl9IC8+XG5cdFx0XHRcdDx0ZXh0YXJlYSB2YWx1ZT0nUGxlYXNlIGFsbG93IGZvciBhIG1pc3BsYWNlZCBob3Rkb2cgaGVyZSBhbmQgdGhlcmUnIHBsYWNlaG9sZGVyPVwiTWVzc2FnZSAocmVxdWlyZWQpXCIgey4uLnJlZ2lzdGVyKFwibWVzc2FnZVwiLCB7cmVxdWlyZWQ6IHRydWUsIG1heDogMjUwLCBtaW46IDV9KX0gLz5cblx0XHRcdFx0PGlucHV0IHR5cGU9XCJzdWJtaXRcIiAvPlxuXHRcdFx0PC9kaXY+XG4gICAgPC9mb3JtPlxuICApXG59IiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IFJvdXRlcywgUm91dGUsIHVzZU5hdmlnYXRlLCB1c2VMb2NhdGlvbiwgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5pbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZS9pbmRleC5tb2R1bGUuY3NzJ1xuaW1wb3J0IHsgQ29udGFjdEZvcm0gfSBmcm9tICcuL2NvbXBvbmVudHMvY29udGFjdEZvcm0nXG5pbXBvcnQgeyBOYXZCdG4gfSBmcm9tICcuLi9jb21wb25lbnRzL05hdkJ0bidcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29udGFjdCgpIHtcblx0Y29uc3QgW2ZpcnN0TmFtZSwgc2V0Rmlyc3ROYW1lXSA9IHVzZVN0YXRlKCcnKVxuICBjb25zdCBbY291bnQsIHNldENvdW50XSA9IHVzZVN0YXRlKDUpXG4gIGNvbnN0IFtzdWJtaXRTdWNjZXNzLCBzZXRTdWJtaXRTdWNjZXNzXSA9IHVzZVN0YXRlKGZhbHNlKVxuXHRcblx0Y29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpXG5cdGNvbnN0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKVxuXHRjb25zdCBhYm91dE1lVGV4dCA9IGBJJ20gYSBzb2Z0d2FyZSBlbmdpbmVlciB3aXRoIGEgcGFzc2lvbiBmb3IgY3JlYXRpbmcgYW5kIGJ1aWxkaW5nIHRoaW5ncy4gSSdtIGEgZnVsbCBzdGFjayBkZXZlbG9wZXIgd2l0aCBhIGZvY3VzIG9uIGZyb250IGVuZCB0ZWNobm9sb2dpZXMuIEknbSBhIGJpZyBmYW4gb2YgUmVhY3QgYW5kIEknbSBhbHdheXMgbG9va2luZyBmb3IgbmV3IHdheXMgdG8gaW1wcm92ZSBteSBza2lsbHMuIEknbSBhbHNvIGEgYmlnIGZhbiBvZiB0aGUgb3V0ZG9vcnMgYW5kIEkgbG92ZSB0byB0cmF2ZWwuYFxuXHRcblx0dXNlRWZmZWN0KCgpID0+IHtcblx0XHRpZiAobG9jYXRpb24uc3RhdGU/LnN1Ym1pdFN1Y2Nlc3MpIHtcblx0XHRcdHNldEZpcnN0TmFtZShsb2NhdGlvbi5zdGF0ZS5maXJzdE5hbWUpXG5cdFx0XHRzZXRTdWJtaXRTdWNjZXNzKGxvY2F0aW9uLnN0YXRlLnN1Ym1pdFN1Y2Nlc3MpXG5cdFx0fVxuXHRcdGlmIChzdWJtaXRTdWNjZXNzKSB7XG5cdFx0XHRjb25zdCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdFx0c2V0Q291bnQoY291bnQgPT4gY291bnQgLSAxKVxuXHRcdFx0fSwgMTAwMClcblx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRjbGVhckludGVydmFsKHRpbWVyKVxuXHRcdFx0XHRuYXZpZ2F0ZSgnLycpXG5cdFx0XHR9LCA1OTAwKVxuXHRcdH1cblx0fSwgW2xvY2F0aW9uLCBzdWJtaXRTdWNjZXNzXSlcblxuXHRjb25zdCBoYW5kbGVDbGljayA9ICgpID0+IHtcblx0XHRpZiAoc3VibWl0U3VjY2Vzcykge1xuXHRcdFx0bmF2aWdhdGUoJy8nKVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRuYXZpZ2F0ZSgtMSlcblx0XHR9XG5cdH1cblxuXHRjb25zdCBhYm91dE1lRWxlbWVudCA9IChcblx0XHQ8ZGl2IGNsYXNzTmFtZT17c3R5bGUuY29udGFjdEhlYWRlcn0+XG5cdFx0XHQ8cD57YWJvdXRNZVRleHR9PC9wPlxuXHRcdFx0PHA+LUdpdEh1YiBDby1QaWxvdDwvcD5cblx0XHQ8L2Rpdj5cblx0KVxuXG5cdGNvbnN0IG5hdkJ0biA9IE5hdkJ0bignSG9tZScsIGhhbmRsZUNsaWNrKVxuXG5cdGNvbnN0IHN1Ym1pdFN1Y2Nlc3NFbGVtZW50ID0gKFxuXHRcdDxkaXYgY2xhc3NOYW1lPXtzdHlsZS5mb3JtU3VibWl0dGVkQ29udGFpbmVyfT5cblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtzdHlsZS5mb3JtU3VibWl0dGVkSGVhZGVyfT5cblx0XHRcdFx0PHA+SGV5LCB7Zmlyc3ROYW1lfSE8L3A+XG5cdFx0XHRcdDxwPlRoYW5rcyBmb3IgY2hlY2tpbmcgaW4hPC9wPlxuXHRcdFx0XHQ8cD5Zb3VyIG1lc3NhZ2UgaGFzIGJlZW4gcmVjZWl2ZWQgYW5kIEknbGwgYmUgc3VyZSB0byBnZXQgYmFjayB0byB5b3UgYXMgc29vbiBhcyBJIGNhbi48L3A+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtzdHlsZS5ob21lUGFnZVJlZGlyZWN0fT5cblx0XHRcdFx0PHA+WW91IHdpbGwgYmUgcmVkaXJlY3RlZCB0byB0aGUgSG9tZSBwYWdlIGluOiA8c3Bhbj57Y291bnR9PC9zcGFuPjwvcD5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXHQpXG5cblx0cmV0dXJuIChcblx0XHQ8ZGl2IGNsYXNzTmFtZT17c3R5bGUuY29udGFjdFdyYXBwZXJ9PlxuXHRcdFx0e25hdkJ0bn1cblx0XHRcdHtcblx0XHRcdFx0c3VibWl0U3VjY2VzcyA/IHN1Ym1pdFN1Y2Nlc3NFbGVtZW50IDogKFxuXHRcdFx0XHRcdDxMaW5rXG5cdFx0XHRcdFx0XHRjbGFzc05hbWU9e3N0eWxlLmNvbnRhY3RGb3JtTGlua31cblx0XHRcdFx0XHRcdHRvPScvY29udGFjdC9jb250YWN0X2Zvcm0nID5NZXNzYWdlIE1lPC9MaW5rPlxuXHRcdFx0XHQpXG5cdFx0XHR9XG5cblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtzdHlsZS5jaGlsZFJvdXRlc30+XG5cdFx0XHRcdDxSb3V0ZXM+XG5cdFx0XHRcdFx0PFJvdXRlIGluZGV4IGVsZW1lbnQ9eyBhYm91dE1lRWxlbWVudCB9Lz5cblx0XHRcdFx0XHQ8Um91dGUgcGF0aD0nY29udGFjdF9mb3JtJyBlbGVtZW50PXsgPENvbnRhY3RGb3JtIC8+IH0vPlxuXHRcdFx0XHRcdDxSb3V0ZSBwYXRoPSdjb250YWN0L3N1Ym1pdCcgZWxlbWVudD17IHN1Ym1pdFN1Y2Nlc3NFbGVtZW50IH0vPlxuXHRcdFx0XHQ8L1JvdXRlcz5cblx0XHRcdDwvZGl2PlxuXG5cdFx0PC9kaXY+XG5cdClcbn0iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXgubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXgubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImZ1bmN0aW9uIGdldFVzZXJBZ2VudCgpIHtcbiAgICBpZiAodHlwZW9mIG5hdmlnYXRvciA9PT0gXCJvYmplY3RcIiAmJiBcInVzZXJBZ2VudFwiIGluIG5hdmlnYXRvcikge1xuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSBcIm9iamVjdFwiICYmIHByb2Nlc3MudmVyc2lvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBgTm9kZS5qcy8ke3Byb2Nlc3MudmVyc2lvbi5zdWJzdHIoMSl9ICgke3Byb2Nlc3MucGxhdGZvcm19OyAke3Byb2Nlc3MuYXJjaH0pYDtcbiAgICB9XG4gICAgcmV0dXJuIFwiPGVudmlyb25tZW50IHVuZGV0ZWN0YWJsZT5cIjtcbn1cblxuZXhwb3J0IHsgZ2V0VXNlckFnZW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIi8vIHBrZy9kaXN0LXNyYy9kZWZhdWx0cy5qc1xuaW1wb3J0IHsgZ2V0VXNlckFnZW50IH0gZnJvbSBcInVuaXZlcnNhbC11c2VyLWFnZW50XCI7XG5cbi8vIHBrZy9kaXN0LXNyYy92ZXJzaW9uLmpzXG52YXIgVkVSU0lPTiA9IFwiOS4wLjRcIjtcblxuLy8gcGtnL2Rpc3Qtc3JjL2RlZmF1bHRzLmpzXG52YXIgdXNlckFnZW50ID0gYG9jdG9raXQtZW5kcG9pbnQuanMvJHtWRVJTSU9OfSAke2dldFVzZXJBZ2VudCgpfWA7XG52YXIgREVGQVVMVFMgPSB7XG4gIG1ldGhvZDogXCJHRVRcIixcbiAgYmFzZVVybDogXCJodHRwczovL2FwaS5naXRodWIuY29tXCIsXG4gIGhlYWRlcnM6IHtcbiAgICBhY2NlcHQ6IFwiYXBwbGljYXRpb24vdm5kLmdpdGh1Yi52Mytqc29uXCIsXG4gICAgXCJ1c2VyLWFnZW50XCI6IHVzZXJBZ2VudFxuICB9LFxuICBtZWRpYVR5cGU6IHtcbiAgICBmb3JtYXQ6IFwiXCJcbiAgfVxufTtcblxuLy8gcGtnL2Rpc3Qtc3JjL3V0aWwvbG93ZXJjYXNlLWtleXMuanNcbmZ1bmN0aW9uIGxvd2VyY2FzZUtleXMob2JqZWN0KSB7XG4gIGlmICghb2JqZWN0KSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmplY3QpLnJlZHVjZSgobmV3T2JqLCBrZXkpID0+IHtcbiAgICBuZXdPYmpba2V5LnRvTG93ZXJDYXNlKCldID0gb2JqZWN0W2tleV07XG4gICAgcmV0dXJuIG5ld09iajtcbiAgfSwge30pO1xufVxuXG4vLyBwa2cvZGlzdC1zcmMvdXRpbC9pcy1wbGFpbi1vYmplY3QuanNcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbClcbiAgICByZXR1cm4gZmFsc2U7XG4gIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICE9PSBcIltvYmplY3QgT2JqZWN0XVwiKVxuICAgIHJldHVybiBmYWxzZTtcbiAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpXG4gICAgcmV0dXJuIHRydWU7XG4gIGNvbnN0IEN0b3IgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvdG8sIFwiY29uc3RydWN0b3JcIikgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsKEN0b3IpID09PSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbCh2YWx1ZSk7XG59XG5cbi8vIHBrZy9kaXN0LXNyYy91dGlsL21lcmdlLWRlZXAuanNcbmZ1bmN0aW9uIG1lcmdlRGVlcChkZWZhdWx0cywgb3B0aW9ucykge1xuICBjb25zdCByZXN1bHQgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0cyk7XG4gIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KG9wdGlvbnNba2V5XSkpIHtcbiAgICAgIGlmICghKGtleSBpbiBkZWZhdWx0cykpXG4gICAgICAgIE9iamVjdC5hc3NpZ24ocmVzdWx0LCB7IFtrZXldOiBvcHRpb25zW2tleV0gfSk7XG4gICAgICBlbHNlXG4gICAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2VEZWVwKGRlZmF1bHRzW2tleV0sIG9wdGlvbnNba2V5XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9iamVjdC5hc3NpZ24ocmVzdWx0LCB7IFtrZXldOiBvcHRpb25zW2tleV0gfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gcGtnL2Rpc3Qtc3JjL3V0aWwvcmVtb3ZlLXVuZGVmaW5lZC1wcm9wZXJ0aWVzLmpzXG5mdW5jdGlvbiByZW1vdmVVbmRlZmluZWRQcm9wZXJ0aWVzKG9iaikge1xuICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICBpZiAob2JqW2tleV0gPT09IHZvaWQgMCkge1xuICAgICAgZGVsZXRlIG9ialtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vLyBwa2cvZGlzdC1zcmMvbWVyZ2UuanNcbmZ1bmN0aW9uIG1lcmdlKGRlZmF1bHRzLCByb3V0ZSwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIHJvdXRlID09PSBcInN0cmluZ1wiKSB7XG4gICAgbGV0IFttZXRob2QsIHVybF0gPSByb3V0ZS5zcGxpdChcIiBcIik7XG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24odXJsID8geyBtZXRob2QsIHVybCB9IDogeyB1cmw6IG1ldGhvZCB9LCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgcm91dGUpO1xuICB9XG4gIG9wdGlvbnMuaGVhZGVycyA9IGxvd2VyY2FzZUtleXMob3B0aW9ucy5oZWFkZXJzKTtcbiAgcmVtb3ZlVW5kZWZpbmVkUHJvcGVydGllcyhvcHRpb25zKTtcbiAgcmVtb3ZlVW5kZWZpbmVkUHJvcGVydGllcyhvcHRpb25zLmhlYWRlcnMpO1xuICBjb25zdCBtZXJnZWRPcHRpb25zID0gbWVyZ2VEZWVwKGRlZmF1bHRzIHx8IHt9LCBvcHRpb25zKTtcbiAgaWYgKG9wdGlvbnMudXJsID09PSBcIi9ncmFwaHFsXCIpIHtcbiAgICBpZiAoZGVmYXVsdHMgJiYgZGVmYXVsdHMubWVkaWFUeXBlLnByZXZpZXdzPy5sZW5ndGgpIHtcbiAgICAgIG1lcmdlZE9wdGlvbnMubWVkaWFUeXBlLnByZXZpZXdzID0gZGVmYXVsdHMubWVkaWFUeXBlLnByZXZpZXdzLmZpbHRlcihcbiAgICAgICAgKHByZXZpZXcpID0+ICFtZXJnZWRPcHRpb25zLm1lZGlhVHlwZS5wcmV2aWV3cy5pbmNsdWRlcyhwcmV2aWV3KVxuICAgICAgKS5jb25jYXQobWVyZ2VkT3B0aW9ucy5tZWRpYVR5cGUucHJldmlld3MpO1xuICAgIH1cbiAgICBtZXJnZWRPcHRpb25zLm1lZGlhVHlwZS5wcmV2aWV3cyA9IChtZXJnZWRPcHRpb25zLm1lZGlhVHlwZS5wcmV2aWV3cyB8fCBbXSkubWFwKChwcmV2aWV3KSA9PiBwcmV2aWV3LnJlcGxhY2UoLy1wcmV2aWV3LywgXCJcIikpO1xuICB9XG4gIHJldHVybiBtZXJnZWRPcHRpb25zO1xufVxuXG4vLyBwa2cvZGlzdC1zcmMvdXRpbC9hZGQtcXVlcnktcGFyYW1ldGVycy5qc1xuZnVuY3Rpb24gYWRkUXVlcnlQYXJhbWV0ZXJzKHVybCwgcGFyYW1ldGVycykge1xuICBjb25zdCBzZXBhcmF0b3IgPSAvXFw/Ly50ZXN0KHVybCkgPyBcIiZcIiA6IFwiP1wiO1xuICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKHBhcmFtZXRlcnMpO1xuICBpZiAobmFtZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICByZXR1cm4gdXJsICsgc2VwYXJhdG9yICsgbmFtZXMubWFwKChuYW1lKSA9PiB7XG4gICAgaWYgKG5hbWUgPT09IFwicVwiKSB7XG4gICAgICByZXR1cm4gXCJxPVwiICsgcGFyYW1ldGVycy5xLnNwbGl0KFwiK1wiKS5tYXAoZW5jb2RlVVJJQ29tcG9uZW50KS5qb2luKFwiK1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIGAke25hbWV9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtZXRlcnNbbmFtZV0pfWA7XG4gIH0pLmpvaW4oXCImXCIpO1xufVxuXG4vLyBwa2cvZGlzdC1zcmMvdXRpbC9leHRyYWN0LXVybC12YXJpYWJsZS1uYW1lcy5qc1xudmFyIHVybFZhcmlhYmxlUmVnZXggPSAvXFx7W159XStcXH0vZztcbmZ1bmN0aW9uIHJlbW92ZU5vbkNoYXJzKHZhcmlhYmxlTmFtZSkge1xuICByZXR1cm4gdmFyaWFibGVOYW1lLnJlcGxhY2UoL15cXFcrfFxcVyskL2csIFwiXCIpLnNwbGl0KC8sLyk7XG59XG5mdW5jdGlvbiBleHRyYWN0VXJsVmFyaWFibGVOYW1lcyh1cmwpIHtcbiAgY29uc3QgbWF0Y2hlcyA9IHVybC5tYXRjaCh1cmxWYXJpYWJsZVJlZ2V4KTtcbiAgaWYgKCFtYXRjaGVzKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHJldHVybiBtYXRjaGVzLm1hcChyZW1vdmVOb25DaGFycykucmVkdWNlKChhLCBiKSA9PiBhLmNvbmNhdChiKSwgW10pO1xufVxuXG4vLyBwa2cvZGlzdC1zcmMvdXRpbC9vbWl0LmpzXG5mdW5jdGlvbiBvbWl0KG9iamVjdCwga2V5c1RvT21pdCkge1xuICBjb25zdCByZXN1bHQgPSB7IF9fcHJvdG9fXzogbnVsbCB9O1xuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhvYmplY3QpKSB7XG4gICAgaWYgKGtleXNUb09taXQuaW5kZXhPZihrZXkpID09PSAtMSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBvYmplY3Rba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gcGtnL2Rpc3Qtc3JjL3V0aWwvdXJsLXRlbXBsYXRlLmpzXG5mdW5jdGlvbiBlbmNvZGVSZXNlcnZlZChzdHIpIHtcbiAgcmV0dXJuIHN0ci5zcGxpdCgvKCVbMC05QS1GYS1mXXsyfSkvZykubWFwKGZ1bmN0aW9uKHBhcnQpIHtcbiAgICBpZiAoIS8lWzAtOUEtRmEtZl0vLnRlc3QocGFydCkpIHtcbiAgICAgIHBhcnQgPSBlbmNvZGVVUkkocGFydCkucmVwbGFjZSgvJTVCL2csIFwiW1wiKS5yZXBsYWNlKC8lNUQvZywgXCJdXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcGFydDtcbiAgfSkuam9pbihcIlwiKTtcbn1cbmZ1bmN0aW9uIGVuY29kZVVucmVzZXJ2ZWQoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKC9bIScoKSpdL2csIGZ1bmN0aW9uKGMpIHtcbiAgICByZXR1cm4gXCIlXCIgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gZW5jb2RlVmFsdWUob3BlcmF0b3IsIHZhbHVlLCBrZXkpIHtcbiAgdmFsdWUgPSBvcGVyYXRvciA9PT0gXCIrXCIgfHwgb3BlcmF0b3IgPT09IFwiI1wiID8gZW5jb2RlUmVzZXJ2ZWQodmFsdWUpIDogZW5jb2RlVW5yZXNlcnZlZCh2YWx1ZSk7XG4gIGlmIChrZXkpIHtcbiAgICByZXR1cm4gZW5jb2RlVW5yZXNlcnZlZChrZXkpICsgXCI9XCIgKyB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzRGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IHZvaWQgMCAmJiB2YWx1ZSAhPT0gbnVsbDtcbn1cbmZ1bmN0aW9uIGlzS2V5T3BlcmF0b3Iob3BlcmF0b3IpIHtcbiAgcmV0dXJuIG9wZXJhdG9yID09PSBcIjtcIiB8fCBvcGVyYXRvciA9PT0gXCImXCIgfHwgb3BlcmF0b3IgPT09IFwiP1wiO1xufVxuZnVuY3Rpb24gZ2V0VmFsdWVzKGNvbnRleHQsIG9wZXJhdG9yLCBrZXksIG1vZGlmaWVyKSB7XG4gIHZhciB2YWx1ZSA9IGNvbnRleHRba2V5XSwgcmVzdWx0ID0gW107XG4gIGlmIChpc0RlZmluZWQodmFsdWUpICYmIHZhbHVlICE9PSBcIlwiKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgaWYgKG1vZGlmaWVyICYmIG1vZGlmaWVyICE9PSBcIipcIikge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygwLCBwYXJzZUludChtb2RpZmllciwgMTApKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICBlbmNvZGVWYWx1ZShvcGVyYXRvciwgdmFsdWUsIGlzS2V5T3BlcmF0b3Iob3BlcmF0b3IpID8ga2V5IDogXCJcIilcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChtb2RpZmllciA9PT0gXCIqXCIpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUuZmlsdGVyKGlzRGVmaW5lZCkuZm9yRWFjaChmdW5jdGlvbih2YWx1ZTIpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgICAgICBlbmNvZGVWYWx1ZShvcGVyYXRvciwgdmFsdWUyLCBpc0tleU9wZXJhdG9yKG9wZXJhdG9yKSA/IGtleSA6IFwiXCIpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcbiAgICAgICAgICAgIGlmIChpc0RlZmluZWQodmFsdWVba10pKSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVuY29kZVZhbHVlKG9wZXJhdG9yLCB2YWx1ZVtrXSwgaykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB0bXAgPSBbXTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUuZmlsdGVyKGlzRGVmaW5lZCkuZm9yRWFjaChmdW5jdGlvbih2YWx1ZTIpIHtcbiAgICAgICAgICAgIHRtcC5wdXNoKGVuY29kZVZhbHVlKG9wZXJhdG9yLCB2YWx1ZTIpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBPYmplY3Qua2V5cyh2YWx1ZSkuZm9yRWFjaChmdW5jdGlvbihrKSB7XG4gICAgICAgICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlW2tdKSkge1xuICAgICAgICAgICAgICB0bXAucHVzaChlbmNvZGVVbnJlc2VydmVkKGspKTtcbiAgICAgICAgICAgICAgdG1wLnB1c2goZW5jb2RlVmFsdWUob3BlcmF0b3IsIHZhbHVlW2tdLnRvU3RyaW5nKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNLZXlPcGVyYXRvcihvcGVyYXRvcikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChlbmNvZGVVbnJlc2VydmVkKGtleSkgKyBcIj1cIiArIHRtcC5qb2luKFwiLFwiKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodG1wLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHRtcC5qb2luKFwiLFwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKG9wZXJhdG9yID09PSBcIjtcIikge1xuICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goZW5jb2RlVW5yZXNlcnZlZChrZXkpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBcIlwiICYmIChvcGVyYXRvciA9PT0gXCImXCIgfHwgb3BlcmF0b3IgPT09IFwiP1wiKSkge1xuICAgICAgcmVzdWx0LnB1c2goZW5jb2RlVW5yZXNlcnZlZChrZXkpICsgXCI9XCIpO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IFwiXCIpIHtcbiAgICAgIHJlc3VsdC5wdXNoKFwiXCIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcGFyc2VVcmwodGVtcGxhdGUpIHtcbiAgcmV0dXJuIHtcbiAgICBleHBhbmQ6IGV4cGFuZC5iaW5kKG51bGwsIHRlbXBsYXRlKVxuICB9O1xufVxuZnVuY3Rpb24gZXhwYW5kKHRlbXBsYXRlLCBjb250ZXh0KSB7XG4gIHZhciBvcGVyYXRvcnMgPSBbXCIrXCIsIFwiI1wiLCBcIi5cIiwgXCIvXCIsIFwiO1wiLCBcIj9cIiwgXCImXCJdO1xuICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UoXG4gICAgL1xceyhbXlxce1xcfV0rKVxcfXwoW15cXHtcXH1dKykvZyxcbiAgICBmdW5jdGlvbihfLCBleHByZXNzaW9uLCBsaXRlcmFsKSB7XG4gICAgICBpZiAoZXhwcmVzc2lvbikge1xuICAgICAgICBsZXQgb3BlcmF0b3IgPSBcIlwiO1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgaWYgKG9wZXJhdG9ycy5pbmRleE9mKGV4cHJlc3Npb24uY2hhckF0KDApKSAhPT0gLTEpIHtcbiAgICAgICAgICBvcGVyYXRvciA9IGV4cHJlc3Npb24uY2hhckF0KDApO1xuICAgICAgICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uLnN1YnN0cigxKTtcbiAgICAgICAgfVxuICAgICAgICBleHByZXNzaW9uLnNwbGl0KC8sL2cpLmZvckVhY2goZnVuY3Rpb24odmFyaWFibGUpIHtcbiAgICAgICAgICB2YXIgdG1wID0gLyhbXjpcXCpdKikoPzo6KFxcZCspfChcXCopKT8vLmV4ZWModmFyaWFibGUpO1xuICAgICAgICAgIHZhbHVlcy5wdXNoKGdldFZhbHVlcyhjb250ZXh0LCBvcGVyYXRvciwgdG1wWzFdLCB0bXBbMl0gfHwgdG1wWzNdKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAob3BlcmF0b3IgJiYgb3BlcmF0b3IgIT09IFwiK1wiKSB7XG4gICAgICAgICAgdmFyIHNlcGFyYXRvciA9IFwiLFwiO1xuICAgICAgICAgIGlmIChvcGVyYXRvciA9PT0gXCI/XCIpIHtcbiAgICAgICAgICAgIHNlcGFyYXRvciA9IFwiJlwiO1xuICAgICAgICAgIH0gZWxzZSBpZiAob3BlcmF0b3IgIT09IFwiI1wiKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuICh2YWx1ZXMubGVuZ3RoICE9PSAwID8gb3BlcmF0b3IgOiBcIlwiKSArIHZhbHVlcy5qb2luKHNlcGFyYXRvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlcy5qb2luKFwiLFwiKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVuY29kZVJlc2VydmVkKGxpdGVyYWwpO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbiAgaWYgKHRlbXBsYXRlID09PSBcIi9cIikge1xuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGVtcGxhdGUucmVwbGFjZSgvXFwvJC8sIFwiXCIpO1xuICB9XG59XG5cbi8vIHBrZy9kaXN0LXNyYy9wYXJzZS5qc1xuZnVuY3Rpb24gcGFyc2Uob3B0aW9ucykge1xuICBsZXQgbWV0aG9kID0gb3B0aW9ucy5tZXRob2QudG9VcHBlckNhc2UoKTtcbiAgbGV0IHVybCA9IChvcHRpb25zLnVybCB8fCBcIi9cIikucmVwbGFjZSgvOihbYS16XVxcdyspL2csIFwieyQxfVwiKTtcbiAgbGV0IGhlYWRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLmhlYWRlcnMpO1xuICBsZXQgYm9keTtcbiAgbGV0IHBhcmFtZXRlcnMgPSBvbWl0KG9wdGlvbnMsIFtcbiAgICBcIm1ldGhvZFwiLFxuICAgIFwiYmFzZVVybFwiLFxuICAgIFwidXJsXCIsXG4gICAgXCJoZWFkZXJzXCIsXG4gICAgXCJyZXF1ZXN0XCIsXG4gICAgXCJtZWRpYVR5cGVcIlxuICBdKTtcbiAgY29uc3QgdXJsVmFyaWFibGVOYW1lcyA9IGV4dHJhY3RVcmxWYXJpYWJsZU5hbWVzKHVybCk7XG4gIHVybCA9IHBhcnNlVXJsKHVybCkuZXhwYW5kKHBhcmFtZXRlcnMpO1xuICBpZiAoIS9eaHR0cC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gb3B0aW9ucy5iYXNlVXJsICsgdXJsO1xuICB9XG4gIGNvbnN0IG9taXR0ZWRQYXJhbWV0ZXJzID0gT2JqZWN0LmtleXMob3B0aW9ucykuZmlsdGVyKChvcHRpb24pID0+IHVybFZhcmlhYmxlTmFtZXMuaW5jbHVkZXMob3B0aW9uKSkuY29uY2F0KFwiYmFzZVVybFwiKTtcbiAgY29uc3QgcmVtYWluaW5nUGFyYW1ldGVycyA9IG9taXQocGFyYW1ldGVycywgb21pdHRlZFBhcmFtZXRlcnMpO1xuICBjb25zdCBpc0JpbmFyeVJlcXVlc3QgPSAvYXBwbGljYXRpb25cXC9vY3RldC1zdHJlYW0vaS50ZXN0KGhlYWRlcnMuYWNjZXB0KTtcbiAgaWYgKCFpc0JpbmFyeVJlcXVlc3QpIHtcbiAgICBpZiAob3B0aW9ucy5tZWRpYVR5cGUuZm9ybWF0KSB7XG4gICAgICBoZWFkZXJzLmFjY2VwdCA9IGhlYWRlcnMuYWNjZXB0LnNwbGl0KC8sLykubWFwKFxuICAgICAgICAoZm9ybWF0KSA9PiBmb3JtYXQucmVwbGFjZShcbiAgICAgICAgICAvYXBwbGljYXRpb25cXC92bmQoXFwuXFx3KykoXFwudjMpPyhcXC5cXHcrKT8oXFwranNvbik/JC8sXG4gICAgICAgICAgYGFwcGxpY2F0aW9uL3ZuZCQxJDIuJHtvcHRpb25zLm1lZGlhVHlwZS5mb3JtYXR9YFxuICAgICAgICApXG4gICAgICApLmpvaW4oXCIsXCIpO1xuICAgIH1cbiAgICBpZiAodXJsLmVuZHNXaXRoKFwiL2dyYXBocWxcIikpIHtcbiAgICAgIGlmIChvcHRpb25zLm1lZGlhVHlwZS5wcmV2aWV3cz8ubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHByZXZpZXdzRnJvbUFjY2VwdEhlYWRlciA9IGhlYWRlcnMuYWNjZXB0Lm1hdGNoKC9bXFx3LV0rKD89LXByZXZpZXcpL2cpIHx8IFtdO1xuICAgICAgICBoZWFkZXJzLmFjY2VwdCA9IHByZXZpZXdzRnJvbUFjY2VwdEhlYWRlci5jb25jYXQob3B0aW9ucy5tZWRpYVR5cGUucHJldmlld3MpLm1hcCgocHJldmlldykgPT4ge1xuICAgICAgICAgIGNvbnN0IGZvcm1hdCA9IG9wdGlvbnMubWVkaWFUeXBlLmZvcm1hdCA/IGAuJHtvcHRpb25zLm1lZGlhVHlwZS5mb3JtYXR9YCA6IFwiK2pzb25cIjtcbiAgICAgICAgICByZXR1cm4gYGFwcGxpY2F0aW9uL3ZuZC5naXRodWIuJHtwcmV2aWV3fS1wcmV2aWV3JHtmb3JtYXR9YDtcbiAgICAgICAgfSkuam9pbihcIixcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChbXCJHRVRcIiwgXCJIRUFEXCJdLmluY2x1ZGVzKG1ldGhvZCkpIHtcbiAgICB1cmwgPSBhZGRRdWVyeVBhcmFtZXRlcnModXJsLCByZW1haW5pbmdQYXJhbWV0ZXJzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoXCJkYXRhXCIgaW4gcmVtYWluaW5nUGFyYW1ldGVycykge1xuICAgICAgYm9keSA9IHJlbWFpbmluZ1BhcmFtZXRlcnMuZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKHJlbWFpbmluZ1BhcmFtZXRlcnMpLmxlbmd0aCkge1xuICAgICAgICBib2R5ID0gcmVtYWluaW5nUGFyYW1ldGVycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFoZWFkZXJzW1wiY29udGVudC10eXBlXCJdICYmIHR5cGVvZiBib2R5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSA9IFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiO1xuICB9XG4gIGlmIChbXCJQQVRDSFwiLCBcIlBVVFwiXS5pbmNsdWRlcyhtZXRob2QpICYmIHR5cGVvZiBib2R5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgYm9keSA9IFwiXCI7XG4gIH1cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oXG4gICAgeyBtZXRob2QsIHVybCwgaGVhZGVycyB9LFxuICAgIHR5cGVvZiBib2R5ICE9PSBcInVuZGVmaW5lZFwiID8geyBib2R5IH0gOiBudWxsLFxuICAgIG9wdGlvbnMucmVxdWVzdCA/IHsgcmVxdWVzdDogb3B0aW9ucy5yZXF1ZXN0IH0gOiBudWxsXG4gICk7XG59XG5cbi8vIHBrZy9kaXN0LXNyYy9lbmRwb2ludC13aXRoLWRlZmF1bHRzLmpzXG5mdW5jdGlvbiBlbmRwb2ludFdpdGhEZWZhdWx0cyhkZWZhdWx0cywgcm91dGUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHBhcnNlKG1lcmdlKGRlZmF1bHRzLCByb3V0ZSwgb3B0aW9ucykpO1xufVxuXG4vLyBwa2cvZGlzdC1zcmMvd2l0aC1kZWZhdWx0cy5qc1xuZnVuY3Rpb24gd2l0aERlZmF1bHRzKG9sZERlZmF1bHRzLCBuZXdEZWZhdWx0cykge1xuICBjb25zdCBERUZBVUxUUzIgPSBtZXJnZShvbGREZWZhdWx0cywgbmV3RGVmYXVsdHMpO1xuICBjb25zdCBlbmRwb2ludDIgPSBlbmRwb2ludFdpdGhEZWZhdWx0cy5iaW5kKG51bGwsIERFRkFVTFRTMik7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKGVuZHBvaW50Miwge1xuICAgIERFRkFVTFRTOiBERUZBVUxUUzIsXG4gICAgZGVmYXVsdHM6IHdpdGhEZWZhdWx0cy5iaW5kKG51bGwsIERFRkFVTFRTMiksXG4gICAgbWVyZ2U6IG1lcmdlLmJpbmQobnVsbCwgREVGQVVMVFMyKSxcbiAgICBwYXJzZVxuICB9KTtcbn1cblxuLy8gcGtnL2Rpc3Qtc3JjL2luZGV4LmpzXG52YXIgZW5kcG9pbnQgPSB3aXRoRGVmYXVsdHMobnVsbCwgREVGQVVMVFMpO1xuZXhwb3J0IHtcbiAgZW5kcG9pbnRcbn07XG4iLCJjbGFzcyBEZXByZWNhdGlvbiBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpOyAvLyBNYWludGFpbnMgcHJvcGVyIHN0YWNrIHRyYWNlIChvbmx5IGF2YWlsYWJsZSBvbiBWOClcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cbiAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICAgIH1cblxuICAgIHRoaXMubmFtZSA9ICdEZXByZWNhdGlvbic7XG4gIH1cblxufVxuXG5leHBvcnQgeyBEZXByZWNhdGlvbiB9O1xuIiwiLy8gcGtnL2Rpc3Qtc3JjL2luZGV4LmpzXG5pbXBvcnQgeyBEZXByZWNhdGlvbiB9IGZyb20gXCJkZXByZWNhdGlvblwiO1xuaW1wb3J0IG9uY2UgZnJvbSBcIm9uY2VcIjtcbnZhciBsb2dPbmNlQ29kZSA9IG9uY2UoKGRlcHJlY2F0aW9uKSA9PiBjb25zb2xlLndhcm4oZGVwcmVjYXRpb24pKTtcbnZhciBsb2dPbmNlSGVhZGVycyA9IG9uY2UoKGRlcHJlY2F0aW9uKSA9PiBjb25zb2xlLndhcm4oZGVwcmVjYXRpb24pKTtcbnZhciBSZXF1ZXN0RXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgc3RhdHVzQ29kZSwgb3B0aW9ucykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgfVxuICAgIHRoaXMubmFtZSA9IFwiSHR0cEVycm9yXCI7XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXNDb2RlO1xuICAgIGxldCBoZWFkZXJzO1xuICAgIGlmIChcImhlYWRlcnNcIiBpbiBvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLmhlYWRlcnMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnM7XG4gICAgfVxuICAgIGlmIChcInJlc3BvbnNlXCIgaW4gb3B0aW9ucykge1xuICAgICAgdGhpcy5yZXNwb25zZSA9IG9wdGlvbnMucmVzcG9uc2U7XG4gICAgICBoZWFkZXJzID0gb3B0aW9ucy5yZXNwb25zZS5oZWFkZXJzO1xuICAgIH1cbiAgICBjb25zdCByZXF1ZXN0Q29weSA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMucmVxdWVzdCk7XG4gICAgaWYgKG9wdGlvbnMucmVxdWVzdC5oZWFkZXJzLmF1dGhvcml6YXRpb24pIHtcbiAgICAgIHJlcXVlc3RDb3B5LmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLnJlcXVlc3QuaGVhZGVycywge1xuICAgICAgICBhdXRob3JpemF0aW9uOiBvcHRpb25zLnJlcXVlc3QuaGVhZGVycy5hdXRob3JpemF0aW9uLnJlcGxhY2UoXG4gICAgICAgICAgLyAuKiQvLFxuICAgICAgICAgIFwiIFtSRURBQ1RFRF1cIlxuICAgICAgICApXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmVxdWVzdENvcHkudXJsID0gcmVxdWVzdENvcHkudXJsLnJlcGxhY2UoL1xcYmNsaWVudF9zZWNyZXQ9XFx3Ky9nLCBcImNsaWVudF9zZWNyZXQ9W1JFREFDVEVEXVwiKS5yZXBsYWNlKC9cXGJhY2Nlc3NfdG9rZW49XFx3Ky9nLCBcImFjY2Vzc190b2tlbj1bUkVEQUNURURdXCIpO1xuICAgIHRoaXMucmVxdWVzdCA9IHJlcXVlc3RDb3B5O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvZGVcIiwge1xuICAgICAgZ2V0KCkge1xuICAgICAgICBsb2dPbmNlQ29kZShcbiAgICAgICAgICBuZXcgRGVwcmVjYXRpb24oXG4gICAgICAgICAgICBcIltAb2N0b2tpdC9yZXF1ZXN0LWVycm9yXSBgZXJyb3IuY29kZWAgaXMgZGVwcmVjYXRlZCwgdXNlIGBlcnJvci5zdGF0dXNgLlwiXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gc3RhdHVzQ29kZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJoZWFkZXJzXCIsIHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgbG9nT25jZUhlYWRlcnMoXG4gICAgICAgICAgbmV3IERlcHJlY2F0aW9uKFxuICAgICAgICAgICAgXCJbQG9jdG9raXQvcmVxdWVzdC1lcnJvcl0gYGVycm9yLmhlYWRlcnNgIGlzIGRlcHJlY2F0ZWQsIHVzZSBgZXJyb3IucmVzcG9uc2UuaGVhZGVyc2AuXCJcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBoZWFkZXJzIHx8IHt9O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuZXhwb3J0IHtcbiAgUmVxdWVzdEVycm9yXG59O1xuIiwiLy8gcGtnL2Rpc3Qtc3JjL2luZGV4LmpzXG5pbXBvcnQgeyBlbmRwb2ludCB9IGZyb20gXCJAb2N0b2tpdC9lbmRwb2ludFwiO1xuaW1wb3J0IHsgZ2V0VXNlckFnZW50IH0gZnJvbSBcInVuaXZlcnNhbC11c2VyLWFnZW50XCI7XG5cbi8vIHBrZy9kaXN0LXNyYy92ZXJzaW9uLmpzXG52YXIgVkVSU0lPTiA9IFwiOC4yLjBcIjtcblxuLy8gcGtnL2Rpc3Qtc3JjL2lzLXBsYWluLW9iamVjdC5qc1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8IHZhbHVlID09PSBudWxsKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgIT09IFwiW29iamVjdCBPYmplY3RdXCIpXG4gICAgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSk7XG4gIGlmIChwcm90byA9PT0gbnVsbClcbiAgICByZXR1cm4gdHJ1ZTtcbiAgY29uc3QgQ3RvciA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgXCJjb25zdHJ1Y3RvclwiKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiYgRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwoQ3RvcikgPT09IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsKHZhbHVlKTtcbn1cblxuLy8gcGtnL2Rpc3Qtc3JjL2ZldGNoLXdyYXBwZXIuanNcbmltcG9ydCB7IFJlcXVlc3RFcnJvciB9IGZyb20gXCJAb2N0b2tpdC9yZXF1ZXN0LWVycm9yXCI7XG5cbi8vIHBrZy9kaXN0LXNyYy9nZXQtYnVmZmVyLXJlc3BvbnNlLmpzXG5mdW5jdGlvbiBnZXRCdWZmZXJSZXNwb25zZShyZXNwb25zZSkge1xuICByZXR1cm4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKTtcbn1cblxuLy8gcGtnL2Rpc3Qtc3JjL2ZldGNoLXdyYXBwZXIuanNcbmZ1bmN0aW9uIGZldGNoV3JhcHBlcihyZXF1ZXN0T3B0aW9ucykge1xuICBjb25zdCBsb2cgPSByZXF1ZXN0T3B0aW9ucy5yZXF1ZXN0ICYmIHJlcXVlc3RPcHRpb25zLnJlcXVlc3QubG9nID8gcmVxdWVzdE9wdGlvbnMucmVxdWVzdC5sb2cgOiBjb25zb2xlO1xuICBjb25zdCBwYXJzZVN1Y2Nlc3NSZXNwb25zZUJvZHkgPSByZXF1ZXN0T3B0aW9ucy5yZXF1ZXN0Py5wYXJzZVN1Y2Nlc3NSZXNwb25zZUJvZHkgIT09IGZhbHNlO1xuICBpZiAoaXNQbGFpbk9iamVjdChyZXF1ZXN0T3B0aW9ucy5ib2R5KSB8fCBBcnJheS5pc0FycmF5KHJlcXVlc3RPcHRpb25zLmJvZHkpKSB7XG4gICAgcmVxdWVzdE9wdGlvbnMuYm9keSA9IEpTT04uc3RyaW5naWZ5KHJlcXVlc3RPcHRpb25zLmJvZHkpO1xuICB9XG4gIGxldCBoZWFkZXJzID0ge307XG4gIGxldCBzdGF0dXM7XG4gIGxldCB1cmw7XG4gIGxldCB7IGZldGNoIH0gPSBnbG9iYWxUaGlzO1xuICBpZiAocmVxdWVzdE9wdGlvbnMucmVxdWVzdD8uZmV0Y2gpIHtcbiAgICBmZXRjaCA9IHJlcXVlc3RPcHRpb25zLnJlcXVlc3QuZmV0Y2g7XG4gIH1cbiAgaWYgKCFmZXRjaCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiZmV0Y2ggaXMgbm90IHNldC4gUGxlYXNlIHBhc3MgYSBmZXRjaCBpbXBsZW1lbnRhdGlvbiBhcyBuZXcgT2N0b2tpdCh7IHJlcXVlc3Q6IHsgZmV0Y2ggfX0pLiBMZWFybiBtb3JlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9vY3Rva2l0L29jdG9raXQuanMvI2ZldGNoLW1pc3NpbmdcIlxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGZldGNoKHJlcXVlc3RPcHRpb25zLnVybCwge1xuICAgIG1ldGhvZDogcmVxdWVzdE9wdGlvbnMubWV0aG9kLFxuICAgIGJvZHk6IHJlcXVlc3RPcHRpb25zLmJvZHksXG4gICAgaGVhZGVyczogcmVxdWVzdE9wdGlvbnMuaGVhZGVycyxcbiAgICBzaWduYWw6IHJlcXVlc3RPcHRpb25zLnJlcXVlc3Q/LnNpZ25hbCxcbiAgICAvLyBkdXBsZXggbXVzdCBiZSBzZXQgaWYgcmVxdWVzdC5ib2R5IGlzIFJlYWRhYmxlU3RyZWFtIG9yIEFzeW5jIEl0ZXJhYmxlcy5cbiAgICAvLyBTZWUgaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yZXF1ZXN0aW5pdC1kdXBsZXguXG4gICAgLi4ucmVxdWVzdE9wdGlvbnMuYm9keSAmJiB7IGR1cGxleDogXCJoYWxmXCIgfVxuICB9KS50aGVuKGFzeW5jIChyZXNwb25zZSkgPT4ge1xuICAgIHVybCA9IHJlc3BvbnNlLnVybDtcbiAgICBzdGF0dXMgPSByZXNwb25zZS5zdGF0dXM7XG4gICAgZm9yIChjb25zdCBrZXlBbmRWYWx1ZSBvZiByZXNwb25zZS5oZWFkZXJzKSB7XG4gICAgICBoZWFkZXJzW2tleUFuZFZhbHVlWzBdXSA9IGtleUFuZFZhbHVlWzFdO1xuICAgIH1cbiAgICBpZiAoXCJkZXByZWNhdGlvblwiIGluIGhlYWRlcnMpIHtcbiAgICAgIGNvbnN0IG1hdGNoZXMgPSBoZWFkZXJzLmxpbmsgJiYgaGVhZGVycy5saW5rLm1hdGNoKC88KFtePl0rKT47IHJlbD1cImRlcHJlY2F0aW9uXCIvKTtcbiAgICAgIGNvbnN0IGRlcHJlY2F0aW9uTGluayA9IG1hdGNoZXMgJiYgbWF0Y2hlcy5wb3AoKTtcbiAgICAgIGxvZy53YXJuKFxuICAgICAgICBgW0BvY3Rva2l0L3JlcXVlc3RdIFwiJHtyZXF1ZXN0T3B0aW9ucy5tZXRob2R9ICR7cmVxdWVzdE9wdGlvbnMudXJsfVwiIGlzIGRlcHJlY2F0ZWQuIEl0IGlzIHNjaGVkdWxlZCB0byBiZSByZW1vdmVkIG9uICR7aGVhZGVycy5zdW5zZXR9JHtkZXByZWNhdGlvbkxpbmsgPyBgLiBTZWUgJHtkZXByZWNhdGlvbkxpbmt9YCA6IFwiXCJ9YFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gMjA0IHx8IHN0YXR1cyA9PT0gMjA1KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChyZXF1ZXN0T3B0aW9ucy5tZXRob2QgPT09IFwiSEVBRFwiKSB7XG4gICAgICBpZiAoc3RhdHVzIDwgNDAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBSZXF1ZXN0RXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCwgc3RhdHVzLCB7XG4gICAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgICAgdXJsLFxuICAgICAgICAgIHN0YXR1cyxcbiAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgIGRhdGE6IHZvaWQgMFxuICAgICAgICB9LFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0T3B0aW9uc1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09IDMwNCkge1xuICAgICAgdGhyb3cgbmV3IFJlcXVlc3RFcnJvcihcIk5vdCBtb2RpZmllZFwiLCBzdGF0dXMsIHtcbiAgICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgICB1cmwsXG4gICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgZGF0YTogYXdhaXQgZ2V0UmVzcG9uc2VEYXRhKHJlc3BvbnNlKVxuICAgICAgICB9LFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0T3B0aW9uc1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPj0gNDAwKSB7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgZ2V0UmVzcG9uc2VEYXRhKHJlc3BvbnNlKTtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IFJlcXVlc3RFcnJvcih0b0Vycm9yTWVzc2FnZShkYXRhKSwgc3RhdHVzLCB7XG4gICAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgICAgdXJsLFxuICAgICAgICAgIHN0YXR1cyxcbiAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgIGRhdGFcbiAgICAgICAgfSxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdE9wdGlvbnNcbiAgICAgIH0pO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZVN1Y2Nlc3NSZXNwb25zZUJvZHkgPyBhd2FpdCBnZXRSZXNwb25zZURhdGEocmVzcG9uc2UpIDogcmVzcG9uc2UuYm9keTtcbiAgfSkudGhlbigoZGF0YSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXMsXG4gICAgICB1cmwsXG4gICAgICBoZWFkZXJzLFxuICAgICAgZGF0YVxuICAgIH07XG4gIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFJlcXVlc3RFcnJvcilcbiAgICAgIHRocm93IGVycm9yO1xuICAgIGVsc2UgaWYgKGVycm9yLm5hbWUgPT09IFwiQWJvcnRFcnJvclwiKVxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgbGV0IG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xuICAgIGlmIChlcnJvci5uYW1lID09PSBcIlR5cGVFcnJvclwiICYmIFwiY2F1c2VcIiBpbiBlcnJvcikge1xuICAgICAgaWYgKGVycm9yLmNhdXNlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgbWVzc2FnZSA9IGVycm9yLmNhdXNlLm1lc3NhZ2U7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBlcnJvci5jYXVzZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBtZXNzYWdlID0gZXJyb3IuY2F1c2U7XG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBSZXF1ZXN0RXJyb3IobWVzc2FnZSwgNTAwLCB7XG4gICAgICByZXF1ZXN0OiByZXF1ZXN0T3B0aW9uc1xuICAgIH0pO1xuICB9KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldFJlc3BvbnNlRGF0YShyZXNwb25zZSkge1xuICBjb25zdCBjb250ZW50VHlwZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiY29udGVudC10eXBlXCIpO1xuICBpZiAoL2FwcGxpY2F0aW9uXFwvanNvbi8udGVzdChjb250ZW50VHlwZSkpIHtcbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpLmNhdGNoKCgpID0+IHJlc3BvbnNlLnRleHQoKSkuY2F0Y2goKCkgPT4gXCJcIik7XG4gIH1cbiAgaWYgKCFjb250ZW50VHlwZSB8fCAvXnRleHRcXC98Y2hhcnNldD11dGYtOCQvLnRlc3QoY29udGVudFR5cGUpKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcbiAgfVxuICByZXR1cm4gZ2V0QnVmZmVyUmVzcG9uc2UocmVzcG9uc2UpO1xufVxuZnVuY3Rpb24gdG9FcnJvck1lc3NhZ2UoZGF0YSkge1xuICBpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIGRhdGE7XG4gIGxldCBzdWZmaXg7XG4gIGlmIChcImRvY3VtZW50YXRpb25fdXJsXCIgaW4gZGF0YSkge1xuICAgIHN1ZmZpeCA9IGAgLSAke2RhdGEuZG9jdW1lbnRhdGlvbl91cmx9YDtcbiAgfSBlbHNlIHtcbiAgICBzdWZmaXggPSBcIlwiO1xuICB9XG4gIGlmIChcIm1lc3NhZ2VcIiBpbiBkYXRhKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YS5lcnJvcnMpKSB7XG4gICAgICByZXR1cm4gYCR7ZGF0YS5tZXNzYWdlfTogJHtkYXRhLmVycm9ycy5tYXAoSlNPTi5zdHJpbmdpZnkpLmpvaW4oXCIsIFwiKX0ke3N1ZmZpeH1gO1xuICAgIH1cbiAgICByZXR1cm4gYCR7ZGF0YS5tZXNzYWdlfSR7c3VmZml4fWA7XG4gIH1cbiAgcmV0dXJuIGBVbmtub3duIGVycm9yOiAke0pTT04uc3RyaW5naWZ5KGRhdGEpfWA7XG59XG5cbi8vIHBrZy9kaXN0LXNyYy93aXRoLWRlZmF1bHRzLmpzXG5mdW5jdGlvbiB3aXRoRGVmYXVsdHMob2xkRW5kcG9pbnQsIG5ld0RlZmF1bHRzKSB7XG4gIGNvbnN0IGVuZHBvaW50MiA9IG9sZEVuZHBvaW50LmRlZmF1bHRzKG5ld0RlZmF1bHRzKTtcbiAgY29uc3QgbmV3QXBpID0gZnVuY3Rpb24ocm91dGUsIHBhcmFtZXRlcnMpIHtcbiAgICBjb25zdCBlbmRwb2ludE9wdGlvbnMgPSBlbmRwb2ludDIubWVyZ2Uocm91dGUsIHBhcmFtZXRlcnMpO1xuICAgIGlmICghZW5kcG9pbnRPcHRpb25zLnJlcXVlc3QgfHwgIWVuZHBvaW50T3B0aW9ucy5yZXF1ZXN0Lmhvb2spIHtcbiAgICAgIHJldHVybiBmZXRjaFdyYXBwZXIoZW5kcG9pbnQyLnBhcnNlKGVuZHBvaW50T3B0aW9ucykpO1xuICAgIH1cbiAgICBjb25zdCByZXF1ZXN0MiA9IChyb3V0ZTIsIHBhcmFtZXRlcnMyKSA9PiB7XG4gICAgICByZXR1cm4gZmV0Y2hXcmFwcGVyKFxuICAgICAgICBlbmRwb2ludDIucGFyc2UoZW5kcG9pbnQyLm1lcmdlKHJvdXRlMiwgcGFyYW1ldGVyczIpKVxuICAgICAgKTtcbiAgICB9O1xuICAgIE9iamVjdC5hc3NpZ24ocmVxdWVzdDIsIHtcbiAgICAgIGVuZHBvaW50OiBlbmRwb2ludDIsXG4gICAgICBkZWZhdWx0czogd2l0aERlZmF1bHRzLmJpbmQobnVsbCwgZW5kcG9pbnQyKVxuICAgIH0pO1xuICAgIHJldHVybiBlbmRwb2ludE9wdGlvbnMucmVxdWVzdC5ob29rKHJlcXVlc3QyLCBlbmRwb2ludE9wdGlvbnMpO1xuICB9O1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXdBcGksIHtcbiAgICBlbmRwb2ludDogZW5kcG9pbnQyLFxuICAgIGRlZmF1bHRzOiB3aXRoRGVmYXVsdHMuYmluZChudWxsLCBlbmRwb2ludDIpXG4gIH0pO1xufVxuXG4vLyBwa2cvZGlzdC1zcmMvaW5kZXguanNcbnZhciByZXF1ZXN0ID0gd2l0aERlZmF1bHRzKGVuZHBvaW50LCB7XG4gIGhlYWRlcnM6IHtcbiAgICBcInVzZXItYWdlbnRcIjogYG9jdG9raXQtcmVxdWVzdC5qcy8ke1ZFUlNJT059ICR7Z2V0VXNlckFnZW50KCl9YFxuICB9XG59KTtcbmV4cG9ydCB7XG4gIHJlcXVlc3Rcbn07XG4iLCIvLyBwa2cvZGlzdC1zcmMvaW5kZXguanNcbmltcG9ydCB7IHJlcXVlc3QgfSBmcm9tIFwiQG9jdG9raXQvcmVxdWVzdFwiO1xuaW1wb3J0IHsgZ2V0VXNlckFnZW50IH0gZnJvbSBcInVuaXZlcnNhbC11c2VyLWFnZW50XCI7XG5cbi8vIHBrZy9kaXN0LXNyYy92ZXJzaW9uLmpzXG52YXIgVkVSU0lPTiA9IFwiNy4wLjJcIjtcblxuLy8gcGtnL2Rpc3Qtc3JjL3dpdGgtZGVmYXVsdHMuanNcbmltcG9ydCB7IHJlcXVlc3QgYXMgUmVxdWVzdDIgfSBmcm9tIFwiQG9jdG9raXQvcmVxdWVzdFwiO1xuXG4vLyBwa2cvZGlzdC1zcmMvZ3JhcGhxbC5qc1xuaW1wb3J0IHsgcmVxdWVzdCBhcyBSZXF1ZXN0IH0gZnJvbSBcIkBvY3Rva2l0L3JlcXVlc3RcIjtcblxuLy8gcGtnL2Rpc3Qtc3JjL2Vycm9yLmpzXG5mdW5jdGlvbiBfYnVpbGRNZXNzYWdlRm9yUmVzcG9uc2VFcnJvcnMoZGF0YSkge1xuICByZXR1cm4gYFJlcXVlc3QgZmFpbGVkIGR1ZSB0byBmb2xsb3dpbmcgcmVzcG9uc2UgZXJyb3JzOlxuYCArIGRhdGEuZXJyb3JzLm1hcCgoZSkgPT4gYCAtICR7ZS5tZXNzYWdlfWApLmpvaW4oXCJcXG5cIik7XG59XG52YXIgR3JhcGhxbFJlc3BvbnNlRXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IocmVxdWVzdDIsIGhlYWRlcnMsIHJlc3BvbnNlKSB7XG4gICAgc3VwZXIoX2J1aWxkTWVzc2FnZUZvclJlc3BvbnNlRXJyb3JzKHJlc3BvbnNlKSk7XG4gICAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDI7XG4gICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcbiAgICB0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgdGhpcy5uYW1lID0gXCJHcmFwaHFsUmVzcG9uc2VFcnJvclwiO1xuICAgIHRoaXMuZXJyb3JzID0gcmVzcG9uc2UuZXJyb3JzO1xuICAgIHRoaXMuZGF0YSA9IHJlc3BvbnNlLmRhdGE7XG4gICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIHBrZy9kaXN0LXNyYy9ncmFwaHFsLmpzXG52YXIgTk9OX1ZBUklBQkxFX09QVElPTlMgPSBbXG4gIFwibWV0aG9kXCIsXG4gIFwiYmFzZVVybFwiLFxuICBcInVybFwiLFxuICBcImhlYWRlcnNcIixcbiAgXCJyZXF1ZXN0XCIsXG4gIFwicXVlcnlcIixcbiAgXCJtZWRpYVR5cGVcIlxuXTtcbnZhciBGT1JCSURERU5fVkFSSUFCTEVfT1BUSU9OUyA9IFtcInF1ZXJ5XCIsIFwibWV0aG9kXCIsIFwidXJsXCJdO1xudmFyIEdIRVNfVjNfU1VGRklYX1JFR0VYID0gL1xcL2FwaVxcL3YzXFwvPyQvO1xuZnVuY3Rpb24gZ3JhcGhxbChyZXF1ZXN0MiwgcXVlcnksIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIHF1ZXJ5ID09PSBcInN0cmluZ1wiICYmIFwicXVlcnlcIiBpbiBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgIG5ldyBFcnJvcihgW0BvY3Rva2l0L2dyYXBocWxdIFwicXVlcnlcIiBjYW5ub3QgYmUgdXNlZCBhcyB2YXJpYWJsZSBuYW1lYClcbiAgICAgICk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgIGlmICghRk9SQklEREVOX1ZBUklBQkxFX09QVElPTlMuaW5jbHVkZXMoa2V5KSlcbiAgICAgICAgY29udGludWU7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICBgW0BvY3Rva2l0L2dyYXBocWxdIFwiJHtrZXl9XCIgY2Fubm90IGJlIHVzZWQgYXMgdmFyaWFibGUgbmFtZWBcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgcGFyc2VkT3B0aW9ucyA9IHR5cGVvZiBxdWVyeSA9PT0gXCJzdHJpbmdcIiA/IE9iamVjdC5hc3NpZ24oeyBxdWVyeSB9LCBvcHRpb25zKSA6IHF1ZXJ5O1xuICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5rZXlzKFxuICAgIHBhcnNlZE9wdGlvbnNcbiAgKS5yZWR1Y2UoKHJlc3VsdCwga2V5KSA9PiB7XG4gICAgaWYgKE5PTl9WQVJJQUJMRV9PUFRJT05TLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gcGFyc2VkT3B0aW9uc1trZXldO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgaWYgKCFyZXN1bHQudmFyaWFibGVzKSB7XG4gICAgICByZXN1bHQudmFyaWFibGVzID0ge307XG4gICAgfVxuICAgIHJlc3VsdC52YXJpYWJsZXNba2V5XSA9IHBhcnNlZE9wdGlvbnNba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LCB7fSk7XG4gIGNvbnN0IGJhc2VVcmwgPSBwYXJzZWRPcHRpb25zLmJhc2VVcmwgfHwgcmVxdWVzdDIuZW5kcG9pbnQuREVGQVVMVFMuYmFzZVVybDtcbiAgaWYgKEdIRVNfVjNfU1VGRklYX1JFR0VYLnRlc3QoYmFzZVVybCkpIHtcbiAgICByZXF1ZXN0T3B0aW9ucy51cmwgPSBiYXNlVXJsLnJlcGxhY2UoR0hFU19WM19TVUZGSVhfUkVHRVgsIFwiL2FwaS9ncmFwaHFsXCIpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0MihyZXF1ZXN0T3B0aW9ucykudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcnMpIHtcbiAgICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHJlc3BvbnNlLmhlYWRlcnMpKSB7XG4gICAgICAgIGhlYWRlcnNba2V5XSA9IHJlc3BvbnNlLmhlYWRlcnNba2V5XTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBHcmFwaHFsUmVzcG9uc2VFcnJvcihcbiAgICAgICAgcmVxdWVzdE9wdGlvbnMsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICAgIHJlc3BvbnNlLmRhdGFcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZS5kYXRhLmRhdGE7XG4gIH0pO1xufVxuXG4vLyBwa2cvZGlzdC1zcmMvd2l0aC1kZWZhdWx0cy5qc1xuZnVuY3Rpb24gd2l0aERlZmF1bHRzKHJlcXVlc3QyLCBuZXdEZWZhdWx0cykge1xuICBjb25zdCBuZXdSZXF1ZXN0ID0gcmVxdWVzdDIuZGVmYXVsdHMobmV3RGVmYXVsdHMpO1xuICBjb25zdCBuZXdBcGkgPSAocXVlcnksIG9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gZ3JhcGhxbChuZXdSZXF1ZXN0LCBxdWVyeSwgb3B0aW9ucyk7XG4gIH07XG4gIHJldHVybiBPYmplY3QuYXNzaWduKG5ld0FwaSwge1xuICAgIGRlZmF1bHRzOiB3aXRoRGVmYXVsdHMuYmluZChudWxsLCBuZXdSZXF1ZXN0KSxcbiAgICBlbmRwb2ludDogbmV3UmVxdWVzdC5lbmRwb2ludFxuICB9KTtcbn1cblxuLy8gcGtnL2Rpc3Qtc3JjL2luZGV4LmpzXG52YXIgZ3JhcGhxbDIgPSB3aXRoRGVmYXVsdHMocmVxdWVzdCwge1xuICBoZWFkZXJzOiB7XG4gICAgXCJ1c2VyLWFnZW50XCI6IGBvY3Rva2l0LWdyYXBocWwuanMvJHtWRVJTSU9OfSAke2dldFVzZXJBZ2VudCgpfWBcbiAgfSxcbiAgbWV0aG9kOiBcIlBPU1RcIixcbiAgdXJsOiBcIi9ncmFwaHFsXCJcbn0pO1xuZnVuY3Rpb24gd2l0aEN1c3RvbVJlcXVlc3QoY3VzdG9tUmVxdWVzdCkge1xuICByZXR1cm4gd2l0aERlZmF1bHRzKGN1c3RvbVJlcXVlc3QsIHtcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIHVybDogXCIvZ3JhcGhxbFwiXG4gIH0pO1xufVxuZXhwb3J0IHtcbiAgR3JhcGhxbFJlc3BvbnNlRXJyb3IsXG4gIGdyYXBocWwyIGFzIGdyYXBocWwsXG4gIHdpdGhDdXN0b21SZXF1ZXN0XG59O1xuIiwiLy8gcGtnL2Rpc3Qtc3JjL2F1dGguanNcbnZhciBSRUdFWF9JU19JTlNUQUxMQVRJT05fTEVHQUNZID0gL152MVxcLi87XG52YXIgUkVHRVhfSVNfSU5TVEFMTEFUSU9OID0gL15naHNfLztcbnZhciBSRUdFWF9JU19VU0VSX1RPX1NFUlZFUiA9IC9eZ2h1Xy87XG5hc3luYyBmdW5jdGlvbiBhdXRoKHRva2VuKSB7XG4gIGNvbnN0IGlzQXBwID0gdG9rZW4uc3BsaXQoL1xcLi8pLmxlbmd0aCA9PT0gMztcbiAgY29uc3QgaXNJbnN0YWxsYXRpb24gPSBSRUdFWF9JU19JTlNUQUxMQVRJT05fTEVHQUNZLnRlc3QodG9rZW4pIHx8IFJFR0VYX0lTX0lOU1RBTExBVElPTi50ZXN0KHRva2VuKTtcbiAgY29uc3QgaXNVc2VyVG9TZXJ2ZXIgPSBSRUdFWF9JU19VU0VSX1RPX1NFUlZFUi50ZXN0KHRva2VuKTtcbiAgY29uc3QgdG9rZW5UeXBlID0gaXNBcHAgPyBcImFwcFwiIDogaXNJbnN0YWxsYXRpb24gPyBcImluc3RhbGxhdGlvblwiIDogaXNVc2VyVG9TZXJ2ZXIgPyBcInVzZXItdG8tc2VydmVyXCIgOiBcIm9hdXRoXCI7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJ0b2tlblwiLFxuICAgIHRva2VuLFxuICAgIHRva2VuVHlwZVxuICB9O1xufVxuXG4vLyBwa2cvZGlzdC1zcmMvd2l0aC1hdXRob3JpemF0aW9uLXByZWZpeC5qc1xuZnVuY3Rpb24gd2l0aEF1dGhvcml6YXRpb25QcmVmaXgodG9rZW4pIHtcbiAgaWYgKHRva2VuLnNwbGl0KC9cXC4vKS5sZW5ndGggPT09IDMpIHtcbiAgICByZXR1cm4gYGJlYXJlciAke3Rva2VufWA7XG4gIH1cbiAgcmV0dXJuIGB0b2tlbiAke3Rva2VufWA7XG59XG5cbi8vIHBrZy9kaXN0LXNyYy9ob29rLmpzXG5hc3luYyBmdW5jdGlvbiBob29rKHRva2VuLCByZXF1ZXN0LCByb3V0ZSwgcGFyYW1ldGVycykge1xuICBjb25zdCBlbmRwb2ludCA9IHJlcXVlc3QuZW5kcG9pbnQubWVyZ2UoXG4gICAgcm91dGUsXG4gICAgcGFyYW1ldGVyc1xuICApO1xuICBlbmRwb2ludC5oZWFkZXJzLmF1dGhvcml6YXRpb24gPSB3aXRoQXV0aG9yaXphdGlvblByZWZpeCh0b2tlbik7XG4gIHJldHVybiByZXF1ZXN0KGVuZHBvaW50KTtcbn1cblxuLy8gcGtnL2Rpc3Qtc3JjL2luZGV4LmpzXG52YXIgY3JlYXRlVG9rZW5BdXRoID0gZnVuY3Rpb24gY3JlYXRlVG9rZW5BdXRoMih0b2tlbikge1xuICBpZiAoIXRva2VuKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiW0BvY3Rva2l0L2F1dGgtdG9rZW5dIE5vIHRva2VuIHBhc3NlZCB0byBjcmVhdGVUb2tlbkF1dGhcIik7XG4gIH1cbiAgaWYgKHR5cGVvZiB0b2tlbiAhPT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiW0BvY3Rva2l0L2F1dGgtdG9rZW5dIFRva2VuIHBhc3NlZCB0byBjcmVhdGVUb2tlbkF1dGggaXMgbm90IGEgc3RyaW5nXCJcbiAgICApO1xuICB9XG4gIHRva2VuID0gdG9rZW4ucmVwbGFjZSgvXih0b2tlbnxiZWFyZXIpICsvaSwgXCJcIik7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKGF1dGguYmluZChudWxsLCB0b2tlbiksIHtcbiAgICBob29rOiBob29rLmJpbmQobnVsbCwgdG9rZW4pXG4gIH0pO1xufTtcbmV4cG9ydCB7XG4gIGNyZWF0ZVRva2VuQXV0aFxufTtcbiIsIi8vIHBrZy9kaXN0LXNyYy9pbmRleC5qc1xuaW1wb3J0IHsgZ2V0VXNlckFnZW50IH0gZnJvbSBcInVuaXZlcnNhbC11c2VyLWFnZW50XCI7XG5pbXBvcnQgeyBDb2xsZWN0aW9uIH0gZnJvbSBcImJlZm9yZS1hZnRlci1ob29rXCI7XG5pbXBvcnQgeyByZXF1ZXN0IH0gZnJvbSBcIkBvY3Rva2l0L3JlcXVlc3RcIjtcbmltcG9ydCB7IGdyYXBocWwsIHdpdGhDdXN0b21SZXF1ZXN0IH0gZnJvbSBcIkBvY3Rva2l0L2dyYXBocWxcIjtcbmltcG9ydCB7IGNyZWF0ZVRva2VuQXV0aCB9IGZyb20gXCJAb2N0b2tpdC9hdXRoLXRva2VuXCI7XG5cbi8vIHBrZy9kaXN0LXNyYy92ZXJzaW9uLmpzXG52YXIgVkVSU0lPTiA9IFwiNS4xLjBcIjtcblxuLy8gcGtnL2Rpc3Qtc3JjL2luZGV4LmpzXG52YXIgbm9vcCA9ICgpID0+IHtcbn07XG52YXIgY29uc29sZVdhcm4gPSBjb25zb2xlLndhcm4uYmluZChjb25zb2xlKTtcbnZhciBjb25zb2xlRXJyb3IgPSBjb25zb2xlLmVycm9yLmJpbmQoY29uc29sZSk7XG52YXIgdXNlckFnZW50VHJhaWwgPSBgb2N0b2tpdC1jb3JlLmpzLyR7VkVSU0lPTn0gJHtnZXRVc2VyQWdlbnQoKX1gO1xudmFyIE9jdG9raXQgPSBjbGFzcyB7XG4gIHN0YXRpYyB7XG4gICAgdGhpcy5WRVJTSU9OID0gVkVSU0lPTjtcbiAgfVxuICBzdGF0aWMgZGVmYXVsdHMoZGVmYXVsdHMpIHtcbiAgICBjb25zdCBPY3Rva2l0V2l0aERlZmF1bHRzID0gY2xhc3MgZXh0ZW5kcyB0aGlzIHtcbiAgICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGFyZ3NbMF0gfHwge307XG4gICAgICAgIGlmICh0eXBlb2YgZGVmYXVsdHMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHN1cGVyKGRlZmF1bHRzKG9wdGlvbnMpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoXG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgZGVmYXVsdHMsXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgb3B0aW9ucy51c2VyQWdlbnQgJiYgZGVmYXVsdHMudXNlckFnZW50ID8ge1xuICAgICAgICAgICAgICB1c2VyQWdlbnQ6IGAke29wdGlvbnMudXNlckFnZW50fSAke2RlZmF1bHRzLnVzZXJBZ2VudH1gXG4gICAgICAgICAgICB9IDogbnVsbFxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBPY3Rva2l0V2l0aERlZmF1bHRzO1xuICB9XG4gIHN0YXRpYyB7XG4gICAgdGhpcy5wbHVnaW5zID0gW107XG4gIH1cbiAgLyoqXG4gICAqIEF0dGFjaCBhIHBsdWdpbiAob3IgbWFueSkgdG8geW91ciBPY3Rva2l0IGluc3RhbmNlLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBBUEkgPSBPY3Rva2l0LnBsdWdpbihwbHVnaW4xLCBwbHVnaW4yLCBwbHVnaW4zLCAuLi4pXG4gICAqL1xuICBzdGF0aWMgcGx1Z2luKC4uLm5ld1BsdWdpbnMpIHtcbiAgICBjb25zdCBjdXJyZW50UGx1Z2lucyA9IHRoaXMucGx1Z2lucztcbiAgICBjb25zdCBOZXdPY3Rva2l0ID0gY2xhc3MgZXh0ZW5kcyB0aGlzIHtcbiAgICAgIHN0YXRpYyB7XG4gICAgICAgIHRoaXMucGx1Z2lucyA9IGN1cnJlbnRQbHVnaW5zLmNvbmNhdChcbiAgICAgICAgICBuZXdQbHVnaW5zLmZpbHRlcigocGx1Z2luKSA9PiAhY3VycmVudFBsdWdpbnMuaW5jbHVkZXMocGx1Z2luKSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBOZXdPY3Rva2l0O1xuICB9XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGhvb2sgPSBuZXcgQ29sbGVjdGlvbigpO1xuICAgIGNvbnN0IHJlcXVlc3REZWZhdWx0cyA9IHtcbiAgICAgIGJhc2VVcmw6IHJlcXVlc3QuZW5kcG9pbnQuREVGQVVMVFMuYmFzZVVybCxcbiAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgcmVxdWVzdDogT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucy5yZXF1ZXN0LCB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgaW50ZXJuYWwgdXNhZ2Ugb25seSwgbm8gbmVlZCB0byB0eXBlXG4gICAgICAgIGhvb2s6IGhvb2suYmluZChudWxsLCBcInJlcXVlc3RcIilcbiAgICAgIH0pLFxuICAgICAgbWVkaWFUeXBlOiB7XG4gICAgICAgIHByZXZpZXdzOiBbXSxcbiAgICAgICAgZm9ybWF0OiBcIlwiXG4gICAgICB9XG4gICAgfTtcbiAgICByZXF1ZXN0RGVmYXVsdHMuaGVhZGVyc1tcInVzZXItYWdlbnRcIl0gPSBvcHRpb25zLnVzZXJBZ2VudCA/IGAke29wdGlvbnMudXNlckFnZW50fSAke3VzZXJBZ2VudFRyYWlsfWAgOiB1c2VyQWdlbnRUcmFpbDtcbiAgICBpZiAob3B0aW9ucy5iYXNlVXJsKSB7XG4gICAgICByZXF1ZXN0RGVmYXVsdHMuYmFzZVVybCA9IG9wdGlvbnMuYmFzZVVybDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMucHJldmlld3MpIHtcbiAgICAgIHJlcXVlc3REZWZhdWx0cy5tZWRpYVR5cGUucHJldmlld3MgPSBvcHRpb25zLnByZXZpZXdzO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy50aW1lWm9uZSkge1xuICAgICAgcmVxdWVzdERlZmF1bHRzLmhlYWRlcnNbXCJ0aW1lLXpvbmVcIl0gPSBvcHRpb25zLnRpbWVab25lO1xuICAgIH1cbiAgICB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0LmRlZmF1bHRzKHJlcXVlc3REZWZhdWx0cyk7XG4gICAgdGhpcy5ncmFwaHFsID0gd2l0aEN1c3RvbVJlcXVlc3QodGhpcy5yZXF1ZXN0KS5kZWZhdWx0cyhyZXF1ZXN0RGVmYXVsdHMpO1xuICAgIHRoaXMubG9nID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHtcbiAgICAgICAgZGVidWc6IG5vb3AsXG4gICAgICAgIGluZm86IG5vb3AsXG4gICAgICAgIHdhcm46IGNvbnNvbGVXYXJuLFxuICAgICAgICBlcnJvcjogY29uc29sZUVycm9yXG4gICAgICB9LFxuICAgICAgb3B0aW9ucy5sb2dcbiAgICApO1xuICAgIHRoaXMuaG9vayA9IGhvb2s7XG4gICAgaWYgKCFvcHRpb25zLmF1dGhTdHJhdGVneSkge1xuICAgICAgaWYgKCFvcHRpb25zLmF1dGgpIHtcbiAgICAgICAgdGhpcy5hdXRoID0gYXN5bmMgKCkgPT4gKHtcbiAgICAgICAgICB0eXBlOiBcInVuYXV0aGVudGljYXRlZFwiXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgYXV0aCA9IGNyZWF0ZVRva2VuQXV0aChvcHRpb25zLmF1dGgpO1xuICAgICAgICBob29rLndyYXAoXCJyZXF1ZXN0XCIsIGF1dGguaG9vayk7XG4gICAgICAgIHRoaXMuYXV0aCA9IGF1dGg7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHsgYXV0aFN0cmF0ZWd5LCAuLi5vdGhlck9wdGlvbnMgfSA9IG9wdGlvbnM7XG4gICAgICBjb25zdCBhdXRoID0gYXV0aFN0cmF0ZWd5KFxuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJlcXVlc3Q6IHRoaXMucmVxdWVzdCxcbiAgICAgICAgICAgIGxvZzogdGhpcy5sb2csXG4gICAgICAgICAgICAvLyB3ZSBwYXNzIHRoZSBjdXJyZW50IG9jdG9raXQgaW5zdGFuY2UgYXMgd2VsbCBhcyBpdHMgY29uc3RydWN0b3Igb3B0aW9uc1xuICAgICAgICAgICAgLy8gdG8gYWxsb3cgZm9yIGF1dGhlbnRpY2F0aW9uIHN0cmF0ZWdpZXMgdGhhdCByZXR1cm4gYSBuZXcgb2N0b2tpdCBpbnN0YW5jZVxuICAgICAgICAgICAgLy8gdGhhdCBzaGFyZXMgdGhlIHNhbWUgaW50ZXJuYWwgc3RhdGUgYXMgdGhlIGN1cnJlbnQgb25lLiBUaGUgb3JpZ2luYWxcbiAgICAgICAgICAgIC8vIHJlcXVpcmVtZW50IGZvciB0aGlzIHdhcyB0aGUgXCJldmVudC1vY3Rva2l0XCIgYXV0aGVudGljYXRpb24gc3RyYXRlZ3lcbiAgICAgICAgICAgIC8vIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9wcm9ib3Qvb2N0b2tpdC1hdXRoLXByb2JvdC5cbiAgICAgICAgICAgIG9jdG9raXQ6IHRoaXMsXG4gICAgICAgICAgICBvY3Rva2l0T3B0aW9uczogb3RoZXJPcHRpb25zXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcHRpb25zLmF1dGhcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIGhvb2sud3JhcChcInJlcXVlc3RcIiwgYXV0aC5ob29rKTtcbiAgICAgIHRoaXMuYXV0aCA9IGF1dGg7XG4gICAgfVxuICAgIGNvbnN0IGNsYXNzQ29uc3RydWN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2xhc3NDb25zdHJ1Y3Rvci5wbHVnaW5zLmxlbmd0aDsgKytpKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNsYXNzQ29uc3RydWN0b3IucGx1Z2luc1tpXSh0aGlzLCBvcHRpb25zKSk7XG4gICAgfVxuICB9XG59O1xuZXhwb3J0IHtcbiAgT2N0b2tpdFxufTtcbiIsImltcG9ydCB7IE9jdG9raXQgfSBmcm9tICdAb2N0b2tpdC9jb3JlJ1xuXG5leHBvcnQgY29uc3QgZ2V0VXNlclByb2ZpbGUgPSBhc3luYyAodXNlcm5hbWUpID0+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS91c2Vycy8ke3VzZXJuYW1lfWApXG4gIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcblxuICByZXR1cm4gZGF0YVxufVxuXG5leHBvcnQgY29uc3QgZ2V0UmVwb0xpc3QgPSBhc3luYyAodXNlcm5hbWUpID0+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS91c2Vycy8ke3VzZXJuYW1lfS9yZXBvc2ApXG4gIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcblxuICByZXR1cm4gZGF0YVxufVxuXG5leHBvcnQgY29uc3QgZ2V0UHJvamVjdENvbW1pdHMgPSBhc3luYyAoe2tleSwgcmVwbywgdXNlcn0pID0+IHtcbiAgY29uc3Qgb2N0b2tpdCA9IG5ldyBPY3Rva2l0KHsgYXV0aDoga2V5IH0pXG5cbiAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBvY3Rva2l0LnJlcXVlc3QoYEdFVCAvcmVwb3MvJHt1c2VyfS8ke3JlcG99L2NvbW1pdHNgLCB7XG4gICAgb3duZXI6IHVzZXIsXG4gICAgcmVwbzogcmVwbyxcbiAgICBhY2NlcHQ6ICdhcHBsaWNhdGlvbi92bmQuZ2l0aHViK2pzb24nLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICdYLUdpdEh1Yi1BcGktVmVyc2lvbic6ICcyMDIyLTExLTI4J1xuICAgIH1cbiAgfSlcblxuICBjb25zdCByZXBvRGF0YSA9IGRhdGEucmVkdWNlKChhY2MsIG9iaiwgaW5kKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ2FjYzogJywgYWNjKVxuICAgIGNvbnN0IGRhdGUgPSBvYmouY29tbWl0LmF1dGhvci5kYXRlLnNsaWNlKDAsIDEwKVxuICAgIGNvbnN0IHByZXZEYXRlID0gZGF0YVtpbmQgLSAxXSA/IGRhdGFbaW5kIC0gMV0uY29tbWl0LmF1dGhvci5kYXRlLnNsaWNlKDAsIDEwKSA6IG51bGxcbiAgICBcbiAgICBpZiAoZGF0ZSAhPT0gcHJldkRhdGUpIHtcbiAgICAgIGNvbnN0IHsgY29tbWl0LCBub2RlX2lkLCBodG1sX3VybCB9ID0gb2JqXG4gICAgICBjb25zdCB7IGF1dGhvciwgbWVzc2FnZSB9ID0gY29tbWl0XG4gICAgICBjb25zdCB7IG5hbWUgfSA9IGF1dGhvclxuICAgICAgXG4gICAgICBpZiAoIWFjY1tEYXRlLnBhcnNlKGRhdGUpXSkge1xuICAgICAgICBhY2NbRGF0ZS5wYXJzZShkYXRlKV0gPSB7fVxuICAgICAgICBPYmplY3QuYXNzaWduKGFjY1tEYXRlLnBhcnNlKGRhdGUpXSwgeyBub2RlX2lkLCBodG1sX3VybCwgbWVzc2FnZSwgbmFtZSwgfSkgXG4gICAgICB9XG5cbiAgICB9XG4gICAgXG4gIH0sIFtdKVxuICBcbmNvbnNvbGUubG9nKCdyZXBvRGF0YTogJywgcmVwb0RhdGEpXG5cblxuXG5cblxuXG5cblxuICByZXR1cm4gZGF0YS5tYXAoKGNvbW1pdE9iaikgPT4ge1xuICAgIGNvbnN0IHsgY29tbWl0LCBub2RlX2lkLCBodG1sX3VybCB9ID0gY29tbWl0T2JqXG4gICAgY29uc3QgeyBhdXRob3IsIG1lc3NhZ2UgfSA9IGNvbW1pdFxuICAgIGNvbnN0IHsgbmFtZSwgZGF0ZSB9ID0gYXV0aG9yXG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgbWVzc2FnZSxcbiAgICAgIG5vZGVfaWQsXG4gICAgICBodG1sX3VybCxcbiAgICAgIG5hbWUsXG4gICAgICBkYXRlXG4gICAgfSlcbiAgfSlcbn0iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgTGluaywgT3V0bGV0LCB1c2VOYXZpZ2F0ZSB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5pbXBvcnQgc3R5bGUgZnJvbSAnLi9pbmRleC5tb2R1bGUuY3NzJ1xuaW1wb3J0IHsgZ2V0VXNlclByb2ZpbGUsIGdldFJlcG9MaXN0LCBnZXRQcm9qZWN0Q29tbWl0cyB9IGZyb20gJy4vaGVscGVycydcblxuY29uc3QgdXNlckRhdGEgPSB7XG4gIGtleTogcHJvY2Vzcy5lbnYuR0lUSFVCX0tFWSxcbiAgdXNlcjogcHJvY2Vzcy5lbnYuR0lUSFVCX1VTRVJfTkFNRSxcbiAgcmVwbzogcHJvY2Vzcy5lbnYuR0lUSFVCX1JFUE9fTkFNRSxcbn1cbmNvbnNvbGUubG9nKCd1c2VyRGF0YTogJywgcHJvY2Vzcy5lbnYpXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEdpdEh1YlByb2plY3RNb2R1bGUoKSB7XG4gIGNvbnN0IFtnaXRodWJLZXlzLCBzZXRHaXRIdWJLZXlzXSA9IHVzZVN0YXRlKHt9KVxuICBjb25zdCBbcHJvamVjdENvbW1pdHMsIHNldFByb2plY3RDb21taXRzXSA9IHVzZVN0YXRlKFtdKVxuICBjb25zdCBbZ2l0SHViU3RhdHVzRXJyb3IsIHNldEdpdEh1YlN0YXR1c0Vycm9yXSA9IHVzZVN0YXRlKCcnKVxuICBjb25zdCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKClcbiAgXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIFxuICAgICAgXG4gICAgICBjb25zdCB1c2VyID0gZ2V0UHJvamVjdENvbW1pdHModXNlckRhdGEpXG4gICAgICB1c2VyLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgIHNldFByb2plY3RDb21taXRzKCgpID0+IGRhdGEpXG4gICAgICB9KVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHNldEdpdEh1YlN0YXR1c0Vycm9yKGBVbmFibGUgdG8gY29ubmVjdCB0byBHaXRIdWI6ICR7ZXJyb3J9YClcbiAgICB9XG4gIH0sIFtdKVxuXG4gIGNvbnN0IGNvbW1pdHNMaXN0ID0gcHJvamVjdENvbW1pdHMubWFwKGNvbW1pdE9iaiA9PiB7XG4gICAgY29uc3QgeyBub2RlX2lkLCBuYW1lLCBkYXRlIH0gPSBjb21taXRPYmpcbiAgICBjb25zdCBjbGVhbkRhdGUgPSBkYXRlLnNsaWNlKDAsIDEwKVxuICAgIFxuICAgIHJldHVybiAoXG4gICAgICA8TGluayB0bz17YGNvbW1pdHMvOiR7ZGF0ZX1gfSBrZXk9e25vZGVfaWR9IGNsYXNzTmFtZT17c3R5bGUuQXJyfT5cbiAgICAgICAgPGgzPntuYW1lfTwvaDM+XG4gICAgICAgIDxwPntkYXRlfTwvcD5cbiAgICAgIDwvTGluaz5cbiAgICApXG4gIH0pXG5cblxuICBjb25zdCBjb21taXRMaXN0Q2FyZHMgPSBwcm9qZWN0Q29tbWl0cy5tYXAoY29tbWl0T2JqID0+IHtcbiAgICBjb25zdCB7IG1lc3NhZ2UsIG5vZGVfaWQsIGh0bWxfdXJsLCBuYW1lLCBkYXRlIH0gPSBjb21taXRPYmpcbiAgICBcbiAgICByZXR1cm4gKFxuICAgICAgPExpbmsgdG89e2h0bWxfdXJsfSBrZXk9e25vZGVfaWR9IGNsYXNzTmFtZT17c3R5bGUuY2FyZH0+XG4gICAgICAgIDxoMz57bmFtZX08L2gzPlxuICAgICAgICA8cD57ZGF0ZX08L3A+XG4gICAgICA8L0xpbms+XG4gICAgKVxuICB9KVxuICBcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGUubW9kdWxlQ29udGFpbmVyfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZS5oZWFkZXJDb250YWluZXJ9PlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IG5hdmlnYXRlKCcvJywgeyByZXBsYWNlOnRydWUgfSkgfT5DbG9zZTwvYnV0dG9uPlxuICAgICAgICA8aDE+e2A8JHt1c2VyRGF0YS5yZXBvfSAvPmB9PC9oMT5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlLmNhcmRzQ29udGFpbmVyfT5cbiAgICAgIDwvZGl2PlxuICAgICAgPE91dGxldCAvPlxuICAgIDwvZGl2PlxuICApXG59IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LnN0eWxlLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LnN0eWxlLm1vZHVsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaGVhZGVyLm1vZHVsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2hlYWRlci5tb2R1bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlIGZyb20gJy4vaGVhZGVyLm1vZHVsZS5jc3MnXG5cbmZ1bmN0aW9uIEhlYWRlcihwcm9wcykge1xuXHRjb25zdCB7IGlzRWF0aW4sIGh1bmdlclZhbCB9ID0gcHJvcHNcblx0Y29uc3QgZGVmYXVsdFRleHQgPSBcIlBvb3AgTWFjaGluZSBNYW4sIEdPIVwiXG5cdGNvbnN0IGlzRWF0aW5UZXh0ID1cdCAnVGhlIG1vcmUgeW91IGVhdCwgdGhlIG1vcmUgeW91IGdldCB0byBwb29wISdcblx0Y29uc3QgaXNQb29waW5UZXh0ID0gJ0dyZWF0IGpvYiBwb29waW5cXCcgdGhlcmUsIHBvb3BpblxcJyBndXkhJ1xuXG5cdHJldHVybiAoXG5cdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlLmhlYWRlckNvbnRhaW5lcn0+XG5cdFx0XHQ8cD57XG5cdFx0XHRcdGlzRWF0aW4gJiYgaHVuZ2VyVmFsID49IDFcblx0XHRcdFx0XHQ/IGlzRWF0aW5UZXh0XG5cdFx0XHRcdFx0OiAhaXNFYXRpbiAmJiBodW5nZXJWYWwgPiAwXG5cdFx0XHRcdFx0XHQ/IGlzUG9vcGluVGV4dFxuXHRcdFx0XHRcdFx0OiBkZWZhdWx0VGV4dFxuXHRcdFx0fTwvcD5cblx0XHQ8L2Rpdj5cblx0KVxufVxuXG5leHBvcnQgZGVmYXVsdCBIZWFkZXI7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5jb25zdCBwb29waW5HdXlJY29uID0gcmVxdWlyZSgnLi4vLi4vLi4vYXNzZXRzL2ljb25zL2Jvd2VsLW1vdGlvbi5wbmcnKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQb29waW5HdXkocHJvcHMpIHtcblx0Y29uc3QgeyBpc1Bvb3BpbiwgbWFrZVBvb3AsIGh1bmdlclZhbCwgc3R5bGUgfSAgPSBwcm9wc1xuXG5cdHJldHVybiAoXG5cdFx0PGRpdlxuXHRcdFx0Y2xhc3NOYW1lPXtzdHlsZS5ndXlBY3Rpb25DYXJkQ29udGFpbmVyfVxuXHRcdFx0b25DbGljaz17KCkgPT4gaHVuZ2VyVmFsID49IDEgPyBtYWtlUG9vcCgncG9vcGluJykgOiBudWxsfT5cblx0XHRcdDxpbWcgY2xhc3NOYW1lPXtzdHlsZS5ndXlJY29ufSBzcmM9e3Bvb3Bpbkd1eUljb259IGFsdD1cInBvb3BpbiBpY29uXCIvPlxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlLmd1eVRleHRCb3h9PlxuXHRcdFx0XHQ8cCBjbGFzc05hbWU9e3N0eWxlLmd1eVN0YXR1c1RleHR9PlxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGlzUG9vcGluID09PSB0cnVlICYmIGh1bmdlclZhbCA9PT0gMFxuXHRcdFx0XHRcdFx0XHQ/IFwiTm8gbW9yZSBwb29wcyBoZXJlIVwiXG5cdFx0XHRcdFx0XHRcdDogaXNQb29waW4gJiYgaHVuZ2VyVmFsID4gMFxuXHRcdFx0XHRcdFx0XHRcdD8gXCJJXFwnbSBwb29waW4hXCJcblx0XHRcdFx0XHRcdFx0XHQ6IG51bGxcblx0XHRcdFx0XHR9XG5cdFx0XHRcdDwvcD5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXHQpXG59OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xuY29uc3QgZWF0aW5HdXlJY29uID0gcmVxdWlyZSgnLi4vLi4vLi4vYXNzZXRzL2ljb25zL2Zvb2QucG5nJylcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRWF0aW5HdXkocHJvcHMpIHtcblx0Y29uc3QgeyBpc0VhdGluLCBtYWtlRWF0LCBodW5nZXJWYWwsIG1heFBvb3BzLCBzdHlsZSB9ID0gcHJvcHNcblxuXHRyZXR1cm4gKFxuXHRcdDxkaXZcblx0XHRcdGNsYXNzTmFtZT17c3R5bGUuZ3V5QWN0aW9uQ2FyZENvbnRhaW5lcn1cblx0XHRcdG9uQ2xpY2s9eygpID0+IGh1bmdlclZhbCA8IG1heFBvb3BzID8gbWFrZUVhdCgnZWF0aW4nKSA6IG51bGx9XG5cdFx0PlxuXHRcdFx0PGltZyBjbGFzc05hbWU9e3N0eWxlLmd1eUljb259IHNyYz17ZWF0aW5HdXlJY29ufSBhbHQ9XCJlYXRpblwiLz5cblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtzdHlsZS5ndXlUZXh0Qm94fT5cblx0XHQgXHRcdDxwIGNsYXNzTmFtZT17c3R5bGUuZ3V5U3RhdHVzVGV4dH0+XG5cdFx0XHQgXHRcdHtcblx0XHRcdCBcdFx0XHRodW5nZXJWYWwgPT09IG1heFBvb3BzXG5cdFx0XHQgXHRcdFx0PyBcIklcXCdtIGZ1bGwuIE1ha2UgbWUgcG9vcCBzbyBJIGNhbiBlYXQgbW9yZSFcIlxuXHRcdFx0IFx0XHRcdDogaXNFYXRpblxuXHRcdFx0IFx0XHRcdFx0PyBcIkltICBlYXRpbiFcIlxuXHRcdFx0IFx0XHRcdFx0OiBudWxsXG5cdFx0XHQgXHRcdH1cblx0XHRcdCBcdDwvcD5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXHQpXG59OyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9odW5nZXJWYWwuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9odW5nZXJWYWwuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiY29uc3QgTGlnaHRlbkRhcmtlbkNvbG9yID0gKGNvbCxhbXQpID0+IHtcblx0bGV0IHVzZVBvdW5kID0gZmFsc2U7XG4gIFxuICAgIGlmIChjb2xbMF0udG9TdHJpbmcoKSA9PT0gXCIjXCIpIHtcbiAgICAgIGNvbCA9IGNvbC5zbGljZSgxKTtcbiAgICAgIHVzZVBvdW5kID0gdHJ1ZTtcbiAgICB9O1xuIFxuICAgIGNvbnN0IG51bSA9IHBhcnNlSW50KGNvbCwxNik7XG4gXG4gICAgbGV0IHIgPSAobnVtID4+IDE2KSArIGFtdDtcbiBcbiAgICBpZiAociA+IDI1NSkgciA9IDI1NTtcbiAgICBlbHNlIGlmICAociA8IDApIHIgPSAwO1xuIFxuICAgIGxldCBiID0gKChudW0gPj4gOCkgJiAweDAwRkYpICsgYW10O1xuIFxuICAgIGlmIChiID4gMjU1KSBiID0gMjU1O1xuICAgIGVsc2UgaWYgIChiIDwgMCkgYiA9IDA7XG4gXG4gICAgbGV0IGcgPSAobnVtICYgMHgwMDAwRkYpICsgYW10O1xuIFxuICAgIGlmIChnID4gMjU1KSBnID0gMjU1O1xuICAgIGVsc2UgaWYgKGcgPCAwKSBnID0gMDtcbiBcbiAgICByZXR1cm4gKHVzZVBvdW5kID8gXCIjXCIgOiBcIlwiKSArIChnIHwgKGIgPDwgOCkgfCAociA8PCAxNikpLnRvU3RyaW5nKDE2KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExpZ2h0ZW5EYXJrZW5Db2xvcjtcblxuLy8gZnVuY3Rpb24gZm91bmQgYXQ6XG4vLyBodHRwczovL2Nzcy10cmlja3MuY29tL3NuaXBwZXRzL2phdmFzY3JpcHQvbGlnaHRlbi1kYXJrZW4tY29sb3IvIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlIGZyb20gJy4vaHVuZ2VyVmFsLmNzcyc7XG5pbXBvcnQgbGlnaHRlbkRhcmtlbiBmcm9tICcuL2xpZ2h0ZW5EYXJrZW4nXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEh1bmdlclZhbChwcm9wcykge1xuXHRjb25zdCB7IGh1bmdlclZhbCwgbWF4UG9vcHMgfSA9IHByb3BzXG5cblx0Y29uc3QgYnVpbGRQb29wTWV0ZXIgPSAoKSA9PiB7XG5cdFx0Y29uc3QgbWV0ZXJBcnJheSA9IFtdXG5cblx0XHRmb3IgKGxldCBpPW1heFBvb3BzOyBpID49IDA7IGktLSkge1xuXHRcdFx0bGV0IHBvb3BzVmFsID0gaS50b1N0cmluZygpXG5cdFx0XHRpZiAoaSA9PT0gMTApIHsgcG9vcHNWYWwgPSBcIjlmXCIgfVxuXHRcdFx0aWYgKGkgPD0gOSkgeyBwb29wc1ZhbCA9IGkgKyBcImVcIiB9XG5cblx0XHRcdGNvbnN0IGlucHV0Q29sb3IgPSAnI2ZmJyArIHBvb3BzVmFsICsgJzFkJ1xuXHRcdFx0bGV0IG5ld0NvbG9yID0gbGlnaHRlbkRhcmtlbihpbnB1dENvbG9yLCBpKVxuXHRcdFx0Y29uc3QgbWV0ZXJTdHlsZSA9IHsgXCJiYWNrZ3JvdW5kQ29sb3JcIjpuZXdDb2xvciB9XG5cblx0XHRcdG1ldGVyQXJyYXkucHVzaChcblx0XHRcdFx0PGRpdlxuXHRcdFx0XHRcdGtleT17aX1cblx0XHRcdFx0XHRjbGFzc05hbWU9J21ldGVyLWVsZW1lbnQnXG5cdFx0XHRcdFx0c3R5bGU9e21ldGVyU3R5bGV9XG5cdFx0XHRcdFx0PlxuXHRcdFx0XHR7aSA9PT0gaHVuZ2VyVmFsID8gaSArIFwiIHBvb3BzIGluIG15IGJ1bSFcIjogJyd9XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0KVxuXHRcdH1cblx0XHRyZXR1cm4gbWV0ZXJBcnJheVxuXHR9XG5cblx0Y29uc3QgcG9vcE1ldGVyID0gYnVpbGRQb29wTWV0ZXIoKVxuXG5cdHJldHVybiAoXG5cdFx0PGRpdiBjbGFzc05hbWU9J2h1bmdlci12YWwtY29udGFpbmVyJz5cblx0XHRcdHtwb29wTWV0ZXJ9XG5cdFx0PC9kaXY+XG5cdClcbn07IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHN0eWxlIGZyb20gJy4vaW5kZXguc3R5bGUubW9kdWxlLmNzcydcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9IZWFkZXIvSGVhZGVyJ1xuaW1wb3J0IFBvb3Bpbkd1eSBmcm9tICcuL3Bvb3Bpbkd1eS9Qb29waW5HdXknXG5pbXBvcnQgRWF0aW5HdXkgZnJvbSAnLi9lYXRpbkd1eS9FYXRpbkd1eSdcbmltcG9ydCBIdW5nZXJWYWwgZnJvbSAnLi9odW5nZXJWYWwvSHVuZ2VyVmFsJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQb29wTWFjaGluZSgpIHtcblx0Y29uc3QgW2h1bmdlclZhbCwgc2V0SHVuZ2VyVmFsXSA9IHVzZVN0YXRlKDApXG5cdGNvbnN0IFtpc0VhdGluLCBzZXRJc0VhdGluXSA9IHVzZVN0YXRlKGZhbHNlKVxuXHRjb25zdCBbaXNQb29waW4sIHNldElzUG9vcGluXSA9IHVzZVN0YXRlKGZhbHNlKVxuXHRjb25zdCBbbWF4UG9vcHMsIHNldE1heFBvb3BzXSA9IHVzZVN0YXRlKDEwKVxuXG5cdGNvbnN0IGhhbmRsZUNsaWNrID0gYWN0aW9uID0+IHtcblx0XHRzd2l0Y2goYWN0aW9uKSB7XG5cdFx0XHRjYXNlICdlYXRpbic6IHtcblx0XHRcdFx0c2V0SXNFYXRpbih0cnVlKVxuXHRcdFx0XHRzZXRJc1Bvb3BpbihmYWxzZSlcblx0XHRcdFx0aHVuZ2VyVmFsIDwgbWF4UG9vcHMgPyBzZXRIdW5nZXJWYWwoYSA9PiBhICsgMSkgOiBudWxsXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHR9XG5cdFx0XHRjYXNlICdwb29waW4nOiB7XG5cdFx0XHRcdHNldElzRWF0aW4oZmFsc2UpXG5cdFx0XHRcdHNldElzUG9vcGluKHRydWUpXG5cdFx0XHRcdGh1bmdlclZhbCA+IDAgPyBzZXRIdW5nZXJWYWwoYSA9PiBhIC0gMSkgOiBudWxsXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiAoXG5cdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlLmFwcENvbnRhaW5lcn0+XG5cdFx0XHQ8SGVhZGVyIGlzRWF0aW49e2lzRWF0aW59IGh1bmdlclZhbD17aHVuZ2VyVmFsfSAvPlxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlLmJvdGhHdXlzQ29udGFpbmVyfT5cblx0XHRcdFx0PEVhdGluR3V5XG5cdFx0XHRcdFx0aXNFYXRpbj17aXNFYXRpbn1cblx0XHRcdFx0XHRtYWtlRWF0PXtoYW5kbGVDbGlja31cblx0XHRcdFx0XHRodW5nZXJWYWw9e2h1bmdlclZhbH1cblx0XHRcdFx0XHRtYXhQb29wcz17bWF4UG9vcHN9XG5cdFx0XHRcdFx0c3R5bGU9e3N0eWxlfVxuXHRcdFx0XHQvPlxuXHRcdFx0XHQ8SHVuZ2VyVmFsXG5cdFx0XHRcdFx0aHVuZ2VyVmFsPXtodW5nZXJWYWx9XG5cdFx0XHRcdFx0bWF4UG9vcHM9e21heFBvb3BzfVxuXHRcdFx0XHQvPlxuXHRcdFx0XHQ8UG9vcGluR3V5XG5cdFx0XHRcdFx0aXNQb29waW49e2lzUG9vcGlufVxuXHRcdFx0XHRcdG1ha2VQb29wPXtoYW5kbGVDbGlja31cblx0XHRcdFx0XHRodW5nZXJWYWw9e2h1bmdlclZhbH1cblx0XHRcdFx0XHRzdHlsZT17c3R5bGV9XG5cdFx0XHRcdC8+XG5cdFx0XHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblx0KVxufTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXgubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXgubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlUm91dGVFcnJvciwgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5pbXBvcnQgc3R5bGUgZnJvbSAnLi9pbmRleC5tb2R1bGUuY3NzJ1xuY29uc3QgZGFuZ2VyUm9ib3QgPSByZXF1aXJlKCcuLi8uLi9hc3NldHMvaW1hZ2VzL2RhbmdlcldpbGxSb2JpbnNvbi5qcGVnJylcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRXJyb3JQYWdlKCkge1xuXHRjb25zdCBlcnJvciA9IHVzZVJvdXRlRXJyb3IoKVxuXG5cdHJldHVybiAoXG5cdFx0PGRpdiBzdHlsZT17c3R5bGUuY29udGFpbmVyfT5cblx0XHRcdDxMaW5rIHRvPXsnLyd9ID5CYWNrIHRvIEhvbWU8L0xpbms+XG5cdFx0XHQ8aW1nXG5cdFx0XHRcdHN0eWxlPXtzdHlsZS5pbWFnZX1cblx0XHRcdFx0c3JjPXtkYW5nZXJSb2JvdH1cblx0XHRcdFx0YWx0PVwiRXJyb3IsIFdpbGwgUm9iaW5zb24hXCIgLz5cblx0XHRcdDxoMT5FcnJvciwgV2lsbCBSb2JpbnNvbiE8L2gxPlxuXHRcdFx0PHAgc3R5bGU9e3N0eWxlLmVycm9yfT5cblx0XHRcdFx0PGk+e2Vycm9yLnN0YXR1c1RleHQgfHwgZXJyb3IubWVzc2FnZX08L2k+XG5cdFx0XHQ8L3A+XG5cdFx0PC9kaXY+XG5cdClcbn0iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXgubW9kdWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXgubW9kdWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZSBmcm9tICcuL2luZGV4Lm1vZHVsZS5jc3MnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNwaW5uZXJPZkRvb20oKSB7XG5cblx0cmV0dXJuIChcblx0XHQ8ZGl2IGNsYXNzTmFtZT17c3R5bGUuc3Bpbm5lck9mRG9vbVdyYXBwZXJ9PlxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e3N0eWxlLmhlYWRlckNvbnRhaW5lcn0+XG5cdFx0XHRcdDxwPlNwaW5uZXIgb2YgRG9vbSE8L3A+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtzdHlsZS5zcGlubmVyfT5Eb29tIERvb20hPC9kaXY+XG5cdFx0PC9kaXY+XG5cdClcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjcmVhdGVSb290IH0gZnJvbSAncmVhY3QtZG9tL2NsaWVudCdcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJSb3V0ZXIsIFJvdXRlclByb3ZpZGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcblxuaW1wb3J0IHN0eWxlIGZyb20gJy4vcm9vdC5zdHlsZS5jc3MnXG5pbXBvcnQgSG9tZVBhZ2UgXHRcdFx0XHRmcm9tICcuL3BhZ2VzL0hvbWVQYWdlJ1xuaW1wb3J0IFBlcnNvbmFsIFx0XHRcdFx0ZnJvbSAnLi9wYWdlcy9QZXJzb25hbCdcbmltcG9ydCBDb250YWN0IFx0XHRcdFx0XHRmcm9tICcuL3BhZ2VzL0NvbnRhY3QnXG5pbXBvcnQgeyBDb250YWN0Rm9ybSB9IFx0ZnJvbSAnLi9wYWdlcy9Db250YWN0L2NvbXBvbmVudHMvY29udGFjdEZvcm0nXG5pbXBvcnQgU3BpbkNvbm5lY3QgXHRcdFx0ZnJvbSAnLi9wYWdlcy9TcGluQ29ubmVjdCdcbmltcG9ydCBQb29wTWFjaGluZSBcdFx0XHRmcm9tICcuL3BhZ2VzL1Bvb3BNYWNoaW5lJ1xuaW1wb3J0IEVycm9yUGFnZSBcdFx0XHRcdGZyb20gJy4vcGFnZXMvRXJyb3JQYWdlJ1xuaW1wb3J0IFNwaW5uZXJPZkRvb20gXHRcdGZyb20gJy4vcGFnZXMvU3Bpbm5lck9mRG9vbSdcblxuY29uc3Qgcm91dGVyID0gY3JlYXRlQnJvd3NlclJvdXRlcihbXG5cdHtcblx0XHRwYXRoOiAnLycsXG5cdFx0ZWxlbWVudDogPEhvbWVQYWdlIC8+LFxuXHR9LFxuXHR7XG5cdFx0cGF0aDogJy9jb250YWN0LyonLFxuXHRcdGVsZW1lbnQ6IDxDb250YWN0IC8+LFxuXHRcdGNoaWxkcmVuOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBhdGg6ICdjb250YWN0X2Zvcm0nLFxuXHRcdFx0XHRlbGVtZW50OiA8Q29udGFjdEZvcm0gLz4sXG5cdFx0XHR9LFxuXHRcdF0sXHRcblx0fSxcblx0e1xuXHRcdHBhdGg6ICcvcGVyc29uYWwnLFxuXHRcdGVsZW1lbnQ6IDxQZXJzb25hbCAvPixcblx0fSxcblx0e1xuXHRcdHBhdGg6ICcvc3Bpbl9jb25uZWN0Jyxcblx0XHRlbGVtZW50OiA8U3BpbkNvbm5lY3QgLz4sXG5cdH0sXG5cdHtcblx0XHRwYXRoOiAnL3Bvb3BfbWFjaGluZScsXG5cdFx0ZWxlbWVudDogPFBvb3BNYWNoaW5lIC8+LFxuXHR9LFxuXHR7XG5cdFx0cGF0aDogJyonLFxuXHRcdGVycm9yRWxlbWVudDogPEVycm9yUGFnZSAvPixcblx0fSxcbl0pXG5cbmNvbnN0IGRvbU5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpXG5jb25zdCByb290ID0gY3JlYXRlUm9vdChkb21Ob2RlKVxuXG5yb290LnJlbmRlcihcblx0PFJlYWN0LlN0cmljdE1vZGU+XG5cdFx0PFJvdXRlclByb3ZpZGVyXG5cdFx0XHRyb3V0ZXI9eyByb3V0ZXIgfVxuXHRcdFx0ZmFsbGJhY2tFbGVtZW50PXsgPFNwaW5uZXJPZkRvb20gLz4gfVxuXHRcdFx0ZnV0dXJlPXt7IHY3X3N0YXJ0VHJhbnNpdGlvbjp0cnVlIH19IC8+XG5cdDwvUmVhY3QuU3RyaWN0TW9kZT5cbikiXSwibmFtZXMiOlsibGVhZlByb3RvdHlwZXMiLCJnZXRQcm90byIsImJpb1RleHQiLCJwZXJzb25OYW1lIiwicG9zaXRpb24iLCJvcHRpb25zIiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJzZXRBdHRyaWJ1dGVzIiwiaW5zZXJ0IiwiZG9tQVBJIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwibG9jYWxzIiwidW5kZWZpbmVkIiwiTmF2QnRuIiwibG9jIiwiZnVuYyIsIlJlYWN0IiwiY2xhc3NOYW1lIiwic3R5bGUiLCJuYXZCdG5Db250YWluZXIiLCJuYXZCdG4iLCJ0eXBlIiwidmFsdWUiLCJjb25jYXQiLCJvbkNsaWNrIiwicmVnaXN0ZXIiLCJhZGRIb29rIiwicmVtb3ZlSG9vayIsImJpbmQiLCJGdW5jdGlvbiIsImJpbmRhYmxlIiwiYmluZEFwaSIsImhvb2siLCJzdGF0ZSIsIm5hbWUiLCJyZW1vdmVIb29rUmVmIiwiYXBwbHkiLCJhcGkiLCJyZW1vdmUiLCJmb3JFYWNoIiwia2luZCIsImFyZ3MiLCJIb29rQ29sbGVjdGlvbiIsInJlZ2lzdHJ5IiwiY29sbGVjdGlvbkhvb2tEZXByZWNhdGlvbk1lc3NhZ2VEaXNwbGF5ZWQiLCJIb29rIiwiY29uc29sZSIsIndhcm4iLCJTaW5ndWxhciIsInNpbmd1bGFySG9va1N0YXRlIiwic2luZ3VsYXJIb29rIiwiQ29sbGVjdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJvcmlnIiwibWV0aG9kIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwicmVzdWx0IiwicmVzdWx0XyIsImNhdGNoIiwiZXJyb3IiLCJwdXNoIiwiRXJyb3IiLCJBcnJheSIsImlzQXJyYXkiLCJyZXZlcnNlIiwicmVkdWNlIiwiY2FsbGJhY2siLCJyZWdpc3RlcmVkIiwiaW5kZXgiLCJtYXAiLCJpbmRleE9mIiwic3BsaWNlIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJpZCIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIiwiVVJMIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzRfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzJfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNF9fXyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwidXJsIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwid3JhcHB5Iiwib25jZSIsImZuIiwiZiIsImNhbGxlZCIsImFyZ3VtZW50cyIsIm9uY2VTdHJpY3QiLCJvbmNlRXJyb3IiLCJzdHJpY3QiLCJwcm90byIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwicHJvdG90eXBlIiwiY29uZmlndXJhYmxlIiwiYWEiLCJjYSIsInAiLCJhIiwiYiIsImMiLCJkYSIsIlNldCIsImVhIiwiZmEiLCJoYSIsImFkZCIsImlhIiwid2luZG93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiamEiLCJoYXNPd25Qcm9wZXJ0eSIsImthIiwibGEiLCJtYSIsInYiLCJkIiwiZSIsImciLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsInoiLCJzcGxpdCIsInRvTG93ZXJDYXNlIiwicmEiLCJzYSIsInRvVXBwZXJDYXNlIiwidGEiLCJwYSIsImlzTmFOIiwicWEiLCJjYWxsIiwib2EiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInhsaW5rSHJlZiIsInVhIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJ2YSIsIlN5bWJvbCIsImZvciIsIndhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiaXRlcmF0b3IiLCJLYSIsIkxhIiwiQSIsImFzc2lnbiIsIk1hIiwic3RhY2siLCJ0cmltIiwibWF0Y2giLCJOYSIsIk9hIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJzZXQiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwibCIsImgiLCJkaXNwbGF5TmFtZSIsImluY2x1ZGVzIiwiUGEiLCJ0YWciLCJyZW5kZXIiLCJRYSIsIiQkdHlwZW9mIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiUmEiLCJTYSIsIlRhIiwibm9kZU5hbWUiLCJWYSIsIl92YWx1ZVRyYWNrZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJjb25zdHJ1Y3RvciIsImdldCIsImVudW1lcmFibGUiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsImNoZWNrZWQiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsImFiIiwiYmIiLCJjYiIsImRiIiwib3duZXJEb2N1bWVudCIsImViIiwiZmIiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZ2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImNoaWxkcmVuIiwiaGIiLCJpYiIsImpiIiwidGV4dENvbnRlbnQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJvYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwicGIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImFzcGVjdFJhdGlvIiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicWIiLCJyYiIsInNiIiwic2V0UHJvcGVydHkiLCJrZXlzIiwiY2hhckF0Iiwic3Vic3RyaW5nIiwidGIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwic291cmNlIiwidHJhY2siLCJ3YnIiLCJ1YiIsInZiIiwiaXMiLCJ3YiIsInhiIiwidGFyZ2V0Iiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiTmIiLCJtIiwib25FcnJvciIsIk9iIiwiUGIiLCJRYiIsIlJiIiwiU2IiLCJUYiIsIlZiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiZmxhZ3MiLCJXYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiWGIiLCJaYiIsImNoaWxkIiwic2libGluZyIsImN1cnJlbnQiLCJZYiIsIiRiIiwiYWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiYmMiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsImNjIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJkYyIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIkIiLCJ1bnN0YWJsZV9ub3ciLCJlYyIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiZmMiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImdjIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJoYyIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiaWMiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImpjIiwidW5zdGFibGVfSWRsZVByaW9yaXR5Iiwia2MiLCJsYyIsIm9jIiwiTWF0aCIsImNsejMyIiwicGMiLCJxYyIsImxvZyIsIkxOMiIsInJjIiwic2MiLCJ0YyIsInVjIiwicGVuZGluZ0xhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsInZjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJldmVudFRpbWVzIiwiQ2MiLCJDIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiTWFwIiwiUGMiLCJRYyIsIlJjIiwiU2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJUYyIsIm5hdGl2ZUV2ZW50IiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsInRhcmdldENvbnRhaW5lcnMiLCJWYyIsIldjIiwicHJpb3JpdHkiLCJpc0RlaHlkcmF0ZWQiLCJjb250YWluZXJJbmZvIiwiWGMiLCJZYyIsImRpc3BhdGNoRXZlbnQiLCJzaGlmdCIsIlpjIiwiJGMiLCJhZCIsImJkIiwiY2QiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImRkIiwiZWQiLCJ0cmFuc2l0aW9uIiwiZmQiLCJnZCIsImhkIiwiVWMiLCJzdG9wUHJvcGFnYXRpb24iLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwib2QiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwZCIsInFkIiwicmQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJ3ZCIsInhkIiwieWQiLCJzZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSWQiLCJjbGlwYm9hcmREYXRhIiwiSmQiLCJMZCIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJRZCIsImtleSIsImZyb21DaGFyQ29kZSIsImNvZGUiLCJsb2NhdGlvbiIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiUmQiLCJUZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWWQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIlpkIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsIndlZWsiLCJtZSIsIm5lIiwib2UiLCJldmVudCIsImxpc3RlbmVycyIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwibm9kZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiTGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTWUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiTmUiLCJjb250ZW50RWRpdGFibGUiLCJPZSIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJkb2N1bWVudEVsZW1lbnQiLCJzdGFydCIsImVuZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibWluIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJleHRlbmQiLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwiZWxlbWVudCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsIldlIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiWGUiLCJZZSIsIlplIiwiYW5pbWF0aW9uIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwiZmYiLCJnZiIsImhmIiwibGYiLCJtZiIsIm5mIiwiVWIiLCJpbnN0YW5jZSIsImxpc3RlbmVyIiwiRCIsIm9mIiwiaGFzIiwicGYiLCJxZiIsInJmIiwicmFuZG9tIiwic2YiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIm4iLCJ0IiwiSiIsIngiLCJ1IiwidyIsIkYiLCJ0ZiIsInVmIiwicGFyZW50V2luZG93IiwidmYiLCJ3ZiIsIm5hIiwieGEiLCIkYSIsImJhIiwiamUiLCJjaGFyIiwia2UiLCJ1bnNoaWZ0IiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiRGYiLCJFZiIsIl9faHRtbCIsIkZmIiwic2V0VGltZW91dCIsIkdmIiwiY2xlYXJUaW1lb3V0IiwiSGYiLCJKZiIsInF1ZXVlTWljcm90YXNrIiwiSWYiLCJLZiIsIkxmIiwiTWYiLCJwcmV2aW91c1NpYmxpbmciLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiRSIsIkciLCJWZiIsIkgiLCJXZiIsIlhmIiwiWWYiLCJjb250ZXh0VHlwZXMiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJaZiIsImNoaWxkQ29udGV4dFR5cGVzIiwiJGYiLCJhZyIsImJnIiwiZ2V0Q2hpbGRDb250ZXh0IiwiY2ciLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJzZyIsInRnIiwidWciLCJ2ZyIsIndnIiwieGciLCJ5ZyIsIkkiLCJ6ZyIsIkFnIiwiQmciLCJlbGVtZW50VHlwZSIsImRlbGV0aW9ucyIsIkNnIiwicGVuZGluZ1Byb3BzIiwib3ZlcmZsb3ciLCJ0cmVlQ29udGV4dCIsInJldHJ5TGFuZSIsIkRnIiwibW9kZSIsIkVnIiwiRmciLCJHZyIsIm1lbW9pemVkUHJvcHMiLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwiZGVmYXVsdFByb3BzIiwiTWciLCJOZyIsIk9nIiwiUGciLCJRZyIsIlJnIiwiX2N1cnJlbnRWYWx1ZSIsIlNnIiwiY2hpbGRMYW5lcyIsIlRnIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJVZyIsIlZnIiwiY29udGV4dCIsIm1lbW9pemVkVmFsdWUiLCJuZXh0IiwiV2ciLCJYZyIsIllnIiwiaW50ZXJsZWF2ZWQiLCJaZyIsIiRnIiwiYWgiLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJiaCIsImNoIiwiZXZlbnRUaW1lIiwibGFuZSIsInBheWxvYWQiLCJkaCIsIksiLCJlaCIsImZoIiwiZ2giLCJxIiwiciIsInkiLCJoaCIsImloIiwiamgiLCJDb21wb25lbnQiLCJyZWZzIiwia2giLCJuaCIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsIkwiLCJsaCIsIm1oIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIm9oIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJwaCIsImNvbnRleHRUeXBlIiwidXBkYXRlciIsInFoIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwicmgiLCJwcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50Iiwic2giLCJyZWYiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwiaW1wbGVtZW50YXRpb24iLCJ6aCIsIkFoIiwiZG9uZSIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJ0YWdOYW1lIiwiSmgiLCJLaCIsIkxoIiwiTSIsIk1oIiwicmV2ZWFsT3JkZXIiLCJOaCIsIk9oIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJQaCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJRaCIsIlJoIiwiTiIsIk8iLCJQIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJRIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImJhc2VRdWV1ZSIsInF1ZXVlIiwiZGkiLCJlaSIsImZpIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImhhc0VhZ2VyU3RhdGUiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsImdpIiwiaGkiLCJpaSIsImppIiwia2kiLCJnZXRTbmFwc2hvdCIsImxpIiwibWkiLCJSIiwibmkiLCJsYXN0RWZmZWN0Iiwic3RvcmVzIiwib2kiLCJwaSIsInFpIiwicmkiLCJjcmVhdGUiLCJkZXN0cm95IiwiZGVwcyIsInNpIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJBaSIsIkJpIiwiQ2kiLCJEaSIsIkVpIiwiRmkiLCJHaSIsIkhpIiwiSWkiLCJKaSIsInJlYWRDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUluc2VydGlvbkVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VNdXRhYmxlU291cmNlIiwidXNlU3luY0V4dGVybmFsU3RvcmUiLCJ1c2VJZCIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsImlkZW50aWZpZXJQcmVmaXgiLCJLaSIsIm1lc3NhZ2UiLCJkaWdlc3QiLCJMaSIsIk1pIiwiTmkiLCJXZWFrTWFwIiwiT2kiLCJQaSIsIlFpIiwiUmkiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJjb21wb25lbnREaWRDYXRjaCIsIlNpIiwiY29tcG9uZW50U3RhY2siLCJUaSIsInBpbmdDYWNoZSIsIlVpIiwiVmkiLCJXaSIsIlhpIiwiUmVhY3RDdXJyZW50T3duZXIiLCJZaSIsIlppIiwiJGkiLCJhaiIsImJqIiwiY29tcGFyZSIsImNqIiwiZGoiLCJlaiIsImJhc2VMYW5lcyIsImNhY2hlUG9vbCIsInRyYW5zaXRpb25zIiwiZmoiLCJnaiIsImhqIiwiaWoiLCJqaiIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImtqIiwibGoiLCJwZW5kaW5nQ29udGV4dCIsIm1qIiwiQWoiLCJCaiIsIkNqIiwiRGoiLCJuaiIsIm9qIiwicGoiLCJmYWxsYmFjayIsInFqIiwicmoiLCJ0aiIsImRhdGFzZXQiLCJkZ3N0IiwidWoiLCJ2aiIsIl9yZWFjdFJldHJ5Iiwic2oiLCJzdWJ0cmVlRmxhZ3MiLCJ3aiIsInhqIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxNb2RlIiwieWoiLCJFaiIsIlMiLCJGaiIsIkdqIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIsIm9uY2xpY2siLCJzaXplIiwiY3JlYXRlRWxlbWVudE5TIiwiYXV0b0ZvY3VzIiwiY3JlYXRlVGV4dE5vZGUiLCJUIiwiSGoiLCJJaiIsIkpqIiwiS2oiLCJVIiwiTGoiLCJXZWFrU2V0IiwiViIsIk1qIiwiVyIsIk5qIiwiT2oiLCJRaiIsIlJqIiwiU2oiLCJUaiIsIlVqIiwiVmoiLCJXaiIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJYaiIsIlgiLCJZaiIsIlpqIiwiYWsiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiYmsiLCJjayIsImRrIiwiZWsiLCJmayIsImlzSGlkZGVuIiwiZ2siLCJoayIsImRpc3BsYXkiLCJpayIsImprIiwia2siLCJsayIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwic3JjIiwiV2siLCJtayIsImNlaWwiLCJuayIsIm9rIiwicGsiLCJZIiwiWiIsInFrIiwicmsiLCJzayIsInRrIiwidWsiLCJJbmZpbml0eSIsInZrIiwid2siLCJ4ayIsInlrIiwiemsiLCJBayIsIkJrIiwiQ2siLCJEayIsIkVrIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiZXhwaXJlZExhbmVzIiwid2MiLCJjYWxsYmFja1ByaW9yaXR5IiwiaWciLCJGayIsIkdrIiwiSGsiLCJJayIsIkprIiwiS2siLCJMayIsIk1rIiwiTmsiLCJPayIsIlBrIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIlFrIiwidGltZW91dEhhbmRsZSIsIlJrIiwiU2siLCJUayIsIlVrIiwiVmsiLCJtdXRhYmxlUmVhZExhbmVzIiwiQmMiLCJQaiIsIm9uQ29tbWl0RmliZXJSb290IiwibWMiLCJvblJlY292ZXJhYmxlRXJyb3IiLCJYayIsIm9uUG9zdENvbW1pdEZpYmVyUm9vdCIsIllrIiwiWmsiLCJhbCIsImlzUmVhY3RDb21wb25lbnQiLCJwZW5kaW5nQ2hpbGRyZW4iLCJibCIsIm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEiLCJjbCIsImNhY2hlIiwicGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyIsImVsIiwiZmwiLCJnbCIsImhsIiwiaWwiLCJqbCIsInpqIiwiJGsiLCJsbCIsInJlcG9ydEVycm9yIiwibWwiLCJfaW50ZXJuYWxSb290IiwibmwiLCJvbCIsInBsIiwicWwiLCJzbCIsInJsIiwidW5tb3VudCIsInVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uIiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJ0bCIsInVzaW5nQ2xpZW50RW50cnlQb2ludCIsIkV2ZW50cyIsInVsIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwidmVyc2lvbiIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ2bCIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldEVycm9ySGFuZGxlciIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwicmVjb25jaWxlclZlcnNpb24iLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJ3bCIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0IiwiY3JlYXRlUG9ydGFsIiwiZGwiLCJjcmVhdGVSb290IiwidW5zdGFibGVfc3RyaWN0TW9kZSIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwiaHlkcmF0ZSIsImh5ZHJhdGVSb290IiwiaHlkcmF0ZWRTb3VyY2VzIiwiX2dldFZlcnNpb24iLCJfc291cmNlIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjaGVja0RDRSIsImVyciIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImVzY2FwZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiQ2hpbGRyZW4iLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2RlZmF1bHRWYWx1ZSIsIl9nbG9iYWxOYW1lIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJtZW1vIiwic3RhcnRUcmFuc2l0aW9uIiwidW5zdGFibGVfYWN0IiwicG9wIiwic29ydEluZGV4IiwicGVyZm9ybWFuY2UiLCJzZXRJbW1lZGlhdGUiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJuYXZpZ2F0b3IiLCJzY2hlZHVsaW5nIiwiaXNJbnB1dFBlbmRpbmciLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJmbG9vciIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJ1cGRhdGUiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZ2V0VGFyZ2V0IiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJUeXBlRXJyb3IiLCJ3cmFwcGVyIiwicmV0IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsImdldFByb3RvdHlwZU9mIiwibnMiLCJkZWYiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZGVmaW5pdGlvbiIsIm8iLCJwcm9wIiwidG9TdHJpbmdUYWciLCJiYXNlVVJJIiwic2VsZiIsIm5jIiwiQWN0aW9uIiwiX2V4dGVuZHMiLCJQb3BTdGF0ZUV2ZW50VHlwZSIsImludmFyaWFudCIsIndhcm5pbmciLCJjb25kIiwiZ2V0SGlzdG9yeVN0YXRlIiwidXNyIiwiaWR4IiwiY3JlYXRlTG9jYXRpb24iLCJ0byIsInBhdGhuYW1lIiwicGFyc2VQYXRoIiwic3Vic3RyIiwiX3JlZiIsInBhdGgiLCJwYXJzZWRQYXRoIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJSZXN1bHRUeXBlIiwiaW1tdXRhYmxlUm91dGVLZXlzIiwiY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyIsInJvdXRlcyIsIm1hcFJvdXRlUHJvcGVydGllcyIsInBhcmVudFBhdGgiLCJtYW5pZmVzdCIsInJvdXRlIiwidHJlZVBhdGgiLCJpc0luZGV4Um91dGUiLCJpbmRleFJvdXRlIiwicGF0aE9yTGF5b3V0Um91dGUiLCJtYXRjaFJvdXRlcyIsImxvY2F0aW9uQXJnIiwiYmFzZW5hbWUiLCJicmFuY2hlcyIsImZsYXR0ZW5Sb3V0ZXMiLCJzb3J0Iiwic2NvcmUiLCJldmVyeSIsImNvbXBhcmVJbmRleGVzIiwicm91dGVzTWV0YSIsImNoaWxkcmVuSW5kZXgiLCJyYW5rUm91dGVCcmFuY2hlcyIsIm1hdGNoZXMiLCJtYXRjaFJvdXRlQnJhbmNoIiwic2FmZWx5RGVjb2RlVVJJIiwicGFyZW50c01ldGEiLCJmbGF0dGVuUm91dGUiLCJyZWxhdGl2ZVBhdGgiLCJjYXNlU2Vuc2l0aXZlIiwic3RhcnRzV2l0aCIsImNvbXB1dGVTY29yZSIsIl9yb3V0ZSRwYXRoIiwiZXhwbG9kZWQiLCJleHBsb2RlT3B0aW9uYWxTZWdtZW50cyIsInNlZ21lbnRzIiwiZmlyc3QiLCJyZXN0IiwiaXNPcHRpb25hbCIsImVuZHNXaXRoIiwicmVxdWlyZWQiLCJyZXN0RXhwbG9kZWQiLCJzdWJwYXRoIiwicGFyYW1SZSIsImR5bmFtaWNTZWdtZW50VmFsdWUiLCJpbmRleFJvdXRlVmFsdWUiLCJlbXB0eVNlZ21lbnRWYWx1ZSIsInN0YXRpY1NlZ21lbnRWYWx1ZSIsInNwbGF0UGVuYWx0eSIsImlzU3BsYXQiLCJzIiwiaW5pdGlhbFNjb3JlIiwic29tZSIsImZpbHRlciIsInNlZ21lbnQiLCJicmFuY2giLCJtYXRjaGVkUGFyYW1zIiwibWF0Y2hlZFBhdGhuYW1lIiwicmVtYWluaW5nUGF0aG5hbWUiLCJwYXJhbXMiLCJwYXRobmFtZUJhc2UiLCJub3JtYWxpemVQYXRobmFtZSIsInBhdHRlcm4iLCJtYXRjaGVyIiwiY29tcGlsZWRQYXJhbXMiLCJyZWdleHBTb3VyY2UiLCJfIiwicGFyYW1OYW1lIiwiUmVnRXhwIiwiY29tcGlsZVBhdGgiLCJjYXB0dXJlR3JvdXBzIiwic3BsYXRWYWx1ZSIsImRlY29kZVVSSUNvbXBvbmVudCIsInNhZmVseURlY29kZVVSSUNvbXBvbmVudCIsImRlY29kZVVSSSIsInN0YXJ0SW5kZXgiLCJuZXh0Q2hhciIsImdldEludmFsaWRQYXRoRXJyb3IiLCJmaWVsZCIsImRlc3QiLCJnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyIsImdldFJlc29sdmVUb01hdGNoZXMiLCJ2N19yZWxhdGl2ZVNwbGF0UGF0aCIsInBhdGhNYXRjaGVzIiwidG9BcmciLCJyb3V0ZVBhdGhuYW1lcyIsImxvY2F0aW9uUGF0aG5hbWUiLCJpc1BhdGhSZWxhdGl2ZSIsImZyb20iLCJpc0VtcHR5UGF0aCIsInRvUGF0aG5hbWUiLCJyb3V0ZVBhdGhuYW1lSW5kZXgiLCJ0b1NlZ21lbnRzIiwiZnJvbVBhdGhuYW1lIiwicmVzb2x2ZVBhdGhuYW1lIiwibm9ybWFsaXplU2VhcmNoIiwibm9ybWFsaXplSGFzaCIsInJlc29sdmVQYXRoIiwiaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoIiwiaGFzQ3VycmVudFRyYWlsaW5nU2xhc2giLCJwYXRocyIsIkVycm9yUmVzcG9uc2VJbXBsIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImludGVybmFsIiwiaXNSb3V0ZUVycm9yUmVzcG9uc2UiLCJ2YWxpZE11dGF0aW9uTWV0aG9kc0FyciIsInZhbGlkTXV0YXRpb25NZXRob2RzIiwidmFsaWRSZXF1ZXN0TWV0aG9kc0FyciIsInZhbGlkUmVxdWVzdE1ldGhvZHMiLCJyZWRpcmVjdFN0YXR1c0NvZGVzIiwicmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzIiwiSURMRV9OQVZJR0FUSU9OIiwiZm9ybU1ldGhvZCIsImZvcm1BY3Rpb24iLCJmb3JtRW5jVHlwZSIsImZvcm1EYXRhIiwianNvbiIsInByb2NlZWQiLCJyZXNldCIsIkFCU09MVVRFX1VSTF9SRUdFWCIsImRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXMiLCJoYXNFcnJvckJvdW5kYXJ5IiwiQm9vbGVhbiIsIlRSQU5TSVRJT05TX1NUT1JBR0VfS0VZIiwibm9ybWFsaXplVG8iLCJwcmVwZW5kQmFzZW5hbWUiLCJmcm9tUm91dGVJZCIsInJlbGF0aXZlIiwiY29udGV4dHVhbE1hdGNoZXMiLCJhY3RpdmVSb3V0ZU1hdGNoIiwiaGFzTmFrZWRJbmRleFF1ZXJ5Iiwibm9ybWFsaXplTmF2aWdhdGVPcHRpb25zIiwibm9ybWFsaXplRm9ybU1ldGhvZCIsImlzRmV0Y2hlciIsIm9wdHMiLCJpc1N1Ym1pc3Npb25OYXZpZ2F0aW9uIiwiZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvciIsInNlYXJjaFBhcmFtcyIsImdldEludmFsaWRCb2R5RXJyb3IiLCJyYXdGb3JtTWV0aG9kIiwic3RyaXBIYXNoRnJvbVBhdGgiLCJpc011dGF0aW9uTWV0aG9kIiwiRm9ybURhdGEiLCJVUkxTZWFyY2hQYXJhbXMiLCJlbnRyaWVzIiwiYWNjIiwiX3JlZjMiLCJzdWJtaXNzaW9uIiwicGFyc2UiLCJjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyIsImNvbnZlcnRTZWFyY2hQYXJhbXNUb0Zvcm1EYXRhIiwiYXBwZW5kIiwiZ2V0TWF0Y2hlc1RvTG9hZCIsImhpc3RvcnkiLCJpc0luaXRpYWxMb2FkIiwiaXNSZXZhbGlkYXRpb25SZXF1aXJlZCIsImNhbmNlbGxlZERlZmVycmVkUm91dGVzIiwiY2FuY2VsbGVkRmV0Y2hlckxvYWRzIiwiZGVsZXRlZEZldGNoZXJzIiwiZmV0Y2hMb2FkTWF0Y2hlcyIsImZldGNoUmVkaXJlY3RJZHMiLCJyb3V0ZXNUb1VzZSIsInBlbmRpbmdBY3Rpb25EYXRhIiwicGVuZGluZ0Vycm9yIiwiYWN0aW9uUmVzdWx0IiwidmFsdWVzIiwiY3VycmVudFVybCIsImNyZWF0ZVVSTCIsIm5leHRVcmwiLCJib3VuZGFyeUlkIiwibmF2aWdhdGlvbk1hdGNoZXMiLCJib3VuZGFyeU1hdGNoZXMiLCJmaW5kSW5kZXgiLCJnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeSIsImxvYWRlciIsImxvYWRlckRhdGEiLCJlcnJvcnMiLCJjdXJyZW50TG9hZGVyRGF0YSIsImN1cnJlbnRNYXRjaCIsImlzTmV3IiwiaXNNaXNzaW5nRGF0YSIsImlzTmV3TG9hZGVyIiwiY3VycmVudFJvdXRlTWF0Y2giLCJuZXh0Um91dGVNYXRjaCIsInNob3VsZFJldmFsaWRhdGVMb2FkZXIiLCJjdXJyZW50UGFyYW1zIiwibmV4dFBhcmFtcyIsImRlZmF1bHRTaG91bGRSZXZhbGlkYXRlIiwiaXNOZXdSb3V0ZUluc3RhbmNlIiwicmV2YWxpZGF0aW5nRmV0Y2hlcnMiLCJyb3V0ZUlkIiwiZmV0Y2hlck1hdGNoZXMiLCJjb250cm9sbGVyIiwiZmV0Y2hlciIsImZldGNoZXJzIiwiZmV0Y2hlck1hdGNoIiwiZ2V0VGFyZ2V0TWF0Y2giLCJzaG91bGRSZXZhbGlkYXRlIiwiQWJvcnRDb250cm9sbGVyIiwiY3VycmVudFBhdGgiLCJsb2FkZXJNYXRjaCIsImFyZyIsInJvdXRlQ2hvaWNlIiwiYXN5bmMiLCJsb2FkTGF6eVJvdXRlTW9kdWxlIiwibGF6eVJvdXRlIiwicm91dGVUb1VwZGF0ZSIsInJvdXRlVXBkYXRlcyIsImxhenlSb3V0ZVByb3BlcnR5IiwiaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkIiwiY2FsbExvYWRlck9yQWN0aW9uIiwicmVxdWVzdCIsInJlc3VsdFR5cGUiLCJvblJlamVjdCIsInJ1bkhhbmRsZXIiLCJoYW5kbGVyIiwicmVqZWN0IiwiYWJvcnRQcm9taXNlIiwic2lnbmFsIiwicmFjZSIsInJlcXVlc3RDb250ZXh0IiwiaGFuZGxlckVycm9yIiwiYWxsIiwiaGVhZGVycyIsImlzU3RhdGljUmVxdWVzdCIsInByb3RvY29sIiwiaXNTYW1lQmFzZW5hbWUiLCJvcmlnaW4iLCJyZWRpcmVjdCIsInJldmFsaWRhdGUiLCJyZWxvYWREb2N1bWVudCIsImlzUm91dGVSZXF1ZXN0IiwicmVzcG9uc2UiLCJjb250ZW50VHlwZSIsInN0YXR1c0NvZGUiLCJfcmVzdWx0JGluaXQiLCJfcmVzdWx0JGluaXQyIiwiZGVmZXJyZWQiLCJzdWJzY3JpYmUiLCJjYW5jZWwiLCJyZXNvbHZlRGF0YSIsImlzRGVmZXJyZWREYXRhIiwiZGVmZXJyZWREYXRhIiwiaW5pdCIsIkhlYWRlcnMiLCJjcmVhdGVDbGllbnRTaWRlUmVxdWVzdCIsIlJlcXVlc3QiLCJwcm9jZXNzTG9hZGVyRGF0YSIsIm1hdGNoZXNUb0xvYWQiLCJyZXN1bHRzIiwiZmV0Y2hlclJlc3VsdHMiLCJhY3RpdmVEZWZlcnJlZHMiLCJmb3VuZEVycm9yIiwibG9hZGVySGVhZGVycyIsImlzUmVkaXJlY3RSZXN1bHQiLCJpc0Vycm9yUmVzdWx0IiwiYm91bmRhcnlNYXRjaCIsImZpbmROZWFyZXN0Qm91bmRhcnkiLCJpc0RlZmVycmVkUmVzdWx0IiwicHJvY2Vzc1JvdXRlTG9hZGVyRGF0YSIsImFib3J0ZWQiLCJkb25lRmV0Y2hlciIsImdldERvbmVGZXRjaGVyIiwibWVyZ2VMb2FkZXJEYXRhIiwibmV3TG9hZGVyRGF0YSIsIm1lcmdlZExvYWRlckRhdGEiLCJmaW5kIiwiZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyIsIl90ZW1wNSIsImVycm9yTWVzc2FnZSIsImZpbmRSZWRpcmVjdCIsInJlc29sdmVEZWZlcnJlZFJlc3VsdHMiLCJjdXJyZW50TWF0Y2hlcyIsInNpZ25hbHMiLCJpc1JldmFsaWRhdGluZ0xvYWRlciIsInJlc29sdmVEZWZlcnJlZERhdGEiLCJ1bndyYXAiLCJ1bndyYXBwZWREYXRhIiwiZ2V0QWxsIiwiZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uIiwibmF2aWdhdGlvbiIsImdldExvYWRpbmdOYXZpZ2F0aW9uIiwiZ2V0TG9hZGluZ0ZldGNoZXIiLCJEYXRhUm91dGVyQ29udGV4dCIsIkRhdGFSb3V0ZXJTdGF0ZUNvbnRleHQiLCJOYXZpZ2F0aW9uQ29udGV4dCIsIkxvY2F0aW9uQ29udGV4dCIsIlJvdXRlQ29udGV4dCIsIm91dGxldCIsImlzRGF0YVJvdXRlIiwiUm91dGVFcnJvckNvbnRleHQiLCJ1c2VJblJvdXRlckNvbnRleHQiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0Iiwic3RhdGljIiwicm91dGVyIiwiaG9va05hbWUiLCJjdHgiLCJ1c2VEYXRhUm91dGVyQ29udGV4dCIsIkRhdGFSb3V0ZXJIb29rIiwiVXNlTmF2aWdhdGVTdGFibGUiLCJ1c2VDdXJyZW50Um91dGVJZCIsIkRhdGFSb3V0ZXJTdGF0ZUhvb2siLCJhY3RpdmVSZWYiLCJuYXZpZ2F0ZSIsInVzZU5hdmlnYXRlU3RhYmxlIiwiZGF0YVJvdXRlckNvbnRleHQiLCJmdXR1cmUiLCJyb3V0ZVBhdGhuYW1lc0pzb24iLCJnbyIsInVzZU5hdmlnYXRlVW5zdGFibGUiLCJPdXRsZXRDb250ZXh0IiwiX3RlbXAyIiwidXNlUm91dGVzSW1wbCIsImRhdGFSb3V0ZXJTdGF0ZSIsInBhcmVudE1hdGNoZXMiLCJyb3V0ZU1hdGNoIiwicGFyZW50UGFyYW1zIiwicGFyZW50UGF0aG5hbWVCYXNlIiwibG9jYXRpb25Gcm9tQ29udGV4dCIsIl9wYXJzZWRMb2NhdGlvbkFyZyRwYSIsInBhcnNlZExvY2F0aW9uQXJnIiwicmVuZGVyZWRNYXRjaGVzIiwiX2RhdGFSb3V0ZXJTdGF0ZTIiLCJfZGF0YVJvdXRlclN0YXRlIiwiZXJyb3JJbmRleCIsInJlbmRlckZhbGxiYWNrIiwiZmFsbGJhY2tJbmRleCIsInY3X3BhcnRpYWxIeWRyYXRpb24iLCJIeWRyYXRlRmFsbGJhY2siLCJoeWRyYXRlRmFsbGJhY2tFbGVtZW50IiwibmVlZHNUb1J1bkxvYWRlciIsInJlZHVjZVJpZ2h0Iiwic2hvdWxkUmVuZGVySHlkcmF0ZUZhbGxiYWNrIiwiZXJyb3JFbGVtZW50IiwiZGVmYXVsdEVycm9yRWxlbWVudCIsImFscmVhZHlXYXJuZWQiLCJnZXRDaGlsZHJlbiIsIlJlbmRlcmVkUm91dGUiLCJyb3V0ZUNvbnRleHQiLCJFcnJvckJvdW5kYXJ5IiwiUmVuZGVyRXJyb3JCb3VuZGFyeSIsInJldmFsaWRhdGlvbiIsImNvbXBvbmVudCIsIl9yZW5kZXJNYXRjaGVzIiwiZW5jb2RlTG9jYXRpb24iLCJuYXZpZ2F0aW9uVHlwZSIsIlBvcCIsIkRlZmF1bHRFcnJvckNvbXBvbmVudCIsInVzZVJvdXRlRXJyb3IiLCJwcmVTdHlsZXMiLCJwYWRkaW5nIiwiYmFja2dyb3VuZENvbG9yIiwiZm9udFN0eWxlIiwic3VwZXIiLCJlcnJvckluZm8iLCJzdGF0aWNDb250ZXh0IiwiX2RlZXBlc3RSZW5kZXJlZEJvdW5kYXJ5SWQiLCJ1c2VSb3V0ZUNvbnRleHQiLCJ0aGlzUm91dGUiLCJfc3RhdGUkZXJyb3JzIiwidXNlRGF0YVJvdXRlclN0YXRlIiwiVXNlUm91dGVFcnJvciIsIk91dGxldCIsInVzZU91dGxldCIsIlJvdXRlIiwiX3Byb3BzIiwiX3JlZjUiLCJiYXNlbmFtZVByb3AiLCJsb2NhdGlvblByb3AiLCJzdGF0aWNQcm9wIiwibmF2aWdhdGlvbkNvbnRleHQiLCJsb2NhdGlvbkNvbnRleHQiLCJ0cmFpbGluZ1BhdGhuYW1lIiwiUm91dGVzIiwiX3JlZjYiLCJjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4iLCJoYW5kbGUiLCJfZXhjbHVkZWQiLCJkZXNlcmlhbGl6ZUVycm9ycyIsInNlcmlhbGl6ZWQiLCJ2YWwiLCJfX3R5cGUiLCJfX3N1YlR5cGUiLCJFcnJvckNvbnN0cnVjdG9yIiwiVmlld1RyYW5zaXRpb25Db250ZXh0IiwiaXNUcmFuc2l0aW9uaW5nIiwiRmV0Y2hlcnNDb250ZXh0IiwiZmx1c2hTeW5jSW1wbCIsImZsdXNoU3luY1NhZmUiLCJEZWZlcnJlZCIsInByb21pc2UiLCJyZWFzb24iLCJmYWxsYmFja0VsZW1lbnQiLCJzZXRTdGF0ZUltcGwiLCJwZW5kaW5nU3RhdGUiLCJzZXRQZW5kaW5nU3RhdGUiLCJ2dENvbnRleHQiLCJzZXRWdENvbnRleHQiLCJyZW5kZXJEZmQiLCJzZXRSZW5kZXJEZmQiLCJzZXRUcmFuc2l0aW9uIiwiaW50ZXJydXB0aW9uIiwic2V0SW50ZXJydXB0aW9uIiwiZmV0Y2hlckRhdGEiLCJ2N19zdGFydFRyYW5zaXRpb24iLCJvcHRJblN0YXJ0VHJhbnNpdGlvbiIsInN0YXJ0VHJhbnNpdGlvblNhZmUiLCJuZXdTdGF0ZSIsIl9yZWYyIiwidW5zdGFibGVfZmx1c2hTeW5jIiwidW5zdGFibGVfdmlld1RyYW5zaXRpb25PcHRzIiwidmlld1RyYW5zaXRpb25PcHRzIiwiaXNWaWV3VHJhbnNpdGlvblVuYXZhaWxhYmxlIiwic3RhcnRWaWV3VHJhbnNpdGlvbiIsInNraXBUcmFuc2l0aW9uIiwiY3VycmVudExvY2F0aW9uIiwibmV4dExvY2F0aW9uIiwiZmluaXNoZWQiLCJmaW5hbGx5IiwicmVuZGVyUHJvbWlzZSIsImNyZWF0ZUhyZWYiLCJwcmV2ZW50U2Nyb2xsUmVzZXQiLCJoaXN0b3J5QWN0aW9uIiwiaW5pdGlhbGl6ZWQiLCJpc0Jyb3dzZXIiLCJMaW5rIiwiX3JlZjciLCJhYnNvbHV0ZUhyZWYiLCJ1bnN0YWJsZV92aWV3VHJhbnNpdGlvbiIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiaXNFeHRlcm5hbCIsInRhcmdldFVybCIsIl90ZW1wIiwiam9pbmVkUGF0aG5hbWUiLCJ1c2VIcmVmIiwiaW50ZXJuYWxPbkNsaWNrIiwicmVwbGFjZVByb3AiLCJpc01vZGlmaWVkRXZlbnQiLCJzaG91bGRQcm9jZXNzTGlua0NsaWNrIiwidXNlTGlua0NsaWNrSGFuZGxlciIsInJlcXVpcmUiLCJIb21lUGFnZSIsImhvbWVQYWdlV3JhcHBlciIsIm5hdldyYXBwZXIiLCJpbWFnZUNvbnRhaW5lciIsInQxMDBJbWFnZSIsImFsdCIsIm5hdk9wdGlvbnMiLCJmb290ZXJDb250YWluZXIiLCJnaXRIdWJJY29uIiwic2VsZmlJbWFnZSIsIlBlcnNvbmFsIiwidXNlTmF2aWdhdGUiLCJwZXJzb25hbFdyYXBwZXIiLCJiaW9Db250YWluZXIiLCJwZXJzb25UZXh0IiwiaXNDaGVja0JveElucHV0IiwiaXNEYXRlT2JqZWN0IiwiaXNOdWxsT3JVbmRlZmluZWQiLCJpc09iamVjdFR5cGUiLCJpc09iamVjdCIsImdldEV2ZW50VmFsdWUiLCJpc05hbWVJbkZpZWxkQXJyYXkiLCJuYW1lcyIsImdldE5vZGVQYXJlbnROYW1lIiwiaXNQbGFpbk9iamVjdCIsInRlbXBPYmplY3QiLCJwcm90b3R5cGVDb3B5IiwiaXNXZWIiLCJIVE1MRWxlbWVudCIsImNsb25lT2JqZWN0IiwiY29weSIsIkJsb2IiLCJGaWxlTGlzdCIsImNvbXBhY3QiLCJpc1VuZGVmaW5lZCIsIm9iamVjdCIsImlzQm9vbGVhbiIsIkVWRU5UUyIsIkJMVVIiLCJGT0NVU19PVVQiLCJDSEFOR0UiLCJWQUxJREFUSU9OX01PREUiLCJvbkJsdXIiLCJvbkNoYW5nZSIsIm9uU3VibWl0Iiwib25Ub3VjaGVkIiwiSU5QVVRfVkFMSURBVElPTl9SVUxFUyIsImdldFByb3h5Rm9ybVN0YXRlIiwiZm9ybVN0YXRlIiwiY29udHJvbCIsImxvY2FsUHJveHlGb3JtU3RhdGUiLCJpc1Jvb3QiLCJkZWZhdWx0VmFsdWVzIiwiX2RlZmF1bHRWYWx1ZXMiLCJfa2V5IiwiX3Byb3h5Rm9ybVN0YXRlIiwiaXNFbXB0eU9iamVjdCIsInNob3VsZFJlbmRlckZvcm1TdGF0ZSIsImZvcm1TdGF0ZURhdGEiLCJ1cGRhdGVGb3JtU3RhdGUiLCJjb252ZXJ0VG9BcnJheVBheWxvYWQiLCJpc1N0cmluZyIsImdlbmVyYXRlV2F0Y2hPdXRwdXQiLCJfbmFtZXMiLCJmb3JtVmFsdWVzIiwiaXNHbG9iYWwiLCJ3YXRjaCIsImZpZWxkTmFtZSIsIndhdGNoQWxsIiwiaXNLZXkiLCJzdHJpbmdUb1BhdGgiLCJ0ZW1wUGF0aCIsImxhc3RJbmRleCIsIm5ld1ZhbHVlIiwib2JqVmFsdWUiLCJhcHBlbmRFcnJvcnMiLCJ2YWxpZGF0ZUFsbEZpZWxkQ3JpdGVyaWEiLCJ0eXBlcyIsImdldFZhbGlkYXRpb25Nb2RlcyIsImlzT25TdWJtaXQiLCJpc09uQmx1ciIsImlzT25DaGFuZ2UiLCJpc09uQWxsIiwiaXNPblRvdWNoIiwiaXNXYXRjaGVkIiwiaXNCbHVyRXZlbnQiLCJ3YXRjaE5hbWUiLCJpdGVyYXRlRmllbGRzQnlBY3Rpb24iLCJmaWVsZHMiLCJmaWVsZHNOYW1lcyIsImFib3J0RWFybHkiLCJfZiIsImN1cnJlbnRGaWVsZCIsInVwZGF0ZUZpZWxkQXJyYXlSb290RXJyb3IiLCJmaWVsZEFycmF5RXJyb3JzIiwiaXNGaWxlSW5wdXQiLCJpc0Z1bmN0aW9uIiwiaXNIVE1MRWxlbWVudCIsIm93bmVyIiwiaXNNZXNzYWdlIiwiaXNSYWRpb0lucHV0IiwiaXNSZWdleCIsImRlZmF1bHRSZXN1bHQiLCJpc1ZhbGlkIiwidmFsaWRSZXN1bHQiLCJnZXRDaGVja2JveFZhbHVlIiwib3B0aW9uIiwiZGVmYXVsdFJldHVybiIsImdldFJhZGlvVmFsdWUiLCJwcmV2aW91cyIsImdldFZhbGlkYXRlRXJyb3IiLCJnZXRWYWx1ZUFuZE1lc3NhZ2UiLCJ2YWxpZGF0aW9uRGF0YSIsInZhbGlkYXRlRmllbGQiLCJzaG91bGRVc2VOYXRpdmVWYWxpZGF0aW9uIiwiaXNGaWVsZEFycmF5IiwibWF4TGVuZ3RoIiwibWluTGVuZ3RoIiwibWF4IiwidmFsaWRhdGUiLCJ2YWx1ZUFzTnVtYmVyIiwibW91bnQiLCJpbnB1dFZhbHVlIiwiaW5wdXRSZWYiLCJzZXRDdXN0b21WYWxpZGl0eSIsInJlcG9ydFZhbGlkaXR5IiwiaXNSYWRpbyIsImlzQ2hlY2tCb3giLCJpc1JhZGlvT3JDaGVja2JveCIsImlzRW1wdHkiLCJhcHBlbmRFcnJvcnNDdXJyeSIsImdldE1pbk1heE1lc3NhZ2UiLCJleGNlZWRNYXgiLCJtYXhMZW5ndGhNZXNzYWdlIiwibWluTGVuZ3RoTWVzc2FnZSIsIm1heFR5cGUiLCJtaW5UeXBlIiwiZXhjZWVkTWluIiwibWF4T3V0cHV0IiwibWluT3V0cHV0IiwidmFsdWVEYXRlIiwidmFsdWVBc0RhdGUiLCJjb252ZXJ0VGltZVRvRGF0ZSIsInRvRGF0ZVN0cmluZyIsImlzVGltZSIsImlzV2VlayIsInZhbHVlTnVtYmVyIiwibWF4TGVuZ3RoT3V0cHV0IiwibWluTGVuZ3RoT3V0cHV0IiwicGF0dGVyblZhbHVlIiwidmFsaWRhdGVFcnJvciIsInZhbGlkYXRpb25SZXN1bHQiLCJ1bnNldCIsImNoaWxkT2JqZWN0IiwidXBkYXRlUGF0aCIsImJhc2VHZXQiLCJpc0VtcHR5QXJyYXkiLCJjcmVhdGVTdWJqZWN0IiwiX29ic2VydmVycyIsIm9ic2VydmVycyIsIm9ic2VydmVyIiwidW5zdWJzY3JpYmUiLCJpc1ByaW1pdGl2ZSIsImRlZXBFcXVhbCIsIm9iamVjdDEiLCJvYmplY3QyIiwiZ2V0VGltZSIsImtleXMxIiwia2V5czIiLCJ2YWwxIiwidmFsMiIsImlzTXVsdGlwbGVTZWxlY3QiLCJsaXZlIiwiaXNDb25uZWN0ZWQiLCJvYmplY3RIYXNGdW5jdGlvbiIsIm1hcmtGaWVsZHNEaXJ0eSIsImlzUGFyZW50Tm9kZUFycmF5IiwiZ2V0RGlydHlGaWVsZHNGcm9tRGVmYXVsdFZhbHVlcyIsImRpcnR5RmllbGRzRnJvbVZhbHVlcyIsImdldERpcnR5RmllbGRzIiwiZ2V0RmllbGRWYWx1ZUFzIiwic2V0VmFsdWVBcyIsIk5hTiIsImdldEZpZWxkVmFsdWUiLCJmaWxlcyIsInNlbGVjdGVkT3B0aW9ucyIsImdldFJlc29sdmVyT3B0aW9ucyIsIl9maWVsZHMiLCJjcml0ZXJpYU1vZGUiLCJnZXRSdWxlVmFsdWUiLCJydWxlIiwiaGFzVmFsaWRhdGlvbiIsInNjaGVtYUVycm9yTG9va3VwIiwic2tpcFZhbGlkYXRpb24iLCJpc1RvdWNoZWQiLCJpc1N1Ym1pdHRlZCIsInJlVmFsaWRhdGVNb2RlIiwidW5zZXRFbXB0eUFycmF5IiwiZGVmYXVsdE9wdGlvbnMiLCJzaG91bGRGb2N1c0Vycm9yIiwiY3JlYXRlRm9ybUNvbnRyb2wiLCJmbHVzaFJvb3RSZW5kZXIiLCJkZWxheUVycm9yQ2FsbGJhY2siLCJfb3B0aW9ucyIsIl9mb3JtU3RhdGUiLCJzdWJtaXRDb3VudCIsImlzRGlydHkiLCJpc0xvYWRpbmciLCJpc1ZhbGlkYXRpbmciLCJpc1N1Ym1pdHRpbmciLCJpc1N1Ym1pdFN1Y2Nlc3NmdWwiLCJ0b3VjaGVkRmllbGRzIiwiZGlydHlGaWVsZHMiLCJfZm9ybVZhbHVlcyIsInNob3VsZFVucmVnaXN0ZXIiLCJfc3RhdGUiLCJ1bk1vdW50IiwiYXJyYXkiLCJ0aW1lciIsIl9zdWJqZWN0cyIsInZhbGlkYXRpb25Nb2RlQmVmb3JlU3VibWl0IiwidmFsaWRhdGlvbk1vZGVBZnRlclN1Ym1pdCIsInNob3VsZERpc3BsYXlBbGxBc3NvY2lhdGVkRXJyb3JzIiwiX3VwZGF0ZVZhbGlkIiwic2hvdWxkVXBkYXRlVmFsaWQiLCJyZXNvbHZlciIsIl9leGVjdXRlU2NoZW1hIiwiZXhlY3V0ZUJ1aWx0SW5WYWxpZGF0aW9uIiwiX3VwZGF0ZUlzVmFsaWRhdGluZyIsInVwZGF0ZVZhbGlkQW5kVmFsdWUiLCJzaG91bGRTa2lwU2V0VmFsdWVBcyIsInNldEZpZWxkVmFsdWUiLCJ1cGRhdGVUb3VjaEFuZERpcnR5IiwiZmllbGRWYWx1ZSIsInNob3VsZERpcnR5Iiwic2hvdWxkUmVuZGVyIiwic2hvdWxkVXBkYXRlRmllbGQiLCJpc1ByZXZpb3VzRGlydHkiLCJvdXRwdXQiLCJkaXNhYmxlZEZpZWxkIiwiX2dldERpcnR5IiwiaXNDdXJyZW50RmllbGRQcmlzdGluZSIsImlzUHJldmlvdXNGaWVsZFRvdWNoZWQiLCJzaG91bGRPbmx5Q2hlY2tWYWxpZCIsInZhbGlkIiwiaXNGaWVsZEFycmF5Um9vdCIsImZpZWxkRXJyb3IiLCJnZXRWYWx1ZXMiLCJfZ2V0V2F0Y2giLCJmaWVsZFJlZmVyZW5jZSIsIm9wdGlvblJlZiIsImNoZWNrYm94UmVmIiwicmFkaW9SZWYiLCJzaG91bGRUb3VjaCIsInNob3VsZFZhbGlkYXRlIiwidHJpZ2dlciIsInNldFZhbHVlcyIsImZpZWxkS2V5IiwiY2xvbmVWYWx1ZSIsImlzRmllbGRWYWx1ZVVwZGF0ZWQiLCJfdXBkYXRlSXNGaWVsZFZhbHVlVXBkYXRlZCIsIk51bWJlciIsInNob3VsZFNraXBWYWxpZGF0aW9uIiwid2F0Y2hlZCIsImZpZWxkU3RhdGUiLCJwcmV2aW91c0Vycm9yTG9va3VwUmVzdWx0IiwiZXJyb3JMb29rdXBSZXN1bHQiLCJwcmV2aW91c0ZpZWxkRXJyb3IiLCJkZWxheUVycm9yIiwidXBkYXRlRXJyb3JzIiwid2FpdCIsInVwZGF0ZWRGb3JtU3RhdGUiLCJzaG91bGRSZW5kZXJCeUVycm9yIiwiX2ZvY3VzSW5wdXQiLCJmaWVsZE5hbWVzIiwiZXhlY3V0ZVNjaGVtYUFuZFVwZGF0ZVN0YXRlIiwic2hvdWxkRm9jdXMiLCJnZXRGaWVsZFN0YXRlIiwiaW52YWxpZCIsInNldEVycm9yIiwidW5yZWdpc3RlciIsImtlZXBWYWx1ZSIsImtlZXBFcnJvciIsImtlZXBEaXJ0eSIsImtlZXBUb3VjaGVkIiwia2VlcERlZmF1bHRWYWx1ZSIsImtlZXBJc1ZhbGlkIiwiX3VwZGF0ZURpc2FibGVkRmllbGQiLCJkaXNhYmxlZElzRGVmaW5lZCIsInByb2dyZXNzaXZlIiwiZmllbGRSZWYiLCJyYWRpb09yQ2hlY2tib3giLCJfZm9jdXNFcnJvciIsImhhbmRsZVN1Ym1pdCIsIm9uVmFsaWQiLCJvbkludmFsaWQiLCJvblZhbGlkRXJyb3IiLCJmaWVsZFZhbHVlcyIsIl9yZXNldCIsImtlZXBTdGF0ZU9wdGlvbnMiLCJ1cGRhdGVkVmFsdWVzIiwiY2xvbmVVcGRhdGVkVmFsdWVzIiwia2VlcERlZmF1bHRWYWx1ZXMiLCJrZWVwVmFsdWVzIiwia2VlcERpcnR5VmFsdWVzIiwiY2xvc2VzdCIsImtlZXBTdWJtaXRDb3VudCIsImtlZXBJc1N1Ym1pdHRlZCIsImtlZXBFcnJvcnMiLCJrZWVwSXNTdWJtaXRTdWNjZXNzZnVsIiwiX3JlbW92ZVVubW91bnRlZCIsIl91cGRhdGVGaWVsZEFycmF5Iiwic2hvdWxkU2V0VmFsdWVzIiwic2hvdWxkVXBkYXRlRmllbGRzQW5kU3RhdGUiLCJhcmdBIiwiYXJnQiIsIl9nZXRGaWVsZEFycmF5IiwiX3Jlc2V0RGVmYXVsdFZhbHVlcyIsInJlc2V0T3B0aW9ucyIsIl91cGRhdGVGb3JtU3RhdGUiLCJfZGlzYWJsZUZvcm0iLCJyZXF1aXJlZERpc2FibGVkU3RhdGUiLCJfc2V0RXJyb3JzIiwicmVzZXRGaWVsZCIsImNsZWFyRXJyb3JzIiwiaW5wdXROYW1lIiwic2V0Rm9jdXMiLCJzaG91bGRTZWxlY3QiLCJzZWxlY3QiLCJDb250YWN0Rm9ybSIsIl91c2VGb3JtIiwiX2Zvcm1Db250cm9sIiwiX3ZhbHVlcyIsInN1YnNjcmlwdGlvbiIsInN1YmplY3QiLCJ1c2VTdWJzY3JpYmUiLCJ1c2VGb3JtIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5Iiwic3VibWl0U3VjY2VzcyIsInNldFN1Ym1pdFN1Y2Nlc3MiLCJfdXNlU3RhdGU0IiwiZmlyc3ROYW1lIiwic2V0Rmlyc3ROYW1lIiwiX3VzZVN0YXRlNiIsInNldElzTG9hZGluZyIsIl91c2VTdGF0ZTgiLCJmb3JtQ29udGFpbmVyIiwiZmV0Y2giLCJyZXMiLCJpbnB1dENvbnRhaW5lciIsInBsYWNlaG9sZGVyIiwiQ29udGFjdCIsInNldENvdW50IiwidXNlTG9jYXRpb24iLCJfbG9jYXRpb24kc3RhdGUiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJhYm91dE1lRWxlbWVudCIsImNvbnRhY3RIZWFkZXIiLCJzdWJtaXRTdWNjZXNzRWxlbWVudCIsImZvcm1TdWJtaXR0ZWRDb250YWluZXIiLCJmb3JtU3VibWl0dGVkSGVhZGVyIiwiaG9tZVBhZ2VSZWRpcmVjdCIsImNvbnRhY3RXcmFwcGVyIiwiY29udGFjdEZvcm1MaW5rIiwiY2hpbGRSb3V0ZXMiLCJnZXRVc2VyQWdlbnQiLCJ1c2VyQWdlbnQiLCJwcm9jZXNzIiwicGxhdGZvcm0iLCJhcmNoIiwibWVyZ2VEZWVwIiwiZGVmYXVsdHMiLCJDdG9yIiwicmVtb3ZlVW5kZWZpbmVkUHJvcGVydGllcyIsIm1lcmdlIiwibWVyZ2VkT3B0aW9ucyIsIm1lZGlhVHlwZSIsInByZXZpZXdzIiwicHJldmlldyIsInVybFZhcmlhYmxlUmVnZXgiLCJyZW1vdmVOb25DaGFycyIsInZhcmlhYmxlTmFtZSIsIm9taXQiLCJrZXlzVG9PbWl0IiwiX19wcm90b19fIiwiZW5jb2RlUmVzZXJ2ZWQiLCJzdHIiLCJwYXJ0IiwiZW5jb2RlVVJJIiwiZW5jb2RlVW5yZXNlcnZlZCIsImNoYXJDb2RlQXQiLCJlbmNvZGVWYWx1ZSIsIm9wZXJhdG9yIiwiaXNEZWZpbmVkIiwiaXNLZXlPcGVyYXRvciIsImV4cGFuZCIsInRlbXBsYXRlIiwib3BlcmF0b3JzIiwiZXhwcmVzc2lvbiIsImxpdGVyYWwiLCJ2YXJpYWJsZSIsInRtcCIsImV4ZWMiLCJtb2RpZmllciIsInBhcnNlSW50IiwidmFsdWUyIiwic2VwYXJhdG9yIiwicGFyYW1ldGVycyIsInVybFZhcmlhYmxlTmFtZXMiLCJleHRyYWN0VXJsVmFyaWFibGVOYW1lcyIsImJhc2VVcmwiLCJyZW1haW5pbmdQYXJhbWV0ZXJzIiwiYWNjZXB0IiwiZm9ybWF0IiwicHJldmlld3NGcm9tQWNjZXB0SGVhZGVyIiwiYWRkUXVlcnlQYXJhbWV0ZXJzIiwiZW5kcG9pbnRXaXRoRGVmYXVsdHMiLCJlbmRwb2ludCIsIndpdGhEZWZhdWx0cyIsIm9sZERlZmF1bHRzIiwibmV3RGVmYXVsdHMiLCJERUZBVUxUUzIiLCJlbmRwb2ludDIiLCJERUZBVUxUUyIsIkRlcHJlY2F0aW9uIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJsb2dPbmNlQ29kZSIsImRlcHJlY2F0aW9uIiwibG9nT25jZUhlYWRlcnMiLCJSZXF1ZXN0RXJyb3IiLCJyZXF1ZXN0Q29weSIsImF1dGhvcml6YXRpb24iLCJmZXRjaFdyYXBwZXIiLCJyZXF1ZXN0T3B0aW9ucyIsInBhcnNlU3VjY2Vzc1Jlc3BvbnNlQm9keSIsImdsb2JhbFRoaXMiLCJkdXBsZXgiLCJrZXlBbmRWYWx1ZSIsImRlcHJlY2F0aW9uTGluayIsInN1bnNldCIsImdldFJlc3BvbnNlRGF0YSIsInN1ZmZpeCIsImRvY3VtZW50YXRpb25fdXJsIiwidG9FcnJvck1lc3NhZ2UiLCJjYXVzZSIsImFycmF5QnVmZmVyIiwiZ2V0QnVmZmVyUmVzcG9uc2UiLCJvbGRFbmRwb2ludCIsImVuZHBvaW50T3B0aW9ucyIsInJlcXVlc3QyIiwicm91dGUyIiwicGFyYW1ldGVyczIiLCJHcmFwaHFsUmVzcG9uc2VFcnJvciIsIk5PTl9WQVJJQUJMRV9PUFRJT05TIiwiRk9SQklEREVOX1ZBUklBQkxFX09QVElPTlMiLCJHSEVTX1YzX1NVRkZJWF9SRUdFWCIsIm5ld1JlcXVlc3QiLCJxdWVyeSIsInBhcnNlZE9wdGlvbnMiLCJ2YXJpYWJsZXMiLCJncmFwaHFsIiwiUkVHRVhfSVNfSU5TVEFMTEFUSU9OX0xFR0FDWSIsIlJFR0VYX0lTX0lOU1RBTExBVElPTiIsIlJFR0VYX0lTX1VTRVJfVE9fU0VSVkVSIiwiYXV0aCIsInRva2VuIiwiaXNBcHAiLCJpc0luc3RhbGxhdGlvbiIsImlzVXNlclRvU2VydmVyIiwidG9rZW5UeXBlIiwid2l0aEF1dGhvcml6YXRpb25QcmVmaXgiLCJjcmVhdGVUb2tlbkF1dGgiLCJub29wIiwiY29uc29sZVdhcm4iLCJjb25zb2xlRXJyb3IiLCJ1c2VyQWdlbnRUcmFpbCIsIk9jdG9raXQiLCJWRVJTSU9OIiwicGx1Z2lucyIsInBsdWdpbiIsIm5ld1BsdWdpbnMiLCJjdXJyZW50UGx1Z2lucyIsInJlcXVlc3REZWZhdWx0cyIsImN1c3RvbVJlcXVlc3QiLCJ0aW1lWm9uZSIsImRlYnVnIiwiaW5mbyIsImF1dGhTdHJhdGVneSIsIm90aGVyT3B0aW9ucyIsIm9jdG9raXQiLCJvY3Rva2l0T3B0aW9ucyIsIndyYXAiLCJjbGFzc0NvbnN0cnVjdG9yIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsImFzeW5jSXRlcmF0b3IiLCJkZWZpbmUiLCJ3cml0YWJsZSIsIkdlbmVyYXRvciIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiX2ludm9rZSIsIkFzeW5jSXRlcmF0b3IiLCJpbnZva2UiLCJfdHlwZW9mIiwiX19hd2FpdCIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiZGVsZWdhdGUiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsImF3cmFwIiwicHJldiIsInN0b3AiLCJydmFsIiwiY29tcGxldGUiLCJmaW5pc2giLCJkZWxlZ2F0ZVlpZWxkIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwiX25leHQiLCJfdGhyb3ciLCJnZXRQcm9qZWN0Q29tbWl0cyIsIl9yZWY0IiwiX2NhbGxlZTMiLCJyZXBvIiwidXNlciIsIl95aWVsZCRvY3Rva2l0JHJlcXVlcyIsInJlcG9EYXRhIiwiX2NvbnRleHQzIiwiaW5kIiwiY29tbWl0IiwiYXV0aG9yIiwibm9kZV9pZCIsImh0bWxfdXJsIiwiY29tbWl0T2JqIiwiX3gzIiwidXNlckRhdGEiLCJHaXRIdWJQcm9qZWN0TW9kdWxlIiwicHJvamVjdENvbW1pdHMiLCJzZXRQcm9qZWN0Q29tbWl0cyIsInNldEdpdEh1YlN0YXR1c0Vycm9yIiwiQXJyIiwiY2FyZCIsIm1vZHVsZUNvbnRhaW5lciIsImhlYWRlckNvbnRhaW5lciIsImNhcmRzQ29udGFpbmVyIiwiaXNFYXRpbiIsImh1bmdlclZhbCIsInBvb3Bpbkd1eUljb24iLCJQb29waW5HdXkiLCJpc1Bvb3BpbiIsIm1ha2VQb29wIiwiZ3V5QWN0aW9uQ2FyZENvbnRhaW5lciIsImd1eUljb24iLCJndXlUZXh0Qm94IiwiZ3V5U3RhdHVzVGV4dCIsImVhdGluR3V5SWNvbiIsIkVhdGluR3V5IiwibWFrZUVhdCIsIm1heFBvb3BzIiwiYW10IiwidXNlUG91bmQiLCJudW0iLCJIdW5nZXJWYWwiLCJwb29wTWV0ZXIiLCJtZXRlckFycmF5IiwicG9vcHNWYWwiLCJtZXRlclN0eWxlIiwibGlnaHRlbkRhcmtlbiIsImJ1aWxkUG9vcE1ldGVyIiwiUG9vcE1hY2hpbmUiLCJzZXRIdW5nZXJWYWwiLCJzZXRJc0VhdGluIiwic2V0SXNQb29waW4iLCJoYW5kbGVDbGljayIsImFwcENvbnRhaW5lciIsIkhlYWRlciIsImJvdGhHdXlzQ29udGFpbmVyIiwiZGFuZ2VyUm9ib3QiLCJFcnJvclBhZ2UiLCJjb250YWluZXIiLCJpbWFnZSIsIlNwaW5uZXJPZkRvb20iLCJzcGlubmVyT2ZEb29tV3JhcHBlciIsInNwaW5uZXIiLCJTcGluQ29ubmVjdCIsInJvdXRlcldpbmRvdyIsImlzU2VydmVyIiwiZGV0ZWN0RXJyb3JCb3VuZGFyeSIsImluRmxpZ2h0RGF0YVJvdXRlcyIsImRhdGFSb3V0ZXMiLCJ2N19mZXRjaGVyUGVyc2lzdCIsInY3X25vcm1hbGl6ZUZvcm1NZXRob2QiLCJ2N19wcmVwZW5kQmFzZW5hbWUiLCJ1bmxpc3Rlbkhpc3RvcnkiLCJzdWJzY3JpYmVycyIsInNhdmVkU2Nyb2xsUG9zaXRpb25zIiwiZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkiLCJnZXRTY3JvbGxQb3NpdGlvbiIsImluaXRpYWxTY3JvbGxSZXN0b3JlZCIsImh5ZHJhdGlvbkRhdGEiLCJpbml0aWFsTWF0Y2hlcyIsImluaXRpYWxFcnJvcnMiLCJoYXNMYXp5Um91dGVzIiwiaGFzTG9hZGVycyIsInBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciIsInJlc3RvcmVTY3JvbGxQb3NpdGlvbiIsImFjdGlvbkRhdGEiLCJibG9ja2VycyIsInBlbmRpbmdBY3Rpb24iLCJwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0IiwicGVuZGluZ1ZpZXdUcmFuc2l0aW9uRW5hYmxlZCIsImFwcGxpZWRWaWV3VHJhbnNpdGlvbnMiLCJyZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIiLCJpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24iLCJmZXRjaENvbnRyb2xsZXJzIiwiaW5jcmVtZW50aW5nTG9hZElkIiwicGVuZGluZ05hdmlnYXRpb25Mb2FkSWQiLCJmZXRjaFJlbG9hZElkcyIsImFjdGl2ZUZldGNoZXJzIiwiYmxvY2tlckZ1bmN0aW9ucyIsImlnbm9yZU5leHRIaXN0b3J5VXBkYXRlIiwidXBkYXRlU3RhdGUiLCJjb21wbGV0ZWRGZXRjaGVycyIsImRlbGV0ZWRGZXRjaGVyc0tleXMiLCJzdWJzY3JpYmVyIiwiZGVsZXRlRmV0Y2hlciIsImNvbXBsZXRlTmF2aWdhdGlvbiIsIl9sb2NhdGlvbiRzdGF0ZTIiLCJpc0FjdGlvblJlbG9hZCIsIl9pc1JlZGlyZWN0IiwiUHVzaCIsIlJlcGxhY2UiLCJwcmlvclBhdGhzIiwidG9QYXRocyIsImdldFNhdmVkU2Nyb2xsUG9zaXRpb24iLCJzdGFydE5hdmlnYXRpb24iLCJhYm9ydCIsInN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiIsImdldFNjcm9sbEtleSIsInNhdmVTY3JvbGxQb3NpdGlvbiIsImVuYWJsZVZpZXdUcmFuc2l0aW9uIiwibG9hZGluZ05hdmlnYXRpb24iLCJvdmVycmlkZU5hdmlnYXRpb24iLCJub3RGb3VuZE1hdGNoZXMiLCJjYW5jZWxBY3RpdmVEZWZlcnJlZHMiLCJhY3Rpb25PdXRwdXQiLCJpbnRlcnJ1cHRBY3RpdmVMb2FkcyIsImdldFN1Ym1pdHRpbmdOYXZpZ2F0aW9uIiwiYWN0aW9uTWF0Y2giLCJzaG9ydENpcmN1aXRlZCIsInN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uIiwicGVuZGluZ0FjdGlvbkVycm9yIiwiaGFuZGxlQWN0aW9uIiwiZmV0Y2hlclN1Ym1pc3Npb24iLCJpbml0aWFsSHlkcmF0aW9uIiwiYWN0aXZlU3VibWlzc2lvbiIsInVwZGF0ZWRGZXRjaGVycyIsIm1hcmtGZXRjaFJlZGlyZWN0c0RvbmUiLCJyZXZhbGlkYXRpbmdGZXRjaGVyIiwiYWJvcnRGZXRjaGVyIiwiYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zIiwibG9hZGVyUmVzdWx0cyIsImNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YSIsImZldGNoZXJLZXkiLCJkaWRBYm9ydEZldGNoTG9hZHMiLCJhYm9ydFN0YWxlRmV0Y2hMb2FkcyIsImhhbmRsZUxvYWRlcnMiLCJyZWRpcmVjdExvY2F0aW9uIiwiaXNEb2N1bWVudFJlbG9hZCIsInJlZGlyZWN0SGlzdG9yeUFjdGlvbiIsImZldGNoZXJzVG9Mb2FkIiwidXBkYXRlRmV0Y2hlclN0YXRlIiwic2V0RmV0Y2hlckVycm9yIiwiZ2V0RmV0Y2hlciIsIm1hcmtGZXRjaGVyc0RvbmUiLCJkb25lS2V5cyIsImxhbmRlZElkIiwieWVldGVkS2V5cyIsImRlbGV0ZUJsb2NrZXIiLCJ1cGRhdGVCbG9ja2VyIiwibmV3QmxvY2tlciIsImJsb2NrZXIiLCJzaG91bGRCbG9ja05hdmlnYXRpb24iLCJibG9ja2VyS2V5IiwiYmxvY2tlckZ1bmN0aW9uIiwicHJlZGljYXRlIiwiY2FuY2VsbGVkUm91dGVJZHMiLCJkZmQiLCJjb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaCIsImluaXRpYWxpemUiLCJsaXN0ZW4iLCJkZWx0YSIsIl93aW5kb3ciLCJzZXNzaW9uUG9zaXRpb25zIiwic2Vzc2lvblN0b3JhZ2UiLCJnZXRJdGVtIiwicmVzdG9yZUFwcGxpZWRUcmFuc2l0aW9ucyIsIl9zYXZlQXBwbGllZFRyYW5zaXRpb25zIiwic2V0SXRlbSIsInBlcnNpc3RBcHBsaWVkVHJhbnNpdGlvbnMiLCJlbmFibGVTY3JvbGxSZXN0b3JhdGlvbiIsInBvc2l0aW9ucyIsImdldFBvc2l0aW9uIiwiZ2V0S2V5Iiwibm9ybWFsaXplZFBhdGgiLCJ1c2VyUmVwbGFjZSIsInJlcXVlc3RNYXRjaGVzIiwiZXhpc3RpbmdGZXRjaGVyIiwiZ2V0U3VibWl0dGluZ0ZldGNoZXIiLCJhYm9ydENvbnRyb2xsZXIiLCJmZXRjaFJlcXVlc3QiLCJvcmlnaW5hdGluZ0xvYWRJZCIsInJldmFsaWRhdGlvblJlcXVlc3QiLCJsb2FkSWQiLCJsb2FkRmV0Y2hlciIsInN0YWxlS2V5IiwiaGFuZGxlRmV0Y2hlckFjdGlvbiIsImhhbmRsZUZldGNoZXJMb2FkZXIiLCJkaXNwb3NlIiwiY2xlYXIiLCJnZXRCbG9ja2VyIiwiX2ludGVybmFsRmV0Y2hDb250cm9sbGVycyIsIl9pbnRlcm5hbEFjdGl2ZURlZmVycmVkcyIsIl9pbnRlcm5hbFNldFJvdXRlcyIsIm5ld1JvdXRlcyIsImdldExvY2F0aW9uIiwidmFsaWRhdGVMb2NhdGlvbiIsInY1Q29tcGF0IiwiZ2xvYmFsSGlzdG9yeSIsImdldEluZGV4IiwiaGFuZGxlUG9wIiwibmV4dEluZGV4IiwicmVwbGFjZVN0YXRlIiwiaGlzdG9yeVN0YXRlIiwicHVzaFN0YXRlIiwiRE9NRXhjZXB0aW9uIiwiZ2V0VXJsQmFzZWRIaXN0b3J5IiwiX19zdGF0aWNSb3V0ZXJIeWRyYXRpb25EYXRhIiwicGFyc2VIeWRyYXRpb25EYXRhIiwidXBkYXRlcyIsImRvbU5vZGUiLCJnZXRFbGVtZW50QnlJZCIsIlJvdXRlclByb3ZpZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==